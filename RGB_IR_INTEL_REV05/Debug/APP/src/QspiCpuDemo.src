	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 07918494"
	.compiler_invocation	"ctc -f cc18100a --dep-file=APP\\src\\.QspiCpuDemo.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc23x -D__CPU_TC23X__ --core=tc1.6.x --fp-model=+float -D__SWPLATFORM__ -DIFX_CFG_USE_COMPILER_DEFAULT_LINKER -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05 -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\APP\\inc -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Configuration -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Scu/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Stm/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x/_Reg -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/SrvSw -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -g2 --make-target=APP\\src\\QspiCpuDemo.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o APP\\src\\QspiCpuDemo.src ..\\APP\\src\\QspiCpuDemo.c"
	.compiler_name		"ctc"
	;source	'..\\APP\\src\\QspiCpuDemo.c'

	
$TC16X
	.sdecl	'.zrodata.QspiCpuDemo..6.cnt',data,rom
	.sect	'.zrodata.QspiCpuDemo..6.cnt'
	.align	2
.6.cnt:	.type	object
	.size	.6.cnt,4
	.word	1259902592
	.sdecl	'.zrodata.QspiCpuDemo..7.cnt',data,rom
	.sect	'.zrodata.QspiCpuDemo..7.cnt'
	.align	2
.7.cnt:	.type	object
	.size	.7.cnt,4
	.word	1251513984
	
	.sdecl	'.text.inttab0.intvec.00a',code
	.sect	'.text.inttab0.intvec.00a'

; ..\APP\src\QspiCpuDemo.c	     1  /**
; ..\APP\src\QspiCpuDemo.c	     2   * \file QspiCpuDemo.c
; ..\APP\src\QspiCpuDemo.c	     3   * \brief Qspi Master & Slave Demo (using cpu)
; ..\APP\src\QspiCpuDemo.c	     4   *
; ..\APP\src\QspiCpuDemo.c	     5   * \version iLLD_Demos_1_0_1_3_0
; ..\APP\src\QspiCpuDemo.c	     6   * \copyright Copyright (c) 2014 Infineon Technologies AG. All rights reserved.
; ..\APP\src\QspiCpuDemo.c	     7   *
; ..\APP\src\QspiCpuDemo.c	     8   *
; ..\APP\src\QspiCpuDemo.c	     9   *                                 IMPORTANT NOTICE
; ..\APP\src\QspiCpuDemo.c	    10   *
; ..\APP\src\QspiCpuDemo.c	    11   *
; ..\APP\src\QspiCpuDemo.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\APP\src\QspiCpuDemo.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\APP\src\QspiCpuDemo.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\APP\src\QspiCpuDemo.c	    15   * products.
; ..\APP\src\QspiCpuDemo.c	    16   *
; ..\APP\src\QspiCpuDemo.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\APP\src\QspiCpuDemo.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\APP\src\QspiCpuDemo.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\APP\src\QspiCpuDemo.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\APP\src\QspiCpuDemo.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\APP\src\QspiCpuDemo.c	    22   */
; ..\APP\src\QspiCpuDemo.c	    23  
; ..\APP\src\QspiCpuDemo.c	    24  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    25  /*----------------------------------Includes----------------------------------*/
; ..\APP\src\QspiCpuDemo.c	    26  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    27  
; ..\APP\src\QspiCpuDemo.c	    28  #include <stdio.h>
; ..\APP\src\QspiCpuDemo.c	    29  //#include "Cpu0_Main.h"
; ..\APP\src\QspiCpuDemo.c	    30  #include "ConfigurationIsr.h"
; ..\APP\src\QspiCpuDemo.c	    31  
; ..\APP\src\QspiCpuDemo.c	    32  #include "QspiCpuDemo.h"
; ..\APP\src\QspiCpuDemo.c	    33  
; ..\APP\src\QspiCpuDemo.c	    34  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    35  /*-----------------------------------Macros-----------------------------------*/
; ..\APP\src\QspiCpuDemo.c	    36  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    37  
; ..\APP\src\QspiCpuDemo.c	    38  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    39  /*--------------------------------Enumerations--------------------------------*/
; ..\APP\src\QspiCpuDemo.c	    40  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    41  
; ..\APP\src\QspiCpuDemo.c	    42  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    43  /*-----------------------------Data Structures--------------------------------*/
; ..\APP\src\QspiCpuDemo.c	    44  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    45  
; ..\APP\src\QspiCpuDemo.c	    46  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    47  /*------------------------------Global variables------------------------------*/
; ..\APP\src\QspiCpuDemo.c	    48  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    49  App_QspiCpu g_QspiCpu; /**< \brief Qspi global data */
; ..\APP\src\QspiCpuDemo.c	    50  
; ..\APP\src\QspiCpuDemo.c	    51  spi_reg qspi_slave_reg_st;
; ..\APP\src\QspiCpuDemo.c	    52  
; ..\APP\src\QspiCpuDemo.c	    53  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    54  /*-------------------------Function Prototypes--------------------------------*/
; ..\APP\src\QspiCpuDemo.c	    55  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    56  
; ..\APP\src\QspiCpuDemo.c	    57  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    58  /*------------------------Private Variables/Constants-------------------------*/
; ..\APP\src\QspiCpuDemo.c	    59  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    60  
; ..\APP\src\QspiCpuDemo.c	    61  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    62  /*-------------------------Function Implementations---------------------------*/
; ..\APP\src\QspiCpuDemo.c	    63  /******************************************************************************/
; ..\APP\src\QspiCpuDemo.c	    64  /** \name Interrupts for Qspi Master (QSPI0) & Slave (QSPI2) drivers
; ..\APP\src\QspiCpuDemo.c	    65   * \{ */
; ..\APP\src\QspiCpuDemo.c	    66  IFX_INTERRUPT(ISR_qspi1_Tx, 0, ISR_PRIORITY_QSPI1_TX);
; ..\APP\src\QspiCpuDemo.c	    67  IFX_INTERRUPT(ISR_qspi1_Rx, 0, ISR_PRIORITY_QSPI1_RX);
; ..\APP\src\QspiCpuDemo.c	    68  IFX_INTERRUPT(ISR_qspi1_Er, 0, ISR_PRIORITY_QSPI1_ER);
; ..\APP\src\QspiCpuDemo.c	    69  /** \} */
; ..\APP\src\QspiCpuDemo.c	    70  
; ..\APP\src\QspiCpuDemo.c	    71  
; ..\APP\src\QspiCpuDemo.c	    72  
; ..\APP\src\QspiCpuDemo.c	    73  void ISR_qspi1_Tx(void)
	movh.a	a14,#@his(ISR_qspi1_Tx)
	lea	a14,[a14]@los(ISR_qspi1_Tx)
	ji	a14
	.sdecl	'.text.QspiCpuDemo.ISR_qspi1_Tx',code,cluster('ISR_qspi1_Tx')
	.sect	'.text.QspiCpuDemo.ISR_qspi1_Tx'
	.align	2
	
	.global	ISR_qspi1_Tx
; Function ISR_qspi1_Tx
.L6:
ISR_qspi1_Tx:	.type	func
	svlcx
.L93:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
	enable
.L94:

; ..\APP\src\QspiCpuDemo.c	    74  iCpu.drivers.spiMaster);
; ..\APP\src\QspiCpuDemo.c	    75  }
; ..\APP\src\QspiCpuDemo.c	    76  
	fcall	.cocofun_8
.L155:
	call	IfxQspi_SpiMaster_isrTransmit
.L156:

; ..\APP\src\QspiCpuDemo.c	    77  
	rslcx
	rfe
.L90:
	
__ISR_qspi1_Tx_function_end:
	.size	ISR_qspi1_Tx,__ISR_qspi1_Tx_function_end-ISR_qspi1_Tx
.L35:
	; End of function
	
	.sdecl	'.text.QspiCpuDemo..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.QspiCpuDemo..cocofun_8'
	.align	2
; Function .cocofun_8
.L8:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	movh.a	a15,#@his(g_QspiCpu+160)
.L173:
	lea	a4,[a15]@los(g_QspiCpu+160)
.L174:
	fret
.L50:
	; End of function
	.sdecl	'.text.inttab0.intvec.014',code
	.sect	'.text.inttab0.intvec.014'

; ..\APP\src\QspiCpuDemo.c	    78  /** \brief Handle qspi0_Rx interrupt.
; ..\APP\src\QspiCpuDemo.c	    79   *
; ..\APP\src\QspiCpuDemo.c	    80   * \isrProvider \ref ISR_PROVIDER_QSPI0_RX
; ..\APP\src\QspiCpuDemo.c	    81   * \isrPriority \ref ISR_PRIORITY_QSPI0_RX
; ..\APP\src\QspiCpuDemo.c	    82   *
; ..\APP\src\QspiCpuDemo.c	    83   */
; ..\APP\src\QspiCpuDemo.c	    84  void ISR_qspi1_Rx(void)
; ..\APP\src\QspiCpuDemo.c	    85  {
; ..\APP\src\QspiCpuDemo.c	    86      IfxCpu_enableInterrupts();
	movh.a	a14,#@his(ISR_qspi1_Rx)
	lea	a14,[a14]@los(ISR_qspi1_Rx)
	ji	a14
	.sdecl	'.text.QspiCpuDemo.ISR_qspi1_Rx',code,cluster('ISR_qspi1_Rx')
	.sect	'.text.QspiCpuDemo.ISR_qspi1_Rx'
	.align	2
	
	.global	ISR_qspi1_Rx
; Function ISR_qspi1_Rx
.L10:
ISR_qspi1_Rx:	.type	func
	svlcx
.L97:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
	enable
.L98:

; ..\APP\src\QspiCpuDemo.c	    87  SPI0_RX
; ..\APP\src\QspiCpuDemo.c	    88   * \isrPriority \ref ISR_PRIORITY_QSPI0_RX
; ..\APP\src\QspiCpuDemo.c	    89   *
	fcall	.cocofun_8
.L161:
	call	IfxQspi_SpiMaster_isrReceive
.L162:

; ..\APP\src\QspiCpuDemo.c	    90   */
	rslcx
	rfe
.L96:
	
__ISR_qspi1_Rx_function_end:
	.size	ISR_qspi1_Rx,__ISR_qspi1_Rx_function_end-ISR_qspi1_Rx
.L40:
	; End of function
	
	.sdecl	'.text.inttab0.intvec.01e',code
	.sect	'.text.inttab0.intvec.01e'

; ..\APP\src\QspiCpuDemo.c	    91  void ISR_qspi1_Rx(void)
; ..\APP\src\QspiCpuDemo.c	    92  {
; ..\APP\src\QspiCpuDemo.c	    93      IfxCpu_enableInterrupts();
; ..\APP\src\QspiCpuDemo.c	    94      IfxQspi_SpiMaster_isrReceive(&g_QspiCpu.drivers.spiMaster);
; ..\APP\src\QspiCpuDemo.c	    95  }
; ..\APP\src\QspiCpuDemo.c	    96  
; ..\APP\src\QspiCpuDemo.c	    97  
; ..\APP\src\QspiCpuDemo.c	    98  /** \brief Handle qspi0_Er interrupt.
; ..\APP\src\QspiCpuDemo.c	    99   *
	movh.a	a14,#@his(ISR_qspi1_Er)
	lea	a14,[a14]@los(ISR_qspi1_Er)
	ji	a14
	.sdecl	'.text.QspiCpuDemo.ISR_qspi1_Er',code,cluster('ISR_qspi1_Er')
	.sect	'.text.QspiCpuDemo.ISR_qspi1_Er'
	.align	2
	
	.global	ISR_qspi1_Er
; Function ISR_qspi1_Er
.L12:
ISR_qspi1_Er:	.type	func
	svlcx
.L100:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
	enable
.L101:

; ..\APP\src\QspiCpuDemo.c	   100      IfxQspi_SpiMaster_isrReceive(&g_QspiCpu.drivers.spiMaster);
; ..\APP\src\QspiCpuDemo.c	   101  }
; ..\APP\src\QspiCpuDemo.c	   102  
	fcall	.cocofun_8
.L167:
	call	IfxQspi_SpiMaster_isrError
.L168:

; ..\APP\src\QspiCpuDemo.c	   103  
	rslcx
	rfe
.L99:
	
__ISR_qspi1_Er_function_end:
	.size	ISR_qspi1_Er,__ISR_qspi1_Er_function_end-ISR_qspi1_Er
.L45:
	; End of function
	
	.sdecl	'.text.QspiCpuDemo.IfxQspi_Masterinit',code,cluster('IfxQspi_Masterinit')
	.sect	'.text.QspiCpuDemo.IfxQspi_Masterinit'
	.align	2
	
	.global	IfxQspi_Masterinit

; ..\APP\src\QspiCpuDemo.c	   104  /** \brief Handle qspi0_Er interrupt.
; ..\APP\src\QspiCpuDemo.c	   105   *
; ..\APP\src\QspiCpuDemo.c	   106   * \isrProvider \ref ISR_PROVIDER_QSPI0_ER
; ..\APP\src\QspiCpuDemo.c	   107   * \isrPriority \ref ISR_PRIORITY_QSPI0_ER
; ..\APP\src\QspiCpuDemo.c	   108   *
; ..\APP\src\QspiCpuDemo.c	   109   */
; ..\APP\src\QspiCpuDemo.c	   110  void ISR_qspi1_Er(void)
; ..\APP\src\QspiCpuDemo.c	   111  {
; ..\APP\src\QspiCpuDemo.c	   112      IfxCpu_enableInterrupts();
; Function IfxQspi_Masterinit
.L14:
IfxQspi_Masterinit:	.type	func
	sub.a	a10,#96
.L104:

; ..\APP\src\QspiCpuDemo.c	   113      IfxQspi_SpiMaster_isrError(&g_QspiCpu.drivers.spiMaster);
; ..\APP\src\QspiCpuDemo.c	   114  }
; ..\APP\src\QspiCpuDemo.c	   115  
; ..\APP\src\QspiCpuDemo.c	   116  
; ..\APP\src\QspiCpuDemo.c	   117  
; ..\APP\src\QspiCpuDemo.c	   118  
; ..\APP\src\QspiCpuDemo.c	   119  /** \brief Qspi Master initilisation
; ..\APP\src\QspiCpuDemo.c	   120   *
	mov.aa	a4,a10
.L125:
	lea	a5,0xf0001d00
	call	IfxQspi_SpiMaster_initModuleConfig
.L126:

; ..\APP\src\QspiCpuDemo.c	   121   * This function initialises Qspi0 in master mode.
; ..\APP\src\QspiCpuDemo.c	   122   */
; ..\APP\src\QspiCpuDemo.c	   123  void IfxQspi_Masterinit(void)
	ld.w	d15,.6.cnt
.L127:
	st.w	[a10]16,d15
.L128:

; ..\APP\src\QspiCpuDemo.c	   124  {
; ..\APP\src\QspiCpuDemo.c	   125      uint32                          i;
; ..\APP\src\QspiCpuDemo.c	   126      IfxQspi_SpiMaster_Config        spiMasterConfig;
	mov	d15,#10
	st.h	[a10]4,d15
.L129:

; ..\APP\src\QspiCpuDemo.c	   127      IfxQspi_SpiMaster_ChannelConfig spiMasterChannelConfig;
	mov	d15,#20
	st.h	[a10]2,d15
.L130:

; ..\APP\src\QspiCpuDemo.c	   128  
	mov	d15,#30
	st.h	[a10]6,d15
.L77:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L105:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7

; ..\APP\src\QspiCpuDemo.c	   129          spiMasterConfig;
	st.b	[a10]8,d15
.L78:

; ..\APP\src\QspiCpuDemo.c	   130      IfxQspi_SpiMaster_ChannelConfig spiMasterChannelConfig;
; ..\APP\src\QspiCpuDemo.c	   131  
; ..\APP\src\QspiCpuDemo.c	   132      {
	movh.a	a15,#@his(.4.ini)
	lea	a15,[a15]@los(.4.ini)
.L131:
	lea	a2,[a10]68
	mov.a	a4,#5
.L2:
	ld.w	d15,[a15+]
	st.w	[a2+],d15
	loop	a4,.L2
.L132:

; ..\APP\src\QspiCpuDemo.c	   133          /* create module config */
; ..\APP\src\QspiCpuDemo.c	   134          IfxQspi_SpiMaster_initModuleConfig(&spiMasterConfig, &MODULE_QSPI1);
; ..\APP\src\QspiCpuDemo.c	   135  
; ..\APP\src\QspiCpuDemo.c	   136          /* set the maximum baudrate */
; ..\APP\src\QspiCpuDemo.c	   137          spiMasterConfig.base.maximumBaudrate = 10000000;
; ..\APP\src\QspiCpuDemo.c	   138  
	lea	a15,[a10]68
.L133:
	st.a	[a10]32,a15
.L134:

; ..\APP\src\QspiCpuDemo.c	   139          /* ISR priorities and interrupt target */
; ..\APP\src\QspiCpuDemo.c	   140          spiMasterConfig.base.txPriority  = ISR_PRIORITY_QSPI1_TX;
; ..\APP\src\QspiCpuDemo.c	   141          spiMasterConfig.base.rxPriority  = ISR_PRIORITY_QSPI1_RX;
	movh.a	a12,#@his(g_QspiCpu)
	lea	a12,[a12]@los(g_QspiCpu)
.L135:
	lea	a15,[a12]160
.L136:
	mov.aa	a5,a10
	mov.aa	a4,a15
	call	IfxQspi_SpiMaster_initModule
.L82:

; ..\APP\src\QspiCpuDemo.c	   142          spiMasterConfig.base.erPriority  = ISR_PRIORITY_QSPI1_ER;
; ..\APP\src\QspiCpuDemo.c	   143          spiMasterConfig.base.isrProvider = (IfxSrc_Tos)IfxCpu_getCoreIndex();
; ..\APP\src\QspiCpuDemo.c	   144  
; ..\APP\src\QspiCpuDemo.c	   145          /* pin configuration */
; ..\APP\src\QspiCpuDemo.c	   146          const IfxQspi_SpiMaster_Pins pins = {&IfxQspi1_SCLK_P11_6_OUT,                               /* SCLK */
	lea	a4,[a10]40
.L137:

; ..\APP\src\QspiCpuDemo.c	   147          									IfxPort_OutputMode_pushPull,
	mov.aa	a5,a15
	call	IfxQspi_SpiMaster_initChannelConfig
.L138:

; ..\APP\src\QspiCpuDemo.c	   148                                               &IfxQspi1_MTSR_P11_9_OUT,  IfxPort_OutputMode_pushPull, /* MTSR */
; ..\APP\src\QspiCpuDemo.c	   149                                               &IfxQspi1_MRSTB_P11_3_IN,  IfxPort_InputMode_pullDown,  /* MRST */
; ..\APP\src\QspiCpuDemo.c	   150                                               IfxPort_PadDriver_cmosAutomotiveSpeed3                   /* pad driver mode */
	ld.w	d15,.7.cnt
.L86:

; ..\APP\src\QspiCpuDemo.c	   151          };
; ..\APP\src\QspiCpuDemo.c	   152          spiMasterConfig.pins = &pins;
	movh.a	a15,#@his(IfxQspi1_SLSO3_P11_10_OUT)
.L87:
	st.w	[a10]44,d15
.L88:
	lea	a15,[a15]@los(IfxQspi1_SLSO3_P11_10_OUT)
.L139:

; ..\APP\src\QspiCpuDemo.c	   153  
; ..\APP\src\QspiCpuDemo.c	   154          /* initialize module */
; ..\APP\src\QspiCpuDemo.c	   155          IfxQspi_SpiMaster_initModule(&g_QspiCpu.drivers.spiMaster, &spiMasterConfig);
; ..\APP\src\QspiCpuDemo.c	   156      }
; ..\APP\src\QspiCpuDemo.c	   157  
	mov	d15,#128
	st.a	[a10]56,a15
.L140:
	st.b	[a10]60,d15
.L141:

; ..\APP\src\QspiCpuDemo.c	   158      {
	mov	d15,#0
	st.b	[a10]61,d15
.L142:

; ..\APP\src\QspiCpuDemo.c	   159          /* create channel config */
; ..\APP\src\QspiCpuDemo.c	   160          IfxQspi_SpiMaster_initChannelConfig(&spiMasterChannelConfig,
; ..\APP\src\QspiCpuDemo.c	   161              &g_QspiCpu.drivers.spiMaster);
; ..\APP\src\QspiCpuDemo.c	   162  
; ..\APP\src\QspiCpuDemo.c	   163          /* set the baudrate for this channel */
; ..\APP\src\QspiCpuDemo.c	   164          spiMasterChannelConfig.base.baudrate = 5000000;
; ..\APP\src\QspiCpuDemo.c	   165  
; ..\APP\src\QspiCpuDemo.c	   166          const IfxQspi_SpiMaster_Output slsOutput = {&IfxQspi1_SLSO3_P11_10_OUT,
; ..\APP\src\QspiCpuDemo.c	   167                                                      IfxPort_OutputMode_pushPull,
; ..\APP\src\QspiCpuDemo.c	   168                                                      IfxPort_PadDriver_cmosAutomotiveSpeed1};
; ..\APP\src\QspiCpuDemo.c	   169  
; ..\APP\src\QspiCpuDemo.c	   170          spiMasterChannelConfig.sls.output.pin    = slsOutput.pin;
	lea	a4,[a12]232
.L143:
	ld.bu	d15,[a10]48
.L144:

; ..\APP\src\QspiCpuDemo.c	   171          spiMasterChannelConfig.sls.output.mode   = slsOutput.mode;
	lea	a5,[a10]40
.L145:
	insert	d15,d15,#1,#3,#2
	st.b	[a10]48,d15
.L146:
	ld.bu	d15,[a10]50
.L147:
	insert	d15,d15,#3,#3,#3
	st.b	[a10]50,d15
.L148:
	call	IfxQspi_SpiMaster_initChannel
.L89:

; ..\APP\src\QspiCpuDemo.c	   172          spiMasterChannelConfig.sls.output.driver = slsOutput.driver;
; ..\APP\src\QspiCpuDemo.c	   173  
; ..\APP\src\QspiCpuDemo.c	   174          spiMasterChannelConfig.base.mode.clockPolarity 	= SpiIf_ClockPolarity_idleHigh;
; ..\APP\src\QspiCpuDemo.c	   175          spiMasterChannelConfig.base.mode.shiftClock 	= SpiIf_ShiftClock_shiftTransmitDataOnLeadingEdge;
	mov	d15,#0
	lea	a15,31
.L3:

; ..\APP\src\QspiCpuDemo.c	   176          spiMasterChannelConfig.base.mode.csInactiveDelay = 3;
; ..\APP\src\QspiCpuDemo.c	   177  
; ..\APP\src\QspiCpuDemo.c	   178  
; ..\APP\src\QspiCpuDemo.c	   179          //spiMasterChannelConfig.base.mode.autoCS = 0;
	st.b	[a12]32,d15
.L149:
	st.b	[a12+],d15
	loop	a15,.L3
.L150:

; ..\APP\src\QspiCpuDemo.c	   180  
; ..\APP\src\QspiCpuDemo.c	   181  
; ..\APP\src\QspiCpuDemo.c	   182  
	ret
.L69:
	
__IfxQspi_Masterinit_function_end:
	.size	IfxQspi_Masterinit,__IfxQspi_Masterinit_function_end-IfxQspi_Masterinit
.L30:
	; End of function
	
	.sdecl	'.text.QspiCpuDemo.IfxQspiCpuDemo_init',code,cluster('IfxQspiCpuDemo_init')
	.sect	'.text.QspiCpuDemo.IfxQspiCpuDemo_init'
	.align	2
	
	.global	IfxQspiCpuDemo_init

; ..\APP\src\QspiCpuDemo.c	   183          /* initialize channel */
; ..\APP\src\QspiCpuDemo.c	   184          IfxQspi_SpiMaster_initChannel(&g_QspiCpu.drivers.spiMasterChannel,
; ..\APP\src\QspiCpuDemo.c	   185              &spiMasterChannelConfig);
; ..\APP\src\QspiCpuDemo.c	   186      }
; ..\APP\src\QspiCpuDemo.c	   187  
; ..\APP\src\QspiCpuDemo.c	   188      /* init tx buffer area */
; ..\APP\src\QspiCpuDemo.c	   189      for (i = 0; i < SPI_BUFFER_SIZE; i++)
; Function IfxQspiCpuDemo_init
.L16:
IfxQspiCpuDemo_init:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
	mfcr	d15,#65068
.L106:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
	extr.u	d15,d15,#15,#1
.L107:
	ne	d15,d15,#0
.L60:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
	disable
.L119:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
	nop
.L57:

; ..\APP\src\QspiCpuDemo.c	   190  ; i < SPI_BUFFER_SIZE; i++)
; ..\APP\src\QspiCpuDemo.c	   191      {
; ..\APP\src\QspiCpuDemo.c	   192          g_QspiCpu.qspiBuffer.spi1TxBuffer[i] = (uint8)(0);
; ..\APP\src\QspiCpuDemo.c	   193  
; ..\APP\src\QspiCpuDemo.c	   194          g_QspiCpu.qspiBuffer.spi1RxBuffer[i] = (uint8)(0);
; ..\APP\src\QspiCpuDemo.c	   195  
	call	IfxQspi_Masterinit
.L65:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   794      if (enabled != FALSE)      (inlined)
	jeq	d15,#0,.L4
.L120:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   687  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   688  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   689  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   690  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   691  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   692      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   693  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   694  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   695  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   696  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   697  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   698      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   699  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   700  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   701  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   702  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   703  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   704      Ifx_CPU_CCNT ccnt;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   705      ccnt.U = __mfcr(address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   706      return ccnt.B.CountValue;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   707  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   708  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   709  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   710  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   711  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   712      Ifx_CPU_CCNT ccnt;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   713  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   714      ccnt.U = __mfcr(address);   /*read the counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   715  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   716      return ccnt.B.SOvf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   717  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   718  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   719  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   720  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   721  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   722      uint32  k;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   723      uint32  nxt_cxi_val = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   724      uint32 *prvCsa      = 0U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   725      uint32 *nxtCsa      = csaBegin;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   726  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   727      for (k = 0; k < (((uint32)csaEnd - (uint32)csaBegin) / 64); k++)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   728      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   729          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   730  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   731          if (k == 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   732          {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   733              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   734          }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   735          else
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   736          {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   737              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   738          }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   739  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   740          prvCsa  = (uint32 *)nxtCsa;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   741          nxtCsa += 16;           /* next CSA */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   742      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   743  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   744      *prvCsa = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   745      __mtcr(CPU_LCX, nxt_cxi_val);   /* Last context save area is pointed in LCX to know if there is CSA depletion */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   746  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   747  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   748  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   749  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   750  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   751      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   752      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   753          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   754          Ifx_CPU_PCON1 pcon1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   755          pcon1.U       = __mfcr(CPU_PCON1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   756          pcon1.B.PCINV = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   757          __mtcr(CPU_PCON1, pcon1.U);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   758          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   759      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   760  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   761  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   762  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   763  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   764  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   765      uint8 segment = (uint32)address >> 24;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   766      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   767  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   768  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   769  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   770  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   771  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   772      Ifx_CPU_CCTRL cctrl;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   773      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   774      /*Disable the counters */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   775      cctrl.B.CE = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   776      __mtcr(CPU_CCTRL, cctrl.U);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   777  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   778      /* reset the counters */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   779      __mtcr(CPU_CCNT, 0);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   780      __mtcr(CPU_ICNT, 0);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   781      __mtcr(CPU_M1CNT, 0);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   782      __mtcr(CPU_M2CNT, 0);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   783      __mtcr(CPU_M3CNT, 0);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   784  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   785      /*Enable the counters, set the counter mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   786      cctrl.B.CE = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   787      cctrl.B.CM = mode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   788      __mtcr(CPU_CCTRL, cctrl.U);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   789  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   790  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   791  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   792  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   793  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   794      if (enabled != FALSE)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   795      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   796          __enable();
	enable

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   794      if (enabled != FALSE)      (inlined)
.L4:

; ..\APP\src\QspiCpuDemo.c	   196  ffer[i] = (uint8)(0);
; ..\APP\src\QspiCpuDemo.c	   197  
; ..\APP\src\QspiCpuDemo.c	   198      }
; ..\APP\src\QspiCpuDemo.c	   199  }
	ret
.L55:
	
__IfxQspiCpuDemo_init_function_end:
	.size	IfxQspiCpuDemo_init,__IfxQspiCpuDemo_init_function_end-IfxQspiCpuDemo_init
.L25:
	; End of function
	
	.sdecl	'.bss.QspiCpuDemo.g_QspiCpu',data,cluster('g_QspiCpu')
	.sect	'.bss.QspiCpuDemo.g_QspiCpu'
	.global	g_QspiCpu
	.align	4
g_QspiCpu:	.type	object
	.size	g_QspiCpu,408
	.space	408
	.sdecl	'.bss.QspiCpuDemo.qspi_slave_reg_st',data,cluster('qspi_slave_reg_st')
	.sect	'.bss.QspiCpuDemo.qspi_slave_reg_st'
	.global	qspi_slave_reg_st
	.align	4
qspi_slave_reg_st:	.type	object
	.size	qspi_slave_reg_st,40
	.space	40
	.sdecl	'.rodata.QspiCpuDemo..4.ini',data,rom
	.sect	'.rodata.QspiCpuDemo..4.ini'
	.align	4
.4.ini:	.type	object
	.size	.4.ini,24
	.word	IfxQspi1_SCLK_P11_6_OUT
	.byte	128
	.space	3
	.word	IfxQspi1_MTSR_P11_9_OUT
	.byte	128
	.space	3
	.word	IfxQspi1_MRSTB_P11_3_IN
	.byte	8,2
	.space	2
	.calls	'ISR_qspi1_Tx','IfxQspi_SpiMaster_isrTransmit'
	.calls	'ISR_qspi1_Rx','IfxQspi_SpiMaster_isrReceive'
	.calls	'ISR_qspi1_Er','IfxQspi_SpiMaster_isrError'
	.calls	'IfxQspi_Masterinit','IfxQspi_SpiMaster_initModuleConfig'
	.calls	'IfxQspi_Masterinit','IfxQspi_SpiMaster_initModule'
	.calls	'IfxQspi_Masterinit','IfxQspi_SpiMaster_initChannelConfig'
	.calls	'IfxQspi_Masterinit','IfxQspi_SpiMaster_initChannel'
	.calls	'IfxQspiCpuDemo_init','IfxQspi_Masterinit'
	.calls	'ISR_qspi1_Tx','.cocofun_8'
	.calls	'ISR_qspi1_Rx','.cocofun_8'
	.calls	'ISR_qspi1_Er','.cocofun_8'
	.calls	'ISR_qspi1_Tx','',0
	.calls	'.cocofun_8','',0
	.calls	'ISR_qspi1_Rx','',0
	.calls	'ISR_qspi1_Er','',0
	.calls	'IfxQspi_Masterinit','',96
	.extern	IfxQspi1_MRSTB_P11_3_IN
	.extern	IfxQspi1_MTSR_P11_9_OUT
	.extern	IfxQspi1_SCLK_P11_6_OUT
	.extern	IfxQspi1_SLSO3_P11_10_OUT
	.extern	IfxQspi_SpiMaster_initModule
	.extern	IfxQspi_SpiMaster_initModuleConfig
	.extern	IfxQspi_SpiMaster_initChannel
	.extern	IfxQspi_SpiMaster_initChannelConfig
	.extern	IfxQspi_SpiMaster_isrError
	.extern	IfxQspi_SpiMaster_isrReceive
	.extern	IfxQspi_SpiMaster_isrTransmit
	.calls	'IfxQspiCpuDemo_init','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L18:
	.word	105972
	.half	3
	.word	.L19
	.byte	4
.L17:
	.byte	1
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L20
	.byte	2
	.byte	'__stopPerfCounters',0,3,1,217,1,17,1,1,3,0,4
	.byte	'unsigned long long int',0,8,7,5
	.byte	'void',0,6
	.word	202
	.byte	7
	.byte	'__ld64',0,3,2,110,19
	.word	176
	.byte	1,1,8
	.byte	'addr',0,2,110,32
	.word	208
	.byte	3,0,2
	.byte	'__st64',0,3,2,118,17,1,1,8
	.byte	'addr',0,2,118,30
	.word	208
	.byte	8
	.byte	'value',0,2,118,43
	.word	176
	.byte	3,0,4
	.byte	'unsigned int',0,4,7,4
	.byte	'int',0,4,5,4
	.byte	'unsigned int',0,4,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,133,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	312
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	312
	.byte	16,0,2,35,0,0,11,4,187,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	328
	.byte	4,2,35,0,0,4
	.byte	'unsigned char',0,1,8,4
	.byte	'unsigned short int',0,2,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,142,8,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	2,6,2,35,0,10
	.byte	'IR0',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	464
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,4,195,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	503
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,157,8,16,4,10
	.byte	'AE',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	464
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,4,203,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	747
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU',0,4,243,13,25,12,12
	.byte	'CON0',0
	.word	424
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	707
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	938
	.byte	4,2,35,8,0,13
	.word	978
	.byte	6
	.word	1041
	.byte	2
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,130,3,17,1,1,8
	.byte	'watchdog',0,3,130,3,65
	.word	1046
	.byte	8
	.byte	'password',0,3,130,3,82
	.word	481
	.byte	3,0,2
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,222,3,17,1,1,8
	.byte	'watchdog',0,3,222,3,63
	.word	1046
	.byte	8
	.byte	'password',0,3,222,3,80
	.word	481
	.byte	3,0,7
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,187,3,19
	.word	481
	.byte	1,1,8
	.byte	'watchdog',0,3,187,3,74
	.word	1046
	.byte	3,0,14,6,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_none',0,1,0
.L76:
	.byte	7
	.byte	'IfxCpu_getCoreIndex',0,3,5,170,5,31
	.word	1276
	.byte	1,1
.L79:
	.byte	3,0
.L59:
	.byte	7
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,185,4,20
	.word	464
	.byte	1,1
.L61:
	.byte	3,0
.L56:
	.byte	7
	.byte	'IfxCpu_disableInterrupts',0,3,5,193,4,20
	.word	464
	.byte	1,1
.L58:
	.byte	16,3,0,0
.L92:
	.byte	2
	.byte	'IfxCpu_enableInterrupts',0,3,5,203,4,17,1,1
.L95:
	.byte	3,0
.L64:
	.byte	2
	.byte	'IfxCpu_restoreInterrupts',0,3,5,152,6,17,1,1
.L66:
	.byte	8
	.byte	'enabled',0,5,152,6,50
	.word	464
.L68:
	.byte	3,0
.L70:
	.byte	4
	.byte	'unsigned long int',0,4,7,7
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,190,5,19
	.word	1534
	.byte	1,1,8
	.byte	'address',0,5,190,5,55
	.word	1534
	.byte	3,0,7
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,198,5,20
	.word	464
	.byte	1,1,8
	.byte	'address',0,5,198,5,70
	.word	1534
	.byte	3,0,2
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,153,7,17,1,1,8
	.byte	'address',0,5,153,7,56
	.word	1534
	.byte	8
	.byte	'count',0,5,153,7,72
	.word	1534
	.byte	3,0,9
	.byte	'_Ifx_SRC_SRCR_Bits',0,8,45,16,4,10
	.byte	'SRPN',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	464
	.byte	4,0,2,35,1,10
	.byte	'ECC',0,1
	.word	464
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	464
	.byte	3,0,2,35,2,10
	.byte	'SRR',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,8,70,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1763
	.byte	4,2,35,0,0,13
	.word	2053
	.byte	6
	.word	2092
	.byte	2
	.byte	'IfxSrc_clearRequest',0,3,7,230,1,17,1,1,8
	.byte	'src',0,7,230,1,60
	.word	2097
	.byte	3,0,9
	.byte	'_Ifx_P_OUT_Bits',0,10,231,2,16,4,10
	.byte	'P0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,10,239,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2145
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMR_Bits',0,10,129,2,16,4,10
	.byte	'PS0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'PCL0',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,10,191,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2461
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ID_Bits',0,10,110,16,4,10
	.byte	'MODREV',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,10,231,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3032
	.byte	4,2,35,0,0,17,4
	.word	464
	.byte	18,3,0,9
	.byte	'_Ifx_P_IOCR0_Bits',0,10,140,1,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'PC0',0,1
	.word	464
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	3,5,2,35,1,10
	.byte	'PC1',0,1
	.word	464
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'PC2',0,1
	.word	464
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	3,5,2,35,3,10
	.byte	'PC3',0,1
	.word	464
	.byte	5,0,2,35,3,0,11,10,247,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3160
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR4_Bits',0,10,166,1,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'PC4',0,1
	.word	464
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	3,5,2,35,1,10
	.byte	'PC5',0,1
	.word	464
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'PC6',0,1
	.word	464
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	3,5,2,35,3,10
	.byte	'PC7',0,1
	.word	464
	.byte	5,0,2,35,3,0,11,10,135,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3375
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR8_Bits',0,10,179,1,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'PC8',0,1
	.word	464
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	3,5,2,35,1,10
	.byte	'PC9',0,1
	.word	464
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'PC10',0,1
	.word	464
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	3,5,2,35,3,10
	.byte	'PC11',0,1
	.word	464
	.byte	5,0,2,35,3,0,11,10,143,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3590
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR12_Bits',0,10,153,1,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'PC12',0,1
	.word	464
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	3,5,2,35,1,10
	.byte	'PC13',0,1
	.word	464
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'PC14',0,1
	.word	464
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	3,5,2,35,3,10
	.byte	'PC15',0,1
	.word	464
	.byte	5,0,2,35,3,0,11,10,255,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3807
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IN_Bits',0,10,118,16,4,10
	.byte	'P0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,10,239,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4027
	.byte	4,2,35,0,0,17,24
	.word	464
	.byte	18,23,0,9
	.byte	'_Ifx_P_PDR0_Bits',0,10,160,3,16,4,10
	.byte	'PD0',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	464
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'PD2',0,1
	.word	464
	.byte	3,5,2,35,1,10
	.byte	'PL2',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'PD3',0,1
	.word	464
	.byte	3,1,2,35,1,10
	.byte	'PL3',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'PD4',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'PL4',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'PD5',0,1
	.word	464
	.byte	3,1,2,35,2,10
	.byte	'PL5',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'PD6',0,1
	.word	464
	.byte	3,5,2,35,3,10
	.byte	'PL6',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'PD7',0,1
	.word	464
	.byte	3,1,2,35,3,10
	.byte	'PL7',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,10,135,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4350
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PDR1_Bits',0,10,181,3,16,4,10
	.byte	'PD8',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'PL8',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PD9',0,1
	.word	464
	.byte	3,1,2,35,0,10
	.byte	'PL9',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'PD10',0,1
	.word	464
	.byte	3,5,2,35,1,10
	.byte	'PL10',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'PD11',0,1
	.word	464
	.byte	3,1,2,35,1,10
	.byte	'PL11',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'PD12',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'PL12',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'PD13',0,1
	.word	464
	.byte	3,1,2,35,2,10
	.byte	'PL13',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'PD14',0,1
	.word	464
	.byte	3,5,2,35,3,10
	.byte	'PL14',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'PD15',0,1
	.word	464
	.byte	3,1,2,35,3,10
	.byte	'PL15',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,10,143,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4654
	.byte	4,2,35,0,0,17,8
	.word	464
	.byte	18,7,0,9
	.byte	'_Ifx_P_ESR_Bits',0,10,88,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,10,223,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4979
	.byte	4,2,35,0,0,17,12
	.word	464
	.byte	18,11,0,9
	.byte	'_Ifx_P_PDISC_Bits',0,10,138,3,16,4,10
	.byte	'PDIS0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'PDIS2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'PDIS3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PDIS4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'PDIS5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'PDIS6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PDIS7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'PDIS8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'PDIS9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'PDIS10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'PDIS11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'PDIS12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'PDIS13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'PDIS14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'PDIS15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,10,255,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5319
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PCSR_Bits',0,10,253,2,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'SEL1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'SEL2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	481
	.byte	6,7,2,35,0,10
	.byte	'SEL9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'SEL10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	289
	.byte	20,1,2,35,0,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,10,247,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5685
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR0_Bits',0,10,166,2,16,4,10
	.byte	'PS0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,11,10,207,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5896
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR4_Bits',0,10,187,2,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'PS4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	289
	.byte	24,0,2,35,0,0,11,10,223,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6043
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR8_Bits',0,10,198,2,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'PS8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	289
	.byte	20,0,2,35,0,0,11,10,231,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6212
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR12_Bits',0,10,176,2,16,4,10
	.byte	'reserved_0',0,2
	.word	481
	.byte	12,4,2,35,0,10
	.byte	'PS12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,10,215,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6384
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR0_Bits',0,10,192,1,16,4,10
	.byte	'reserved_0',0,2
	.word	481
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	481
	.byte	12,0,2,35,2,0,11,10,159,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6559
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR4_Bits',0,10,213,1,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	20,12,2,35,0,10
	.byte	'PCL4',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,10,175,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6733
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR8_Bits',0,10,224,1,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	24,8,2,35,0,10
	.byte	'PCL8',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	464
	.byte	4,0,2,35,3,0,11,10,183,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6907
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR12_Bits',0,10,203,1,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	28,4,2,35,0,10
	.byte	'PCL12',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,10,167,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7083
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR_Bits',0,10,209,2,16,4,10
	.byte	'PS0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,10,199,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7239
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR_Bits',0,10,235,1,16,4,10
	.byte	'reserved_0',0,2
	.word	481
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,10,151,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7572
	.byte	4,2,35,0,0,17,96
	.word	464
	.byte	18,95,0,9
	.byte	'_Ifx_P_ACCEN1_Bits',0,10,82,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,10,215,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7929
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ACCEN0_Bits',0,10,45,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,10,207,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8016
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P',0,10,159,5,25,128,2,12
	.byte	'OUT',0
	.word	2421
	.byte	4,2,35,0,12
	.byte	'OMR',0
	.word	2992
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	3111
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3151
	.byte	4,2,35,12,12
	.byte	'IOCR0',0
	.word	3335
	.byte	4,2,35,16,12
	.byte	'IOCR4',0
	.word	3550
	.byte	4,2,35,20,12
	.byte	'IOCR8',0
	.word	3767
	.byte	4,2,35,24,12
	.byte	'IOCR12',0
	.word	3987
	.byte	4,2,35,28,12
	.byte	'reserved_20',0
	.word	3151
	.byte	4,2,35,32,12
	.byte	'IN',0
	.word	4301
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	4341
	.byte	24,2,35,40,12
	.byte	'PDR0',0
	.word	4614
	.byte	4,2,35,64,12
	.byte	'PDR1',0
	.word	4930
	.byte	4,2,35,68,12
	.byte	'reserved_48',0
	.word	4970
	.byte	8,2,35,72,12
	.byte	'ESR',0
	.word	5270
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	5310
	.byte	12,2,35,84,12
	.byte	'PDISC',0
	.word	5645
	.byte	4,2,35,96,12
	.byte	'PCSR',0
	.word	5856
	.byte	4,2,35,100,12
	.byte	'reserved_64',0
	.word	4970
	.byte	8,2,35,104,12
	.byte	'OMSR0',0
	.word	6003
	.byte	4,2,35,112,12
	.byte	'OMSR4',0
	.word	6172
	.byte	4,2,35,116,12
	.byte	'OMSR8',0
	.word	6344
	.byte	4,2,35,120,12
	.byte	'OMSR12',0
	.word	6519
	.byte	4,2,35,124,12
	.byte	'OMCR0',0
	.word	6693
	.byte	4,3,35,128,1,12
	.byte	'OMCR4',0
	.word	6867
	.byte	4,3,35,132,1,12
	.byte	'OMCR8',0
	.word	7043
	.byte	4,3,35,136,1,12
	.byte	'OMCR12',0
	.word	7199
	.byte	4,3,35,140,1,12
	.byte	'OMSR',0
	.word	7532
	.byte	4,3,35,144,1,12
	.byte	'OMCR',0
	.word	7880
	.byte	4,3,35,148,1,12
	.byte	'reserved_98',0
	.word	7920
	.byte	96,3,35,152,1,12
	.byte	'ACCEN1',0
	.word	7976
	.byte	4,3,35,248,1,12
	.byte	'ACCEN0',0
	.word	8543
	.byte	4,3,35,252,1,0,13
	.word	8583
	.byte	6
	.word	9116
	.byte	14,9,54,9,1,15
	.byte	'IfxPort_InputMode_undefined',0,127,15
	.byte	'IfxPort_InputMode_noPullDevice',0,0,15
	.byte	'IfxPort_InputMode_pullDown',0,8,15
	.byte	'IfxPort_InputMode_pullUp',0,16,0,2
	.byte	'IfxPort_setPinModeInput',0,3,9,131,4,17,1,1,8
	.byte	'port',0,9,131,4,48
	.word	9121
	.byte	8
	.byte	'pinIndex',0,9,131,4,60
	.word	464
	.byte	8
	.byte	'mode',0,9,131,4,88
	.word	9126
	.byte	3,0,14,9,105,9,1,15
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,15
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,14,9,91,9,1,15
	.byte	'IfxPort_OutputIdx_general',0,128,1,15
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,15
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,15
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,15
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,15
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,15
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,15
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,2
	.byte	'IfxPort_setPinModeOutput',0,3,9,137,4,17,1,1,8
	.byte	'port',0,9,137,4,49
	.word	9121
	.byte	8
	.byte	'pinIndex',0,9,137,4,61
	.word	464
	.byte	8
	.byte	'mode',0,9,137,4,90
	.word	9331
	.byte	8
	.byte	'index',0,9,137,4,114
	.word	9400
	.byte	3,0,14,9,131,1,9,4,15
	.byte	'IfxPort_State_notChanged',0,0,15
	.byte	'IfxPort_State_high',0,1,15
	.byte	'IfxPort_State_low',0,128,128,4,15
	.byte	'IfxPort_State_toggled',0,129,128,4,0,2
	.byte	'IfxPort_setPinState',0,3,9,143,4,17,1,1,8
	.byte	'port',0,9,143,4,44
	.word	9121
	.byte	8
	.byte	'pinIndex',0,9,143,4,56
	.word	464
	.byte	8
	.byte	'action',0,9,143,4,80
	.word	9713
	.byte	3,0,9
	.byte	'_Ifx_DMA_CLC_Bits',0,12,131,4,16,4,10
	.byte	'DISR',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,11,12,160,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9894
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ID_Bits',0,12,155,4,16,4,10
	.byte	'MODREV',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,12,184,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10051
	.byte	4,2,35,0,0,17,20
	.word	464
	.byte	18,19,0,9
	.byte	'_Ifx_DMA_MEMCON_Bits',0,12,163,4,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	2,30,2,35,0,10
	.byte	'INTERR',0,4
	.word	312
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'RMWERR',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	312
	.byte	1,26,2,35,0,10
	.byte	'DATAERR',0,4
	.word	312
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	312
	.byte	1,24,2,35,0,10
	.byte	'PMIC',0,4
	.word	312
	.byte	1,23,2,35,0,10
	.byte	'ERRDIS',0,4
	.word	312
	.byte	1,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	312
	.byte	22,0,2,35,0,0,11,12,192,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10182
	.byte	4,2,35,0,0,17,28
	.word	464
	.byte	18,27,0,9
	.byte	'_Ifx_DMA_ACCEN00_Bits',0,12,45,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,12,128,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10459
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN01_Bits',0,12,82,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,136,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11029
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN10_Bits',0,12,88,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,12,144,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11119
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN11_Bits',0,12,125,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,152,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11689
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN20_Bits',0,12,131,1,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,12,160,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11779
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN21_Bits',0,12,168,1,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,168,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12350
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN30_Bits',0,12,174,1,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,12,176,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12441
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN31_Bits',0,12,211,1,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,184,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13012
	.byte	4,2,35,0,0,17,192,1
	.word	464
	.byte	18,191,1,0,9
	.byte	'_Ifx_DMA_BLK_EER_Bits',0,12,233,1,16,4,10
	.byte	'reserved_0',0,2
	.word	481
	.byte	16,0,2,35,0,10
	.byte	'ESER',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EDER',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	464
	.byte	6,0,2,35,2,10
	.byte	'ERER',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'ELER',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	464
	.byte	5,0,2,35,3,0,11,12,200,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13114
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ERRSR_Bits',0,12,246,1,16,4,10
	.byte	'LEC',0,1
	.word	464
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	481
	.byte	9,0,2,35,0,10
	.byte	'SER',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'DER',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	464
	.byte	2,4,2,35,2,10
	.byte	'SPBER',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'SRIER',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	464
	.byte	2,0,2,35,2,10
	.byte	'RAMER',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'SLLER',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'DLLER',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	464
	.byte	5,0,2,35,3,0,11,12,208,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13338
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_CLRE_Bits',0,12,217,1,16,4,10
	.byte	'reserved_0',0,2
	.word	481
	.byte	16,0,2,35,0,10
	.byte	'CSER',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'CDER',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	464
	.byte	2,4,2,35,2,10
	.byte	'CSPBER',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'CSRIER',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	464
	.byte	2,0,2,35,2,10
	.byte	'CRAMER',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'CSLLER',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'CDLLER',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	464
	.byte	5,0,2,35,3,0,11,12,192,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13630
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SR_Bits',0,12,161,3,16,4,10
	.byte	'RS',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	464
	.byte	3,4,2,35,0,10
	.byte	'WS',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	481
	.byte	11,0,2,35,0,10
	.byte	'CH',0,1
	.word	464
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	481
	.byte	9,0,2,35,2,0,11,12,216,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13913
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R0_Bits',0,12,193,2,16,4,10
	.byte	'RD00',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'RD01',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'RD02',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'RD03',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,248,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14093
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R1_Bits',0,12,202,2,16,4,10
	.byte	'RD10',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'RD11',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'RD12',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'RD13',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,128,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14228
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R2_Bits',0,12,211,2,16,4,10
	.byte	'RD20',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'RD21',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'RD22',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'RD23',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,136,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14363
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R3_Bits',0,12,220,2,16,4,10
	.byte	'RD30',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'RD31',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'RD32',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'RD33',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,144,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14498
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R4_Bits',0,12,229,2,16,4,10
	.byte	'RD40',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'RD41',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'RD42',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'RD43',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,152,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14633
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R5_Bits',0,12,238,2,16,4,10
	.byte	'RD50',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'RD51',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'RD52',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'RD53',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,160,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14768
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R6_Bits',0,12,247,2,16,4,10
	.byte	'RD60',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'RD61',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'RD62',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'RD63',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,168,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14903
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R7_Bits',0,12,128,3,16,4,10
	.byte	'RD70',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'RD71',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'RD72',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'RD73',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,176,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15038
	.byte	4,2,35,0,0,17,32
	.word	464
	.byte	18,31,0,9
	.byte	'_Ifx_DMA_BLK_ME_RDCRC_Bits',0,12,137,3,16,4,10
	.byte	'RDCRC',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,184,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15182
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SDCRC_Bits',0,12,149,3,16,4,10
	.byte	'SDCRC',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,200,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15273
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SADR_Bits',0,12,143,3,16,4,10
	.byte	'SADR',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,192,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15364
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_DADR_Bits',0,12,187,2,16,4,10
	.byte	'DADR',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,240,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15453
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_ADICR_Bits',0,12,135,2,16,4,10
	.byte	'SMF',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'INCS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'DMF',0,1
	.word	464
	.byte	3,1,2,35,0,10
	.byte	'INCD',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'CBLS',0,1
	.word	464
	.byte	4,4,2,35,1,10
	.byte	'CBLD',0,1
	.word	464
	.byte	4,0,2,35,1,10
	.byte	'SHCT',0,1
	.word	464
	.byte	4,4,2,35,2,10
	.byte	'SCBE',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'DCBE',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'STAMP',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'ETRL',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'WRPSE',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'WRPDE',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'INTCT',0,1
	.word	464
	.byte	2,4,2,35,3,10
	.byte	'IRDV',0,1
	.word	464
	.byte	4,0,2,35,3,0,11,12,216,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15542
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_CHCR_Bits',0,12,155,2,16,4,10
	.byte	'TREL',0,2
	.word	481
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'BLKM',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'RROAT',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'CHMODE',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'CHDW',0,1
	.word	464
	.byte	3,0,2,35,2,10
	.byte	'PATSEL',0,1
	.word	464
	.byte	3,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'PRSEL',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'DMAPRIO',0,1
	.word	464
	.byte	2,0,2,35,3,0,11,12,224,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15858
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SHADR_Bits',0,12,155,3,16,4,10
	.byte	'SHADR',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,208,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16137
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_CHSR_Bits',0,12,171,2,16,4,10
	.byte	'TCOUNT',0,2
	.word	481
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'LXO',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'WRPS',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'WRPD',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'ICH',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'IPM',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,1
	.word	464
	.byte	2,2,2,35,2,10
	.byte	'BUFFER',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'FROZEN',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,232,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16228
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME',0,12,144,8,25,112,12
	.byte	'SR',0
	.word	14053
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	5310
	.byte	12,2,35,4,12
	.byte	'R0',0
	.word	14188
	.byte	4,2,35,16,12
	.byte	'R1',0
	.word	14323
	.byte	4,2,35,20,12
	.byte	'R2',0
	.word	14458
	.byte	4,2,35,24,12
	.byte	'R3',0
	.word	14593
	.byte	4,2,35,28,12
	.byte	'R4',0
	.word	14728
	.byte	4,2,35,32,12
	.byte	'R5',0
	.word	14863
	.byte	4,2,35,36,12
	.byte	'R6',0
	.word	14998
	.byte	4,2,35,40,12
	.byte	'R7',0
	.word	15133
	.byte	4,2,35,44,12
	.byte	'reserved_30',0
	.word	15173
	.byte	32,2,35,48,12
	.byte	'RDCRC',0
	.word	15233
	.byte	4,2,35,80,12
	.byte	'SDCRC',0
	.word	15324
	.byte	4,2,35,84,12
	.byte	'SADR',0
	.word	15413
	.byte	4,2,35,88,12
	.byte	'DADR',0
	.word	15502
	.byte	4,2,35,92,12
	.byte	'ADICR',0
	.word	15818
	.byte	4,2,35,96,12
	.byte	'CHCR',0
	.word	16097
	.byte	4,2,35,100,12
	.byte	'SHADR',0
	.word	16188
	.byte	4,2,35,104,12
	.byte	'CHSR',0
	.word	16461
	.byte	4,2,35,108,0,13
	.word	16501
	.byte	9
	.byte	'_Ifx_DMA_BLK',0,12,178,8,25,128,1,12
	.byte	'EER',0
	.word	13298
	.byte	4,2,35,0,12
	.byte	'ERRSR',0
	.word	13590
	.byte	4,2,35,4,12
	.byte	'CLRE',0
	.word	13873
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3151
	.byte	4,2,35,12,12
	.byte	'ME',0
	.word	16789
	.byte	112,2,35,16,0,13
	.word	16794
	.byte	17,128,31
	.word	464
	.byte	18,255,30,0,13
	.word	16794
	.byte	9
	.byte	'_Ifx_DMA_OTSS_Bits',0,12,185,4,16,4,10
	.byte	'TGS',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	464
	.byte	3,1,2,35,0,10
	.byte	'BS',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	289
	.byte	24,0,2,35,0,0,11,12,208,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16910
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ERRINTR_Bits',0,12,141,4,16,4,10
	.byte	'SIT',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,11,12,168,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17049
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_PRR0_Bits',0,12,194,4,16,4,10
	.byte	'PAT00',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'PAT01',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'PAT02',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'PAT03',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,216,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17155
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_PRR1_Bits',0,12,203,4,16,4,10
	.byte	'PAT10',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'PAT11',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'PAT12',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'PAT13',0,1
	.word	464
	.byte	8,0,2,35,3,0,11,12,224,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17289
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_TIME_Bits',0,12,226,4,16,4,10
	.byte	'COUNT',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,248,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17423
	.byte	4,2,35,0,0,17,236,1
	.word	464
	.byte	18,235,1,0,9
	.byte	'_Ifx_DMA_MODE_Bits',0,12,178,4,16,4,10
	.byte	'MODE',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,11,12,200,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17517
	.byte	4,2,35,0,0,17,16
	.word	17581
	.byte	18,3,0,17,240,9
	.word	464
	.byte	18,239,9,0,9
	.byte	'_Ifx_DMA_HRR_Bits',0,12,148,4,16,4,10
	.byte	'HRP',0,1
	.word	464
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	30,0,2,35,0,0,11,12,176,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17641
	.byte	4,2,35,0,0,17,64
	.word	17703
	.byte	18,15,0,17,192,3
	.word	464
	.byte	18,191,3,0,9
	.byte	'_Ifx_DMA_SUSENR_Bits',0,12,219,4,16,4,10
	.byte	'SUSEN',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,11,12,240,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17763
	.byte	4,2,35,0,0,17,64
	.word	17830
	.byte	18,15,0,9
	.byte	'_Ifx_DMA_SUSACR_Bits',0,12,212,4,16,4,10
	.byte	'SUSAC',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,11,12,232,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17879
	.byte	4,2,35,0,0,17,64
	.word	17946
	.byte	18,15,0,9
	.byte	'_Ifx_DMA_TSR_Bits',0,12,232,4,16,4,10
	.byte	'RST',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'HTRE',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'TRL',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'CH',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	464
	.byte	4,0,2,35,0,10
	.byte	'HLTREQ',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'HLTACK',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	464
	.byte	6,0,2,35,1,10
	.byte	'ECH',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'DCH',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'CTL',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	464
	.byte	5,0,2,35,2,10
	.byte	'HLTCLR',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	464
	.byte	7,0,2,35,3,0,11,12,128,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17995
	.byte	4,2,35,0,0,17,64
	.word	18270
	.byte	18,15,0,9
	.byte	'_Ifx_DMA_CH_RDCRCR_Bits',0,12,235,3,16,4,10
	.byte	'RDCRC',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,128,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18319
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_SDCRCR_Bits',0,12,247,3,16,4,10
	.byte	'SDCRC',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,144,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18407
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_SADR_Bits',0,12,241,3,16,4,10
	.byte	'SADR',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,136,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18495
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_DADR_Bits',0,12,229,3,16,4,10
	.byte	'DADR',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,248,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18580
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_ADICR_Bits',0,12,172,3,16,4,10
	.byte	'SMF',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'INCS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'DMF',0,1
	.word	464
	.byte	3,1,2,35,0,10
	.byte	'INCD',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'CBLS',0,1
	.word	464
	.byte	4,4,2,35,1,10
	.byte	'CBLD',0,1
	.word	464
	.byte	4,0,2,35,1,10
	.byte	'SHCT',0,1
	.word	464
	.byte	4,4,2,35,2,10
	.byte	'SCBE',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'DCBE',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'STAMP',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'ETRL',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'WRPSE',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'WRPDE',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'INTCT',0,1
	.word	464
	.byte	2,4,2,35,3,10
	.byte	'IRDV',0,1
	.word	464
	.byte	4,0,2,35,3,0,11,12,224,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18665
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_CHCFGR_Bits',0,12,192,3,16,4,10
	.byte	'TREL',0,2
	.word	481
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'BLKM',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'RROAT',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'CHMODE',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'CHDW',0,1
	.word	464
	.byte	3,0,2,35,2,10
	.byte	'PATSEL',0,1
	.word	464
	.byte	3,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'PRSEL',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'DMAPRIO',0,1
	.word	464
	.byte	2,0,2,35,3,0,11,12,232,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18977
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_SHADR_Bits',0,12,253,3,16,4,10
	.byte	'SHADR',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,12,152,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19254
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_CHCSR_Bits',0,12,208,3,16,4,10
	.byte	'TCOUNT',0,2
	.word	481
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'LXO',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'WRPS',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'WRPD',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'ICH',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'IPM',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,1
	.word	464
	.byte	2,2,2,35,2,10
	.byte	'BUFFER',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'FROZEN',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'SWB',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'CWRP',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'CICH',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'SIT',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	464
	.byte	3,1,2,35,3,10
	.byte	'SCH',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,12,240,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19341
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH',0,12,188,8,25,32,12
	.byte	'RDCRCR',0
	.word	18367
	.byte	4,2,35,0,12
	.byte	'SDCRCR',0
	.word	18455
	.byte	4,2,35,4,12
	.byte	'SADR',0
	.word	18540
	.byte	4,2,35,8,12
	.byte	'DADR',0
	.word	18625
	.byte	4,2,35,12,12
	.byte	'ADICR',0
	.word	18937
	.byte	4,2,35,16,12
	.byte	'CHCFGR',0
	.word	19214
	.byte	4,2,35,20,12
	.byte	'SHADR',0
	.word	19301
	.byte	4,2,35,24,12
	.byte	'CHCSR',0
	.word	19648
	.byte	4,2,35,28,0,17,128,4
	.word	19688
	.byte	18,15,0,13
	.word	19828
	.byte	17,128,60
	.word	464
	.byte	18,255,59,0,9
	.byte	'_Ifx_DMA',0,12,211,8,25,128,128,1,12
	.byte	'CLC',0
	.word	10011
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	3151
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	10133
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	10173
	.byte	20,2,35,12,12
	.byte	'MEMCON',0
	.word	10410
	.byte	4,2,35,32,12
	.byte	'reserved_24',0
	.word	10450
	.byte	28,2,35,36,12
	.byte	'ACCEN00',0
	.word	10989
	.byte	4,2,35,64,12
	.byte	'ACCEN01',0
	.word	11079
	.byte	4,2,35,68,12
	.byte	'ACCEN10',0
	.word	11649
	.byte	4,2,35,72,12
	.byte	'ACCEN11',0
	.word	11739
	.byte	4,2,35,76,12
	.byte	'ACCEN20',0
	.word	12310
	.byte	4,2,35,80,12
	.byte	'ACCEN21',0
	.word	12401
	.byte	4,2,35,84,12
	.byte	'ACCEN30',0
	.word	12972
	.byte	4,2,35,88,12
	.byte	'ACCEN31',0
	.word	13063
	.byte	4,2,35,92,12
	.byte	'reserved_60',0
	.word	13103
	.byte	192,1,2,35,96,12
	.byte	'BLK0',0
	.word	16889
	.byte	128,1,3,35,160,2,12
	.byte	'reserved_1A0',0
	.word	16894
	.byte	128,31,3,35,160,3,12
	.byte	'BLK1',0
	.word	16905
	.byte	128,1,3,35,160,34,12
	.byte	'reserved_11A0',0
	.word	7920
	.byte	96,3,35,160,35,12
	.byte	'OTSS',0
	.word	17009
	.byte	4,3,35,128,36,12
	.byte	'ERRINTR',0
	.word	17115
	.byte	4,3,35,132,36,12
	.byte	'PRR0',0
	.word	17249
	.byte	4,3,35,136,36,12
	.byte	'PRR1',0
	.word	17383
	.byte	4,3,35,140,36,12
	.byte	'TIME',0
	.word	17466
	.byte	4,3,35,144,36,12
	.byte	'reserved_1214',0
	.word	17506
	.byte	236,1,3,35,148,36,12
	.byte	'MODE',0
	.word	17621
	.byte	16,3,35,128,38,12
	.byte	'reserved_1310',0
	.word	17630
	.byte	240,9,3,35,144,38,12
	.byte	'HRR',0
	.word	17743
	.byte	64,3,35,128,48,12
	.byte	'reserved_1840',0
	.word	17752
	.byte	192,3,3,35,192,48,12
	.byte	'SUSENR',0
	.word	17870
	.byte	64,3,35,128,52,12
	.byte	'reserved_1A40',0
	.word	17752
	.byte	192,3,3,35,192,52,12
	.byte	'SUSACR',0
	.word	17986
	.byte	64,3,35,128,56,12
	.byte	'reserved_1C40',0
	.word	17752
	.byte	192,3,3,35,192,56,12
	.byte	'TSR',0
	.word	18310
	.byte	64,3,35,128,60,12
	.byte	'reserved_1E40',0
	.word	17752
	.byte	192,3,3,35,192,60,12
	.byte	'CH',0
	.word	19838
	.byte	128,4,3,35,128,64,12
	.byte	'reserved_2200',0
	.word	19843
	.byte	128,60,3,35,128,68,0,13
	.word	19854
	.byte	6
	.word	20556
	.byte	14,13,81,9,1,15
	.byte	'IfxDma_ChannelId_none',0,127,15
	.byte	'IfxDma_ChannelId_0',0,0,15
	.byte	'IfxDma_ChannelId_1',0,1,15
	.byte	'IfxDma_ChannelId_2',0,2,15
	.byte	'IfxDma_ChannelId_3',0,3,15
	.byte	'IfxDma_ChannelId_4',0,4,15
	.byte	'IfxDma_ChannelId_5',0,5,15
	.byte	'IfxDma_ChannelId_6',0,6,15
	.byte	'IfxDma_ChannelId_7',0,7,15
	.byte	'IfxDma_ChannelId_8',0,8,15
	.byte	'IfxDma_ChannelId_9',0,9,15
	.byte	'IfxDma_ChannelId_10',0,10,15
	.byte	'IfxDma_ChannelId_11',0,11,15
	.byte	'IfxDma_ChannelId_12',0,12,15
	.byte	'IfxDma_ChannelId_13',0,13,15
	.byte	'IfxDma_ChannelId_14',0,14,15
	.byte	'IfxDma_ChannelId_15',0,15,0,7
	.byte	'IfxDma_isChannelTransactionPending',0,3,11,242,10,20
	.word	464
	.byte	1,1,8
	.byte	'dma',0,11,242,10,64
	.word	20561
	.byte	8
	.byte	'channelId',0,11,242,10,86
	.word	20566
	.byte	3,0,2
	.byte	'IfxDma_startChannelTransaction',0,3,11,235,11,17,1,1,8
	.byte	'dma',0,11,235,11,57
	.word	20561
	.byte	8
	.byte	'channelId',0,11,235,11,79
	.word	20566
	.byte	3,0,2
	.byte	'IfxDma_setChannelDestinationAddress',0,3,11,144,11,17,1,1,8
	.byte	'dma',0,11,144,11,62
	.word	20561
	.byte	8
	.byte	'channelId',0,11,144,11,84
	.word	20566
	.byte	8
	.byte	'address',0,11,144,11,101
	.word	208
	.byte	3,0,19
	.word	202
	.byte	6
	.word	21187
	.byte	2
	.byte	'IfxDma_setChannelSourceAddress',0,3,11,203,11,17,1,1,8
	.byte	'dma',0,11,203,11,57
	.word	20561
	.byte	8
	.byte	'channelId',0,11,203,11,79
	.word	20566
	.byte	8
	.byte	'address',0,11,203,11,102
	.word	21192
	.byte	3,0,2
	.byte	'IfxDma_setChannelTransferCount',0,3,11,220,11,17,1,1,8
	.byte	'dma',0,11,220,11,57
	.word	20561
	.byte	8
	.byte	'channelId',0,11,220,11,79
	.word	20566
	.byte	8
	.byte	'transferCount',0,11,220,11,97
	.word	1534
	.byte	3,0,2
	.byte	'IfxDma_clearChannelInterrupt',0,3,11,128,9,17,1,1,8
	.byte	'dma',0,11,128,9,55
	.word	20561
	.byte	8
	.byte	'channelId',0,11,128,9,77
	.word	20566
	.byte	3,0,7
	.byte	'IfxDma_getAndClearChannelInterrupt',0,3,11,206,9,20
	.word	464
	.byte	1,1,8
	.byte	'dma',0,11,206,9,64
	.word	20561
	.byte	8
	.byte	'channelId',0,11,206,9,86
	.word	20566
	.byte	3,0,7
	.byte	'IfxDma_getChannelInterrupt',0,3,11,150,10,20
	.word	464
	.byte	1,1,8
	.byte	'dma',0,11,150,10,56
	.word	20561
	.byte	8
	.byte	'channelId',0,11,150,10,78
	.word	20566
	.byte	3,0,7
	.byte	'IfxDma_getSrcPointer',0,3,11,217,10,35
	.word	2097
	.byte	1,1,8
	.byte	'dma',0,11,217,10,65
	.word	20561
	.byte	8
	.byte	'channelId',0,11,217,10,87
	.word	20566
	.byte	3,0,9
	.byte	'_Ifx_QSPI_CLC_Bits',0,15,127,16,4,10
	.byte	'DISR',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,11,15,239,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21675
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_PISEL_Bits',0,15,254,1,16,4,10
	.byte	'MRIS',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'SRIS',0,1
	.word	464
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'SCIS',0,1
	.word	464
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'SLSIS',0,1
	.word	464
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	289
	.byte	17,0,2,35,0,0,11,15,207,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21832
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_ID_Bits',0,15,208,1,16,4,10
	.byte	'MODREV',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,15,159,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22055
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_GLOBALCON_Bits',0,15,189,1,16,4,10
	.byte	'TQ',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'SI',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EXPECT',0,1
	.word	464
	.byte	4,2,2,35,1,10
	.byte	'LB',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'DEL0',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'STROBE',0,1
	.word	464
	.byte	5,3,2,35,2,10
	.byte	'SRF',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'STIP',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'MS',0,1
	.word	464
	.byte	2,5,2,35,3,10
	.byte	'AREN',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'RESETS',0,1
	.word	464
	.byte	4,0,2,35,3,0,11,15,143,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22178
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_GLOBALCON1_Bits',0,15,170,1,16,4,10
	.byte	'ERRORENS',0,2
	.word	481
	.byte	9,7,2,35,0,10
	.byte	'TXEN',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'RXEN',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'PT1EN',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'PT2EN',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	464
	.byte	2,1,2,35,1,10
	.byte	'USREN',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'TXFIFOINT',0,1
	.word	464
	.byte	2,6,2,35,2,10
	.byte	'RXFIFOINT',0,1
	.word	464
	.byte	2,4,2,35,2,10
	.byte	'PT1',0,1
	.word	464
	.byte	3,1,2,35,2,10
	.byte	'PT2',0,2
	.word	481
	.byte	3,6,2,35,2,10
	.byte	'TXFM',0,1
	.word	464
	.byte	2,4,2,35,3,10
	.byte	'RXFM',0,1
	.word	464
	.byte	2,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	464
	.byte	2,0,2,35,3,0,11,15,151,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22482
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_BACON_Bits',0,15,88,16,4,10
	.byte	'LAST',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'IPRE',0,1
	.word	464
	.byte	3,4,2,35,0,10
	.byte	'IDLE',0,1
	.word	464
	.byte	3,1,2,35,0,10
	.byte	'LPRE',0,2
	.word	481
	.byte	3,6,2,35,0,10
	.byte	'LEAD',0,1
	.word	464
	.byte	3,3,2,35,1,10
	.byte	'TPRE',0,1
	.word	464
	.byte	3,0,2,35,1,10
	.byte	'TRAIL',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'PARTYP',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'UINT',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'MSB',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'BYTE',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'DL',0,2
	.word	481
	.byte	5,4,2,35,2,10
	.byte	'CS',0,1
	.word	464
	.byte	4,0,2,35,3,0,11,15,215,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22808
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_ECON_Bits',0,15,143,1,16,4,10
	.byte	'Q',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'A',0,1
	.word	464
	.byte	2,0,2,35,0,10
	.byte	'B',0,1
	.word	464
	.byte	2,6,2,35,1,10
	.byte	'C',0,1
	.word	464
	.byte	2,4,2,35,1,10
	.byte	'CPH',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'CPOL',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'PAREN',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	289
	.byte	15,2,2,35,0,10
	.byte	'BE',0,1
	.word	464
	.byte	2,0,2,35,3,0,11,15,255,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23081
	.byte	4,2,35,0,0,17,32
	.word	23245
	.byte	18,7,0,9
	.byte	'_Ifx_QSPI_STATUS_Bits',0,15,169,2,16,4,10
	.byte	'ERRORFLAGS',0,2
	.word	481
	.byte	9,7,2,35,0,10
	.byte	'TXF',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'RXF',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'PT1F',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'PT2F',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	464
	.byte	2,1,2,35,1,10
	.byte	'USRF',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'TXFIFOLEVEL',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'RXFIFOLEVEL',0,1
	.word	464
	.byte	3,2,2,35,2,10
	.byte	'SLAVESEL',0,2
	.word	481
	.byte	4,6,2,35,2,10
	.byte	'RPV',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'TPV',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'PHASE',0,1
	.word	464
	.byte	4,0,2,35,3,0,11,15,239,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23294
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_STATUS1_Bits',0,15,158,2,16,4,10
	.byte	'BITCOUNT',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	289
	.byte	20,4,2,35,0,10
	.byte	'BRDEN',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'BRD',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'SPDEN',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'SPD',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,15,247,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23599
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_SSOC_Bits',0,15,151,2,16,4,10
	.byte	'AOL',0,2
	.word	481
	.byte	16,0,2,35,0,10
	.byte	'OEN',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,15,231,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23775
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_FLAGSCLEAR_Bits',0,15,157,1,16,4,10
	.byte	'ERRORCLEARS',0,2
	.word	481
	.byte	9,7,2,35,0,10
	.byte	'TXC',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'RXC',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'PT1C',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'PT2C',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	464
	.byte	2,1,2,35,1,10
	.byte	'USRC',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,15,135,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23872
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_XXLCON_Bits',0,15,187,2,16,4,10
	.byte	'XDL',0,2
	.word	481
	.byte	16,0,2,35,0,10
	.byte	'BYTECOUNT',0,2
	.word	481
	.byte	16,0,2,35,2,0,11,15,255,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24092
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_MIXENTRY_Bits',0,15,238,1,16,4,10
	.byte	'E',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,15,191,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24197
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_BACONENTRY_Bits',0,15,106,16,4,10
	.byte	'E',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,15,223,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24281
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_DATAENTRY_Bits',0,15,137,1,16,4,10
	.byte	'E',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,15,247,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24366
	.byte	4,2,35,0,0,17,32
	.word	24411
	.byte	18,7,0,9
	.byte	'_Ifx_QSPI_RXEXIT_Bits',0,15,139,2,16,4,10
	.byte	'E',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,15,215,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24460
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_RXEXITD_Bits',0,15,145,2,16,4,10
	.byte	'E',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,15,223,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24542
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_CAPCON_Bits',0,15,112,16,4,10
	.byte	'CAP',0,2
	.word	481
	.byte	15,1,2,35,0,10
	.byte	'OVF',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EDGECON',0,1
	.word	464
	.byte	2,6,2,35,2,10
	.byte	'INS',0,1
	.word	464
	.byte	2,4,2,35,2,10
	.byte	'EN',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,2
	.word	481
	.byte	7,4,2,35,2,10
	.byte	'CAPC',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'CAPS',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'CAPF',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'CAPSEL',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,15,231,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24625
	.byte	4,2,35,0,0,17,68
	.word	464
	.byte	18,67,0,9
	.byte	'_Ifx_QSPI_OCS_Bits',0,15,244,1,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	24,8,2,35,0,10
	.byte	'SUS',0,1
	.word	464
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	464
	.byte	2,0,2,35,3,0,11,15,199,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24869
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_KRSTCLR_Bits',0,15,231,1,16,4,10
	.byte	'CLR',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,11,15,183,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25030
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_KRST1_Bits',0,15,224,1,16,4,10
	.byte	'RST',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,11,15,175,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25137
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_KRST0_Bits',0,15,216,1,16,4,10
	.byte	'RST',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	30,0,2,35,0,0,11,15,167,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25242
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_ACCEN1_Bits',0,15,82,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,11,15,207,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25366
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI_ACCEN0_Bits',0,15,45,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	464
	.byte	1,0,2,35,3,0,11,15,199,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25456
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_QSPI',0,15,143,4,25,128,2,12
	.byte	'CLC',0
	.word	21792
	.byte	4,2,35,0,12
	.byte	'PISEL',0
	.word	22015
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	22138
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3151
	.byte	4,2,35,12,12
	.byte	'GLOBALCON',0
	.word	22442
	.byte	4,2,35,16,12
	.byte	'GLOBALCON1',0
	.word	22768
	.byte	4,2,35,20,12
	.byte	'BACON',0
	.word	23041
	.byte	4,2,35,24,12
	.byte	'reserved_1C',0
	.word	3151
	.byte	4,2,35,28,12
	.byte	'ECON',0
	.word	23285
	.byte	32,2,35,32,12
	.byte	'STATUS',0
	.word	23559
	.byte	4,2,35,64,12
	.byte	'STATUS1',0
	.word	23735
	.byte	4,2,35,68,12
	.byte	'SSOC',0
	.word	23832
	.byte	4,2,35,72,12
	.byte	'reserved_4C',0
	.word	4970
	.byte	8,2,35,76,12
	.byte	'FLAGSCLEAR',0
	.word	24052
	.byte	4,2,35,84,12
	.byte	'XXLCON',0
	.word	24157
	.byte	4,2,35,88,12
	.byte	'MIXENTRY',0
	.word	24241
	.byte	4,2,35,92,12
	.byte	'BACONENTRY',0
	.word	24326
	.byte	4,2,35,96,12
	.byte	'DATAENTRY',0
	.word	24451
	.byte	32,2,35,100,12
	.byte	'reserved_84',0
	.word	5310
	.byte	12,3,35,132,1,12
	.byte	'RXEXIT',0
	.word	24502
	.byte	4,3,35,144,1,12
	.byte	'RXEXITD',0
	.word	24585
	.byte	4,3,35,148,1,12
	.byte	'reserved_98',0
	.word	4970
	.byte	8,3,35,152,1,12
	.byte	'CAPCON',0
	.word	24820
	.byte	4,3,35,160,1,12
	.byte	'reserved_A4',0
	.word	24860
	.byte	68,3,35,164,1,12
	.byte	'OCS',0
	.word	24990
	.byte	4,3,35,232,1,12
	.byte	'KRSTCLR',0
	.word	25097
	.byte	4,3,35,236,1,12
	.byte	'KRST1',0
	.word	25202
	.byte	4,3,35,240,1,12
	.byte	'KRST0',0
	.word	25326
	.byte	4,3,35,244,1,12
	.byte	'ACCEN1',0
	.word	25416
	.byte	4,3,35,248,1,12
	.byte	'ACCEN0',0
	.word	25986
	.byte	4,3,35,252,1,0,13
	.word	26026
	.byte	6
	.word	26570
	.byte	7
	.byte	'IfxQspi_readReceiveFifo',0,3,14,195,7,19
	.word	1534
	.byte	1,1,8
	.byte	'qspi',0,14,195,7,53
	.word	26575
	.byte	3,0,2
	.byte	'IfxQspi_writeTransmitFifo',0,3,14,154,8,17,1,1,8
	.byte	'qspi',0,14,154,8,53
	.word	26575
	.byte	8
	.byte	'data',0,14,154,8,66
	.word	1534
	.byte	3,0,4
	.byte	'float',0,4,4,7
	.byte	'IfxQspi_getModuleFrequency',0,3,14,207,6,18
	.word	26696
	.byte	1,1,8
	.byte	'qspi',0,14,207,6,55
	.word	26575
	.byte	3,0,14,14,143,1,9,1,15
	.byte	'IfxQspi_Phase_wait',0,0,15
	.byte	'IfxQspi_Phase_idleA',0,1,15
	.byte	'IfxQspi_Phase_idleB',0,2,15
	.byte	'IfxQspi_Phase_lead',0,3,15
	.byte	'IfxQspi_Phase_data',0,4,15
	.byte	'IfxQspi_Phase_trail',0,5,15
	.byte	'IfxQspi_Phase_expect',0,6,15
	.byte	'IfxQspi_Phase_leadStrobe',0,7,15
	.byte	'IfxQspi_Phase_trailStrobe',0,8,0,7
	.byte	'IfxQspi_getPhase',0,3,14,213,6,26
	.word	26760
	.byte	1,1,8
	.byte	'qspi',0,14,213,6,53
	.word	26575
	.byte	3,0,2
	.byte	'IfxQspi_writeBasicConfiguration',0,3,14,243,7,17,1,1,8
	.byte	'qspi',0,14,243,7,59
	.word	26575
	.byte	8
	.byte	'baconVal',0,14,243,7,72
	.word	1534
	.byte	3,0,14,14,59,9,1,15
	.byte	'IfxQspi_ChannelId_0',0,0,15
	.byte	'IfxQspi_ChannelId_1',0,1,15
	.byte	'IfxQspi_ChannelId_2',0,2,15
	.byte	'IfxQspi_ChannelId_3',0,3,15
	.byte	'IfxQspi_ChannelId_4',0,4,15
	.byte	'IfxQspi_ChannelId_5',0,5,15
	.byte	'IfxQspi_ChannelId_6',0,6,15
	.byte	'IfxQspi_ChannelId_7',0,7,15
	.byte	'IfxQspi_ChannelId_8',0,8,15
	.byte	'IfxQspi_ChannelId_9',0,9,15
	.byte	'IfxQspi_ChannelId_10',0,10,15
	.byte	'IfxQspi_ChannelId_11',0,11,15
	.byte	'IfxQspi_ChannelId_12',0,12,15
	.byte	'IfxQspi_ChannelId_13',0,13,15
	.byte	'IfxQspi_ChannelId_14',0,14,0,2
	.byte	'IfxQspi_writeExtendedConfiguration',0,3,14,141,8,17,1,1,8
	.byte	'qspi',0,14,141,8,62
	.word	26575
	.byte	8
	.byte	'channelId',0,14,141,8,86
	.word	27093
	.byte	8
	.byte	'econVal',0,14,141,8,104
	.word	1534
	.byte	3,0,2
	.byte	'IfxQspi_writeMixedDataTransmitFifo',0,3,14,148,8,17,1,1,8
	.byte	'qspi',0,14,148,8,62
	.word	26575
	.byte	8
	.byte	'mixEntryVal',0,14,148,8,75
	.word	1534
	.byte	3,0,7
	.byte	'IfxQspi_getIndex',0,3,14,191,6,19
	.word	1534
	.byte	1,1,8
	.byte	'qspi',0,14,191,6,46
	.word	26575
	.byte	3,0,13
	.word	305
	.byte	20
	.byte	'__mfcr',0
	.word	27654
	.byte	1,1,1,1,21
	.word	305
	.byte	0,22
	.byte	'__nop',0,1,1,1,1,22
	.byte	'__disable',0,1,1,1,1,22
	.byte	'__enable',0,1,1,1,1,23
	.word	147
	.byte	3,0,23
	.word	213
	.byte	24
	.word	231
	.byte	3,0,23
	.word	246
	.byte	24
	.word	260
	.byte	24
	.word	273
	.byte	3,0,23
	.word	1051
	.byte	24
	.word	1091
	.byte	24
	.word	1109
	.byte	3,0,23
	.word	1129
	.byte	24
	.word	1167
	.byte	24
	.word	1185
	.byte	3,0,23
	.word	1205
	.byte	24
	.word	1256
	.byte	3,0,23
	.word	1331
	.byte	3,0,23
	.word	1365
	.byte	3,0,23
	.word	1407
	.byte	16,25
	.word	1365
	.byte	26
	.word	1405
	.byte	0,3,0,0,23
	.word	1448
	.byte	3,0,23
	.word	1482
	.byte	24
	.word	1515
	.byte	3,0,23
	.word	1555
	.byte	24
	.word	1596
	.byte	3,0,23
	.word	1615
	.byte	24
	.word	1670
	.byte	3,0,23
	.word	1689
	.byte	24
	.word	1729
	.byte	24
	.word	1746
	.byte	3,0,23
	.word	2102
	.byte	24
	.word	2130
	.byte	3,0,23
	.word	9251
	.byte	24
	.word	9283
	.byte	24
	.word	9297
	.byte	24
	.word	9315
	.byte	3,0,23
	.word	9617
	.byte	24
	.word	9650
	.byte	24
	.word	9664
	.byte	24
	.word	9682
	.byte	24
	.word	9696
	.byte	3,0,23
	.word	9816
	.byte	24
	.word	9844
	.byte	24
	.word	9858
	.byte	24
	.word	9876
	.byte	3,0,23
	.word	20938
	.byte	24
	.word	20985
	.byte	24
	.word	20998
	.byte	3,0,23
	.word	21019
	.byte	24
	.word	21058
	.byte	24
	.word	21071
	.byte	3,0,23
	.word	21092
	.byte	24
	.word	21136
	.byte	24
	.word	21149
	.byte	24
	.word	21168
	.byte	3,0,23
	.word	21197
	.byte	24
	.word	21236
	.byte	24
	.word	21249
	.byte	24
	.word	21268
	.byte	3,0,23
	.word	21287
	.byte	24
	.word	21326
	.byte	24
	.word	21339
	.byte	24
	.word	21358
	.byte	3,0,23
	.word	21383
	.byte	24
	.word	21420
	.byte	24
	.word	21433
	.byte	3,0,23
	.word	21454
	.byte	24
	.word	21501
	.byte	24
	.word	21514
	.byte	3,0,23
	.word	21535
	.byte	24
	.word	21574
	.byte	24
	.word	21587
	.byte	3,0,23
	.word	21608
	.byte	24
	.word	21641
	.byte	24
	.word	21654
	.byte	3,0,23
	.word	26580
	.byte	24
	.word	26616
	.byte	3,0,23
	.word	26632
	.byte	24
	.word	26666
	.byte	24
	.word	26680
	.byte	3,0,23
	.word	26705
	.byte	24
	.word	26744
	.byte	3,0,23
	.word	26974
	.byte	24
	.word	27003
	.byte	3,0,23
	.word	27019
	.byte	24
	.word	27059
	.byte	24
	.word	27073
	.byte	3,0,23
	.word	27434
	.byte	24
	.word	27477
	.byte	24
	.word	27491
	.byte	24
	.word	27510
	.byte	3,0,23
	.word	27529
	.byte	24
	.word	27572
	.byte	24
	.word	27586
	.byte	3,0,23
	.word	27609
	.byte	24
	.word	27638
	.byte	3,0,27
	.byte	'pvoid',0,18,40,28
	.word	208
	.byte	6
	.word	.L108-.L18
	.byte	28,17,108,18,1,10
	.byte	'onTransfer',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'byteAccess',0,1
	.word	464
	.byte	1,6,2,35,0,0,13
	.word	28288
	.byte	28,17,167,1,9,4,10
	.byte	'baudrate',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'phase',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'receive',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'transmit',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved',0,4
	.word	1534
	.byte	28,0,2,35,0,0,4
	.byte	'long int',0,4,5,4
	.byte	'short int',0,2,5,28,17,114,9,8,12
	.byte	'data',0
	.word	208
	.byte	4,2,35,0,12
	.byte	'remaining',0
	.word	28458
	.byte	2,2,35,4,0,29,1,1,21
	.word	208
	.byte	0,6
	.word	28510
	.byte	27
	.byte	'SpiIf_Cbk',0,17,196,1,16
	.word	28519
	.byte	6
	.word	.L109-.L18
	.byte	29,1,1,21
	.word	28543
	.byte	0,6
	.word	28548
	.byte	27
	.byte	'TxRxHandler',0,17,197,1,16
	.word	28557
.L109:
	.byte	9
	.byte	'SpiIf_Ch_',0,17,199,1,8,48,12
	.byte	'driver',0
	.word	28283
	.byte	4,2,35,0,12
	.byte	'flags',0
	.word	28338
	.byte	1,2,35,4,12
	.byte	'errorChecks',0
	.word	28343
	.byte	4,2,35,6,12
	.byte	'baudrate',0
	.word	28446
	.byte	4,2,35,10,12
	.byte	'tx',0
	.word	28471
	.byte	8,2,35,16,12
	.byte	'rx',0
	.word	28471
	.byte	8,2,35,24,12
	.byte	'onExchangeEnd',0
	.word	28524
	.byte	4,2,35,32,12
	.byte	'callbackData',0
	.word	208
	.byte	4,2,35,36,12
	.byte	'txHandler',0
	.word	28562
	.byte	4,2,35,40,12
	.byte	'rxHandler',0
	.word	28562
	.byte	4,2,35,44,0,6
	.word	28583
	.byte	14,17,59,9,1,15
	.byte	'SpiIf_Status_ok',0,0,15
	.byte	'SpiIf_Status_busy',0,1,15
	.byte	'SpiIf_Status_unknown',0,2,0,30
	.word	28782
	.byte	1,1,21
	.word	28543
	.byte	21
	.word	21192
	.byte	21
	.word	208
	.byte	21
	.word	28458
	.byte	0,6
	.word	28849
	.byte	27
	.byte	'SpiIf_Exchange',0,17,128,1,24
	.word	28877
	.byte	30
	.word	28782
	.byte	1,1,21
	.word	28543
	.byte	0,6
	.word	28906
	.byte	27
	.byte	'SpiIf_GetStatus',0,17,129,1,24
	.word	28919
	.byte	6
	.word	.L108-.L18
	.byte	29,1,1,21
	.word	28949
	.byte	0,6
	.word	28954
	.byte	27
	.byte	'SpiIf_OnEvent',0,17,130,1,24
	.word	28963
	.byte	28,17,132,1,9,20,12
	.byte	'exchange',0
	.word	28882
	.byte	4,2,35,0,12
	.byte	'getStatus',0
	.word	28924
	.byte	4,2,35,4,12
	.byte	'onTx',0
	.word	28968
	.byte	4,2,35,8,12
	.byte	'onRx',0
	.word	28968
	.byte	4,2,35,12,12
	.byte	'onError',0
	.word	28968
	.byte	4,2,35,16,0
.L108:
	.byte	9
	.byte	'SpiIf_',0,17,141,1,8,40,12
	.byte	'driver',0
	.word	28269
	.byte	4,2,35,0,12
	.byte	'sending',0
	.word	1534
	.byte	4,2,35,4,12
	.byte	'activeChannel',0
	.word	28777
	.byte	4,2,35,8,12
	.byte	'txCount',0
	.word	1534
	.byte	4,2,35,12,12
	.byte	'rxCount',0
	.word	1534
	.byte	4,2,35,16,12
	.byte	'functions',0
	.word	28991
	.byte	20,2,35,20,0,13
	.word	19688
	.byte	6
	.word	29203
	.byte	28,19,198,3,9,12,12
	.byte	'dma',0
	.word	20561
	.byte	4,2,35,0,12
	.byte	'channelId',0
	.word	20566
	.byte	1,2,35,4,12
	.byte	'channel',0
	.word	29208
	.byte	4,2,35,8,0,28,16,162,4,9,28,12
	.byte	'rxDmaChannel',0
	.word	29213
	.byte	12,2,35,0,12
	.byte	'txDmaChannel',0
	.word	29213
	.byte	12,2,35,12,12
	.byte	'rxDmaChannelId',0
	.word	20566
	.byte	1,2,35,24,12
	.byte	'txDmaChannelId',0
	.word	20566
	.byte	1,2,35,25,12
	.byte	'useDma',0
	.word	464
	.byte	1,2,35,26,0,28,16,221,4,9,72,12
	.byte	'base',0
	.word	29080
	.byte	40,2,35,0,12
	.byte	'qspi',0
	.word	26575
	.byte	4,2,35,40,12
	.byte	'dma',0
	.word	29269
	.byte	28,2,35,44,0,6
	.word	29384
	.byte	14,17,121,9,1,15
	.byte	'SpiIf_Mode_master',0,0,15
	.byte	'SpiIf_Mode_slave',0,1,15
	.byte	'SpiIf_Mode_undefined',0,2,0,14,20,49,9,1,15
	.byte	'IfxSrc_Tos_cpu0',0,0,15
	.byte	'IfxSrc_Tos_dma',0,1,0,28,17,151,1,9,20,12
	.byte	'mode',0
	.word	29437
	.byte	1,2,35,0,12
	.byte	'rxPriority',0
	.word	481
	.byte	2,2,35,2,12
	.byte	'txPriority',0
	.word	481
	.byte	2,2,35,4,12
	.byte	'erPriority',0
	.word	481
	.byte	2,2,35,6,12
	.byte	'isrProvider',0
	.word	29505
	.byte	1,2,35,8,12
	.byte	'bufferSize',0
	.word	28458
	.byte	2,2,35,10,12
	.byte	'buffer',0
	.word	208
	.byte	4,2,35,12,12
	.byte	'maximumBaudrate',0
	.word	26696
	.byte	4,2,35,16,0,14,14,135,1,9,1,15
	.byte	'IfxQspi_PauseRunTransition_pause',0,0,15
	.byte	'IfxQspi_PauseRunTransition_run',0,1,0,14,14,248,1,9,1,15
	.byte	'IfxQspi_TxFifoInt_1',0,0,15
	.byte	'IfxQspi_TxFifoInt_2',0,1,15
	.byte	'IfxQspi_TxFifoInt_3',0,2,15
	.byte	'IfxQspi_TxFifoInt_4',0,3,0,14,14,182,1,9,1,15
	.byte	'IfxQspi_RxFifoInt_0',0,0,15
	.byte	'IfxQspi_RxFifoInt_1',0,1,15
	.byte	'IfxQspi_RxFifoInt_2',0,2,15
	.byte	'IfxQspi_RxFifoInt_3',0,3,0,28,9,149,1,9,8,12
	.byte	'port',0
	.word	9121
	.byte	4,2,35,0,12
	.byte	'pinIndex',0
	.word	464
	.byte	1,2,35,4,0,28,21,95,15,16,12
	.byte	'module',0
	.word	26575
	.byte	4,2,35,0,12
	.byte	'pin',0
	.word	29974
	.byte	8,2,35,4,12
	.byte	'select',0
	.word	9400
	.byte	1,2,35,12,0,19
	.word	30013
	.byte	6
	.word	30064
	.byte	28,21,87,15,16,12
	.byte	'module',0
	.word	26575
	.byte	4,2,35,0,12
	.byte	'pin',0
	.word	29974
	.byte	8,2,35,4,12
	.byte	'select',0
	.word	9400
	.byte	1,2,35,12,0,19
	.word	30074
	.byte	6
	.word	30125
	.byte	14,18,94,9,1,15
	.byte	'Ifx_RxSel_a',0,0,15
	.byte	'Ifx_RxSel_b',0,1,15
	.byte	'Ifx_RxSel_c',0,2,15
	.byte	'Ifx_RxSel_d',0,3,15
	.byte	'Ifx_RxSel_e',0,4,15
	.byte	'Ifx_RxSel_f',0,5,15
	.byte	'Ifx_RxSel_g',0,6,15
	.byte	'Ifx_RxSel_h',0,7,0,28,21,39,15,16,12
	.byte	'module',0
	.word	26575
	.byte	4,2,35,0,12
	.byte	'pin',0
	.word	29974
	.byte	8,2,35,4,12
	.byte	'select',0
	.word	30135
	.byte	1,2,35,12,0,19
	.word	30253
	.byte	6
	.word	30304
	.byte	14,9,115,9,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,15
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,15
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,15
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,15
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,28,16,204,4,9,24,12
	.byte	'sclk',0
	.word	30069
	.byte	4,2,35,0,12
	.byte	'sclkMode',0
	.word	9331
	.byte	1,2,35,4,12
	.byte	'mtsr',0
	.word	30130
	.byte	4,2,35,8,12
	.byte	'mtsrMode',0
	.word	9331
	.byte	1,2,35,12,12
	.byte	'mrst',0
	.word	30309
	.byte	4,2,35,16,12
	.byte	'mrstMode',0
	.word	9126
	.byte	1,2,35,20,12
	.byte	'pinDriver',0
	.word	30314
	.byte	1,2,35,21,0,19
	.word	30604
	.byte	6
	.word	30726
	.byte	28,16,173,4,9,4,12
	.byte	'rxDmaChannelId',0
	.word	20566
	.byte	1,2,35,0,12
	.byte	'txDmaChannelId',0
	.word	20566
	.byte	1,2,35,1,12
	.byte	'useDma',0
	.word	464
	.byte	1,2,35,2,0
.L72:
	.byte	28,16,130,5,9,40,12
	.byte	'base',0
	.word	29546
	.byte	20,2,35,0,12
	.byte	'qspi',0
	.word	26575
	.byte	4,2,35,20,12
	.byte	'allowSleepMode',0
	.word	464
	.byte	1,2,35,24,12
	.byte	'pauseOnBaudrateSpikeErrors',0
	.word	464
	.byte	1,2,35,25,12
	.byte	'pauseRunTransition',0
	.word	29709
	.byte	1,2,35,26,12
	.byte	'txFifoThreshold',0
	.word	29784
	.byte	1,2,35,27,12
	.byte	'rxFifoThreshold',0
	.word	29879
	.byte	1,2,35,28,12
	.byte	'pins',0
	.word	30731
	.byte	4,2,35,32,12
	.byte	'dma',0
	.word	30736
	.byte	4,2,35,36,0,19
	.word	30807
	.byte	6
	.word	31007
	.byte	31
	.byte	'IfxQspi_SpiMaster_initModule',0,16,160,5,17,1,1,1,1,8
	.byte	'handle',0,16,160,5,65
	.word	29432
	.byte	8
	.byte	'config',0,16,160,5,105
	.word	31012
	.byte	0,6
	.word	202
	.byte	6
	.word	28510
	.byte	6
	.word	28548
	.byte	6
	.word	28849
	.byte	6
	.word	28906
	.byte	6
	.word	28954
	.byte	6
	.word	30807
	.byte	31
	.byte	'IfxQspi_SpiMaster_initModuleConfig',0,16,170,5,17,1,1,1,1,8
	.byte	'config',0,16,170,5,78
	.word	31118
	.byte	8
	.byte	'qspi',0,16,170,5,96
	.word	26575
	.byte	0,6
	.word	.L110-.L18
	.byte	29,1,1,21
	.word	31198
	.byte	0,6
	.word	31203
	.byte	27
	.byte	'IfxQspi_SpiMaster_AutoSlso',0,16,236,3,44
	.word	31212
	.byte	14,18,80,9,1,15
	.byte	'Ifx_ActiveState_low',0,0,15
	.byte	'Ifx_ActiveState_high',0,1,0,14,16,244,3,9,1,15
	.byte	'IfxQspi_SpiMaster_ChannelBasedCs_disabled',0,0,15
	.byte	'IfxQspi_SpiMaster_ChannelBasedCs_enabled',0,1,0,14,16,250,3,9,1,15
	.byte	'IfxQspi_SpiMaster_Mode_short',0,0,15
	.byte	'IfxQspi_SpiMaster_Mode_long',0,1,15
	.byte	'IfxQspi_SpiMaster_Mode_shortContinuous',0,2,15
	.byte	'IfxQspi_SpiMaster_Mode_longContinuous',0,3,15
	.byte	'IfxQspi_SpiMaster_Mode_xxl',0,4,0,28,16,182,4,9,1,10
	.byte	'parityError',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'configurationError',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'baudrateError',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'txFifoOverflowError',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'txFifoUnderflowError',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'rxFifoOverflowError',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'rxFifoUnderflowError',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'expectTimeoutError',0,1
	.word	464
	.byte	1,0,2,35,0,0
.L110:
	.byte	9
	.byte	'IfxQspi_SpiMaster_Channel_s',0,16,240,4,8,76,12
	.byte	'base',0
	.word	28583
	.byte	48,2,35,0,12
	.byte	'bacon',0
	.word	23041
	.byte	4,2,35,48,12
	.byte	'slso',0
	.word	29974
	.byte	8,2,35,52,12
	.byte	'activateSlso',0
	.word	31217
	.byte	4,2,35,60,12
	.byte	'deactivateSlso',0
	.word	31217
	.byte	4,2,35,64,12
	.byte	'channelId',0
	.word	27093
	.byte	1,2,35,68,12
	.byte	'slsoActiveState',0
	.word	31253
	.byte	1,2,35,69,12
	.byte	'dataWidth',0
	.word	464
	.byte	1,2,35,70,12
	.byte	'firstWrite',0
	.word	464
	.byte	1,2,35,71,12
	.byte	'channelBasedCs',0
	.word	31304
	.byte	1,2,35,72,12
	.byte	'mode',0
	.word	31398
	.byte	1,2,35,73,12
	.byte	'errorFlags',0
	.word	31576
	.byte	1,2,35,74,0,6
	.word	31817
	.byte	28,17,177,1,9,4,10
	.byte	'enabled',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'autoCS',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'loopback',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'clockPolarity',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'shiftClock',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'dataHeading',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'dataWidth',0,2
	.word	481
	.byte	6,4,2,35,0,10
	.byte	'csActiveLevel',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'csLeadDelay',0,1
	.word	464
	.byte	3,0,2,35,1,10
	.byte	'csTrailDelay',0,1
	.word	464
	.byte	3,5,2,35,2,10
	.byte	'csInactiveDelay',0,1
	.word	464
	.byte	3,2,2,35,2,10
	.byte	'parityCheck',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'parityMode',0,1
	.word	464
	.byte	1,0,2,35,2,0,9
	.byte	'SpiIf_ChConfig_',0,17,213,1,8,16,12
	.byte	'driver',0
	.word	28283
	.byte	4,2,35,0,12
	.byte	'baudrate',0
	.word	26696
	.byte	4,2,35,4,12
	.byte	'mode',0
	.word	32087
	.byte	4,2,35,8,12
	.byte	'errorChecks',0
	.word	28343
	.byte	4,2,35,12,0,28,21,63,15,16,12
	.byte	'module',0
	.word	26575
	.byte	4,2,35,0,12
	.byte	'pin',0
	.word	29974
	.byte	8,2,35,4,12
	.byte	'select',0
	.word	30135
	.byte	1,2,35,12,0,19
	.word	32478
	.byte	6
	.word	32529
	.byte	28,16,141,4,9,8,12
	.byte	'pin',0
	.word	32534
	.byte	4,2,35,0,12
	.byte	'mode',0
	.word	9126
	.byte	1,2,35,4,0,28,21,103,15,20,12
	.byte	'module',0
	.word	26575
	.byte	4,2,35,0,12
	.byte	'slsoNr',0
	.word	28446
	.byte	4,2,35,4,12
	.byte	'pin',0
	.word	29974
	.byte	8,2,35,8,12
	.byte	'select',0
	.word	9400
	.byte	1,2,35,16,0,19
	.word	32573
	.byte	6
	.word	32640
	.byte	28,16,149,4,9,8,12
	.byte	'pin',0
	.word	32645
	.byte	4,2,35,0,12
	.byte	'mode',0
	.word	9331
	.byte	1,2,35,4,12
	.byte	'driver',0
	.word	30314
	.byte	1,2,35,5,0,11,16,196,4,9,8,12
	.byte	'input',0
	.word	32539
	.byte	8,2,35,0,12
	.byte	'output',0
	.word	32650
	.byte	8,2,35,0,0
.L74:
	.byte	28,16,230,4,9,28,12
	.byte	'base',0
	.word	32386
	.byte	16,2,35,0,12
	.byte	'sls',0
	.word	32700
	.byte	8,2,35,16,12
	.byte	'channelBasedCs',0
	.word	31304
	.byte	1,2,35,24,12
	.byte	'mode',0
	.word	31398
	.byte	1,2,35,25,0,19
	.word	32738
	.byte	6
	.word	32810
	.byte	32
	.byte	'IfxQspi_SpiMaster_initChannel',0,16,189,5,25
	.word	28782
	.byte	1,1,1,1,8
	.byte	'chHandle',0,16,189,5,82
	.word	32082
	.byte	8
	.byte	'chConfig',0,16,189,5,131,1
	.word	32815
	.byte	0,6
	.word	31203
	.byte	6
	.word	32738
	.byte	31
	.byte	'IfxQspi_SpiMaster_initChannelConfig',0,16,199,5,17,1,1,1,1,8
	.byte	'chConfig',0,16,199,5,86
	.word	32906
	.byte	8
	.byte	'handle',0,16,199,5,115
	.word	29432
	.byte	0,31
	.byte	'IfxQspi_SpiMaster_isrError',0,16,128,6,17,1,1,1,1,8
	.byte	'handle',0,16,128,6,63
	.word	29432
	.byte	0,31
	.byte	'IfxQspi_SpiMaster_isrReceive',0,16,140,6,17,1,1,1,1,8
	.byte	'handle',0,16,140,6,65
	.word	29432
	.byte	0,31
	.byte	'IfxQspi_SpiMaster_isrTransmit',0,16,146,6,17,1,1,1,1,8
	.byte	'handle',0,16,146,6,66
	.word	29432
	.byte	0,9
	.byte	'_Ifx_CPU_ICR_Bits',0,22,246,2,16,4,10
	.byte	'CCPN',0,4
	.word	312
	.byte	10,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	312
	.byte	5,17,2,35,0,10
	.byte	'IE',0,4
	.word	312
	.byte	1,16,2,35,0,10
	.byte	'PIPN',0,4
	.word	312
	.byte	10,6,2,35,0,10
	.byte	'reserved_26',0,4
	.word	312
	.byte	6,0,2,35,0,0
.L62:
	.byte	11,22,223,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33155
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,22,92,16,4,10
	.byte	'CORE_ID',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	312
	.byte	29,0,2,35,0,0
.L80:
	.byte	11,22,223,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33312
	.byte	4,2,35,0,0
.L83:
	.byte	19
	.word	30604
	.byte	27
	.byte	'__wchar_t',0,23,1,1
	.word	28458
	.byte	27
	.byte	'__size_t',0,23,1,1
	.word	289
	.byte	27
	.byte	'__ptrdiff_t',0,23,1,1
	.word	305
	.byte	33,1,6
	.word	33481
	.byte	27
	.byte	'__codeptr',0,23,1,1
	.word	33483
	.byte	27
	.byte	'__intptr_t',0,23,1,1
	.word	305
	.byte	27
	.byte	'__uintptr_t',0,23,1,1
	.word	289
	.byte	27
	.byte	'_iob_flag_t',0,24,82,25
	.word	481
	.byte	27
	.byte	'uint8',0,25,89,24
	.word	464
	.byte	27
	.byte	'sint16',0,25,90,24
	.word	28458
	.byte	27
	.byte	'uint16',0,25,91,24
	.word	481
	.byte	27
	.byte	'sint32',0,25,92,24
	.word	28446
	.byte	27
	.byte	'uint32',0,25,93,24
	.word	1534
	.byte	27
	.byte	'float32',0,25,94,24
	.word	26696
	.byte	27
	.byte	'boolean',0,25,104,24
	.word	464
	.byte	4
	.byte	'long long int',0,8,5,27
	.byte	'sint64',0,18,36,28
	.word	33671
	.byte	27
	.byte	'uint64',0,18,37,28
	.word	176
	.byte	27
	.byte	'Ifx_TickTime',0,18,43,28
	.word	33671
	.byte	27
	.byte	'Ifx_SizeT',0,18,56,16
	.word	28458
	.byte	27
	.byte	'Ifx_Priority',0,18,67,16
	.word	481
	.byte	27
	.byte	'Ifx_ActiveState',0,18,84,3
	.word	31253
	.byte	14,18,86,9,1,15
	.byte	'Ifx_ParityMode_even',0,0,15
	.byte	'Ifx_ParityMode_odd',0,1,0,27
	.byte	'Ifx_ParityMode',0,18,90,3
	.word	33802
	.byte	27
	.byte	'Ifx_RxSel',0,18,104,3
	.word	30135
	.byte	9
	.byte	'_Ifx_CPU_A_Bits',0,22,45,16,4,10
	.byte	'ADDR',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_A_Bits',0,22,48,3
	.word	33892
	.byte	9
	.byte	'_Ifx_CPU_BIV_Bits',0,22,51,16,4,10
	.byte	'VSS',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'BIV',0,4
	.word	312
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_BIV_Bits',0,22,55,3
	.word	33953
	.byte	9
	.byte	'_Ifx_CPU_BTV_Bits',0,22,58,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'BTV',0,4
	.word	312
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_BTV_Bits',0,22,62,3
	.word	34032
	.byte	9
	.byte	'_Ifx_CPU_CCNT_Bits',0,22,65,16,4,10
	.byte	'CountValue',0,4
	.word	312
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	312
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_CCNT_Bits',0,22,69,3
	.word	34118
	.byte	9
	.byte	'_Ifx_CPU_CCTRL_Bits',0,22,72,16,4,10
	.byte	'CM',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'CE',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'M1',0,4
	.word	312
	.byte	3,27,2,35,0,10
	.byte	'M2',0,4
	.word	312
	.byte	3,24,2,35,0,10
	.byte	'M3',0,4
	.word	312
	.byte	3,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	312
	.byte	21,0,2,35,0,0,27
	.byte	'Ifx_CPU_CCTRL_Bits',0,22,80,3
	.word	34207
	.byte	9
	.byte	'_Ifx_CPU_COMPAT_Bits',0,22,83,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'RM',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'SP',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	312
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_COMPAT_Bits',0,22,89,3
	.word	34353
	.byte	27
	.byte	'Ifx_CPU_CORE_ID_Bits',0,22,96,3
	.word	33312
	.byte	9
	.byte	'_Ifx_CPU_CPR_L_Bits',0,22,99,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	312
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_CPR_L_Bits',0,22,103,3
	.word	34509
	.byte	9
	.byte	'_Ifx_CPU_CPR_U_Bits',0,22,106,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	312
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_CPR_U_Bits',0,22,110,3
	.word	34602
	.byte	9
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,22,113,16,4,10
	.byte	'MODREV',0,4
	.word	312
	.byte	8,24,2,35,0,10
	.byte	'MOD_32B',0,4
	.word	312
	.byte	8,16,2,35,0,10
	.byte	'MOD',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_CPU_ID_Bits',0,22,118,3
	.word	34695
	.byte	9
	.byte	'_Ifx_CPU_CPXE_Bits',0,22,121,16,4,10
	.byte	'XE',0,4
	.word	312
	.byte	8,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	312
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_CPXE_Bits',0,22,125,3
	.word	34802
	.byte	9
	.byte	'_Ifx_CPU_CREVT_Bits',0,22,128,1,16,4,10
	.byte	'EVTA',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	312
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	312
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	312
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_CREVT_Bits',0,22,136,1,3
	.word	34889
	.byte	9
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,22,139,1,16,4,10
	.byte	'CID',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	312
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_CUS_ID_Bits',0,22,143,1,3
	.word	35043
	.byte	9
	.byte	'_Ifx_CPU_D_Bits',0,22,146,1,16,4,10
	.byte	'DATA',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_D_Bits',0,22,149,1,3
	.word	35137
	.byte	9
	.byte	'_Ifx_CPU_DATR_Bits',0,22,152,1,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'SBE',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'reserved_4',0,4
	.word	312
	.byte	5,23,2,35,0,10
	.byte	'CWE',0,4
	.word	312
	.byte	1,22,2,35,0,10
	.byte	'CFE',0,4
	.word	312
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	312
	.byte	3,18,2,35,0,10
	.byte	'SOE',0,4
	.word	312
	.byte	1,17,2,35,0,10
	.byte	'SME',0,4
	.word	312
	.byte	1,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_DATR_Bits',0,22,163,1,3
	.word	35200
	.byte	9
	.byte	'_Ifx_CPU_DBGSR_Bits',0,22,166,1,16,4,10
	.byte	'DE',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'HALT',0,4
	.word	312
	.byte	2,29,2,35,0,10
	.byte	'SIH',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'SUSP',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	312
	.byte	1,26,2,35,0,10
	.byte	'PREVSUSP',0,4
	.word	312
	.byte	1,25,2,35,0,10
	.byte	'PEVT',0,4
	.word	312
	.byte	1,24,2,35,0,10
	.byte	'EVTSRC',0,4
	.word	312
	.byte	5,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	312
	.byte	19,0,2,35,0,0,27
	.byte	'Ifx_CPU_DBGSR_Bits',0,22,177,1,3
	.word	35418
	.byte	9
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,22,180,1,16,4,10
	.byte	'DTA',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	312
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_DBGTCR_Bits',0,22,184,1,3
	.word	35633
	.byte	9
	.byte	'_Ifx_CPU_DCON0_Bits',0,22,187,1,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'DCBYP',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	312
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_CPU_DCON0_Bits',0,22,192,1,3
	.word	35727
	.byte	9
	.byte	'_Ifx_CPU_DCON2_Bits',0,22,195,1,16,4,10
	.byte	'DCACHE_SZE',0,4
	.word	312
	.byte	16,16,2,35,0,10
	.byte	'DSCRATCH_SZE',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_DCON2_Bits',0,22,199,1,3
	.word	35843
	.byte	9
	.byte	'_Ifx_CPU_DCX_Bits',0,22,202,1,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	6,26,2,35,0,10
	.byte	'DCXValue',0,4
	.word	312
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_CPU_DCX_Bits',0,22,206,1,3
	.word	35944
	.byte	9
	.byte	'_Ifx_CPU_DEADD_Bits',0,22,209,1,16,4,10
	.byte	'ERROR_ADDRESS',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_DEADD_Bits',0,22,212,1,3
	.word	36037
	.byte	9
	.byte	'_Ifx_CPU_DIEAR_Bits',0,22,215,1,16,4,10
	.byte	'TA',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_DIEAR_Bits',0,22,218,1,3
	.word	36117
	.byte	9
	.byte	'_Ifx_CPU_DIETR_Bits',0,22,221,1,16,4,10
	.byte	'IED',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	312
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	312
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	312
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	312
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	312
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	312
	.byte	18,0,2,35,0,0,27
	.byte	'Ifx_CPU_DIETR_Bits',0,22,233,1,3
	.word	36186
	.byte	9
	.byte	'_Ifx_CPU_DMS_Bits',0,22,236,1,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'DMSValue',0,4
	.word	312
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_DMS_Bits',0,22,240,1,3
	.word	36415
	.byte	9
	.byte	'_Ifx_CPU_DPR_L_Bits',0,22,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	312
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_DPR_L_Bits',0,22,247,1,3
	.word	36508
	.byte	9
	.byte	'_Ifx_CPU_DPR_U_Bits',0,22,250,1,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	312
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_CPU_DPR_U_Bits',0,22,254,1,3
	.word	36603
	.byte	9
	.byte	'_Ifx_CPU_DPRE_Bits',0,22,129,2,16,4,10
	.byte	'RE',0,4
	.word	312
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_DPRE_Bits',0,22,133,2,3
	.word	36698
	.byte	9
	.byte	'_Ifx_CPU_DPWE_Bits',0,22,136,2,16,4,10
	.byte	'WE',0,4
	.word	312
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_DPWE_Bits',0,22,140,2,3
	.word	36788
	.byte	9
	.byte	'_Ifx_CPU_DSTR_Bits',0,22,143,2,16,4,10
	.byte	'SRE',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'GAE',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'LBE',0,4
	.word	312
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	312
	.byte	3,26,2,35,0,10
	.byte	'CRE',0,4
	.word	312
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	312
	.byte	7,18,2,35,0,10
	.byte	'DTME',0,4
	.word	312
	.byte	1,17,2,35,0,10
	.byte	'LOE',0,4
	.word	312
	.byte	1,16,2,35,0,10
	.byte	'SDE',0,4
	.word	312
	.byte	1,15,2,35,0,10
	.byte	'SCE',0,4
	.word	312
	.byte	1,14,2,35,0,10
	.byte	'CAC',0,4
	.word	312
	.byte	1,13,2,35,0,10
	.byte	'MPE',0,4
	.word	312
	.byte	1,12,2,35,0,10
	.byte	'CLE',0,4
	.word	312
	.byte	1,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	312
	.byte	3,8,2,35,0,10
	.byte	'ALN',0,4
	.word	312
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	312
	.byte	7,0,2,35,0,0,27
	.byte	'Ifx_CPU_DSTR_Bits',0,22,161,2,3
	.word	36878
	.byte	9
	.byte	'_Ifx_CPU_EXEVT_Bits',0,22,164,2,16,4,10
	.byte	'EVTA',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	312
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	312
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	312
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_EXEVT_Bits',0,22,172,2,3
	.word	37202
	.byte	9
	.byte	'_Ifx_CPU_FCX_Bits',0,22,175,2,16,4,10
	.byte	'FCXO',0,4
	.word	312
	.byte	16,16,2,35,0,10
	.byte	'FCXS',0,4
	.word	312
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	312
	.byte	12,0,2,35,0,0,27
	.byte	'Ifx_CPU_FCX_Bits',0,22,180,2,3
	.word	37356
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,22,183,2,16,4,10
	.byte	'TST',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'TCL',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	312
	.byte	6,24,2,35,0,10
	.byte	'RM',0,4
	.word	312
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	312
	.byte	8,14,2,35,0,10
	.byte	'FXE',0,4
	.word	312
	.byte	1,13,2,35,0,10
	.byte	'FUE',0,4
	.word	312
	.byte	1,12,2,35,0,10
	.byte	'FZE',0,4
	.word	312
	.byte	1,11,2,35,0,10
	.byte	'FVE',0,4
	.word	312
	.byte	1,10,2,35,0,10
	.byte	'FIE',0,4
	.word	312
	.byte	1,9,2,35,0,10
	.byte	'reserved_23',0,4
	.word	312
	.byte	3,6,2,35,0,10
	.byte	'FX',0,4
	.word	312
	.byte	1,5,2,35,0,10
	.byte	'FU',0,4
	.word	312
	.byte	1,4,2,35,0,10
	.byte	'FZ',0,4
	.word	312
	.byte	1,3,2,35,0,10
	.byte	'FV',0,4
	.word	312
	.byte	1,2,2,35,0,10
	.byte	'FI',0,4
	.word	312
	.byte	1,1,2,35,0,10
	.byte	'reserved_31',0,4
	.word	312
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,22,202,2,3
	.word	37462
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,205,2,16,4,10
	.byte	'OPC',0,4
	.word	312
	.byte	8,24,2,35,0,10
	.byte	'FMT',0,4
	.word	312
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	312
	.byte	7,16,2,35,0,10
	.byte	'DREG',0,4
	.word	312
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	312
	.byte	12,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,212,2,3
	.word	37811
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,22,215,2,16,4,10
	.byte	'PC',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,22,218,2,3
	.word	37971
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,221,2,16,4,10
	.byte	'SRC1',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,224,2,3
	.word	38052
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,227,2,16,4,10
	.byte	'SRC2',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,230,2,3
	.word	38139
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,233,2,16,4,10
	.byte	'SRC3',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,236,2,3
	.word	38226
	.byte	9
	.byte	'_Ifx_CPU_ICNT_Bits',0,22,239,2,16,4,10
	.byte	'CountValue',0,4
	.word	312
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	312
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_ICNT_Bits',0,22,243,2,3
	.word	38313
	.byte	27
	.byte	'Ifx_CPU_ICR_Bits',0,22,253,2,3
	.word	33155
	.byte	9
	.byte	'_Ifx_CPU_ISP_Bits',0,22,128,3,16,4,10
	.byte	'ISP',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_ISP_Bits',0,22,131,3,3
	.word	38430
	.byte	9
	.byte	'_Ifx_CPU_LCX_Bits',0,22,134,3,16,4,10
	.byte	'LCXO',0,4
	.word	312
	.byte	16,16,2,35,0,10
	.byte	'LCXS',0,4
	.word	312
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	312
	.byte	12,0,2,35,0,0,27
	.byte	'Ifx_CPU_LCX_Bits',0,22,139,3,3
	.word	38496
	.byte	9
	.byte	'_Ifx_CPU_M1CNT_Bits',0,22,142,3,16,4,10
	.byte	'CountValue',0,4
	.word	312
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	312
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_M1CNT_Bits',0,22,146,3,3
	.word	38602
	.byte	9
	.byte	'_Ifx_CPU_M2CNT_Bits',0,22,149,3,16,4,10
	.byte	'CountValue',0,4
	.word	312
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	312
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_M2CNT_Bits',0,22,153,3,3
	.word	38695
	.byte	9
	.byte	'_Ifx_CPU_M3CNT_Bits',0,22,156,3,16,4,10
	.byte	'CountValue',0,4
	.word	312
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	312
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_M3CNT_Bits',0,22,160,3,3
	.word	38788
	.byte	9
	.byte	'_Ifx_CPU_PC_Bits',0,22,163,3,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'PC',0,4
	.word	312
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_CPU_PC_Bits',0,22,167,3,3
	.word	38881
	.byte	9
	.byte	'_Ifx_CPU_PCON0_Bits',0,22,170,3,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'PCBYP',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	312
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_CPU_PCON0_Bits',0,22,175,3,3
	.word	38966
	.byte	9
	.byte	'_Ifx_CPU_PCON1_Bits',0,22,178,3,16,4,10
	.byte	'PCINV',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'PBINV',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	312
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_CPU_PCON1_Bits',0,22,183,3,3
	.word	39082
	.byte	9
	.byte	'_Ifx_CPU_PCON2_Bits',0,22,186,3,16,4,10
	.byte	'PCACHE_SZE',0,4
	.word	312
	.byte	16,16,2,35,0,10
	.byte	'PSCRATCH_SZE',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_PCON2_Bits',0,22,190,3,3
	.word	39193
	.byte	9
	.byte	'_Ifx_CPU_PCXI_Bits',0,22,193,3,16,4,10
	.byte	'PCXO',0,4
	.word	312
	.byte	16,16,2,35,0,10
	.byte	'PCXS',0,4
	.word	312
	.byte	4,12,2,35,0,10
	.byte	'UL',0,4
	.word	312
	.byte	1,11,2,35,0,10
	.byte	'PIE',0,4
	.word	312
	.byte	1,10,2,35,0,10
	.byte	'PCPN',0,4
	.word	312
	.byte	10,0,2,35,0,0,27
	.byte	'Ifx_CPU_PCXI_Bits',0,22,200,3,3
	.word	39294
	.byte	9
	.byte	'_Ifx_CPU_PIEAR_Bits',0,22,203,3,16,4,10
	.byte	'TA',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_PIEAR_Bits',0,22,206,3,3
	.word	39424
	.byte	9
	.byte	'_Ifx_CPU_PIETR_Bits',0,22,209,3,16,4,10
	.byte	'IED',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	312
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	312
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	312
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	312
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	312
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	312
	.byte	18,0,2,35,0,0,27
	.byte	'Ifx_CPU_PIETR_Bits',0,22,221,3,3
	.word	39493
	.byte	9
	.byte	'_Ifx_CPU_PMA0_Bits',0,22,224,3,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	13,19,2,35,0,10
	.byte	'DAC',0,4
	.word	312
	.byte	3,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_PMA0_Bits',0,22,229,3,3
	.word	39722
	.byte	9
	.byte	'_Ifx_CPU_PMA1_Bits',0,22,232,3,16,4,10
	.byte	'reserved_0',0,4
	.word	312
	.byte	14,18,2,35,0,10
	.byte	'CAC',0,4
	.word	312
	.byte	2,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_PMA1_Bits',0,22,237,3,3
	.word	39835
	.byte	9
	.byte	'_Ifx_CPU_PMA2_Bits',0,22,240,3,16,4,10
	.byte	'PSI',0,4
	.word	312
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_CPU_PMA2_Bits',0,22,244,3,3
	.word	39948
	.byte	9
	.byte	'_Ifx_CPU_PSTR_Bits',0,22,247,3,16,4,10
	.byte	'FRE',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'FBE',0,4
	.word	312
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	312
	.byte	9,20,2,35,0,10
	.byte	'FPE',0,4
	.word	312
	.byte	1,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	312
	.byte	1,18,2,35,0,10
	.byte	'FME',0,4
	.word	312
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	312
	.byte	17,0,2,35,0,0,27
	.byte	'Ifx_CPU_PSTR_Bits',0,22,129,4,3
	.word	40039
	.byte	9
	.byte	'_Ifx_CPU_PSW_Bits',0,22,132,4,16,4,10
	.byte	'CDC',0,4
	.word	312
	.byte	7,25,2,35,0,10
	.byte	'CDE',0,4
	.word	312
	.byte	1,24,2,35,0,10
	.byte	'GW',0,4
	.word	312
	.byte	1,23,2,35,0,10
	.byte	'IS',0,4
	.word	312
	.byte	1,22,2,35,0,10
	.byte	'IO',0,4
	.word	312
	.byte	2,20,2,35,0,10
	.byte	'PRS',0,4
	.word	312
	.byte	2,18,2,35,0,10
	.byte	'S',0,4
	.word	312
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	312
	.byte	12,5,2,35,0,10
	.byte	'SAV',0,4
	.word	312
	.byte	1,4,2,35,0,10
	.byte	'AV',0,4
	.word	312
	.byte	1,3,2,35,0,10
	.byte	'SV',0,4
	.word	312
	.byte	1,2,2,35,0,10
	.byte	'V',0,4
	.word	312
	.byte	1,1,2,35,0,10
	.byte	'C',0,4
	.word	312
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_PSW_Bits',0,22,147,4,3
	.word	40242
	.byte	9
	.byte	'_Ifx_CPU_SEGEN_Bits',0,22,150,4,16,4,10
	.byte	'ADFLIP',0,4
	.word	312
	.byte	8,24,2,35,0,10
	.byte	'ADTYPE',0,4
	.word	312
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	312
	.byte	21,1,2,35,0,10
	.byte	'AE',0,4
	.word	312
	.byte	1,0,2,35,0,0,27
	.byte	'Ifx_CPU_SEGEN_Bits',0,22,156,4,3
	.word	40485
	.byte	9
	.byte	'_Ifx_CPU_SMACON_Bits',0,22,159,4,16,4,10
	.byte	'PC',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'PT',0,4
	.word	312
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	312
	.byte	5,24,2,35,0,10
	.byte	'DC',0,4
	.word	312
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	312
	.byte	1,22,2,35,0,10
	.byte	'DT',0,4
	.word	312
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	312
	.byte	13,8,2,35,0,10
	.byte	'IODT',0,4
	.word	312
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	312
	.byte	7,0,2,35,0,0,27
	.byte	'Ifx_CPU_SMACON_Bits',0,22,171,4,3
	.word	40613
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,22,174,4,16,4,10
	.byte	'EN',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,22,177,4,3
	.word	40854
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,22,180,4,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,22,183,4,3
	.word	40937
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,22,186,4,16,4,10
	.byte	'EN',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,22,189,4,3
	.word	41028
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,22,192,4,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,22,195,4,3
	.word	41119
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,22,198,4,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	289
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,22,202,4,3
	.word	41218
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,22,205,4,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	289
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,22,209,4,3
	.word	41325
	.byte	9
	.byte	'_Ifx_CPU_SWEVT_Bits',0,22,212,4,16,4,10
	.byte	'EVTA',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	312
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	312
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	312
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_SWEVT_Bits',0,22,220,4,3
	.word	41432
	.byte	9
	.byte	'_Ifx_CPU_SYSCON_Bits',0,22,223,4,16,4,10
	.byte	'FCDSF',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'PROTEN',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'TPROTEN',0,4
	.word	312
	.byte	1,29,2,35,0,10
	.byte	'IS',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'IT',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	312
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_SYSCON_Bits',0,22,231,4,3
	.word	41586
	.byte	9
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,22,234,4,16,4,10
	.byte	'ASI',0,4
	.word	312
	.byte	5,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	312
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,22,238,4,3
	.word	41747
	.byte	9
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,22,241,4,16,4,10
	.byte	'TEXP0',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'TEXP1',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'TEXP2',0,4
	.word	312
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	312
	.byte	13,16,2,35,0,10
	.byte	'TTRAP',0,4
	.word	312
	.byte	1,15,2,35,0,10
	.byte	'reserved_17',0,4
	.word	312
	.byte	15,0,2,35,0,0,27
	.byte	'Ifx_CPU_TPS_CON_Bits',0,22,249,4,3
	.word	41845
	.byte	9
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,22,252,4,16,4,10
	.byte	'Timer',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,22,255,4,3
	.word	42017
	.byte	9
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,22,130,5,16,4,10
	.byte	'ADDR',0,4
	.word	312
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_CPU_TR_ADR_Bits',0,22,133,5,3
	.word	42097
	.byte	9
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,22,136,5,16,4,10
	.byte	'EVTA',0,4
	.word	312
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	312
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	312
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	312
	.byte	4,20,2,35,0,10
	.byte	'TYP',0,4
	.word	312
	.byte	1,19,2,35,0,10
	.byte	'RNG',0,4
	.word	312
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	312
	.byte	1,17,2,35,0,10
	.byte	'ASI_EN',0,4
	.word	312
	.byte	1,16,2,35,0,10
	.byte	'ASI',0,4
	.word	312
	.byte	5,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	312
	.byte	6,5,2,35,0,10
	.byte	'AST',0,4
	.word	312
	.byte	1,4,2,35,0,10
	.byte	'ALD',0,4
	.word	312
	.byte	1,3,2,35,0,10
	.byte	'reserved_29',0,4
	.word	312
	.byte	3,0,2,35,0,0,27
	.byte	'Ifx_CPU_TR_EVT_Bits',0,22,153,5,3
	.word	42170
	.byte	9
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,22,156,5,16,4,10
	.byte	'T0',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'T1',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'T2',0,4
	.word	312
	.byte	1,29,2,35,0,10
	.byte	'T3',0,4
	.word	312
	.byte	1,28,2,35,0,10
	.byte	'T4',0,4
	.word	312
	.byte	1,27,2,35,0,10
	.byte	'T5',0,4
	.word	312
	.byte	1,26,2,35,0,10
	.byte	'T6',0,4
	.word	312
	.byte	1,25,2,35,0,10
	.byte	'T7',0,4
	.word	312
	.byte	1,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	312
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,22,167,5,3
	.word	42488
	.byte	11,22,175,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33892
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_A',0,22,180,5,3
	.word	42683
	.byte	11,22,183,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33953
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_BIV',0,22,188,5,3
	.word	42742
	.byte	11,22,191,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34032
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_BTV',0,22,196,5,3
	.word	42803
	.byte	11,22,199,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34118
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CCNT',0,22,204,5,3
	.word	42864
	.byte	11,22,207,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34207
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CCTRL',0,22,212,5,3
	.word	42926
	.byte	11,22,215,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34353
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_COMPAT',0,22,220,5,3
	.word	42989
	.byte	27
	.byte	'Ifx_CPU_CORE_ID',0,22,228,5,3
	.word	33381
	.byte	11,22,231,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34509
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CPR_L',0,22,236,5,3
	.word	43078
	.byte	11,22,239,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34602
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CPR_U',0,22,244,5,3
	.word	43141
	.byte	11,22,247,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34695
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CPU_ID',0,22,252,5,3
	.word	43204
	.byte	11,22,255,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34802
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CPXE',0,22,132,6,3
	.word	43268
	.byte	11,22,135,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34889
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CREVT',0,22,140,6,3
	.word	43330
	.byte	11,22,143,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35043
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_CUS_ID',0,22,148,6,3
	.word	43393
	.byte	11,22,151,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35137
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_D',0,22,156,6,3
	.word	43457
	.byte	11,22,159,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35200
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DATR',0,22,164,6,3
	.word	43516
	.byte	11,22,167,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35418
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DBGSR',0,22,172,6,3
	.word	43578
	.byte	11,22,175,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35633
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DBGTCR',0,22,180,6,3
	.word	43641
	.byte	11,22,183,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35727
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DCON0',0,22,188,6,3
	.word	43705
	.byte	11,22,191,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35843
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DCON2',0,22,196,6,3
	.word	43768
	.byte	11,22,199,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35944
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DCX',0,22,204,6,3
	.word	43831
	.byte	11,22,207,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36037
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DEADD',0,22,212,6,3
	.word	43892
	.byte	11,22,215,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36117
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DIEAR',0,22,220,6,3
	.word	43955
	.byte	11,22,223,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36186
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DIETR',0,22,228,6,3
	.word	44018
	.byte	11,22,231,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36415
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DMS',0,22,236,6,3
	.word	44081
	.byte	11,22,239,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36508
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DPR_L',0,22,244,6,3
	.word	44142
	.byte	11,22,247,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36603
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DPR_U',0,22,252,6,3
	.word	44205
	.byte	11,22,255,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36698
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DPRE',0,22,132,7,3
	.word	44268
	.byte	11,22,135,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36788
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DPWE',0,22,140,7,3
	.word	44330
	.byte	11,22,143,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36878
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_DSTR',0,22,148,7,3
	.word	44392
	.byte	11,22,151,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37202
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_EXEVT',0,22,156,7,3
	.word	44454
	.byte	11,22,159,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37356
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FCX',0,22,164,7,3
	.word	44517
	.byte	11,22,167,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37462
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,22,172,7,3
	.word	44578
	.byte	11,22,175,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37811
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,22,180,7,3
	.word	44648
	.byte	11,22,183,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37971
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,22,188,7,3
	.word	44718
	.byte	11,22,191,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38052
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,22,196,7,3
	.word	44787
	.byte	11,22,199,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38139
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,22,204,7,3
	.word	44858
	.byte	11,22,207,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38226
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,22,212,7,3
	.word	44929
	.byte	11,22,215,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38313
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_ICNT',0,22,220,7,3
	.word	45000
	.byte	27
	.byte	'Ifx_CPU_ICR',0,22,228,7,3
	.word	33272
	.byte	11,22,231,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38430
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_ISP',0,22,236,7,3
	.word	45083
	.byte	11,22,239,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38496
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_LCX',0,22,244,7,3
	.word	45144
	.byte	11,22,247,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38602
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_M1CNT',0,22,252,7,3
	.word	45205
	.byte	11,22,255,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38695
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_M2CNT',0,22,132,8,3
	.word	45268
	.byte	11,22,135,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38788
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_M3CNT',0,22,140,8,3
	.word	45331
	.byte	11,22,143,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38881
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PC',0,22,148,8,3
	.word	45394
	.byte	11,22,151,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38966
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PCON0',0,22,156,8,3
	.word	45454
	.byte	11,22,159,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39082
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PCON1',0,22,164,8,3
	.word	45517
	.byte	11,22,167,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39193
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PCON2',0,22,172,8,3
	.word	45580
	.byte	11,22,175,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39294
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PCXI',0,22,180,8,3
	.word	45643
	.byte	11,22,183,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39424
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PIEAR',0,22,188,8,3
	.word	45705
	.byte	11,22,191,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39493
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PIETR',0,22,196,8,3
	.word	45768
	.byte	11,22,199,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39722
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PMA0',0,22,204,8,3
	.word	45831
	.byte	11,22,207,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39835
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PMA1',0,22,212,8,3
	.word	45893
	.byte	11,22,215,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39948
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PMA2',0,22,220,8,3
	.word	45955
	.byte	11,22,223,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40039
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PSTR',0,22,228,8,3
	.word	46017
	.byte	11,22,231,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40242
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_PSW',0,22,236,8,3
	.word	46079
	.byte	11,22,239,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40485
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SEGEN',0,22,244,8,3
	.word	46140
	.byte	11,22,247,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40613
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SMACON',0,22,252,8,3
	.word	46203
	.byte	11,22,255,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40854
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENA',0,22,132,9,3
	.word	46267
	.byte	11,22,135,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40937
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_ACCENB',0,22,140,9,3
	.word	46337
	.byte	11,22,143,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41028
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,22,148,9,3
	.word	46407
	.byte	11,22,151,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41119
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,22,156,9,3
	.word	46481
	.byte	11,22,159,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41218
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,22,164,9,3
	.word	46555
	.byte	11,22,167,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41325
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,22,172,9,3
	.word	46625
	.byte	11,22,175,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41432
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SWEVT',0,22,180,9,3
	.word	46695
	.byte	11,22,183,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41586
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_SYSCON',0,22,188,9,3
	.word	46758
	.byte	11,22,191,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41747
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TASK_ASI',0,22,196,9,3
	.word	46822
	.byte	11,22,199,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41845
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TPS_CON',0,22,204,9,3
	.word	46888
	.byte	11,22,207,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42017
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TPS_TIMER',0,22,212,9,3
	.word	46953
	.byte	11,22,215,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42097
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TR_ADR',0,22,220,9,3
	.word	47020
	.byte	11,22,223,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42170
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TR_EVT',0,22,228,9,3
	.word	47084
	.byte	11,22,231,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42488
	.byte	4,2,35,0,0,27
	.byte	'Ifx_CPU_TRIG_ACC',0,22,236,9,3
	.word	47148
	.byte	9
	.byte	'_Ifx_CPU_CPR',0,22,247,9,25,8,12
	.byte	'L',0
	.word	43078
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	43141
	.byte	4,2,35,4,0,13
	.word	47214
	.byte	27
	.byte	'Ifx_CPU_CPR',0,22,251,9,3
	.word	47256
	.byte	9
	.byte	'_Ifx_CPU_DPR',0,22,254,9,25,8,12
	.byte	'L',0
	.word	44142
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	44205
	.byte	4,2,35,4,0,13
	.word	47282
	.byte	27
	.byte	'Ifx_CPU_DPR',0,22,130,10,3
	.word	47324
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN',0,22,133,10,25,16,12
	.byte	'LA',0
	.word	46555
	.byte	4,2,35,0,12
	.byte	'UA',0
	.word	46625
	.byte	4,2,35,4,12
	.byte	'ACCENA',0
	.word	46407
	.byte	4,2,35,8,12
	.byte	'ACCENB',0
	.word	46481
	.byte	4,2,35,12,0,13
	.word	47350
	.byte	27
	.byte	'Ifx_CPU_SPROT_RGN',0,22,139,10,3
	.word	47432
	.byte	17,12
	.word	46953
	.byte	18,2,0,9
	.byte	'_Ifx_CPU_TPS',0,22,142,10,25,16,12
	.byte	'CON',0
	.word	46888
	.byte	4,2,35,0,12
	.byte	'TIMER',0
	.word	47464
	.byte	12,2,35,4,0,13
	.word	47473
	.byte	27
	.byte	'Ifx_CPU_TPS',0,22,146,10,3
	.word	47521
	.byte	9
	.byte	'_Ifx_CPU_TR',0,22,149,10,25,8,12
	.byte	'EVT',0
	.word	47084
	.byte	4,2,35,0,12
	.byte	'ADR',0
	.word	47020
	.byte	4,2,35,4,0,13
	.word	47547
	.byte	27
	.byte	'Ifx_CPU_TR',0,22,153,10,3
	.word	47592
	.byte	27
	.byte	'IfxCpu_ResourceCpu',0,6,87,3
	.word	1276
	.byte	27
	.byte	'Ifx_SRC_SRCR_Bits',0,8,62,3
	.word	1763
	.byte	27
	.byte	'Ifx_SRC_SRCR',0,8,75,3
	.word	2053
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,8,86,25,12,12
	.byte	'TX',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	2053
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	2053
	.byte	4,2,35,8,0,13
	.word	47691
	.byte	27
	.byte	'Ifx_SRC_ASCLIN',0,8,91,3
	.word	47750
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,8,94,25,4,12
	.byte	'SBSRC',0
	.word	2053
	.byte	4,2,35,0,0,13
	.word	47778
	.byte	27
	.byte	'Ifx_SRC_BCUSPB',0,8,97,3
	.word	47815
	.byte	17,64
	.word	2053
	.byte	18,15,0,9
	.byte	'_Ifx_SRC_CAN',0,8,100,25,64,12
	.byte	'INT',0
	.word	47843
	.byte	64,2,35,0,0,13
	.word	47852
	.byte	27
	.byte	'Ifx_SRC_CAN',0,8,103,3
	.word	47884
	.byte	17,32
	.word	2053
	.byte	18,7,0,9
	.byte	'_Ifx_SRC_CAN1',0,8,106,25,32,12
	.byte	'INT',0
	.word	47909
	.byte	32,2,35,0,0,13
	.word	47918
	.byte	27
	.byte	'Ifx_SRC_CAN1',0,8,109,3
	.word	47951
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,8,112,25,16,12
	.byte	'SR0',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	2053
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	2053
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	2053
	.byte	4,2,35,12,0,13
	.word	47977
	.byte	27
	.byte	'Ifx_SRC_CCU6',0,8,118,3
	.word	48049
	.byte	17,8
	.word	2053
	.byte	18,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,8,121,25,8,12
	.byte	'SR',0
	.word	48075
	.byte	8,2,35,0,0,13
	.word	48084
	.byte	27
	.byte	'Ifx_SRC_CERBERUS',0,8,124,3
	.word	48120
	.byte	9
	.byte	'_Ifx_SRC_CPU',0,8,127,25,32,12
	.byte	'SBSRC',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	10450
	.byte	28,2,35,4,0,13
	.word	48150
	.byte	27
	.byte	'Ifx_SRC_CPU',0,8,131,1,3
	.word	48204
	.byte	9
	.byte	'_Ifx_SRC_DMA',0,8,134,1,25,80,12
	.byte	'ERR',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	5310
	.byte	12,2,35,4,12
	.byte	'CH',0
	.word	47843
	.byte	64,2,35,16,0,13
	.word	48230
	.byte	27
	.byte	'Ifx_SRC_DMA',0,8,139,1,3
	.word	48295
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,8,142,1,25,4,12
	.byte	'SR',0
	.word	2053
	.byte	4,2,35,0,0,13
	.word	48321
	.byte	27
	.byte	'Ifx_SRC_EMEM',0,8,145,1,3
	.word	48354
	.byte	17,40
	.word	464
	.byte	18,39,0,9
	.byte	'_Ifx_SRC_ERAY',0,8,148,1,25,80,12
	.byte	'INT',0
	.word	48075
	.byte	8,2,35,0,12
	.byte	'TINT',0
	.word	48075
	.byte	8,2,35,8,12
	.byte	'NDAT',0
	.word	48075
	.byte	8,2,35,16,12
	.byte	'MBSC',0
	.word	48075
	.byte	8,2,35,24,12
	.byte	'OBUSY',0
	.word	2053
	.byte	4,2,35,32,12
	.byte	'IBUSY',0
	.word	2053
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	48381
	.byte	40,2,35,40,0,13
	.word	48390
	.byte	27
	.byte	'Ifx_SRC_ERAY',0,8,157,1,3
	.word	48517
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,8,160,1,25,4,12
	.byte	'SR',0
	.word	2053
	.byte	4,2,35,0,0,13
	.word	48544
	.byte	27
	.byte	'Ifx_SRC_ETH',0,8,163,1,3
	.word	48576
	.byte	9
	.byte	'_Ifx_SRC_EVR',0,8,166,1,25,8,12
	.byte	'WUT',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'SCDC',0
	.word	2053
	.byte	4,2,35,4,0,13
	.word	48602
	.byte	27
	.byte	'Ifx_SRC_EVR',0,8,170,1,3
	.word	48649
	.byte	9
	.byte	'_Ifx_SRC_FFT',0,8,173,1,25,12,12
	.byte	'DONE',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'ERR',0
	.word	2053
	.byte	4,2,35,4,12
	.byte	'RFS',0
	.word	2053
	.byte	4,2,35,8,0,13
	.word	48675
	.byte	27
	.byte	'Ifx_SRC_FFT',0,8,178,1,3
	.word	48735
	.byte	17,240,11
	.word	464
	.byte	18,239,11,0,9
	.byte	'_Ifx_SRC_GPSR',0,8,181,1,25,128,12,12
	.byte	'SR0',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	2053
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	2053
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	2053
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	48761
	.byte	240,11,2,35,16,0,13
	.word	48772
	.byte	27
	.byte	'Ifx_SRC_GPSR',0,8,188,1,3
	.word	48868
	.byte	9
	.byte	'_Ifx_SRC_GPT12',0,8,191,1,25,48,12
	.byte	'CIRQ',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'T2',0
	.word	2053
	.byte	4,2,35,4,12
	.byte	'T3',0
	.word	2053
	.byte	4,2,35,8,12
	.byte	'T4',0
	.word	2053
	.byte	4,2,35,12,12
	.byte	'T5',0
	.word	2053
	.byte	4,2,35,16,12
	.byte	'T6',0
	.word	2053
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	4341
	.byte	24,2,35,24,0,13
	.word	48895
	.byte	27
	.byte	'Ifx_SRC_GPT12',0,8,200,1,3
	.word	49012
	.byte	17,236,2
	.word	464
	.byte	18,235,2,0,17,32
	.word	47909
	.byte	18,0,0,17,224,7
	.word	464
	.byte	18,223,7,0,17,64
	.word	47909
	.byte	18,1,0,9
	.byte	'_Ifx_SRC_GTM',0,8,203,1,25,192,11,12
	.byte	'AEIIRQ',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	49040
	.byte	236,2,2,35,4,12
	.byte	'ERR',0
	.word	2053
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	5310
	.byte	12,3,35,244,2,12
	.byte	'TIM',0
	.word	49051
	.byte	32,3,35,128,3,12
	.byte	'reserved_1A0',0
	.word	49060
	.byte	224,7,3,35,160,3,12
	.byte	'TOM',0
	.word	49071
	.byte	64,3,35,128,11,0,13
	.word	49080
	.byte	27
	.byte	'Ifx_SRC_GTM',0,8,212,1,3
	.word	49227
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,8,215,1,25,8,12
	.byte	'HSM',0
	.word	48075
	.byte	8,2,35,0,0,13
	.word	49253
	.byte	27
	.byte	'Ifx_SRC_HSM',0,8,218,1,3
	.word	49286
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,8,221,1,25,4,12
	.byte	'SR',0
	.word	2053
	.byte	4,2,35,0,0,13
	.word	49312
	.byte	27
	.byte	'Ifx_SRC_LMU',0,8,224,1,3
	.word	49344
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,8,227,1,25,4,12
	.byte	'SR',0
	.word	2053
	.byte	4,2,35,0,0,13
	.word	49370
	.byte	27
	.byte	'Ifx_SRC_PMU',0,8,230,1,3
	.word	49402
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,8,233,1,25,24,12
	.byte	'TX',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	2053
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	2053
	.byte	4,2,35,8,12
	.byte	'PT',0
	.word	2053
	.byte	4,2,35,12,12
	.byte	'HC',0
	.word	2053
	.byte	4,2,35,16,12
	.byte	'U',0
	.word	2053
	.byte	4,2,35,20,0,13
	.word	49428
	.byte	27
	.byte	'Ifx_SRC_QSPI',0,8,241,1,3
	.word	49521
	.byte	17,16
	.word	2053
	.byte	18,3,0,9
	.byte	'_Ifx_SRC_SCU',0,8,244,1,25,20,12
	.byte	'DTS',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'ERU',0
	.word	49548
	.byte	16,2,35,4,0,13
	.word	49557
	.byte	27
	.byte	'Ifx_SRC_SCU',0,8,248,1,3
	.word	49603
	.byte	9
	.byte	'_Ifx_SRC_SENT',0,8,251,1,25,16,12
	.byte	'SR',0
	.word	49548
	.byte	16,2,35,0,0,13
	.word	49629
	.byte	27
	.byte	'Ifx_SRC_SENT',0,8,254,1,3
	.word	49662
	.byte	17,12
	.word	2053
	.byte	18,2,0,9
	.byte	'_Ifx_SRC_SMU',0,8,129,2,25,12,12
	.byte	'SR',0
	.word	49689
	.byte	12,2,35,0,0,13
	.word	49698
	.byte	27
	.byte	'Ifx_SRC_SMU',0,8,132,2,3
	.word	49730
	.byte	17,88
	.word	464
	.byte	18,87,0,9
	.byte	'_Ifx_SRC_STM',0,8,135,2,25,96,12
	.byte	'SR0',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	2053
	.byte	4,2,35,4,12
	.byte	'reserved_8',0
	.word	49756
	.byte	88,2,35,8,0,13
	.word	49765
	.byte	27
	.byte	'Ifx_SRC_STM',0,8,140,2,3
	.word	49831
	.byte	17,176,2
	.word	464
	.byte	18,175,2,0,9
	.byte	'_Ifx_SRC_VADCCG',0,8,143,2,25,192,2,12
	.byte	'SR0',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	2053
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	2053
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	2053
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	49857
	.byte	176,2,2,35,16,0,13
	.word	49868
	.byte	27
	.byte	'Ifx_SRC_VADCCG',0,8,150,2,3
	.word	49966
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,8,153,2,25,16,12
	.byte	'SR0',0
	.word	2053
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	2053
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	2053
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	2053
	.byte	4,2,35,12,0,13
	.word	49995
	.byte	27
	.byte	'Ifx_SRC_VADCG',0,8,159,2,3
	.word	50069
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,8,162,2,25,4,12
	.byte	'SRC',0
	.word	2053
	.byte	4,2,35,0,0,13
	.word	50097
	.byte	27
	.byte	'Ifx_SRC_XBAR',0,8,165,2,3
	.word	50131
	.byte	17,24
	.word	47691
	.byte	18,1,0,13
	.word	50158
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,8,178,2,25,24,12
	.byte	'ASCLIN',0
	.word	50167
	.byte	24,2,35,0,0,13
	.word	50172
	.byte	27
	.byte	'Ifx_SRC_GASCLIN',0,8,181,2,3
	.word	50212
	.byte	13
	.word	47778
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,8,184,2,25,4,12
	.byte	'SPB',0
	.word	50242
	.byte	4,2,35,0,0,13
	.word	50247
	.byte	27
	.byte	'Ifx_SRC_GBCU',0,8,187,2,3
	.word	50281
	.byte	17,64
	.word	47852
	.byte	18,0,0,13
	.word	50308
	.byte	17,32
	.word	47918
	.byte	18,0,0,13
	.word	50322
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,8,190,2,25,96,12
	.byte	'CAN',0
	.word	50317
	.byte	64,2,35,0,12
	.byte	'CAN1',0
	.word	50331
	.byte	32,2,35,64,0,13
	.word	50336
	.byte	27
	.byte	'Ifx_SRC_GCAN',0,8,194,2,3
	.word	50384
	.byte	17,32
	.word	47977
	.byte	18,1,0,13
	.word	50411
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,8,197,2,25,32,12
	.byte	'CCU6',0
	.word	50420
	.byte	32,2,35,0,0,13
	.word	50425
	.byte	27
	.byte	'Ifx_SRC_GCCU6',0,8,200,2,3
	.word	50461
	.byte	13
	.word	48084
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,8,203,2,25,8,12
	.byte	'CERBERUS',0
	.word	50489
	.byte	8,2,35,0,0,13
	.word	50494
	.byte	27
	.byte	'Ifx_SRC_GCERBERUS',0,8,206,2,3
	.word	50538
	.byte	17,32
	.word	48150
	.byte	18,0,0,13
	.word	50570
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,8,209,2,25,32,12
	.byte	'CPU',0
	.word	50579
	.byte	32,2,35,0,0,13
	.word	50584
	.byte	27
	.byte	'Ifx_SRC_GCPU',0,8,212,2,3
	.word	50618
	.byte	17,80
	.word	48230
	.byte	18,0,0,13
	.word	50645
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,8,215,2,25,80,12
	.byte	'DMA',0
	.word	50654
	.byte	80,2,35,0,0,13
	.word	50659
	.byte	27
	.byte	'Ifx_SRC_GDMA',0,8,218,2,3
	.word	50693
	.byte	17,4
	.word	48321
	.byte	18,0,0,13
	.word	50720
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,8,221,2,25,4,12
	.byte	'EMEM',0
	.word	50729
	.byte	4,2,35,0,0,13
	.word	50734
	.byte	27
	.byte	'Ifx_SRC_GEMEM',0,8,224,2,3
	.word	50770
	.byte	17,80
	.word	48390
	.byte	18,0,0,13
	.word	50798
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,8,227,2,25,80,12
	.byte	'ERAY',0
	.word	50807
	.byte	80,2,35,0,0,13
	.word	50812
	.byte	27
	.byte	'Ifx_SRC_GERAY',0,8,230,2,3
	.word	50848
	.byte	17,4
	.word	48544
	.byte	18,0,0,13
	.word	50876
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,8,233,2,25,4,12
	.byte	'ETH',0
	.word	50885
	.byte	4,2,35,0,0,13
	.word	50890
	.byte	27
	.byte	'Ifx_SRC_GETH',0,8,236,2,3
	.word	50924
	.byte	17,8
	.word	48602
	.byte	18,0,0,13
	.word	50951
	.byte	9
	.byte	'_Ifx_SRC_GEVR',0,8,239,2,25,8,12
	.byte	'EVR',0
	.word	50960
	.byte	8,2,35,0,0,13
	.word	50965
	.byte	27
	.byte	'Ifx_SRC_GEVR',0,8,242,2,3
	.word	50999
	.byte	17,12
	.word	48675
	.byte	18,0,0,13
	.word	51026
	.byte	9
	.byte	'_Ifx_SRC_GFFT',0,8,245,2,25,12,12
	.byte	'FFT',0
	.word	51035
	.byte	12,2,35,0,0,13
	.word	51040
	.byte	27
	.byte	'Ifx_SRC_GFFT',0,8,248,2,3
	.word	51074
	.byte	17,128,12
	.word	48772
	.byte	18,0,0,13
	.word	51101
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,8,251,2,25,128,12,12
	.byte	'GPSR',0
	.word	51111
	.byte	128,12,2,35,0,0,13
	.word	51116
	.byte	27
	.byte	'Ifx_SRC_GGPSR',0,8,254,2,3
	.word	51154
	.byte	17,48
	.word	48895
	.byte	18,0,0,13
	.word	51182
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,8,129,3,25,48,12
	.byte	'GPT12',0
	.word	51191
	.byte	48,2,35,0,0,13
	.word	51196
	.byte	27
	.byte	'Ifx_SRC_GGPT12',0,8,132,3,3
	.word	51234
	.byte	17,192,11
	.word	49080
	.byte	18,0,0,13
	.word	51263
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,8,135,3,25,192,11,12
	.byte	'GTM',0
	.word	51273
	.byte	192,11,2,35,0,0,13
	.word	51278
	.byte	27
	.byte	'Ifx_SRC_GGTM',0,8,138,3,3
	.word	51314
	.byte	17,8
	.word	49253
	.byte	18,0,0,13
	.word	51341
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,8,141,3,25,8,12
	.byte	'HSM',0
	.word	51350
	.byte	8,2,35,0,0,13
	.word	51355
	.byte	27
	.byte	'Ifx_SRC_GHSM',0,8,144,3,3
	.word	51389
	.byte	17,4
	.word	49312
	.byte	18,0,0,13
	.word	51416
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,8,147,3,25,4,12
	.byte	'LMU',0
	.word	51425
	.byte	4,2,35,0,0,13
	.word	51430
	.byte	27
	.byte	'Ifx_SRC_GLMU',0,8,150,3,3
	.word	51464
	.byte	17,8
	.word	49370
	.byte	18,1,0,13
	.word	51491
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,8,153,3,25,8,12
	.byte	'PMU',0
	.word	51500
	.byte	8,2,35,0,0,13
	.word	51505
	.byte	27
	.byte	'Ifx_SRC_GPMU',0,8,156,3,3
	.word	51539
	.byte	17,96
	.word	49428
	.byte	18,3,0,13
	.word	51566
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,8,159,3,25,96,12
	.byte	'QSPI',0
	.word	51575
	.byte	96,2,35,0,0,13
	.word	51580
	.byte	27
	.byte	'Ifx_SRC_GQSPI',0,8,162,3,3
	.word	51616
	.byte	13
	.word	49557
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,8,165,3,25,20,12
	.byte	'SCU',0
	.word	51644
	.byte	20,2,35,0,0,13
	.word	51649
	.byte	27
	.byte	'Ifx_SRC_GSCU',0,8,168,3,3
	.word	51683
	.byte	17,16
	.word	49629
	.byte	18,0,0,13
	.word	51710
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,8,171,3,25,16,12
	.byte	'SENT',0
	.word	51719
	.byte	16,2,35,0,0,13
	.word	51724
	.byte	27
	.byte	'Ifx_SRC_GSENT',0,8,174,3,3
	.word	51760
	.byte	17,12
	.word	49698
	.byte	18,0,0,13
	.word	51788
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,8,177,3,25,12,12
	.byte	'SMU',0
	.word	51797
	.byte	12,2,35,0,0,13
	.word	51802
	.byte	27
	.byte	'Ifx_SRC_GSMU',0,8,180,3,3
	.word	51836
	.byte	17,96
	.word	49765
	.byte	18,0,0,13
	.word	51863
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,8,183,3,25,96,12
	.byte	'STM',0
	.word	51872
	.byte	96,2,35,0,0,13
	.word	51877
	.byte	27
	.byte	'Ifx_SRC_GSTM',0,8,186,3,3
	.word	51911
	.byte	17,64
	.word	49995
	.byte	18,3,0,13
	.word	51938
	.byte	17,224,1
	.word	464
	.byte	18,223,1,0,17,192,2
	.word	49868
	.byte	18,0,0,13
	.word	51963
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,8,189,3,25,224,4,12
	.byte	'G',0
	.word	51947
	.byte	64,2,35,0,12
	.byte	'reserved_40',0
	.word	51952
	.byte	224,1,2,35,64,12
	.byte	'CG',0
	.word	51973
	.byte	192,2,3,35,160,2,0,13
	.word	51978
	.byte	27
	.byte	'Ifx_SRC_GVADC',0,8,194,3,3
	.word	52048
	.byte	13
	.word	50097
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,8,197,3,25,4,12
	.byte	'XBAR',0
	.word	52076
	.byte	4,2,35,0,0,13
	.word	52081
	.byte	27
	.byte	'Ifx_SRC_GXBAR',0,8,200,3,3
	.word	52117
	.byte	9
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	52145
	.byte	9
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	52702
	.byte	9
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,10
	.byte	'STM0DIS',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'STM1DIS',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'STM2DIS',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	289
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	52779
	.byte	9
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'BAUD2DIV',0,1
	.word	464
	.byte	4,0,2,35,0,10
	.byte	'SRIDIV',0,1
	.word	464
	.byte	4,4,2,35,1,10
	.byte	'LPDIV',0,1
	.word	464
	.byte	4,0,2,35,1,10
	.byte	'SPBDIV',0,1
	.word	464
	.byte	4,4,2,35,2,10
	.byte	'FSI2DIV',0,1
	.word	464
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	464
	.byte	2,0,2,35,2,10
	.byte	'FSIDIV',0,1
	.word	464
	.byte	2,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	464
	.byte	2,4,2,35,3,10
	.byte	'CLKSEL',0,1
	.word	464
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	52915
	.byte	9
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,10
	.byte	'CANDIV',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'ERAYDIV',0,1
	.word	464
	.byte	4,0,2,35,0,10
	.byte	'STMDIV',0,1
	.word	464
	.byte	4,4,2,35,1,10
	.byte	'GTMDIV',0,1
	.word	464
	.byte	4,0,2,35,1,10
	.byte	'ETHDIV',0,1
	.word	464
	.byte	4,4,2,35,2,10
	.byte	'ASCLINFDIV',0,1
	.word	464
	.byte	4,0,2,35,2,10
	.byte	'ASCLINSDIV',0,1
	.word	464
	.byte	4,4,2,35,3,10
	.byte	'INSEL',0,1
	.word	464
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	53197
	.byte	9
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,10
	.byte	'BBBDIV',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	53435
	.byte	9
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,10
	.byte	'PLLDIV',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'PLLSEL',0,1
	.word	464
	.byte	2,0,2,35,0,10
	.byte	'PLLERAYDIV',0,1
	.word	464
	.byte	6,2,2,35,1,10
	.byte	'PLLERAYSEL',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'SRIDIV',0,1
	.word	464
	.byte	6,2,2,35,2,10
	.byte	'SRISEL',0,1
	.word	464
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,149,1,3
	.word	53563
	.byte	9
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,152,1,16,4,10
	.byte	'SPBDIV',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'SPBSEL',0,1
	.word	464
	.byte	2,0,2,35,0,10
	.byte	'GTMDIV',0,1
	.word	464
	.byte	6,2,2,35,1,10
	.byte	'GTMSEL',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'STMDIV',0,1
	.word	464
	.byte	6,2,2,35,2,10
	.byte	'STMSEL',0,1
	.word	464
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,163,1,3
	.word	53790
	.byte	9
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,166,1,16,4,10
	.byte	'MAXDIV',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,172,1,3
	.word	54009
	.byte	9
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,175,1,16,4,10
	.byte	'CPU0DIV',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	289
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,179,1,3
	.word	54137
	.byte	9
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,182,1,16,4,10
	.byte	'CHREV',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'CHTEC',0,1
	.word	464
	.byte	2,0,2,35,0,10
	.byte	'CHID',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'EEA',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'UCODE',0,1
	.word	464
	.byte	7,0,2,35,2,10
	.byte	'FSIZE',0,1
	.word	464
	.byte	4,4,2,35,3,10
	.byte	'SP',0,1
	.word	464
	.byte	2,2,2,35,3,10
	.byte	'SEC',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,193,1,3
	.word	54237
	.byte	9
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,196,1,16,4,10
	.byte	'PWD',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'START',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	2,4,2,35,0,10
	.byte	'CAL',0,4
	.word	289
	.byte	22,6,2,35,0,10
	.byte	'reserved_26',0,1
	.word	464
	.byte	5,1,2,35,3,10
	.byte	'SLCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,204,1,3
	.word	54445
	.byte	9
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,207,1,16,4,10
	.byte	'LOWER',0,2
	.word	481
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	464
	.byte	5,1,2,35,1,10
	.byte	'LLU',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'UPPER',0,2
	.word	481
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	464
	.byte	4,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'UOF',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,216,1,3
	.word	54610
	.byte	9
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,219,1,16,4,10
	.byte	'RESULT',0,2
	.word	481
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	464
	.byte	4,2,2,35,1,10
	.byte	'RDY',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'BUSY',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,226,1,3
	.word	54793
	.byte	9
	.byte	'_Ifx_SCU_EICR_Bits',0,4,229,1,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'EXIS0',0,1
	.word	464
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'FEN0',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'REN0',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'LDEN0',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EIEN0',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'INP0',0,1
	.word	464
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	289
	.byte	5,12,2,35,0,10
	.byte	'EXIS1',0,1
	.word	464
	.byte	3,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'FEN1',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'REN1',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'LDEN1',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EIEN1',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'INP1',0,1
	.word	464
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EICR_Bits',0,4,248,1,3
	.word	54947
	.byte	9
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,251,1,16,4,10
	.byte	'INTF0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'INTF1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'INTF2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'INTF3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'INTF4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'INTF5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'INTF6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'INTF7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	289
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_EIFR_Bits',0,4,134,2,3
	.word	55311
	.byte	9
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,137,2,16,4,10
	.byte	'POL',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'MODE',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'ENON',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'PSEL',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	481
	.byte	12,0,2,35,0,10
	.byte	'EMSF',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'SEMSF',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	464
	.byte	6,0,2,35,2,10
	.byte	'EMSFM',0,1
	.word	464
	.byte	2,6,2,35,3,10
	.byte	'SEMSFM',0,1
	.word	464
	.byte	2,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	464
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_EMSR_Bits',0,4,150,2,3
	.word	55522
	.byte	9
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,153,2,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	7,1,2,35,0,10
	.byte	'EDCON',0,2
	.word	481
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	289
	.byte	23,0,2,35,0,0,27
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,158,2,3
	.word	55774
	.byte	9
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,161,2,16,4,10
	.byte	'ARI',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'ARC',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,166,2,3
	.word	55892
	.byte	9
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,169,2,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	28,4,2,35,0,10
	.byte	'EVR13OFF',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'BPEVR13OFF',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,176,2,3
	.word	56003
	.byte	9
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,179,2,16,4,10
	.byte	'ADC13V',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'ADCSWDV',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,186,2,3
	.word	56166
	.byte	9
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,189,2,16,4,10
	.byte	'EVR13OVMOD',0,1
	.word	464
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	2,4,2,35,0,10
	.byte	'EVR13UVMOD',0,1
	.word	464
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	481
	.byte	10,0,2,35,0,10
	.byte	'SWDOVMOD',0,1
	.word	464
	.byte	2,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	464
	.byte	2,4,2,35,2,10
	.byte	'SWDUVMOD',0,1
	.word	464
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	481
	.byte	8,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,201,2,3
	.word	56328
	.byte	9
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,204,2,16,4,10
	.byte	'EVR13OVVAL',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'SWDOVVAL',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,212,2,3
	.word	56606
	.byte	9
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,215,2,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	28,4,2,35,0,10
	.byte	'RSTSWDOFF',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'BPRSTSWDOFF',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,222,2,3
	.word	56785
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,225,2,16,4,10
	.byte	'SD33P',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	464
	.byte	4,0,2,35,0,10
	.byte	'SD33I',0,1
	.word	464
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	289
	.byte	19,1,2,35,0,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,232,2,3
	.word	56945
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,235,2,16,4,10
	.byte	'SDFREQSPRD',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	464
	.byte	4,0,2,35,0,10
	.byte	'TON',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'TOFF',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'SDSTEP',0,1
	.word	464
	.byte	4,4,2,35,3,10
	.byte	'SYNCDIV',0,1
	.word	464
	.byte	3,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,244,2,3
	.word	57106
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,247,2,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'STBS',0,1
	.word	464
	.byte	2,6,2,35,1,10
	.byte	'STSP',0,1
	.word	464
	.byte	2,4,2,35,1,10
	.byte	'NS',0,1
	.word	464
	.byte	2,2,2,35,1,10
	.byte	'OL',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'PIAD',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'ADCMODE',0,1
	.word	464
	.byte	4,4,2,35,2,10
	.byte	'ADCLPF',0,1
	.word	464
	.byte	2,2,2,35,2,10
	.byte	'ADCLSB',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'SDLUT',0,1
	.word	464
	.byte	6,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,134,3,3
	.word	57298
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,137,3,16,4,10
	.byte	'SDOLCON',0,1
	.word	464
	.byte	7,1,2,35,0,10
	.byte	'MODSEL',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'MODLOW',0,1
	.word	464
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'SDVOKLVL',0,1
	.word	464
	.byte	6,2,2,35,2,10
	.byte	'MODMAN',0,1
	.word	464
	.byte	2,0,2,35,2,10
	.byte	'MODHIGH',0,1
	.word	464
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,147,3,3
	.word	57594
	.byte	9
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,150,3,16,4,10
	.byte	'EVR13',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'OV13',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	2,4,2,35,0,10
	.byte	'OVSWD',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'UV13',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'UVSWD',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	2,6,2,35,1,10
	.byte	'BGPROK',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'SCMOD',0,1
	.word	464
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	289
	.byte	18,0,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,164,3,3
	.word	57809
	.byte	9
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,167,3,16,4,10
	.byte	'EVR13UVVAL',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'SWDUVVAL',0,1
	.word	464
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,175,3,3
	.word	58098
	.byte	9
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,178,3,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'SEL0',0,1
	.word	464
	.byte	4,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	481
	.byte	10,0,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'NSEL',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'SEL1',0,1
	.word	464
	.byte	4,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	464
	.byte	2,0,2,35,2,10
	.byte	'DIV1',0,1
	.word	464
	.byte	8,0,2,35,3,0,27
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,189,3,3
	.word	58277
	.byte	9
	.byte	'_Ifx_SCU_FDR_Bits',0,4,192,3,16,4,10
	.byte	'STEP',0,2
	.word	481
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	464
	.byte	4,2,2,35,1,10
	.byte	'DM',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'RESULT',0,2
	.word	481
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	464
	.byte	5,1,2,35,3,10
	.byte	'DISCLK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_FDR_Bits',0,4,200,3,3
	.word	58495
	.byte	9
	.byte	'_Ifx_SCU_FMR_Bits',0,4,203,3,16,4,10
	.byte	'FS0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'FS1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'FS2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'FS3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'FS4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'FS5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'FS6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'FS7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'FC0',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'FC1',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'FC2',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'FC3',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'FC4',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'FC5',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'FC6',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'FC7',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	8,0,2,35,3,0,27
	.byte	'Ifx_SCU_FMR_Bits',0,4,223,3,3
	.word	58658
	.byte	9
	.byte	'_Ifx_SCU_ID_Bits',0,4,226,3,16,4,10
	.byte	'MODREV',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_ID_Bits',0,4,231,3,3
	.word	58994
	.byte	9
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,234,3,16,4,10
	.byte	'IPEN00',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'IPEN01',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'IPEN02',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'IPEN03',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'IPEN04',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'IPEN05',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'IPEN06',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'IPEN07',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	5,3,2,35,1,10
	.byte	'GEEN0',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'IGP0',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'IPEN10',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'IPEN11',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'IPEN12',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'IPEN13',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'IPEN14',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'IPEN15',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'IPEN16',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'IPEN17',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	5,3,2,35,3,10
	.byte	'GEEN1',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'IGP1',0,1
	.word	464
	.byte	2,0,2,35,3,0,27
	.byte	'Ifx_SCU_IGCR_Bits',0,4,130,4,3
	.word	59101
	.byte	9
	.byte	'_Ifx_SCU_IN_Bits',0,4,133,4,16,4,10
	.byte	'P0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_IN_Bits',0,4,138,4,3
	.word	59553
	.byte	9
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,141,4,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'PC0',0,1
	.word	464
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	4,4,2,35,1,10
	.byte	'PC1',0,1
	.word	464
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_IOCR_Bits',0,4,148,4,3
	.word	59652
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,151,4,16,4,10
	.byte	'LBISTREQ',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'LBISTREQP',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'PATTERNS',0,2
	.word	481
	.byte	14,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,157,4,3
	.word	59802
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,160,4,16,4,10
	.byte	'SEED',0,4
	.word	289
	.byte	23,9,2,35,0,10
	.byte	'reserved_23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'SPLITSH',0,1
	.word	464
	.byte	3,5,2,35,3,10
	.byte	'BODY',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'LBISTFREQU',0,1
	.word	464
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,167,4,3
	.word	59951
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,170,4,16,4,10
	.byte	'SIGNATURE',0,4
	.word	289
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	7,1,2,35,3,10
	.byte	'LBISTDONE',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,175,4,3
	.word	60112
	.byte	9
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,178,4,16,4,10
	.byte	'reserved_0',0,2
	.word	481
	.byte	16,0,2,35,0,10
	.byte	'LS',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	481
	.byte	14,1,2,35,2,10
	.byte	'LSEN',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,184,4,3
	.word	60242
	.byte	9
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,187,4,16,4,10
	.byte	'LCLT0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'LCLT1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,192,4,3
	.word	60376
	.byte	9
	.byte	'_Ifx_SCU_MANID_Bits',0,4,195,4,16,4,10
	.byte	'DEPT',0,1
	.word	464
	.byte	5,3,2,35,0,10
	.byte	'MANUF',0,2
	.word	481
	.byte	11,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_MANID_Bits',0,4,200,4,3
	.word	60491
	.byte	9
	.byte	'_Ifx_SCU_OMR_Bits',0,4,203,4,16,4,10
	.byte	'PS0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	481
	.byte	14,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	481
	.byte	14,0,2,35,2,0,27
	.byte	'Ifx_SCU_OMR_Bits',0,4,211,4,3
	.word	60602
	.byte	9
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,214,4,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PLLLV',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'OSCRES',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'GAINSEL',0,1
	.word	464
	.byte	2,3,2,35,0,10
	.byte	'MODE',0,1
	.word	464
	.byte	2,1,2,35,0,10
	.byte	'SHBY',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'PLLHV',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'X1D',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'X1DEN',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	464
	.byte	4,0,2,35,1,10
	.byte	'OSCVAL',0,1
	.word	464
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	464
	.byte	2,1,2,35,2,10
	.byte	'APREN',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	8,0,2,35,3,0,27
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,231,4,3
	.word	60760
	.byte	9
	.byte	'_Ifx_SCU_OUT_Bits',0,4,234,4,16,4,10
	.byte	'P0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_OUT_Bits',0,4,239,4,3
	.word	61100
	.byte	9
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,242,4,16,4,10
	.byte	'CSEL0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'CSEL1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'CSEL2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	481
	.byte	13,0,2,35,0,10
	.byte	'OVSTRT',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'OVSTP',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'DCINVAL',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	464
	.byte	5,0,2,35,2,10
	.byte	'OVCONF',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'POVCONF',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	464
	.byte	6,0,2,35,3,0,27
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,255,4,3
	.word	61201
	.byte	9
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,130,5,16,4,10
	.byte	'OVEN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'OVEN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'OVEN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	289
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,136,5,3
	.word	61468
	.byte	9
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,139,5,16,4,10
	.byte	'PDIS0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_PDISC_Bits',0,4,144,5,3
	.word	61604
	.byte	9
	.byte	'_Ifx_SCU_PDR_Bits',0,4,147,5,16,4,10
	.byte	'PD0',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	464
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	289
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_PDR_Bits',0,4,154,5,3
	.word	61715
	.byte	9
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,157,5,16,4,10
	.byte	'PDR0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PDR1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'PDR2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'PDR3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PDR4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'PDR5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'PDR6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PDR7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	289
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_PDRR_Bits',0,4,168,5,3
	.word	61848
	.byte	9
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,171,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'MODEN',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	481
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	464
	.byte	7,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	464
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	464
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	464
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,188,5,3
	.word	62051
	.byte	9
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,191,5,16,4,10
	.byte	'K2DIV',0,1
	.word	464
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	464
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	464
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	481
	.byte	9,0,2,35,2,0,27
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,199,5,3
	.word	62407
	.byte	9
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,202,5,16,4,10
	.byte	'MODCFG',0,2
	.word	481
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,206,5,3
	.word	62585
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,209,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	2,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	481
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	464
	.byte	5,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	464
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	464
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	464
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,226,5,3
	.word	62685
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,229,5,16,4,10
	.byte	'K2DIV',0,1
	.word	464
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	464
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	464
	.byte	4,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	464
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	481
	.byte	9,0,2,35,2,0,27
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,237,5,3
	.word	63055
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,240,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PWDSTAT',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	289
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,249,5,3
	.word	63241
	.byte	9
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,252,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'MODRUN',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	289
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,135,6,3
	.word	63439
	.byte	9
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,138,6,16,4,10
	.byte	'REQSLP',0,1
	.word	464
	.byte	2,6,2,35,0,10
	.byte	'SMUSLP',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	464
	.byte	5,0,2,35,0,10
	.byte	'PMST',0,1
	.word	464
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	289
	.byte	21,0,2,35,0,0,27
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,145,6,3
	.word	63672
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,148,6,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'ESR1WKEN',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'PINAWKEN',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'PINBWKEN',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'ESR0DFEN',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'ESR0EDCON',0,1
	.word	464
	.byte	2,1,2,35,0,10
	.byte	'ESR1DFEN',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'ESR1EDCON',0,1
	.word	464
	.byte	2,6,2,35,1,10
	.byte	'PINADFEN',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'PINAEDCON',0,1
	.word	464
	.byte	2,3,2,35,1,10
	.byte	'PINBDFEN',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'PINBEDCON',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'STBYRAMSEL',0,1
	.word	464
	.byte	2,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	464
	.byte	2,1,2,35,2,10
	.byte	'PORSTDF',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'DCDCSYNC',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	464
	.byte	3,3,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,174,6,3
	.word	63824
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,177,6,16,4,10
	.byte	'reserved_0',0,2
	.word	481
	.byte	12,4,2,35,0,10
	.byte	'IRADIS',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	289
	.byte	14,5,2,35,0,10
	.byte	'STBYEVEN',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'STBYEV',0,1
	.word	464
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,185,6,3
	.word	64383
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR3_Bits',0,4,188,6,16,4,10
	.byte	'WUTREL',0,4
	.word	289
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	4,4,2,35,3,10
	.byte	'WUTDIV',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWCR3_Bits',0,4,196,6,3
	.word	64566
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,199,6,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKP',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUN',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PINAWKP',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUN',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'PINBWKP',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUN',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'PORSTDF',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'HWCFGEVR',0,1
	.word	464
	.byte	3,3,2,35,1,10
	.byte	'STBYRAM',0,1
	.word	464
	.byte	2,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'WUTWKP',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUN',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'ESR1WKEN',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'PINAWKEN',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'PINBWKEN',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	481
	.byte	4,5,2,35,2,10
	.byte	'ESR0TRIST',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'WUTRUN',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,226,6,3
	.word	64735
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,229,6,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKPCLR',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUNCLR',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PINAWKPCLR',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUNCLR',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'PINBWKPCLR',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUNCLR',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'WUTWKPCLR',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUNCLR',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	481
	.byte	14,0,2,35,2,0,27
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,242,6,3
	.word	65302
	.byte	9
	.byte	'_Ifx_SCU_PMSWUTCNT_Bits',0,4,245,6,16,4,10
	.byte	'WUTCNT',0,4
	.word	289
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_SCU_PMSWUTCNT_Bits',0,4,250,6,3
	.word	65618
	.byte	9
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,253,6,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'CLRC',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	481
	.byte	10,4,2,35,0,10
	.byte	'CSS0',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'CSS1',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'CSS2',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'USRINFO',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,135,7,3
	.word	65737
	.byte	9
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,138,7,16,4,10
	.byte	'ESR0',0,1
	.word	464
	.byte	2,6,2,35,0,10
	.byte	'ESR1',0,1
	.word	464
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	464
	.byte	2,2,2,35,0,10
	.byte	'SMU',0,1
	.word	464
	.byte	2,0,2,35,0,10
	.byte	'SW',0,1
	.word	464
	.byte	2,6,2,35,1,10
	.byte	'STM0',0,1
	.word	464
	.byte	2,4,2,35,1,10
	.byte	'STM1',0,1
	.word	464
	.byte	2,2,2,35,1,10
	.byte	'STM2',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,149,7,3
	.word	65946
	.byte	9
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,152,7,16,4,10
	.byte	'ESR0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'ESR1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'SMU',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'SW',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'STM0',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'STM1',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'STM2',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'PORST',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'CB0',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'CB1',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'CB3',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	464
	.byte	2,1,2,35,2,10
	.byte	'EVR13',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EVR33',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'SWD',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	464
	.byte	2,4,2,35,3,10
	.byte	'STBYR',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	464
	.byte	3,0,2,35,3,0,27
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,175,7,3
	.word	66157
	.byte	9
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,178,7,16,4,10
	.byte	'HBT',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,182,7,3
	.word	66589
	.byte	9
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,185,7,16,4,10
	.byte	'HWCFG',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'FTM',0,1
	.word	464
	.byte	7,1,2,35,1,10
	.byte	'MODE',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'FCBAE',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'LUDIS',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'TRSTL',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'SPDEN',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	464
	.byte	3,0,2,35,2,10
	.byte	'RAMINT',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	464
	.byte	7,0,2,35,3,0,27
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,198,7,3
	.word	66685
	.byte	9
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,201,7,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'SWRSTREQ',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,206,7,3
	.word	66945
	.byte	9
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,209,7,16,4,10
	.byte	'CCTRIG0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'RAMINTM',0,1
	.word	464
	.byte	2,4,2,35,0,10
	.byte	'SETLUDIS',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	464
	.byte	3,0,2,35,0,10
	.byte	'DATM',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	289
	.byte	23,0,2,35,0,0,27
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,218,7,3
	.word	67070
	.byte	9
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,221,7,16,4,10
	.byte	'ESR0T',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,228,7,3
	.word	67267
	.byte	9
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,231,7,16,4,10
	.byte	'ESR0T',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,238,7,3
	.word	67420
	.byte	9
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,241,7,16,4,10
	.byte	'ESR0T',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,248,7,3
	.word	67573
	.byte	9
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,251,7,16,4,10
	.byte	'ESR0T',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,130,8,3
	.word	67726
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,139,8,3
	.word	328
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,154,8,3
	.word	503
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,170,8,3
	.word	747
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,173,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	312
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	312
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	312
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	312
	.byte	16,0,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,179,8,3
	.word	67981
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,182,8,16,4,10
	.byte	'CLRIRF',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'IR0',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	464
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,195,8,3
	.word	68107
	.byte	9
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,198,8,16,4,10
	.byte	'AE',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	464
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,211,8,3
	.word	68359
	.byte	11,4,219,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52145
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ACCEN0',0,4,224,8,3
	.word	68578
	.byte	11,4,227,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52702
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ACCEN1',0,4,232,8,3
	.word	68642
	.byte	11,4,235,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52779
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ARSTDIS',0,4,240,8,3
	.word	68706
	.byte	11,4,243,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52915
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON0',0,4,248,8,3
	.word	68771
	.byte	11,4,251,8,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53197
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON1',0,4,128,9,3
	.word	68836
	.byte	11,4,131,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53435
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON2',0,4,136,9,3
	.word	68901
	.byte	11,4,139,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53563
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON3',0,4,144,9,3
	.word	68966
	.byte	11,4,147,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53790
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON4',0,4,152,9,3
	.word	69031
	.byte	11,4,155,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54009
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON5',0,4,160,9,3
	.word	69096
	.byte	11,4,163,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54137
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CCUCON6',0,4,168,9,3
	.word	69161
	.byte	11,4,171,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54237
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_CHIPID',0,4,176,9,3
	.word	69226
	.byte	11,4,179,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54445
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_DTSCON',0,4,184,9,3
	.word	69290
	.byte	11,4,187,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54610
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_DTSLIM',0,4,192,9,3
	.word	69354
	.byte	11,4,195,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54793
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_DTSSTAT',0,4,200,9,3
	.word	69418
	.byte	11,4,203,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54947
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EICR',0,4,208,9,3
	.word	69483
	.byte	11,4,211,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55311
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EIFR',0,4,216,9,3
	.word	69545
	.byte	11,4,219,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55522
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EMSR',0,4,224,9,3
	.word	69607
	.byte	11,4,227,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55774
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ESRCFG',0,4,232,9,3
	.word	69669
	.byte	11,4,235,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55892
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ESROCFG',0,4,240,9,3
	.word	69733
	.byte	11,4,243,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56003
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVR13CON',0,4,248,9,3
	.word	69798
	.byte	11,4,251,9,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56166
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,128,10,3
	.word	69864
	.byte	11,4,131,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56328
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,136,10,3
	.word	69932
	.byte	11,4,139,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56606
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVROVMON',0,4,144,10,3
	.word	70000
	.byte	11,4,147,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56785
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRRSTCON',0,4,152,10,3
	.word	70066
	.byte	11,4,155,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56945
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,160,10,3
	.word	70133
	.byte	11,4,163,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57106
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,168,10,3
	.word	70202
	.byte	11,4,171,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57298
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,176,10,3
	.word	70270
	.byte	11,4,179,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57594
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,184,10,3
	.word	70338
	.byte	11,4,187,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57809
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRSTAT',0,4,192,10,3
	.word	70406
	.byte	11,4,195,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58098
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EVRUVMON',0,4,200,10,3
	.word	70471
	.byte	11,4,203,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58277
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_EXTCON',0,4,208,10,3
	.word	70537
	.byte	11,4,211,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58495
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_FDR',0,4,216,10,3
	.word	70601
	.byte	11,4,219,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58658
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_FMR',0,4,224,10,3
	.word	70662
	.byte	11,4,227,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58994
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_ID',0,4,232,10,3
	.word	70723
	.byte	11,4,235,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59101
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_IGCR',0,4,240,10,3
	.word	70783
	.byte	11,4,243,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59553
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_IN',0,4,248,10,3
	.word	70845
	.byte	11,4,251,10,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59652
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_IOCR',0,4,128,11,3
	.word	70905
	.byte	11,4,131,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59802
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,136,11,3
	.word	70967
	.byte	11,4,139,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59951
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,144,11,3
	.word	71035
	.byte	11,4,147,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60112
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,152,11,3
	.word	71103
	.byte	11,4,155,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60242
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LCLCON0',0,4,160,11,3
	.word	71171
	.byte	11,4,163,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60376
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_LCLTEST',0,4,168,11,3
	.word	71236
	.byte	11,4,171,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60491
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_MANID',0,4,176,11,3
	.word	71301
	.byte	11,4,179,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60602
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OMR',0,4,184,11,3
	.word	71364
	.byte	11,4,187,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60760
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OSCCON',0,4,192,11,3
	.word	71425
	.byte	11,4,195,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61100
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OUT',0,4,200,11,3
	.word	71489
	.byte	11,4,203,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61201
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OVCCON',0,4,208,11,3
	.word	71550
	.byte	11,4,211,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61468
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_OVCENABLE',0,4,216,11,3
	.word	71614
	.byte	11,4,219,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61604
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PDISC',0,4,224,11,3
	.word	71681
	.byte	11,4,227,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61715
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PDR',0,4,232,11,3
	.word	71744
	.byte	11,4,235,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61848
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PDRR',0,4,240,11,3
	.word	71805
	.byte	11,4,243,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62051
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLCON0',0,4,248,11,3
	.word	71867
	.byte	11,4,251,11,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62407
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLCON1',0,4,128,12,3
	.word	71932
	.byte	11,4,131,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62585
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLCON2',0,4,136,12,3
	.word	71997
	.byte	11,4,139,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62685
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,144,12,3
	.word	72062
	.byte	11,4,147,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63055
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,152,12,3
	.word	72131
	.byte	11,4,155,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63241
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,160,12,3
	.word	72200
	.byte	11,4,163,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63439
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PLLSTAT',0,4,168,12,3
	.word	72269
	.byte	11,4,171,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63672
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMCSR',0,4,176,12,3
	.word	72334
	.byte	11,4,179,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63824
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWCR0',0,4,184,12,3
	.word	72397
	.byte	11,4,187,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64383
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWCR1',0,4,192,12,3
	.word	72462
	.byte	11,4,195,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64566
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWCR3',0,4,200,12,3
	.word	72527
	.byte	11,4,203,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64735
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWSTAT',0,4,208,12,3
	.word	72592
	.byte	11,4,211,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65302
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,216,12,3
	.word	72658
	.byte	11,4,219,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65618
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_PMSWUTCNT',0,4,224,12,3
	.word	72727
	.byte	11,4,227,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65946
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_RSTCON',0,4,232,12,3
	.word	72794
	.byte	11,4,235,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65737
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_RSTCON2',0,4,240,12,3
	.word	72858
	.byte	11,4,243,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66157
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_RSTSTAT',0,4,248,12,3
	.word	72923
	.byte	11,4,251,12,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66589
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_SAFECON',0,4,128,13,3
	.word	72988
	.byte	11,4,131,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66685
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_STSTAT',0,4,136,13,3
	.word	73053
	.byte	11,4,139,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66945
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_SWRSTCON',0,4,144,13,3
	.word	73117
	.byte	11,4,147,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67070
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_SYSCON',0,4,152,13,3
	.word	73183
	.byte	11,4,155,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67267
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPCLR',0,4,160,13,3
	.word	73247
	.byte	11,4,163,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67420
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPDIS',0,4,168,13,3
	.word	73312
	.byte	11,4,171,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67573
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSET',0,4,176,13,3
	.word	73377
	.byte	11,4,179,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67726
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_TRAPSTAT',0,4,184,13,3
	.word	73442
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,192,13,3
	.word	424
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,200,13,3
	.word	707
	.byte	27
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,208,13,3
	.word	938
	.byte	11,4,211,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67981
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_CON0',0,4,216,13,3
	.word	73593
	.byte	11,4,219,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68107
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_CON1',0,4,224,13,3
	.word	73660
	.byte	11,4,227,13,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68359
	.byte	4,2,35,0,0,27
	.byte	'Ifx_SCU_WDTS_SR',0,4,232,13,3
	.word	73727
	.byte	13
	.word	978
	.byte	27
	.byte	'Ifx_SCU_WDTCPU',0,4,248,13,3
	.word	73792
	.byte	9
	.byte	'_Ifx_SCU_WDTS',0,4,251,13,25,12,12
	.byte	'CON0',0
	.word	73593
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	73660
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	73727
	.byte	4,2,35,8,0,13
	.word	73821
	.byte	27
	.byte	'Ifx_SCU_WDTS',0,4,128,14,3
	.word	73882
	.byte	17,8
	.word	69669
	.byte	18,1,0,17,4
	.word	72334
	.byte	18,0,0,13
	.word	73821
	.byte	17,12
	.word	978
	.byte	18,0,0,13
	.word	73932
	.byte	17,16
	.word	464
	.byte	18,15,0,17,16
	.word	69483
	.byte	18,3,0,17,16
	.word	70783
	.byte	18,3,0,17,188,1
	.word	464
	.byte	18,187,1,0,17,244,1
	.word	464
	.byte	18,243,1,0,9
	.byte	'_Ifx_SCU',0,4,141,14,25,128,8,12
	.byte	'reserved_0',0
	.word	4970
	.byte	8,2,35,0,12
	.byte	'ID',0
	.word	70723
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3151
	.byte	4,2,35,12,12
	.byte	'OSCCON',0
	.word	71425
	.byte	4,2,35,16,12
	.byte	'PLLSTAT',0
	.word	72269
	.byte	4,2,35,20,12
	.byte	'PLLCON0',0
	.word	71867
	.byte	4,2,35,24,12
	.byte	'PLLCON1',0
	.word	71932
	.byte	4,2,35,28,12
	.byte	'PLLCON2',0
	.word	71997
	.byte	4,2,35,32,12
	.byte	'PLLERAYSTAT',0
	.word	72200
	.byte	4,2,35,36,12
	.byte	'PLLERAYCON0',0
	.word	72062
	.byte	4,2,35,40,12
	.byte	'PLLERAYCON1',0
	.word	72131
	.byte	4,2,35,44,12
	.byte	'CCUCON0',0
	.word	68771
	.byte	4,2,35,48,12
	.byte	'CCUCON1',0
	.word	68836
	.byte	4,2,35,52,12
	.byte	'FDR',0
	.word	70601
	.byte	4,2,35,56,12
	.byte	'EXTCON',0
	.word	70537
	.byte	4,2,35,60,12
	.byte	'CCUCON2',0
	.word	68901
	.byte	4,2,35,64,12
	.byte	'CCUCON3',0
	.word	68966
	.byte	4,2,35,68,12
	.byte	'CCUCON4',0
	.word	69031
	.byte	4,2,35,72,12
	.byte	'CCUCON5',0
	.word	69096
	.byte	4,2,35,76,12
	.byte	'RSTSTAT',0
	.word	72923
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	3151
	.byte	4,2,35,84,12
	.byte	'RSTCON',0
	.word	72794
	.byte	4,2,35,88,12
	.byte	'ARSTDIS',0
	.word	68706
	.byte	4,2,35,92,12
	.byte	'SWRSTCON',0
	.word	73117
	.byte	4,2,35,96,12
	.byte	'RSTCON2',0
	.word	72858
	.byte	4,2,35,100,12
	.byte	'reserved_68',0
	.word	3151
	.byte	4,2,35,104,12
	.byte	'EVRRSTCON',0
	.word	70066
	.byte	4,2,35,108,12
	.byte	'ESRCFG',0
	.word	73909
	.byte	8,2,35,112,12
	.byte	'ESROCFG',0
	.word	69733
	.byte	4,2,35,120,12
	.byte	'SYSCON',0
	.word	73183
	.byte	4,2,35,124,12
	.byte	'CCUCON6',0
	.word	69161
	.byte	4,3,35,128,1,12
	.byte	'reserved_84',0
	.word	4341
	.byte	24,3,35,132,1,12
	.byte	'PDR',0
	.word	71744
	.byte	4,3,35,156,1,12
	.byte	'IOCR',0
	.word	70905
	.byte	4,3,35,160,1,12
	.byte	'OUT',0
	.word	71489
	.byte	4,3,35,164,1,12
	.byte	'OMR',0
	.word	71364
	.byte	4,3,35,168,1,12
	.byte	'IN',0
	.word	70845
	.byte	4,3,35,172,1,12
	.byte	'EVRSTAT',0
	.word	70406
	.byte	4,3,35,176,1,12
	.byte	'reserved_B4',0
	.word	3151
	.byte	4,3,35,180,1,12
	.byte	'EVR13CON',0
	.word	69798
	.byte	4,3,35,184,1,12
	.byte	'reserved_BC',0
	.word	3151
	.byte	4,3,35,188,1,12
	.byte	'STSTAT',0
	.word	73053
	.byte	4,3,35,192,1,12
	.byte	'reserved_C4',0
	.word	3151
	.byte	4,3,35,196,1,12
	.byte	'PMSWCR0',0
	.word	72397
	.byte	4,3,35,200,1,12
	.byte	'PMSWSTAT',0
	.word	72592
	.byte	4,3,35,204,1,12
	.byte	'PMSWSTATCLR',0
	.word	72658
	.byte	4,3,35,208,1,12
	.byte	'PMCSR',0
	.word	73918
	.byte	4,3,35,212,1,12
	.byte	'reserved_D8',0
	.word	4970
	.byte	8,3,35,216,1,12
	.byte	'DTSSTAT',0
	.word	69418
	.byte	4,3,35,224,1,12
	.byte	'DTSCON',0
	.word	69290
	.byte	4,3,35,228,1,12
	.byte	'PMSWCR1',0
	.word	72462
	.byte	4,3,35,232,1,12
	.byte	'reserved_EC',0
	.word	3151
	.byte	4,3,35,236,1,12
	.byte	'WDTS',0
	.word	73927
	.byte	12,3,35,240,1,12
	.byte	'EMSR',0
	.word	69607
	.byte	4,3,35,252,1,12
	.byte	'WDTCPU',0
	.word	73941
	.byte	12,3,35,128,2,12
	.byte	'reserved_10C',0
	.word	4341
	.byte	24,3,35,140,2,12
	.byte	'TRAPSTAT',0
	.word	73442
	.byte	4,3,35,164,2,12
	.byte	'TRAPSET',0
	.word	73377
	.byte	4,3,35,168,2,12
	.byte	'TRAPCLR',0
	.word	73247
	.byte	4,3,35,172,2,12
	.byte	'TRAPDIS',0
	.word	73312
	.byte	4,3,35,176,2,12
	.byte	'LCLCON0',0
	.word	71171
	.byte	4,3,35,180,2,12
	.byte	'reserved_138',0
	.word	3151
	.byte	4,3,35,184,2,12
	.byte	'LCLTEST',0
	.word	71236
	.byte	4,3,35,188,2,12
	.byte	'CHIPID',0
	.word	69226
	.byte	4,3,35,192,2,12
	.byte	'MANID',0
	.word	71301
	.byte	4,3,35,196,2,12
	.byte	'reserved_148',0
	.word	4970
	.byte	8,3,35,200,2,12
	.byte	'SAFECON',0
	.word	72988
	.byte	4,3,35,208,2,12
	.byte	'reserved_154',0
	.word	73946
	.byte	16,3,35,212,2,12
	.byte	'LBISTCTRL0',0
	.word	70967
	.byte	4,3,35,228,2,12
	.byte	'LBISTCTRL1',0
	.word	71035
	.byte	4,3,35,232,2,12
	.byte	'LBISTCTRL2',0
	.word	71103
	.byte	4,3,35,236,2,12
	.byte	'reserved_170',0
	.word	10450
	.byte	28,3,35,240,2,12
	.byte	'PDISC',0
	.word	71681
	.byte	4,3,35,140,3,12
	.byte	'reserved_190',0
	.word	5310
	.byte	12,3,35,144,3,12
	.byte	'EVRADCSTAT',0
	.word	69864
	.byte	4,3,35,156,3,12
	.byte	'EVRUVMON',0
	.word	70471
	.byte	4,3,35,160,3,12
	.byte	'EVROVMON',0
	.word	70000
	.byte	4,3,35,164,3,12
	.byte	'EVRMONCTRL',0
	.word	69932
	.byte	4,3,35,168,3,12
	.byte	'reserved_1AC',0
	.word	3151
	.byte	4,3,35,172,3,12
	.byte	'EVRSDCTRL1',0
	.word	70202
	.byte	4,3,35,176,3,12
	.byte	'EVRSDCTRL2',0
	.word	70270
	.byte	4,3,35,180,3,12
	.byte	'EVRSDCTRL3',0
	.word	70338
	.byte	4,3,35,184,3,12
	.byte	'reserved_1BC',0
	.word	4970
	.byte	8,3,35,188,3,12
	.byte	'EVRSDCOEFF2',0
	.word	70133
	.byte	4,3,35,196,3,12
	.byte	'reserved_1C8',0
	.word	10173
	.byte	20,3,35,200,3,12
	.byte	'PMSWUTCNT',0
	.word	72727
	.byte	4,3,35,220,3,12
	.byte	'OVCENABLE',0
	.word	71614
	.byte	4,3,35,224,3,12
	.byte	'OVCCON',0
	.word	71550
	.byte	4,3,35,228,3,12
	.byte	'reserved_1E8',0
	.word	48381
	.byte	40,3,35,232,3,12
	.byte	'EICR',0
	.word	73955
	.byte	16,3,35,144,4,12
	.byte	'EIFR',0
	.word	69545
	.byte	4,3,35,160,4,12
	.byte	'FMR',0
	.word	70662
	.byte	4,3,35,164,4,12
	.byte	'PDRR',0
	.word	71805
	.byte	4,3,35,168,4,12
	.byte	'IGCR',0
	.word	73964
	.byte	16,3,35,172,4,12
	.byte	'reserved_23C',0
	.word	3151
	.byte	4,3,35,188,4,12
	.byte	'DTSLIM',0
	.word	69354
	.byte	4,3,35,192,4,12
	.byte	'reserved_244',0
	.word	73973
	.byte	188,1,3,35,196,4,12
	.byte	'PMSWCR3',0
	.word	72527
	.byte	4,3,35,128,6,12
	.byte	'reserved_304',0
	.word	73984
	.byte	244,1,3,35,132,6,12
	.byte	'ACCEN1',0
	.word	68642
	.byte	4,3,35,248,7,12
	.byte	'ACCEN0',0
	.word	68578
	.byte	4,3,35,252,7,0,13
	.word	73995
	.byte	27
	.byte	'Ifx_SCU',0,4,244,14,3
	.word	75891
	.byte	14,26,139,10,9,1,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,27
	.byte	'IfxScu_CCUCON0_CLKSEL',0,26,143,10,3
	.word	75913
	.byte	14,26,153,10,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,27
	.byte	'IfxScu_WDTCON1_IR',0,26,158,10,3
	.word	76010
	.byte	14,5,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,27
	.byte	'IfxCpu_CounterMode',0,5,122,3
	.word	76132
	.byte	28,5,132,1,9,6,12
	.byte	'counter',0
	.word	1534
	.byte	4,2,35,0,12
	.byte	'overlfow',0
	.word	464
	.byte	1,2,35,4,0,27
	.byte	'IfxCpu_Counter',0,5,136,1,3
	.word	76219
	.byte	28,5,144,1,9,32,12
	.byte	'instruction',0
	.word	76219
	.byte	6,2,35,0,12
	.byte	'clock',0
	.word	76219
	.byte	6,2,35,6,12
	.byte	'counter1',0
	.word	76219
	.byte	6,2,35,12,12
	.byte	'counter2',0
	.word	76219
	.byte	6,2,35,18,12
	.byte	'counter3',0
	.word	76219
	.byte	6,2,35,24,0,27
	.byte	'IfxCpu_Perf',0,5,151,1,3
	.word	76285
	.byte	27
	.byte	'IfxSrc_Tos',0,20,53,3
	.word	29505
	.byte	27
	.byte	'IfxDma_ChannelId',0,13,100,3
	.word	20566
	.byte	27
	.byte	'Ifx_DMA_ACCEN00_Bits',0,12,79,3
	.word	10459
	.byte	27
	.byte	'Ifx_DMA_ACCEN01_Bits',0,12,85,3
	.word	11029
	.byte	27
	.byte	'Ifx_DMA_ACCEN10_Bits',0,12,122,3
	.word	11119
	.byte	27
	.byte	'Ifx_DMA_ACCEN11_Bits',0,12,128,1,3
	.word	11689
	.byte	27
	.byte	'Ifx_DMA_ACCEN20_Bits',0,12,165,1,3
	.word	11779
	.byte	27
	.byte	'Ifx_DMA_ACCEN21_Bits',0,12,171,1,3
	.word	12350
	.byte	27
	.byte	'Ifx_DMA_ACCEN30_Bits',0,12,208,1,3
	.word	12441
	.byte	27
	.byte	'Ifx_DMA_ACCEN31_Bits',0,12,214,1,3
	.word	13012
	.byte	27
	.byte	'Ifx_DMA_BLK_CLRE_Bits',0,12,230,1,3
	.word	13630
	.byte	27
	.byte	'Ifx_DMA_BLK_EER_Bits',0,12,243,1,3
	.word	13114
	.byte	27
	.byte	'Ifx_DMA_BLK_ERRSR_Bits',0,12,132,2,3
	.word	13338
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_ADICR_Bits',0,12,152,2,3
	.word	15542
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_CHCR_Bits',0,12,168,2,3
	.word	15858
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_CHSR_Bits',0,12,184,2,3
	.word	16228
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_DADR_Bits',0,12,190,2,3
	.word	15453
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R0_Bits',0,12,199,2,3
	.word	14093
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R1_Bits',0,12,208,2,3
	.word	14228
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R2_Bits',0,12,217,2,3
	.word	14363
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R3_Bits',0,12,226,2,3
	.word	14498
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R4_Bits',0,12,235,2,3
	.word	14633
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R5_Bits',0,12,244,2,3
	.word	14768
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R6_Bits',0,12,253,2,3
	.word	14903
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R7_Bits',0,12,134,3,3
	.word	15038
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_RDCRC_Bits',0,12,140,3,3
	.word	15182
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_SADR_Bits',0,12,146,3,3
	.word	15364
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_SDCRC_Bits',0,12,152,3,3
	.word	15273
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_SHADR_Bits',0,12,158,3,3
	.word	16137
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_SR_Bits',0,12,169,3,3
	.word	13913
	.byte	27
	.byte	'Ifx_DMA_CH_ADICR_Bits',0,12,189,3,3
	.word	18665
	.byte	27
	.byte	'Ifx_DMA_CH_CHCFGR_Bits',0,12,205,3,3
	.word	18977
	.byte	27
	.byte	'Ifx_DMA_CH_CHCSR_Bits',0,12,226,3,3
	.word	19341
	.byte	27
	.byte	'Ifx_DMA_CH_DADR_Bits',0,12,232,3,3
	.word	18580
	.byte	27
	.byte	'Ifx_DMA_CH_RDCRCR_Bits',0,12,238,3,3
	.word	18319
	.byte	27
	.byte	'Ifx_DMA_CH_SADR_Bits',0,12,244,3,3
	.word	18495
	.byte	27
	.byte	'Ifx_DMA_CH_SDCRCR_Bits',0,12,250,3,3
	.word	18407
	.byte	27
	.byte	'Ifx_DMA_CH_SHADR_Bits',0,12,128,4,3
	.word	19254
	.byte	27
	.byte	'Ifx_DMA_CLC_Bits',0,12,138,4,3
	.word	9894
	.byte	27
	.byte	'Ifx_DMA_ERRINTR_Bits',0,12,145,4,3
	.word	17049
	.byte	27
	.byte	'Ifx_DMA_HRR_Bits',0,12,152,4,3
	.word	17641
	.byte	27
	.byte	'Ifx_DMA_ID_Bits',0,12,160,4,3
	.word	10051
	.byte	27
	.byte	'Ifx_DMA_MEMCON_Bits',0,12,175,4,3
	.word	10182
	.byte	27
	.byte	'Ifx_DMA_MODE_Bits',0,12,182,4,3
	.word	17517
	.byte	27
	.byte	'Ifx_DMA_OTSS_Bits',0,12,191,4,3
	.word	16910
	.byte	27
	.byte	'Ifx_DMA_PRR0_Bits',0,12,200,4,3
	.word	17155
	.byte	27
	.byte	'Ifx_DMA_PRR1_Bits',0,12,209,4,3
	.word	17289
	.byte	27
	.byte	'Ifx_DMA_SUSACR_Bits',0,12,216,4,3
	.word	17879
	.byte	27
	.byte	'Ifx_DMA_SUSENR_Bits',0,12,223,4,3
	.word	17763
	.byte	27
	.byte	'Ifx_DMA_TIME_Bits',0,12,229,4,3
	.word	17423
	.byte	27
	.byte	'Ifx_DMA_TSR_Bits',0,12,248,4,3
	.word	17995
	.byte	27
	.byte	'Ifx_DMA_ACCEN00',0,12,133,5,3
	.word	10989
	.byte	27
	.byte	'Ifx_DMA_ACCEN01',0,12,141,5,3
	.word	11079
	.byte	27
	.byte	'Ifx_DMA_ACCEN10',0,12,149,5,3
	.word	11649
	.byte	27
	.byte	'Ifx_DMA_ACCEN11',0,12,157,5,3
	.word	11739
	.byte	27
	.byte	'Ifx_DMA_ACCEN20',0,12,165,5,3
	.word	12310
	.byte	27
	.byte	'Ifx_DMA_ACCEN21',0,12,173,5,3
	.word	12401
	.byte	27
	.byte	'Ifx_DMA_ACCEN30',0,12,181,5,3
	.word	12972
	.byte	27
	.byte	'Ifx_DMA_ACCEN31',0,12,189,5,3
	.word	13063
	.byte	27
	.byte	'Ifx_DMA_BLK_CLRE',0,12,197,5,3
	.word	13873
	.byte	27
	.byte	'Ifx_DMA_BLK_EER',0,12,205,5,3
	.word	13298
	.byte	27
	.byte	'Ifx_DMA_BLK_ERRSR',0,12,213,5,3
	.word	13590
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_ADICR',0,12,221,5,3
	.word	15818
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_CHCR',0,12,229,5,3
	.word	16097
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_CHSR',0,12,237,5,3
	.word	16461
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_DADR',0,12,245,5,3
	.word	15502
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R0',0,12,253,5,3
	.word	14188
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R1',0,12,133,6,3
	.word	14323
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R2',0,12,141,6,3
	.word	14458
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R3',0,12,149,6,3
	.word	14593
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R4',0,12,157,6,3
	.word	14728
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R5',0,12,165,6,3
	.word	14863
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R6',0,12,173,6,3
	.word	14998
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_R7',0,12,181,6,3
	.word	15133
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_RDCRC',0,12,189,6,3
	.word	15233
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_SADR',0,12,197,6,3
	.word	15413
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_SDCRC',0,12,205,6,3
	.word	15324
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_SHADR',0,12,213,6,3
	.word	16188
	.byte	27
	.byte	'Ifx_DMA_BLK_ME_SR',0,12,221,6,3
	.word	14053
	.byte	27
	.byte	'Ifx_DMA_CH_ADICR',0,12,229,6,3
	.word	18937
	.byte	27
	.byte	'Ifx_DMA_CH_CHCFGR',0,12,237,6,3
	.word	19214
	.byte	27
	.byte	'Ifx_DMA_CH_CHCSR',0,12,245,6,3
	.word	19648
	.byte	27
	.byte	'Ifx_DMA_CH_DADR',0,12,253,6,3
	.word	18625
	.byte	27
	.byte	'Ifx_DMA_CH_RDCRCR',0,12,133,7,3
	.word	18367
	.byte	27
	.byte	'Ifx_DMA_CH_SADR',0,12,141,7,3
	.word	18540
	.byte	27
	.byte	'Ifx_DMA_CH_SDCRCR',0,12,149,7,3
	.word	18455
	.byte	27
	.byte	'Ifx_DMA_CH_SHADR',0,12,157,7,3
	.word	19301
	.byte	27
	.byte	'Ifx_DMA_CLC',0,12,165,7,3
	.word	10011
	.byte	27
	.byte	'Ifx_DMA_ERRINTR',0,12,173,7,3
	.word	17115
	.byte	27
	.byte	'Ifx_DMA_HRR',0,12,181,7,3
	.word	17703
	.byte	27
	.byte	'Ifx_DMA_ID',0,12,189,7,3
	.word	10133
	.byte	27
	.byte	'Ifx_DMA_MEMCON',0,12,197,7,3
	.word	10410
	.byte	27
	.byte	'Ifx_DMA_MODE',0,12,205,7,3
	.word	17581
	.byte	27
	.byte	'Ifx_DMA_OTSS',0,12,213,7,3
	.word	17009
	.byte	27
	.byte	'Ifx_DMA_PRR0',0,12,221,7,3
	.word	17249
	.byte	27
	.byte	'Ifx_DMA_PRR1',0,12,229,7,3
	.word	17383
	.byte	27
	.byte	'Ifx_DMA_SUSACR',0,12,237,7,3
	.word	17946
	.byte	27
	.byte	'Ifx_DMA_SUSENR',0,12,245,7,3
	.word	17830
	.byte	27
	.byte	'Ifx_DMA_TIME',0,12,253,7,3
	.word	17466
	.byte	27
	.byte	'Ifx_DMA_TSR',0,12,133,8,3
	.word	18270
	.byte	13
	.word	16501
	.byte	27
	.byte	'Ifx_DMA_BLK_ME',0,12,165,8,3
	.word	79201
	.byte	13
	.word	16794
	.byte	27
	.byte	'Ifx_DMA_BLK',0,12,185,8,3
	.word	79230
	.byte	13
	.word	19688
	.byte	27
	.byte	'Ifx_DMA_CH',0,12,198,8,3
	.word	79256
	.byte	13
	.word	19854
	.byte	27
	.byte	'Ifx_DMA',0,12,250,8,3
	.word	79281
	.byte	9
	.byte	'_Ifx_STM_ACCEN0_Bits',0,27,45,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_STM_ACCEN0_Bits',0,27,79,3
	.word	79303
	.byte	9
	.byte	'_Ifx_STM_ACCEN1_Bits',0,27,82,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_ACCEN1_Bits',0,27,85,3
	.word	79860
	.byte	9
	.byte	'_Ifx_STM_CAP_Bits',0,27,88,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_CAP_Bits',0,27,91,3
	.word	79937
	.byte	9
	.byte	'_Ifx_STM_CAPSV_Bits',0,27,94,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_CAPSV_Bits',0,27,97,3
	.word	80009
	.byte	9
	.byte	'_Ifx_STM_CLC_Bits',0,27,100,16,4,10
	.byte	'DISR',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_STM_CLC_Bits',0,27,107,3
	.word	80085
	.byte	9
	.byte	'_Ifx_STM_CMCON_Bits',0,27,110,16,4,10
	.byte	'MSIZE0',0,1
	.word	464
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	464
	.byte	3,0,2,35,0,10
	.byte	'MSTART0',0,1
	.word	464
	.byte	5,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	464
	.byte	3,0,2,35,1,10
	.byte	'MSIZE1',0,1
	.word	464
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	464
	.byte	3,0,2,35,2,10
	.byte	'MSTART1',0,1
	.word	464
	.byte	5,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	464
	.byte	3,0,2,35,3,0,27
	.byte	'Ifx_STM_CMCON_Bits',0,27,120,3
	.word	80226
	.byte	9
	.byte	'_Ifx_STM_CMP_Bits',0,27,123,16,4,10
	.byte	'CMPVAL',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_CMP_Bits',0,27,126,3
	.word	80444
	.byte	9
	.byte	'_Ifx_STM_ICR_Bits',0,27,129,1,16,4,10
	.byte	'CMP0EN',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'CMP0IR',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'CMP0OS',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'CMP1EN',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'CMP1IR',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'CMP1OS',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,4
	.word	289
	.byte	25,0,2,35,0,0,27
	.byte	'Ifx_STM_ICR_Bits',0,27,139,1,3
	.word	80511
	.byte	9
	.byte	'_Ifx_STM_ID_Bits',0,27,142,1,16,4,10
	.byte	'MODREV',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_STM_ID_Bits',0,27,147,1,3
	.word	80714
	.byte	9
	.byte	'_Ifx_STM_ISCR_Bits',0,27,150,1,16,4,10
	.byte	'CMP0IRR',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'CMP0IRS',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'CMP1IRR',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'CMP1IRS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_STM_ISCR_Bits',0,27,157,1,3
	.word	80821
	.byte	9
	.byte	'_Ifx_STM_KRST0_Bits',0,27,160,1,16,4,10
	.byte	'RST',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	30,0,2,35,0,0,27
	.byte	'Ifx_STM_KRST0_Bits',0,27,165,1,3
	.word	80972
	.byte	9
	.byte	'_Ifx_STM_KRST1_Bits',0,27,168,1,16,4,10
	.byte	'RST',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_STM_KRST1_Bits',0,27,172,1,3
	.word	81083
	.byte	9
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,27,175,1,16,4,10
	.byte	'CLR',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_STM_KRSTCLR_Bits',0,27,179,1,3
	.word	81175
	.byte	9
	.byte	'_Ifx_STM_OCS_Bits',0,27,182,1,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	24,8,2,35,0,10
	.byte	'SUS',0,1
	.word	464
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	464
	.byte	2,0,2,35,3,0,27
	.byte	'Ifx_STM_OCS_Bits',0,27,189,1,3
	.word	81271
	.byte	9
	.byte	'_Ifx_STM_TIM0_Bits',0,27,192,1,16,4,10
	.byte	'STM31_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM0_Bits',0,27,195,1,3
	.word	81417
	.byte	9
	.byte	'_Ifx_STM_TIM0SV_Bits',0,27,198,1,16,4,10
	.byte	'STM31_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM0SV_Bits',0,27,201,1,3
	.word	81489
	.byte	9
	.byte	'_Ifx_STM_TIM1_Bits',0,27,204,1,16,4,10
	.byte	'STM35_4',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM1_Bits',0,27,207,1,3
	.word	81565
	.byte	9
	.byte	'_Ifx_STM_TIM2_Bits',0,27,210,1,16,4,10
	.byte	'STM39_8',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM2_Bits',0,27,213,1,3
	.word	81637
	.byte	9
	.byte	'_Ifx_STM_TIM3_Bits',0,27,216,1,16,4,10
	.byte	'STM43_12',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM3_Bits',0,27,219,1,3
	.word	81709
	.byte	9
	.byte	'_Ifx_STM_TIM4_Bits',0,27,222,1,16,4,10
	.byte	'STM47_16',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM4_Bits',0,27,225,1,3
	.word	81782
	.byte	9
	.byte	'_Ifx_STM_TIM5_Bits',0,27,228,1,16,4,10
	.byte	'STM51_20',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM5_Bits',0,27,231,1,3
	.word	81855
	.byte	9
	.byte	'_Ifx_STM_TIM6_Bits',0,27,234,1,16,4,10
	.byte	'STM63_32',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_STM_TIM6_Bits',0,27,237,1,3
	.word	81928
	.byte	11,27,245,1,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79303
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ACCEN0',0,27,250,1,3
	.word	82001
	.byte	11,27,253,1,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79860
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ACCEN1',0,27,130,2,3
	.word	82065
	.byte	11,27,133,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79937
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CAP',0,27,138,2,3
	.word	82129
	.byte	11,27,141,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80009
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CAPSV',0,27,146,2,3
	.word	82190
	.byte	11,27,149,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80085
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CLC',0,27,154,2,3
	.word	82253
	.byte	11,27,157,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80226
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CMCON',0,27,162,2,3
	.word	82314
	.byte	11,27,165,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80444
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_CMP',0,27,170,2,3
	.word	82377
	.byte	11,27,173,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80511
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ICR',0,27,178,2,3
	.word	82438
	.byte	11,27,181,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80714
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ID',0,27,186,2,3
	.word	82499
	.byte	11,27,189,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80821
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_ISCR',0,27,194,2,3
	.word	82559
	.byte	11,27,197,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80972
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_KRST0',0,27,202,2,3
	.word	82621
	.byte	11,27,205,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81083
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_KRST1',0,27,210,2,3
	.word	82684
	.byte	11,27,213,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81175
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_KRSTCLR',0,27,218,2,3
	.word	82747
	.byte	11,27,221,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81271
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_OCS',0,27,226,2,3
	.word	82812
	.byte	11,27,229,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81417
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM0',0,27,234,2,3
	.word	82873
	.byte	11,27,237,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81489
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM0SV',0,27,242,2,3
	.word	82935
	.byte	11,27,245,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81565
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM1',0,27,250,2,3
	.word	82999
	.byte	11,27,253,2,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81637
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM2',0,27,130,3,3
	.word	83061
	.byte	11,27,133,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81709
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM3',0,27,138,3,3
	.word	83123
	.byte	11,27,141,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81782
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM4',0,27,146,3,3
	.word	83185
	.byte	11,27,149,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81855
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM5',0,27,154,3,3
	.word	83247
	.byte	11,27,157,3,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81928
	.byte	4,2,35,0,0,27
	.byte	'Ifx_STM_TIM6',0,27,162,3,3
	.word	83309
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,28,45,16,4,10
	.byte	'EN0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,28,79,3
	.word	83371
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,28,82,16,4,10
	.byte	'reserved_0',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,28,85,3
	.word	83932
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,28,88,16,4,10
	.byte	'SEL',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	464
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	289
	.byte	22,0,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,28,95,3
	.word	84013
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,28,98,16,4,10
	.byte	'VLD0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'VLD1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'VLD2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'VLD3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'VLD4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'VLD5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'VLD6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'VLD7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'VLD8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'VLD9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	289
	.byte	22,0,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,28,111,3
	.word	84166
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,28,114,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	289
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	464
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,28,121,3
	.word	84414
	.byte	9
	.byte	'_Ifx_FLASH_COMM0_Bits',0,28,124,16,4,10
	.byte	'STATUS',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	289
	.byte	24,0,2,35,0,0,27
	.byte	'Ifx_FLASH_COMM0_Bits',0,28,128,1,3
	.word	84560
	.byte	9
	.byte	'_Ifx_FLASH_COMM1_Bits',0,28,131,1,16,4,10
	.byte	'STATUS',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_COMM1_Bits',0,28,136,1,3
	.word	84658
	.byte	9
	.byte	'_Ifx_FLASH_COMM2_Bits',0,28,139,1,16,4,10
	.byte	'STATUS',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_COMM2_Bits',0,28,144,1,3
	.word	84774
	.byte	9
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,28,147,1,16,4,10
	.byte	'RCODE',0,4
	.word	289
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	481
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_ECCRD_Bits',0,28,153,1,3
	.word	84890
	.byte	9
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,28,156,1,16,4,10
	.byte	'RCODE',0,4
	.word	289
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	481
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_ECCRP_Bits',0,28,162,1,3
	.word	85030
	.byte	9
	.byte	'_Ifx_FLASH_ECCW_Bits',0,28,165,1,16,4,10
	.byte	'WCODE',0,4
	.word	289
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	481
	.byte	8,2,2,35,2,10
	.byte	'DECENCDIS',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'PECENCDIS',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_ECCW_Bits',0,28,171,1,3
	.word	85170
	.byte	9
	.byte	'_Ifx_FLASH_FCON_Bits',0,28,174,1,16,4,10
	.byte	'WSPFLASH',0,1
	.word	464
	.byte	4,4,2,35,0,10
	.byte	'WSECPF',0,1
	.word	464
	.byte	2,2,2,35,0,10
	.byte	'WSDFLASH',0,2
	.word	481
	.byte	6,4,2,35,0,10
	.byte	'WSECDF',0,1
	.word	464
	.byte	3,1,2,35,1,10
	.byte	'IDLE',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'ESLDIS',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'SLEEP',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'NSAFECC',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'STALL',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'RES21',0,1
	.word	464
	.byte	2,2,2,35,2,10
	.byte	'RES23',0,1
	.word	464
	.byte	2,0,2,35,2,10
	.byte	'VOPERM',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'PROERM',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	464
	.byte	3,2,2,35,3,10
	.byte	'PR5V',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_FCON_Bits',0,28,193,1,3
	.word	85309
	.byte	9
	.byte	'_Ifx_FLASH_FPRO_Bits',0,28,196,1,16,4,10
	.byte	'PROINP',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'PRODISP',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'PROIND',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'PRODISD',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'PROINHSMCOTP',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'PROINOTP',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'RES7',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'PROINDBG',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'PRODISDBG',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'PROINHSM',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	464
	.byte	5,0,2,35,1,10
	.byte	'DCFP',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'DDFP',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'DDFPX',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'DDFD',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'ENPE',0,1
	.word	464
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	464
	.byte	8,0,2,35,3,0,27
	.byte	'Ifx_FLASH_FPRO_Bits',0,28,218,1,3
	.word	85671
	.byte	9
	.byte	'_Ifx_FLASH_FSR_Bits',0,28,221,1,16,4,10
	.byte	'FABUSY',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'D0BUSY',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'RES1',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'P0BUSY',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'RES4',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'RES6',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'PROG',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'PFPAGE',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'PROER',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'PFSBER',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'PFDBER',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'PFMBER',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'RES17',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'DFSBER',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'DFDBER',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'DFTBER',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'DFMBER',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'SRIADDERR',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	481
	.byte	2,7,2,35,2,10
	.byte	'PVER',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'SLM',0,1
	.word	464
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	464
	.byte	1,2,2,35,3,10
	.byte	'ORIER',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_FSR_Bits',0,28,254,1,3
	.word	86112
	.byte	9
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,28,129,2,16,4,10
	.byte	'LCKHSMUCB',0,1
	.word	464
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	289
	.byte	22,8,2,35,0,10
	.byte	'VOPERM',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	464
	.byte	5,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,28,137,2,3
	.word	86716
	.byte	9
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,28,140,2,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	2,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	464
	.byte	4,1,2,35,0,10
	.byte	'PROG',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	289
	.byte	12,7,2,35,0,10
	.byte	'PVER',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	464
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	464
	.byte	4,0,2,35,3,0,27
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,28,156,2,3
	.word	86896
	.byte	9
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,28,159,2,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'SELD1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,4
	.word	289
	.byte	27,0,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,28,167,2,3
	.word	87218
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,28,170,2,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	289
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,28,174,2,3
	.word	87399
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,28,177,2,16,4,10
	.byte	'STRT',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	464
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	464
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,28,188,2,3
	.word	87499
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,28,191,2,16,4,10
	.byte	'DATA',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,28,194,2,3
	.word	87715
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,28,197,2,16,4,10
	.byte	'DATA',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,28,200,2,3
	.word	87794
	.byte	9
	.byte	'_Ifx_FLASH_ID_Bits',0,28,203,2,16,4,10
	.byte	'MODREV',0,1
	.word	464
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	464
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_ID_Bits',0,28,208,2,3
	.word	87873
	.byte	9
	.byte	'_Ifx_FLASH_MARD_Bits',0,28,211,2,16,4,10
	.byte	'HMARGIN',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'SELD0',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	481
	.byte	10,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_MARD_Bits',0,28,221,2,3
	.word	87984
	.byte	9
	.byte	'_Ifx_FLASH_MARP_Bits',0,28,224,2,16,4,10
	.byte	'SELP0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'RES1',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'RES2',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'RES3',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	481
	.byte	11,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_MARP_Bits',0,28,233,2,3
	.word	88198
	.byte	9
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,28,236,2,16,4,10
	.byte	'L',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'NSAFECC',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'RAMIN',0,1
	.word	464
	.byte	2,4,2,35,0,10
	.byte	'RAMINSEL',0,1
	.word	464
	.byte	4,0,2,35,0,10
	.byte	'RES8',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'RES9',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'RES10',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'RES11',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'RES12',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'RES13',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'RES14',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'RES15',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'ESR0CNT',0,2
	.word	481
	.byte	12,4,2,35,2,10
	.byte	'RES29',0,1
	.word	464
	.byte	2,2,2,35,3,10
	.byte	'RES30',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_PROCOND_Bits',0,28,254,2,3
	.word	88384
	.byte	9
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,28,129,3,16,4,10
	.byte	'OCDSDIS',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'EDM',0,1
	.word	464
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	289
	.byte	28,0,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,28,135,3,3
	.word	88719
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,28,138,3,16,4,10
	.byte	'HSMDBGDIS',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'TSTIFLCK',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'HSMTSTDIS',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'RES15',0,2
	.word	481
	.byte	12,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,28,146,3,3
	.word	88862
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,28,149,3,16,4,10
	.byte	'HSMBOOTEN',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'SSWWAIT',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'HSMDX',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'HSM6X',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'HSM16X',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'HSM17X',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'HSMENPINS',0,2
	.word	481
	.byte	2,7,2,35,0,10
	.byte	'HSMENRES',0,1
	.word	464
	.byte	2,5,2,35,1,10
	.byte	'DESTDBG',0,1
	.word	464
	.byte	2,3,2,35,1,10
	.byte	'BLKFLAN',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'BOOTSEL',0,1
	.word	464
	.byte	2,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	481
	.byte	14,0,2,35,2,0,27
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,28,166,3,3
	.word	89051
	.byte	9
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,28,169,3,16,4,10
	.byte	'S0ROM',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'S1ROM',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'S2ROM',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'S3ROM',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'S4ROM',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'S5ROM',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'S7ROM',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'S8ROM',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'S9ROM',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'S10ROM',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'S11ROM',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'S12ROM',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'S13ROM',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'S14ROM',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'S15ROM',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'S18ROM',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'S19ROM',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'S20ROM',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'S21ROM',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'S22ROM',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'S23ROM',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'S24ROM',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'S25ROM',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'S26ROM',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	464
	.byte	2,3,2,35,3,10
	.byte	'BML',0,1
	.word	464
	.byte	2,1,2,35,3,10
	.byte	'TP',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,28,201,3,3
	.word	89410
	.byte	9
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,28,204,3,16,4,10
	.byte	'S0L',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'S1L',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'S2L',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'S3L',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'S4L',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'S5L',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'S6L',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'S7L',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'S8L',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'S9L',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'S10L',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'S11L',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'S12L',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'S13L',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'S14L',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'S15L',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'S16L',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'S17L',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'S18L',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'S19L',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'S20L',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'S21L',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'S22L',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'S23L',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'S24L',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'S25L',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'S26L',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	464
	.byte	4,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_PROCONP_Bits',0,28,235,3,3
	.word	90005
	.byte	9
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,28,238,3,16,4,10
	.byte	'S0WOP',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'S1WOP',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'S2WOP',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'S3WOP',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'S4WOP',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'S5WOP',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'S6WOP',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'S7WOP',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'S8WOP',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'S9WOP',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'S10WOP',0,1
	.word	464
	.byte	1,5,2,35,1,10
	.byte	'S11WOP',0,1
	.word	464
	.byte	1,4,2,35,1,10
	.byte	'S12WOP',0,1
	.word	464
	.byte	1,3,2,35,1,10
	.byte	'S13WOP',0,1
	.word	464
	.byte	1,2,2,35,1,10
	.byte	'S14WOP',0,1
	.word	464
	.byte	1,1,2,35,1,10
	.byte	'S15WOP',0,1
	.word	464
	.byte	1,0,2,35,1,10
	.byte	'S16WOP',0,1
	.word	464
	.byte	1,7,2,35,2,10
	.byte	'S17WOP',0,1
	.word	464
	.byte	1,6,2,35,2,10
	.byte	'S18WOP',0,1
	.word	464
	.byte	1,5,2,35,2,10
	.byte	'S19WOP',0,1
	.word	464
	.byte	1,4,2,35,2,10
	.byte	'S20WOP',0,1
	.word	464
	.byte	1,3,2,35,2,10
	.byte	'S21WOP',0,1
	.word	464
	.byte	1,2,2,35,2,10
	.byte	'S22WOP',0,1
	.word	464
	.byte	1,1,2,35,2,10
	.byte	'S23WOP',0,1
	.word	464
	.byte	1,0,2,35,2,10
	.byte	'S24WOP',0,1
	.word	464
	.byte	1,7,2,35,3,10
	.byte	'S25WOP',0,1
	.word	464
	.byte	1,6,2,35,3,10
	.byte	'S26WOP',0,1
	.word	464
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	464
	.byte	4,1,2,35,3,10
	.byte	'DATM',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,28,141,4,3
	.word	90529
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,28,144,4,16,4,10
	.byte	'TAG',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	289
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,28,148,4,3
	.word	91111
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,28,151,4,16,4,10
	.byte	'TAG',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	289
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,28,155,4,3
	.word	91213
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,28,158,4,16,4,10
	.byte	'TAG',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	289
	.byte	26,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,28,162,4,3
	.word	91315
	.byte	9
	.byte	'_Ifx_FLASH_RRAD_Bits',0,28,165,4,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	289
	.byte	29,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RRAD_Bits',0,28,169,4,3
	.word	91417
	.byte	9
	.byte	'_Ifx_FLASH_RRCT_Bits',0,28,172,4,16,4,10
	.byte	'STRT',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	464
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	464
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	481
	.byte	16,0,2,35,2,0,27
	.byte	'Ifx_FLASH_RRCT_Bits',0,28,183,4,3
	.word	91511
	.byte	9
	.byte	'_Ifx_FLASH_RRD0_Bits',0,28,186,4,16,4,10
	.byte	'DATA',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RRD0_Bits',0,28,189,4,3
	.word	91721
	.byte	9
	.byte	'_Ifx_FLASH_RRD1_Bits',0,28,192,4,16,4,10
	.byte	'DATA',0,4
	.word	289
	.byte	32,0,2,35,0,0,27
	.byte	'Ifx_FLASH_RRD1_Bits',0,28,195,4,3
	.word	91794
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,28,198,4,16,4,10
	.byte	'SEL',0,1
	.word	464
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	464
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	464
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	464
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	289
	.byte	22,0,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,28,205,4,3
	.word	91867
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,28,208,4,16,4,10
	.byte	'VLD0',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	289
	.byte	31,0,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,28,212,4,3
	.word	92022
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,28,215,4,16,4,10
	.byte	'reserved_0',0,1
	.word	464
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	289
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	464
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	464
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	464
	.byte	1,0,2,35,3,0,27
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,28,222,4,3
	.word	92127
	.byte	11,28,230,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83371
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ACCEN0',0,28,235,4,3
	.word	92275
	.byte	11,28,238,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83932
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ACCEN1',0,28,243,4,3
	.word	92341
	.byte	11,28,246,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84013
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_CFG',0,28,251,4,3
	.word	92407
	.byte	11,28,254,4,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84166
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_STAT',0,28,131,5,3
	.word	92475
	.byte	11,28,134,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84414
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_CBAB_TOP',0,28,139,5,3
	.word	92544
	.byte	11,28,142,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84560
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_COMM0',0,28,147,5,3
	.word	92612
	.byte	11,28,150,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84658
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_COMM1',0,28,155,5,3
	.word	92677
	.byte	11,28,158,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84774
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_COMM2',0,28,163,5,3
	.word	92742
	.byte	11,28,166,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84890
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ECCRD',0,28,171,5,3
	.word	92807
	.byte	11,28,174,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85030
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ECCRP',0,28,179,5,3
	.word	92872
	.byte	11,28,182,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85170
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ECCW',0,28,187,5,3
	.word	92937
	.byte	11,28,190,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85309
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_FCON',0,28,195,5,3
	.word	93001
	.byte	11,28,198,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85671
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_FPRO',0,28,203,5,3
	.word	93065
	.byte	11,28,206,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86112
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_FSR',0,28,211,5,3
	.word	93129
	.byte	11,28,214,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86716
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMFCON',0,28,219,5,3
	.word	93192
	.byte	11,28,222,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	86896
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMFSR',0,28,227,5,3
	.word	93259
	.byte	11,28,230,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87218
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMMARD',0,28,235,5,3
	.word	93325
	.byte	11,28,238,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87399
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRAD',0,28,243,5,3
	.word	93392
	.byte	11,28,246,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87499
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRCT',0,28,251,5,3
	.word	93459
	.byte	11,28,254,5,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87715
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRD0',0,28,131,6,3
	.word	93526
	.byte	11,28,134,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87794
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_HSMRRD1',0,28,139,6,3
	.word	93593
	.byte	11,28,142,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87873
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_ID',0,28,147,6,3
	.word	93660
	.byte	11,28,150,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87984
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_MARD',0,28,155,6,3
	.word	93722
	.byte	11,28,158,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88198
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_MARP',0,28,163,6,3
	.word	93786
	.byte	11,28,166,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88384
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCOND',0,28,171,6,3
	.word	93850
	.byte	11,28,174,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88719
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONDBG',0,28,179,6,3
	.word	93917
	.byte	11,28,182,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88862
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONHSM',0,28,187,6,3
	.word	93986
	.byte	11,28,190,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89051
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,28,195,6,3
	.word	94055
	.byte	11,28,198,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89410
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONOTP',0,28,203,6,3
	.word	94128
	.byte	11,28,206,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90005
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONP',0,28,211,6,3
	.word	94197
	.byte	11,28,214,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90529
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_PROCONWOP',0,28,219,6,3
	.word	94264
	.byte	11,28,222,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91111
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG0',0,28,227,6,3
	.word	94333
	.byte	11,28,230,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91213
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG1',0,28,235,6,3
	.word	94401
	.byte	11,28,238,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91315
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RDB_CFG2',0,28,243,6,3
	.word	94469
	.byte	11,28,246,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91417
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RRAD',0,28,251,6,3
	.word	94537
	.byte	11,28,254,6,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91511
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RRCT',0,28,131,7,3
	.word	94601
	.byte	11,28,134,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91721
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RRD0',0,28,139,7,3
	.word	94665
	.byte	11,28,142,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91794
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_RRD1',0,28,147,7,3
	.word	94729
	.byte	11,28,150,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91867
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_CFG',0,28,155,7,3
	.word	94793
	.byte	11,28,158,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	92022
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_STAT',0,28,163,7,3
	.word	94861
	.byte	11,28,166,7,9,4,12
	.byte	'U',0
	.word	289
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	305
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	92127
	.byte	4,2,35,0,0,27
	.byte	'Ifx_FLASH_UBAB_TOP',0,28,171,7,3
	.word	94930
	.byte	17,36
	.word	464
	.byte	18,35,0,9
	.byte	'_Ifx_FLASH_CBAB',0,28,182,7,25,48,12
	.byte	'CFG',0
	.word	92407
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	92475
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	92544
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	94998
	.byte	36,2,35,12,0,13
	.word	95007
	.byte	27
	.byte	'Ifx_FLASH_CBAB',0,28,188,7,3
	.word	95090
	.byte	9
	.byte	'_Ifx_FLASH_RDB',0,28,191,7,25,48,12
	.byte	'CFG0',0
	.word	94333
	.byte	4,2,35,0,12
	.byte	'CFG1',0
	.word	94401
	.byte	4,2,35,4,12
	.byte	'CFG2',0
	.word	94469
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	94998
	.byte	36,2,35,12,0,13
	.word	95119
	.byte	27
	.byte	'Ifx_FLASH_RDB',0,28,197,7,3
	.word	95203
	.byte	17,80
	.word	464
	.byte	18,79,0,9
	.byte	'_Ifx_FLASH_UBAB',0,28,200,7,25,92,12
	.byte	'CFG',0
	.word	94793
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	94861
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	94930
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	95231
	.byte	80,2,35,12,0,13
	.word	95240
	.byte	27
	.byte	'Ifx_FLASH_UBAB',0,28,206,7,3
	.word	95323
	.byte	27
	.byte	'Ifx_P_ACCEN0_Bits',0,10,79,3
	.word	8016
	.byte	27
	.byte	'Ifx_P_ACCEN1_Bits',0,10,85,3
	.word	7929
	.byte	27
	.byte	'Ifx_P_ESR_Bits',0,10,107,3
	.word	4979
	.byte	27
	.byte	'Ifx_P_ID_Bits',0,10,115,3
	.word	3032
	.byte	27
	.byte	'Ifx_P_IN_Bits',0,10,137,1,3
	.word	4027
	.byte	27
	.byte	'Ifx_P_IOCR0_Bits',0,10,150,1,3
	.word	3160
	.byte	27
	.byte	'Ifx_P_IOCR12_Bits',0,10,163,1,3
	.word	3807
	.byte	27
	.byte	'Ifx_P_IOCR4_Bits',0,10,176,1,3
	.word	3375
	.byte	27
	.byte	'Ifx_P_IOCR8_Bits',0,10,189,1,3
	.word	3590
	.byte	27
	.byte	'Ifx_P_OMCR0_Bits',0,10,200,1,3
	.word	6559
	.byte	27
	.byte	'Ifx_P_OMCR12_Bits',0,10,210,1,3
	.word	7083
	.byte	27
	.byte	'Ifx_P_OMCR4_Bits',0,10,221,1,3
	.word	6733
	.byte	27
	.byte	'Ifx_P_OMCR8_Bits',0,10,232,1,3
	.word	6907
	.byte	27
	.byte	'Ifx_P_OMCR_Bits',0,10,254,1,3
	.word	7572
	.byte	27
	.byte	'Ifx_P_OMR_Bits',0,10,163,2,3
	.word	2461
	.byte	27
	.byte	'Ifx_P_OMSR0_Bits',0,10,173,2,3
	.word	5896
	.byte	27
	.byte	'Ifx_P_OMSR12_Bits',0,10,184,2,3
	.word	6384
	.byte	27
	.byte	'Ifx_P_OMSR4_Bits',0,10,195,2,3
	.word	6043
	.byte	27
	.byte	'Ifx_P_OMSR8_Bits',0,10,206,2,3
	.word	6212
	.byte	27
	.byte	'Ifx_P_OMSR_Bits',0,10,228,2,3
	.word	7239
	.byte	27
	.byte	'Ifx_P_OUT_Bits',0,10,250,2,3
	.word	2145
	.byte	27
	.byte	'Ifx_P_PCSR_Bits',0,10,135,3,3
	.word	5685
	.byte	27
	.byte	'Ifx_P_PDISC_Bits',0,10,157,3,3
	.word	5319
	.byte	27
	.byte	'Ifx_P_PDR0_Bits',0,10,178,3,3
	.word	4350
	.byte	27
	.byte	'Ifx_P_PDR1_Bits',0,10,199,3,3
	.word	4654
	.byte	27
	.byte	'Ifx_P_ACCEN0',0,10,212,3,3
	.word	8543
	.byte	27
	.byte	'Ifx_P_ACCEN1',0,10,220,3,3
	.word	7976
	.byte	27
	.byte	'Ifx_P_ESR',0,10,228,3,3
	.word	5270
	.byte	27
	.byte	'Ifx_P_ID',0,10,236,3,3
	.word	3111
	.byte	27
	.byte	'Ifx_P_IN',0,10,244,3,3
	.word	4301
	.byte	27
	.byte	'Ifx_P_IOCR0',0,10,252,3,3
	.word	3335
	.byte	27
	.byte	'Ifx_P_IOCR12',0,10,132,4,3
	.word	3987
	.byte	27
	.byte	'Ifx_P_IOCR4',0,10,140,4,3
	.word	3550
	.byte	27
	.byte	'Ifx_P_IOCR8',0,10,148,4,3
	.word	3767
	.byte	27
	.byte	'Ifx_P_OMCR',0,10,156,4,3
	.word	7880
	.byte	27
	.byte	'Ifx_P_OMCR0',0,10,164,4,3
	.word	6693
	.byte	27
	.byte	'Ifx_P_OMCR12',0,10,172,4,3
	.word	7199
	.byte	27
	.byte	'Ifx_P_OMCR4',0,10,180,4,3
	.word	6867
	.byte	27
	.byte	'Ifx_P_OMCR8',0,10,188,4,3
	.word	7043
	.byte	27
	.byte	'Ifx_P_OMR',0,10,196,4,3
	.word	2992
	.byte	27
	.byte	'Ifx_P_OMSR',0,10,204,4,3
	.word	7532
	.byte	27
	.byte	'Ifx_P_OMSR0',0,10,212,4,3
	.word	6003
	.byte	27
	.byte	'Ifx_P_OMSR12',0,10,220,4,3
	.word	6519
	.byte	27
	.byte	'Ifx_P_OMSR4',0,10,228,4,3
	.word	6172
	.byte	27
	.byte	'Ifx_P_OMSR8',0,10,236,4,3
	.word	6344
	.byte	27
	.byte	'Ifx_P_OUT',0,10,244,4,3
	.word	2421
	.byte	27
	.byte	'Ifx_P_PCSR',0,10,252,4,3
	.word	5856
	.byte	27
	.byte	'Ifx_P_PDISC',0,10,132,5,3
	.word	5645
	.byte	27
	.byte	'Ifx_P_PDR0',0,10,140,5,3
	.word	4614
	.byte	27
	.byte	'Ifx_P_PDR1',0,10,148,5,3
	.word	4930
	.byte	13
	.word	8583
	.byte	27
	.byte	'Ifx_P',0,10,193,5,3
	.word	96499
	.byte	27
	.byte	'IfxPort_InputMode',0,9,60,3
	.word	9126
	.byte	27
	.byte	'IfxPort_OutputIdx',0,9,101,3
	.word	9400
	.byte	27
	.byte	'IfxPort_OutputMode',0,9,109,3
	.word	9331
	.byte	27
	.byte	'IfxPort_PadDriver',0,9,125,3
	.word	30314
	.byte	27
	.byte	'IfxPort_State',0,9,137,1,3
	.word	9713
	.byte	27
	.byte	'IfxPort_Pin',0,9,153,1,3
	.word	29974
	.byte	34,1,1,6
	.word	96668
	.byte	27
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,29,129,1,16
	.word	96671
	.byte	28,29,197,5,9,8,12
	.byte	'value',0
	.word	1534
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	1534
	.byte	4,2,35,4,0,27
	.byte	'IfxScuCcu_CcuconRegConfig',0,29,201,5,3
	.word	96716
	.byte	28,29,206,5,9,8,12
	.byte	'pDivider',0
	.word	464
	.byte	1,2,35,0,12
	.byte	'nDivider',0
	.word	464
	.byte	1,2,35,1,12
	.byte	'k2Initial',0
	.word	464
	.byte	1,2,35,2,12
	.byte	'waitTime',0
	.word	26696
	.byte	4,2,35,4,0,27
	.byte	'IfxScuCcu_InitialStepConfig',0,29,212,5,3
	.word	96787
	.byte	28,29,216,5,9,12,12
	.byte	'k2Step',0
	.word	464
	.byte	1,2,35,0,12
	.byte	'waitTime',0
	.word	26696
	.byte	4,2,35,2,12
	.byte	'hookFunction',0
	.word	96676
	.byte	4,2,35,8,0,27
	.byte	'IfxScuCcu_PllStepsConfig',0,29,221,5,3
	.word	96904
	.byte	6
	.word	96668
	.byte	28,29,229,5,9,40,12
	.byte	'ccucon0',0
	.word	96716
	.byte	8,2,35,0,12
	.byte	'ccucon1',0
	.word	96716
	.byte	8,2,35,8,12
	.byte	'ccucon2',0
	.word	96716
	.byte	8,2,35,16,12
	.byte	'ccucon5',0
	.word	96716
	.byte	8,2,35,24,12
	.byte	'ccucon6',0
	.word	96716
	.byte	8,2,35,32,0,27
	.byte	'IfxScuCcu_ClockDistributionConfig',0,29,236,5,3
	.word	97006
	.byte	28,29,240,5,9,8,12
	.byte	'value',0
	.word	1534
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	1534
	.byte	4,2,35,4,0,27
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,29,244,5,3
	.word	97141
	.byte	6
	.word	96904
	.byte	28,29,249,5,9,16,12
	.byte	'numOfPllDividerSteps',0
	.word	464
	.byte	1,2,35,0,12
	.byte	'pllDividerStep',0
	.word	97217
	.byte	4,2,35,4,12
	.byte	'pllInitialStep',0
	.word	96787
	.byte	8,2,35,8,0,27
	.byte	'IfxScuCcu_SysPllConfig',0,29,254,5,3
	.word	97222
	.byte	14,11,74,9,1,15
	.byte	'IfxDma_ChannelBusPriority_low',0,0,15
	.byte	'IfxDma_ChannelBusPriority_medium',0,1,15
	.byte	'IfxDma_ChannelBusPriority_high',0,2,0,27
	.byte	'IfxDma_ChannelBusPriority',0,11,79,3
	.word	97339
	.byte	14,11,84,9,1,15
	.byte	'IfxDma_ChannelIncrementCircular_none',0,0,15
	.byte	'IfxDma_ChannelIncrementCircular_2',0,1,15
	.byte	'IfxDma_ChannelIncrementCircular_4',0,2,15
	.byte	'IfxDma_ChannelIncrementCircular_8',0,3,15
	.byte	'IfxDma_ChannelIncrementCircular_16',0,4,15
	.byte	'IfxDma_ChannelIncrementCircular_32',0,5,15
	.byte	'IfxDma_ChannelIncrementCircular_64',0,6,15
	.byte	'IfxDma_ChannelIncrementCircular_128',0,7,15
	.byte	'IfxDma_ChannelIncrementCircular_256',0,8,15
	.byte	'IfxDma_ChannelIncrementCircular_512',0,9,15
	.byte	'IfxDma_ChannelIncrementCircular_1024',0,10,15
	.byte	'IfxDma_ChannelIncrementCircular_2048',0,11,15
	.byte	'IfxDma_ChannelIncrementCircular_4096',0,12,15
	.byte	'IfxDma_ChannelIncrementCircular_8192',0,13,15
	.byte	'IfxDma_ChannelIncrementCircular_16384',0,14,15
	.byte	'IfxDma_ChannelIncrementCircular_32768',0,15,0,27
	.byte	'IfxDma_ChannelIncrementCircular',0,11,102,3
	.word	97479
	.byte	14,11,107,9,1,15
	.byte	'IfxDma_ChannelIncrementDirection_negative',0,0,15
	.byte	'IfxDma_ChannelIncrementDirection_positive',0,1,0,27
	.byte	'IfxDma_ChannelIncrementDirection',0,11,111,3
	.word	98133
	.byte	14,11,116,9,1,15
	.byte	'IfxDma_ChannelIncrementStep_1',0,0,15
	.byte	'IfxDma_ChannelIncrementStep_2',0,1,15
	.byte	'IfxDma_ChannelIncrementStep_4',0,2,15
	.byte	'IfxDma_ChannelIncrementStep_8',0,3,15
	.byte	'IfxDma_ChannelIncrementStep_16',0,4,15
	.byte	'IfxDma_ChannelIncrementStep_32',0,5,15
	.byte	'IfxDma_ChannelIncrementStep_64',0,6,15
	.byte	'IfxDma_ChannelIncrementStep_128',0,7,0,27
	.byte	'IfxDma_ChannelIncrementStep',0,11,126,3
	.word	98268
	.byte	14,11,131,1,9,1,15
	.byte	'IfxDma_ChannelInterruptControl_thresholdLimitMatch',0,0,15
	.byte	'IfxDma_ChannelInterruptControl_transferCountDecremented',0,1,0,27
	.byte	'IfxDma_ChannelInterruptControl',0,11,135,1,3
	.word	98571
	.byte	14,11,140,1,9,1,15
	.byte	'IfxDma_ChannelMove_1',0,0,15
	.byte	'IfxDma_ChannelMove_2',0,1,15
	.byte	'IfxDma_ChannelMove_4',0,2,15
	.byte	'IfxDma_ChannelMove_8',0,3,15
	.byte	'IfxDma_ChannelMove_16',0,4,15
	.byte	'IfxDma_ChannelMove_3',0,5,15
	.byte	'IfxDma_ChannelMove_5',0,6,15
	.byte	'IfxDma_ChannelMove_9',0,7,0,27
	.byte	'IfxDma_ChannelMove',0,11,150,1,3
	.word	98729
	.byte	14,11,155,1,9,1,15
	.byte	'IfxDma_ChannelMoveSize_8bit',0,0,15
	.byte	'IfxDma_ChannelMoveSize_16bit',0,1,15
	.byte	'IfxDma_ChannelMoveSize_32bit',0,2,15
	.byte	'IfxDma_ChannelMoveSize_64bit',0,3,15
	.byte	'IfxDma_ChannelMoveSize_128bit',0,4,15
	.byte	'IfxDma_ChannelMoveSize_256bit',0,5,0,27
	.byte	'IfxDma_ChannelMoveSize',0,11,163,1,3
	.word	98949
	.byte	14,11,168,1,9,1,15
	.byte	'IfxDma_ChannelOperationMode_single',0,0,15
	.byte	'IfxDma_ChannelOperationMode_continuous',0,1,0,27
	.byte	'IfxDma_ChannelOperationMode',0,11,172,1,3
	.word	99175
	.byte	14,11,177,1,9,1,15
	.byte	'IfxDma_ChannelPattern_0_disable',0,0,15
	.byte	'IfxDma_ChannelPattern_0_mode1',0,1,15
	.byte	'IfxDma_ChannelPattern_0_mode2',0,2,15
	.byte	'IfxDma_ChannelPattern_0_mode3',0,3,15
	.byte	'IfxDma_ChannelPattern_1_disable',0,4,15
	.byte	'IfxDma_ChannelPattern_1_mode1',0,5,15
	.byte	'IfxDma_ChannelPattern_1_mode2',0,6,15
	.byte	'IfxDma_ChannelPattern_1_mode3',0,7,0,27
	.byte	'IfxDma_ChannelPattern',0,11,187,1,3
	.word	99297
	.byte	14,11,201,1,9,1,15
	.byte	'IfxDma_ChannelRequestMode_oneTransferPerRequest',0,0,15
	.byte	'IfxDma_ChannelRequestMode_completeTransactionPerRequest',0,1,0,27
	.byte	'IfxDma_ChannelRequestMode',0,11,205,1,3
	.word	99595
	.byte	14,11,210,1,9,1,15
	.byte	'IfxDma_ChannelRequestSource_peripheral',0,0,15
	.byte	'IfxDma_ChannelRequestSource_daisyChain',0,1,0,27
	.byte	'IfxDma_ChannelRequestSource',0,11,214,1,3
	.word	99745
	.byte	14,11,219,1,9,1,15
	.byte	'IfxDma_ChannelShadow_none',0,0,15
	.byte	'IfxDma_ChannelShadow_src',0,1,15
	.byte	'IfxDma_ChannelShadow_dst',0,2,15
	.byte	'IfxDma_ChannelShadow_srcDirectWrite',0,5,15
	.byte	'IfxDma_ChannelShadow_dstDirectWrite',0,6,15
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch',0,8,15
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch',0,9,15
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch',0,10,15
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch',0,11,15
	.byte	'IfxDma_ChannelShadow_linkedList',0,12,15
	.byte	'IfxDma_ChannelShadow_accumulatedLinkedList',0,13,15
	.byte	'IfxDma_ChannelShadow_safeLinkedList',0,14,15
	.byte	'IfxDma_ChannelShadow_conditionalLinkedList',0,15,0,27
	.byte	'IfxDma_ChannelShadow',0,11,234,1,3
	.word	99871
	.byte	14,11,246,1,9,1,15
	.byte	'IfxDma_MoveEngine_0',0,0,0,27
	.byte	'IfxDma_MoveEngine',0,11,249,1,3
	.word	100454
	.byte	14,11,254,1,9,1,15
	.byte	'IfxDma_SleepMode_enable',0,0,15
	.byte	'IfxDma_SleepMode_disable',0,1,0,27
	.byte	'IfxDma_SleepMode',0,11,130,2,3
	.word	100510
	.byte	28,19,187,3,9,4,12
	.byte	'dma',0
	.word	20561
	.byte	4,2,35,0,0,27
	.byte	'IfxDma_Dma',0,19,190,3,3
	.word	100596
	.byte	27
	.byte	'IfxDma_Dma_Channel',0,19,203,3,3
	.word	29213
	.byte	27
	.byte	'SpiIf_Status',0,17,64,3
	.word	28782
	.byte	14,17,80,9,1,15
	.byte	'SpiIf_DataHeading_lsbFirst',0,0,15
	.byte	'SpiIf_DataHeading_msbFirst',0,1,0,27
	.byte	'SpiIf_DataHeading',0,17,84,3
	.word	100685
	.byte	14,17,87,9,1,15
	.byte	'SpiIf_ShiftClock_shiftTransmitDataOnLeadingEdge',0,0,15
	.byte	'SpiIf_ShiftClock_shiftTransmitDataOnTrailingEdge',0,1,0,27
	.byte	'SpiIf_ShiftClock',0,17,91,3
	.word	100775
	.byte	14,17,94,9,1,15
	.byte	'SpiIf_ClockPolarity_idleLow',0,0,15
	.byte	'SpiIf_ClockPolarity_idleHigh',0,1,0,27
	.byte	'SpiIf_ClockPolarity',0,17,98,3
	.word	100907
	.byte	27
	.byte	'SpiIf_Ch',0,17,104,32
	.word	28583
	.byte	27
	.byte	'SpiIf_ChConfig',0,17,105,32
	.word	32386
	.byte	27
	.byte	'SpiIf',0,17,106,32
	.word	29080
	.byte	13
	.word	28288
	.byte	27
	.byte	'SpiIf_Flags',0,17,112,3
	.word	101056
	.byte	27
	.byte	'SpiIf_Job',0,17,118,3
	.word	28471
	.byte	27
	.byte	'SpiIf_Mode',0,17,126,3
	.word	29437
	.byte	27
	.byte	'SpiIf_funcs',0,17,139,1,3
	.word	28991
	.byte	27
	.byte	'SpiIf_Config',0,17,165,1,3
	.word	29546
	.byte	27
	.byte	'Spi_ErrorChecks',0,17,174,1,3
	.word	28343
	.byte	27
	.byte	'SpiIf_ChMode',0,17,193,1,3
	.word	32087
	.byte	27
	.byte	'Ifx_QSPI_ACCEN0_Bits',0,15,79,3
	.word	25456
	.byte	27
	.byte	'Ifx_QSPI_ACCEN1_Bits',0,15,85,3
	.word	25366
	.byte	27
	.byte	'Ifx_QSPI_BACON_Bits',0,15,103,3
	.word	22808
	.byte	27
	.byte	'Ifx_QSPI_BACONENTRY_Bits',0,15,109,3
	.word	24281
	.byte	27
	.byte	'Ifx_QSPI_CAPCON_Bits',0,15,124,3
	.word	24625
	.byte	27
	.byte	'Ifx_QSPI_CLC_Bits',0,15,134,1,3
	.word	21675
	.byte	27
	.byte	'Ifx_QSPI_DATAENTRY_Bits',0,15,140,1,3
	.word	24366
	.byte	27
	.byte	'Ifx_QSPI_ECON_Bits',0,15,154,1,3
	.word	23081
	.byte	27
	.byte	'Ifx_QSPI_FLAGSCLEAR_Bits',0,15,167,1,3
	.word	23872
	.byte	27
	.byte	'Ifx_QSPI_GLOBALCON1_Bits',0,15,186,1,3
	.word	22482
	.byte	27
	.byte	'Ifx_QSPI_GLOBALCON_Bits',0,15,205,1,3
	.word	22178
	.byte	27
	.byte	'Ifx_QSPI_ID_Bits',0,15,213,1,3
	.word	22055
	.byte	27
	.byte	'Ifx_QSPI_KRST0_Bits',0,15,221,1,3
	.word	25242
	.byte	27
	.byte	'Ifx_QSPI_KRST1_Bits',0,15,228,1,3
	.word	25137
	.byte	27
	.byte	'Ifx_QSPI_KRSTCLR_Bits',0,15,235,1,3
	.word	25030
	.byte	27
	.byte	'Ifx_QSPI_MIXENTRY_Bits',0,15,241,1,3
	.word	24197
	.byte	27
	.byte	'Ifx_QSPI_OCS_Bits',0,15,251,1,3
	.word	24869
	.byte	27
	.byte	'Ifx_QSPI_PISEL_Bits',0,15,136,2,3
	.word	21832
	.byte	27
	.byte	'Ifx_QSPI_RXEXIT_Bits',0,15,142,2,3
	.word	24460
	.byte	27
	.byte	'Ifx_QSPI_RXEXITD_Bits',0,15,148,2,3
	.word	24542
	.byte	27
	.byte	'Ifx_QSPI_SSOC_Bits',0,15,155,2,3
	.word	23775
	.byte	27
	.byte	'Ifx_QSPI_STATUS1_Bits',0,15,166,2,3
	.word	23599
	.byte	27
	.byte	'Ifx_QSPI_STATUS_Bits',0,15,184,2,3
	.word	23294
	.byte	27
	.byte	'Ifx_QSPI_XXLCON_Bits',0,15,191,2,3
	.word	24092
	.byte	27
	.byte	'Ifx_QSPI_ACCEN0',0,15,204,2,3
	.word	25986
	.byte	27
	.byte	'Ifx_QSPI_ACCEN1',0,15,212,2,3
	.word	25416
	.byte	27
	.byte	'Ifx_QSPI_BACON',0,15,220,2,3
	.word	23041
	.byte	27
	.byte	'Ifx_QSPI_BACONENTRY',0,15,228,2,3
	.word	24326
	.byte	27
	.byte	'Ifx_QSPI_CAPCON',0,15,236,2,3
	.word	24820
	.byte	27
	.byte	'Ifx_QSPI_CLC',0,15,244,2,3
	.word	21792
	.byte	27
	.byte	'Ifx_QSPI_DATAENTRY',0,15,252,2,3
	.word	24411
	.byte	27
	.byte	'Ifx_QSPI_ECON',0,15,132,3,3
	.word	23245
	.byte	27
	.byte	'Ifx_QSPI_FLAGSCLEAR',0,15,140,3,3
	.word	24052
	.byte	27
	.byte	'Ifx_QSPI_GLOBALCON',0,15,148,3,3
	.word	22442
	.byte	27
	.byte	'Ifx_QSPI_GLOBALCON1',0,15,156,3,3
	.word	22768
	.byte	27
	.byte	'Ifx_QSPI_ID',0,15,164,3,3
	.word	22138
	.byte	27
	.byte	'Ifx_QSPI_KRST0',0,15,172,3,3
	.word	25326
	.byte	27
	.byte	'Ifx_QSPI_KRST1',0,15,180,3,3
	.word	25202
	.byte	27
	.byte	'Ifx_QSPI_KRSTCLR',0,15,188,3,3
	.word	25097
	.byte	27
	.byte	'Ifx_QSPI_MIXENTRY',0,15,196,3,3
	.word	24241
	.byte	27
	.byte	'Ifx_QSPI_OCS',0,15,204,3,3
	.word	24990
	.byte	27
	.byte	'Ifx_QSPI_PISEL',0,15,212,3,3
	.word	22015
	.byte	27
	.byte	'Ifx_QSPI_RXEXIT',0,15,220,3,3
	.word	24502
	.byte	27
	.byte	'Ifx_QSPI_RXEXITD',0,15,228,3,3
	.word	24585
	.byte	27
	.byte	'Ifx_QSPI_SSOC',0,15,236,3,3
	.word	23832
	.byte	27
	.byte	'Ifx_QSPI_STATUS',0,15,244,3,3
	.word	23559
	.byte	27
	.byte	'Ifx_QSPI_STATUS1',0,15,252,3,3
	.word	23735
	.byte	27
	.byte	'Ifx_QSPI_XXLCON',0,15,132,4,3
	.word	24157
	.byte	13
	.word	26026
	.byte	27
	.byte	'Ifx_QSPI',0,15,175,4,3
	.word	102533
	.byte	19
	.word	30253
	.byte	27
	.byte	'IfxQspi_Mrst_In',0,21,44,3
	.word	102556
	.byte	28,21,47,15,16,12
	.byte	'module',0
	.word	26575
	.byte	4,2,35,0,12
	.byte	'pin',0
	.word	29974
	.byte	8,2,35,4,12
	.byte	'select',0
	.word	30135
	.byte	1,2,35,12,0,19
	.word	102585
	.byte	27
	.byte	'IfxQspi_Mtsr_In',0,21,52,3
	.word	102636
	.byte	28,21,55,15,16,12
	.byte	'module',0
	.word	26575
	.byte	4,2,35,0,12
	.byte	'pin',0
	.word	29974
	.byte	8,2,35,4,12
	.byte	'select',0
	.word	30135
	.byte	1,2,35,12,0,19
	.word	102665
	.byte	27
	.byte	'IfxQspi_Sclk_In',0,21,60,3
	.word	102716
	.byte	19
	.word	32478
	.byte	27
	.byte	'IfxQspi_Slsi_In',0,21,68,3
	.word	102745
	.byte	28,21,79,15,16,12
	.byte	'module',0
	.word	26575
	.byte	4,2,35,0,12
	.byte	'pin',0
	.word	29974
	.byte	8,2,35,4,12
	.byte	'select',0
	.word	9400
	.byte	1,2,35,12,0,19
	.word	102774
	.byte	27
	.byte	'IfxQspi_Mrst_Out',0,21,84,3
	.word	102825
	.byte	19
	.word	30074
	.byte	27
	.byte	'IfxQspi_Mtsr_Out',0,21,92,3
	.word	102855
	.byte	19
	.word	30013
	.byte	27
	.byte	'IfxQspi_Sclk_Out',0,21,100,3
	.word	102885
	.byte	19
	.word	32573
	.byte	27
	.byte	'IfxQspi_Slso_Out',0,21,109,3
	.word	102915
	.byte	19
	.word	30253
	.byte	35
	.byte	'IfxQspi1_MRSTB_P11_3_IN',0,21,118,28
	.word	102945
	.byte	1,1,19
	.word	30074
	.byte	35
	.byte	'IfxQspi1_MTSR_P11_9_OUT',0,21,147,1,29
	.word	102984
	.byte	1,1,19
	.word	30013
	.byte	35
	.byte	'IfxQspi1_SCLK_P11_6_OUT',0,21,166,1,29
	.word	103024
	.byte	1,1,19
	.word	32573
	.byte	35
	.byte	'IfxQspi1_SLSO3_P11_10_OUT',0,21,197,1,29
	.word	103064
	.byte	1,1,27
	.byte	'IfxQspi_ChannelId',0,14,76,3
	.word	27093
	.byte	14,14,126,9,1,15
	.byte	'IfxQspi_Mode_master',0,0,15
	.byte	'IfxQspi_Mode_pwmOverQspi',0,1,15
	.byte	'IfxQspi_Mode_slave',0,2,0,27
	.byte	'IfxQspi_Mode',0,14,131,1,3
	.word	103132
	.byte	27
	.byte	'IfxQspi_PauseRunTransition',0,14,139,1,3
	.word	29709
	.byte	27
	.byte	'IfxQspi_Phase',0,14,154,1,3
	.word	26760
	.byte	14,14,158,1,9,1,15
	.byte	'IfxQspi_PhaseTransitionEvent_endOfWait',0,0,15
	.byte	'IfxQspi_PhaseTransitionEvent_serialClockPolarityChange',0,1,15
	.byte	'IfxQspi_PhaseTransitionEvent_startOfFrame',0,2,15
	.byte	'IfxQspi_PhaseTransitionEvent_transmitBufferEmptied',0,3,15
	.byte	'IfxQspi_PhaseTransitionEvent_receiveBufferFilled',0,4,15
	.byte	'IfxQspi_PhaseTransitionEvent_endOfFrame',0,5,15
	.byte	'IfxQspi_PhaseTransitionEvent_dataNotAvailable',0,6,15
	.byte	'IfxQspi_PhaseTransitionEvent_endOfExpect',0,7,0,27
	.byte	'IfxQspi_PhaseTransitionEvent',0,14,168,1,3
	.word	103289
	.byte	14,14,172,1,9,1,15
	.byte	'IfxQspi_Reset_none',0,0,15
	.byte	'IfxQspi_Reset_stateMachineAndFifo',0,1,15
	.byte	'IfxQspi_Reset_registers',0,2,15
	.byte	'IfxQspi_Reset_kernel',0,3,0,27
	.byte	'IfxQspi_Reset',0,14,178,1,3
	.word	103713
	.byte	27
	.byte	'IfxQspi_RxFifoInt',0,14,188,1,3
	.word	29879
	.byte	14,14,193,1,9,1,15
	.byte	'IfxQspi_SleepMode_enable',0,0,15
	.byte	'IfxQspi_SleepMode_disable',0,1,0,27
	.byte	'IfxQspi_SleepMode',0,14,197,1,3
	.word	103876
	.byte	14,14,239,1,9,1,15
	.byte	'IfxQspi_Suspend_none',0,0,15
	.byte	'IfxQspi_Suspend_hard',0,1,15
	.byte	'IfxQspi_Suspend_soft',0,2,0,27
	.byte	'IfxQspi_Suspend',0,14,244,1,3
	.word	103965
	.byte	27
	.byte	'IfxQspi_TxFifoInt',0,14,254,1,3
	.word	29784
	.byte	27
	.byte	'IfxQspi_SpiMaster_Channel',0,16,234,3,44
	.word	31817
	.byte	27
	.byte	'IfxQspi_SpiMaster_ChannelBasedCs',0,16,248,3,3
	.word	31304
	.byte	27
	.byte	'IfxQspi_SpiMaster_Mode',0,16,129,4,3
	.word	31398
	.byte	27
	.byte	'IfxQspi_SpiMaster_Input',0,16,145,4,3
	.word	32539
	.byte	27
	.byte	'IfxQspi_SpiMaster_Output',0,16,154,4,3
	.word	32650
	.byte	27
	.byte	'IfxQspi_SpiMaster_Dma',0,16,169,4,3
	.word	29269
	.byte	27
	.byte	'IfxQspi_SpiMaster_DmaConfig',0,16,178,4,3
	.word	30736
	.byte	27
	.byte	'IfxQspi_SpiMaster_ErrorFlags',0,16,192,4,3
	.word	31576
	.byte	27
	.byte	'IfxQspi_SpiMaster_InputOutput',0,16,200,4,3
	.word	32700
	.byte	27
	.byte	'IfxQspi_SpiMaster_Pins',0,16,213,4,3
	.word	30604
	.byte	27
	.byte	'IfxQspi_SpiMaster',0,16,226,4,3
	.word	29384
	.byte	27
	.byte	'IfxQspi_SpiMaster_ChannelConfig',0,16,236,4,3
	.word	32738
	.byte	27
	.byte	'IfxQspi_SpiMaster_Config',0,16,141,5,3
	.word	30807
	.byte	28,30,172,2,9,28,12
	.byte	'rxDmaChannel',0
	.word	29213
	.byte	12,2,35,0,12
	.byte	'txDmaChannel',0
	.word	29213
	.byte	12,2,35,12,12
	.byte	'rxDmaChannelId',0
	.word	20566
	.byte	1,2,35,24,12
	.byte	'txDmaChannelId',0
	.word	20566
	.byte	1,2,35,25,12
	.byte	'useDma',0
	.word	464
	.byte	1,2,35,26,0,27
	.byte	'IfxQspi_SpiSlave_Dma',0,30,179,2,3
	.word	104548
	.byte	28,30,183,2,9,4,12
	.byte	'rxDmaChannelId',0
	.word	20566
	.byte	1,2,35,0,12
	.byte	'txDmaChannelId',0
	.word	20566
	.byte	1,2,35,1,12
	.byte	'useDma',0
	.word	464
	.byte	1,2,35,2,0,27
	.byte	'IfxQspi_SpiSlave_DmaConfig',0,30,188,2,3
	.word	104693
	.byte	28,30,192,2,9,2,10
	.byte	'parityError',0,1
	.word	464
	.byte	1,7,2,35,0,10
	.byte	'configurationError',0,1
	.word	464
	.byte	1,6,2,35,0,10
	.byte	'baudrateError',0,1
	.word	464
	.byte	1,5,2,35,0,10
	.byte	'txFifoOverflowError',0,1
	.word	464
	.byte	1,4,2,35,0,10
	.byte	'txFifoUnderflowError',0,1
	.word	464
	.byte	1,3,2,35,0,10
	.byte	'rxFifoOverflowError',0,1
	.word	464
	.byte	1,2,2,35,0,10
	.byte	'rxFifoUnderflowError',0,1
	.word	464
	.byte	1,1,2,35,0,10
	.byte	'expectTimeoutError',0,1
	.word	464
	.byte	1,0,2,35,0,10
	.byte	'slsiMisplacedInactivation',0,1
	.word	464
	.byte	1,7,2,35,1,0,27
	.byte	'IfxQspi_SpiSlave_ErrorFlags',0,30,203,2,3
	.word	104800
	.byte	19
	.word	102665
	.byte	6
	.word	105115
	.byte	19
	.word	102585
	.byte	6
	.word	105125
	.byte	19
	.word	102774
	.byte	6
	.word	105135
	.byte	28,30,207,2,9,32,12
	.byte	'sclk',0
	.word	105120
	.byte	4,2,35,0,12
	.byte	'sclkMode',0
	.word	9126
	.byte	1,2,35,4,12
	.byte	'mtsr',0
	.word	105130
	.byte	4,2,35,8,12
	.byte	'mtsrMode',0
	.word	9126
	.byte	1,2,35,12,12
	.byte	'mrst',0
	.word	105140
	.byte	4,2,35,16,12
	.byte	'mrstMode',0
	.word	9331
	.byte	1,2,35,20,12
	.byte	'slsi',0
	.word	32534
	.byte	4,2,35,24,12
	.byte	'slsiMode',0
	.word	9126
	.byte	1,2,35,28,12
	.byte	'pinDriver',0
	.word	30314
	.byte	1,2,35,29,0,27
	.byte	'IfxQspi_SpiSlave_Pins',0,30,218,2,3
	.word	105145
	.byte	28,30,222,2,9,6,12
	.byte	'clockPolarity',0
	.word	100907
	.byte	1,2,35,0,12
	.byte	'shiftClock',0
	.word	100775
	.byte	1,2,35,1,12
	.byte	'dataHeading',0
	.word	100685
	.byte	1,2,35,2,12
	.byte	'dataWidth',0
	.word	464
	.byte	1,2,35,3,12
	.byte	'parityMode',0
	.word	33802
	.byte	1,2,35,4,0,27
	.byte	'IfxQspi_SpiSlave_Protocol',0,30,229,2,3
	.word	105330
	.byte	28,30,237,2,9,100,12
	.byte	'base',0
	.word	29080
	.byte	40,2,35,0,12
	.byte	'qspi',0
	.word	26575
	.byte	4,2,35,40,12
	.byte	'dataWidth',0
	.word	464
	.byte	1,2,35,44,12
	.byte	'rxJob',0
	.word	28471
	.byte	8,2,35,48,12
	.byte	'txJob',0
	.word	28471
	.byte	8,2,35,56,12
	.byte	'onTransfer',0
	.word	464
	.byte	1,2,35,64,12
	.byte	'dma',0
	.word	104548
	.byte	28,2,35,68,12
	.byte	'errorFlags',0
	.word	104800
	.byte	2,2,35,96,0,27
	.byte	'IfxQspi_SpiSlave',0,30,247,2,3
	.word	105475
	.byte	17,32
	.word	464
	.byte	18,31,0,28,31,52,9,160,1,12
	.byte	'spi1TxBuffer',0
	.word	105638
	.byte	32,2,35,0,12
	.byte	'spi1RxBuffer',0
	.word	105638
	.byte	32,2,35,32,12
	.byte	'spi0TxBuffer',0
	.word	105638
	.byte	32,2,35,64,12
	.byte	'spi0RxBuffer',0
	.word	105638
	.byte	32,2,35,96,12
	.byte	'spi0RxBuffer_temp',0
	.word	105638
	.byte	32,3,35,128,1,0,27
	.byte	'AppQspiBuffer',0,31,62,3
	.word	105647
	.byte	28,31,68,5,248,1,12
	.byte	'spiMaster',0
	.word	29384
	.byte	72,2,35,0,12
	.byte	'spiMasterChannel',0
	.word	31817
	.byte	76,2,35,72,12
	.byte	'spiSlave',0
	.word	105475
	.byte	100,3,35,148,1,0
.L102:
	.byte	28,31,65,9,152,3,12
	.byte	'qspiBuffer',0
	.word	105647
	.byte	160,1,2,35,0,12
	.byte	'drivers',0
	.word	105792
	.byte	248,1,3,35,160,1,0,27
	.byte	'App_QspiCpu',0,31,74,3
	.word	105863
	.byte	17,40
	.word	1534
	.byte	18,9,0
.L103:
	.byte	28,31,76,9,40,12
	.byte	'reg0',0
	.word	105930
	.byte	40,2,35,0,0,27
	.byte	'spi_reg',0,31,79,2
	.word	105939
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L19:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,36,0,3,8,11,15,62,15,0,0,5,59,0,3,8,0,0,6,15,0,73,19,0,0,7,46,1,3,8,32,13,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,0,0,8,5,0,3,8,58,15,59,15,57,15,73,19,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,11,23,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,13,53,0,73,19,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,11,1,0,0,17,1,1,11
	.byte	15,73,19,0,0,18,33,0,47,15,0,0,19,38,0,73,19,0,0,20,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,21,5,0
	.byte	73,19,0,0,22,46,0,3,8,54,15,39,12,63,12,60,12,0,0,23,46,1,49,19,0,0,24,5,0,49,19,0,0,25,29,1,49,19,0,0
	.byte	26,11,0,49,19,0,0,27,22,0,3,8,58,15,59,15,57,15,73,19,0,0,28,19,1,58,15,59,15,57,15,11,15,0,0,29,21,1
	.byte	54,15,39,12,0,0,30,21,1,73,19,54,15,39,12,0,0,31,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0
	.byte	0,32,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,33,21,0,54,15,0,0,34,21,0,54,15,39,12
	.byte	0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L20:
	.word	.L112-.L111
.L111:
	.half	3
	.word	.L114-.L113
.L113:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Reg',0
	.byte	'C:\\TASKING\\TriCore v6.2r2\\ctc\\include\\',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\APP\\inc',0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxCpu_cfg.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Src\\Std\\IfxSrc.h',0
	.byte	0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Port\\Std\\IfxPort.h',0
	.byte	0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Std\\IfxDma.h',0
	.byte	0,0,0
	.byte	'IfxDma_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxDma_cfg.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Qspi\\Std\\IfxQspi.h',0
	.byte	0,0,0
	.byte	'IfxQspi_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Qspi\\SpiMaster\\IfxQspi_SpiMaster.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\SrvSw\\If\\SpiIf.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Ifx_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxSrc_cfg.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_PinMap\\IfxQspi_PinMap.h',0
	.byte	0,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0,0,0,0
	.byte	'stdio.h',0,2,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Platform_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxScu_cfg.h',0
	.byte	0,0,0
	.byte	'IfxStm_regdef.h',0,1,0,0
	.byte	'IfxFlash_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuCcu.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Qspi\\SpiSlave\\IfxQspi_SpiSlave.h',0
	.byte	0,0,0
	.byte	'QspiCpuDemo.h',0,3,0,0,0
.L114:
.L112:
	.sdecl	'.debug_info',debug,cluster('IfxQspiCpuDemo_init')
	.sect	'.debug_info'
.L21:
	.word	313
	.half	3
	.word	.L22
	.byte	4,1
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L24,.L23
	.byte	2
	.word	.L17
	.byte	3
	.byte	'IfxQspiCpuDemo_init',0,1,189,1,6,1,1,1
	.word	.L16,.L55,.L15
	.byte	4
	.word	.L16,.L55
	.byte	5
	.word	.L56,.L16,.L57
	.byte	6
	.word	.L58,.L16,.L57
	.byte	5
	.word	.L59,.L16,.L60
	.byte	6
	.word	.L61,.L16,.L60
	.byte	7
	.byte	'reg',0,2,187,4,17
	.word	.L62,.L63
	.byte	0,0,0,0,5
	.word	.L64,.L65,.L4
	.byte	8
	.word	.L66,.L67
	.byte	9
	.word	.L68,.L65,.L4
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxQspiCpuDemo_init')
	.sect	'.debug_abbrev'
.L22:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1,18,1
	.byte	0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxQspiCpuDemo_init')
	.sect	'.debug_line'
.L23:
	.word	.L116-.L115
.L115:
	.half	3
	.word	.L118-.L117
.L117:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L118:
	.byte	4,2,5,19,7,0,5,2
	.word	.L16
	.byte	3,187,4,1,5,17,9
	.half	.L106-.L16
	.byte	3,1,1,5,21,9
	.half	.L107-.L106
	.byte	1,5,14,9
	.half	.L60-.L107
	.byte	3,8,1,5,10,9
	.half	.L119-.L60
	.byte	3,1,1,4,1,5,23,9
	.half	.L57-.L119
	.byte	3,253,124,1,4,2,5,5,9
	.half	.L65-.L57
	.byte	3,215,4,1,5,17,7,9
	.half	.L120-.L65
	.byte	3,2,1,4,1,5,1,9
	.half	.L4-.L120
	.byte	3,171,123,1,7,9
	.half	.L25-.L4
	.byte	0,1,1
.L116:
	.sdecl	'.debug_ranges',debug,cluster('IfxQspiCpuDemo_init')
	.sect	'.debug_ranges'
.L24:
	.word	-1,.L16,0,.L25-.L16,0,0
	.sdecl	'.debug_info',debug,cluster('IfxQspi_Masterinit')
	.sect	'.debug_info'
.L26:
	.word	357
	.half	3
	.word	.L27
	.byte	4,1
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L29,.L28
	.byte	2
	.word	.L17
	.byte	3
	.byte	'IfxQspi_Masterinit',0,1,112,6,1,1,1
	.word	.L14,.L69,.L13
	.byte	4
	.word	.L14,.L69
	.byte	5
	.byte	'i',0,1,114,37
	.word	.L70,.L71
	.byte	5
	.byte	'spiMasterConfig',0,1,115,37
	.word	.L72,.L73
	.byte	5
	.byte	'spiMasterChannelConfig',0,1,116,37
	.word	.L74,.L75
	.byte	6
	.word	.L76,.L77,.L78
	.byte	7
	.word	.L79,.L77,.L78
	.byte	5
	.byte	'reg',0,2,172,5,21
	.word	.L80,.L81
	.byte	0,0,4
	.word	.L78,.L82
	.byte	5
	.byte	'pins',0,1,132,1,38
	.word	.L83,.L84
	.byte	0,8
	.word	.L85
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxQspi_Masterinit')
	.sect	'.debug_abbrev'
.L27:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxQspi_Masterinit')
	.sect	'.debug_line'
.L28:
	.word	.L122-.L121
.L121:
	.half	3
	.word	.L124-.L123
.L123:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L124:
	.byte	5,6,7,0,5,2
	.word	.L14
	.byte	3,239,0,1,5,45,9
	.half	.L104-.L14
	.byte	3,8,1,5,63,9
	.half	.L125-.L104
	.byte	1,5,48,9
	.half	.L126-.L125
	.byte	3,3,1,5,46,9
	.half	.L127-.L126
	.byte	1,5,44,9
	.half	.L128-.L127
	.byte	3,3,1,5,42,1,5,44,9
	.half	.L129-.L128
	.byte	3,1,1,5,42,1,5,44,9
	.half	.L130-.L129
	.byte	3,1,1,5,42,1,4,2,5,19,9
	.half	.L77-.L130
	.byte	3,173,4,1,5,37,9
	.half	.L105-.L77
	.byte	3,1,1,4,1,5,42,3,211,123,1,5,45,9
	.half	.L78-.L105
	.byte	3,3,1,5,43,9
	.half	.L131-.L78
	.byte	1,5,33,9
	.half	.L132-.L131
	.byte	3,6,1,5,30,9
	.half	.L133-.L132
	.byte	1,5,39,9
	.half	.L134-.L133
	.byte	3,3,1,5,48,9
	.half	.L135-.L134
	.byte	1,5,69,9
	.half	.L136-.L135
	.byte	1,5,46,9
	.half	.L82-.L136
	.byte	3,5,1,5,31,9
	.half	.L137-.L82
	.byte	3,1,1,5,48,9
	.half	.L138-.L137
	.byte	3,3,1,5,54,9
	.half	.L86-.L138
	.byte	3,2,1,5,46,9
	.half	.L87-.L86
	.byte	3,126,1,5,54,9
	.half	.L88-.L87
	.byte	3,2,1,5,61,9
	.half	.L139-.L88
	.byte	3,5,1,5,50,3,127,1,9
	.half	.L140-.L139
	.byte	3,1,1,5,61,9
	.half	.L141-.L140
	.byte	3,1,1,5,50,1,5,49,9
	.half	.L142-.L141
	.byte	3,12,1,5,36,9
	.half	.L143-.L142
	.byte	3,118,1,5,14,9
	.half	.L144-.L143
	.byte	3,11,1,5,57,9
	.half	.L145-.L144
	.byte	3,117,1,5,41,9
	.half	.L146-.L145
	.byte	3,2,1,5,58,9
	.half	.L147-.L146
	.byte	1,5,14,9
	.half	.L148-.L147
	.byte	3,9,1,5,76,9
	.half	.L89-.L148
	.byte	3,77,1,5,36,3,55,1,5,46,9
	.half	.L3-.L89
	.byte	3,4,1,5,39,9
	.half	.L149-.L3
	.byte	3,124,1,5,36,1,5,1,7,9
	.half	.L150-.L149
	.byte	3,7,1,7,9
	.half	.L30-.L150
	.byte	0,1,1
.L122:
	.sdecl	'.debug_ranges',debug,cluster('IfxQspi_Masterinit')
	.sect	'.debug_ranges'
.L29:
	.word	-1,.L14,0,.L30-.L14,0,0
.L85:
	.word	-1,.L14,.L86-.L14,.L87-.L14,.L88-.L14,.L89-.L14,0,0
	.sdecl	'.debug_info',debug,cluster('ISR_qspi1_Tx')
	.sect	'.debug_info'
.L31:
	.word	219
	.half	3
	.word	.L32
	.byte	4,1
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L34,.L33
	.byte	2
	.word	.L17
	.byte	3
	.byte	'ISR_qspi1_Tx',0,1,73,6,1,1,1
	.word	.L6,.L90,.L5
	.byte	4
	.word	.L91
	.byte	5
	.word	.L92,.L93,.L94
	.byte	6
	.word	.L95,.L93,.L94
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ISR_qspi1_Tx')
	.sect	'.debug_abbrev'
.L32:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ISR_qspi1_Tx')
	.sect	'.debug_line'
.L33:
	.word	.L152-.L151
.L151:
	.half	3
	.word	.L154-.L153
.L153:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L154:
	.byte	5,6,7,0,5,2
	.word	.L6
	.byte	3,200,0,1,4,2,5,13,9
	.half	.L93-.L6
	.byte	3,132,4,1,4,1,5,36,9
	.half	.L94-.L93
	.byte	3,255,123,1,5,53,9
	.half	.L155-.L94
	.byte	1,5,1,9
	.half	.L156-.L155
	.byte	3,1,1,9
	.half	.L35-.L156
	.byte	0,1,1
.L152:
	.sdecl	'.debug_ranges',debug,cluster('ISR_qspi1_Tx')
	.sect	'.debug_ranges'
.L34:
	.word	-1,.L6,0,.L35-.L6,0,0
.L91:
	.word	-1,.L6,0,.L90-.L6,-1,.L8,0,.L50-.L8,0,0
	.sdecl	'.debug_info',debug,cluster('ISR_qspi1_Rx')
	.sect	'.debug_info'
.L36:
	.word	223
	.half	3
	.word	.L37
	.byte	4,1
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L39,.L38
	.byte	2
	.word	.L17
	.byte	3
	.byte	'ISR_qspi1_Rx',0,1,86,6,1,1,1
	.word	.L10,.L96,.L9
	.byte	4
	.word	.L10,.L96
	.byte	5
	.word	.L92,.L97,.L98
	.byte	6
	.word	.L95,.L97,.L98
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ISR_qspi1_Rx')
	.sect	'.debug_abbrev'
.L37:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,0,49,16,17,1,18,1
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('ISR_qspi1_Rx')
	.sect	'.debug_line'
.L38:
	.word	.L158-.L157
.L157:
	.half	3
	.word	.L160-.L159
.L159:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L160:
	.byte	5,6,7,0,5,2
	.word	.L10
	.byte	3,213,0,1,4,2,5,13,9
	.half	.L97-.L10
	.byte	3,247,3,1,4,1,5,35,9
	.half	.L98-.L97
	.byte	3,140,124,1,5,52,9
	.half	.L161-.L98
	.byte	1,5,1,9
	.half	.L162-.L161
	.byte	3,1,1,9
	.half	.L40-.L162
	.byte	0,1,1
.L158:
	.sdecl	'.debug_ranges',debug,cluster('ISR_qspi1_Rx')
	.sect	'.debug_ranges'
.L39:
	.word	-1,.L10,0,.L40-.L10,0,0
	.sdecl	'.debug_info',debug,cluster('ISR_qspi1_Er')
	.sect	'.debug_info'
.L41:
	.word	223
	.half	3
	.word	.L42
	.byte	4,1
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L44,.L43
	.byte	2
	.word	.L17
	.byte	3
	.byte	'ISR_qspi1_Er',0,1,99,6,1,1,1
	.word	.L12,.L99,.L11
	.byte	4
	.word	.L12,.L99
	.byte	5
	.word	.L92,.L100,.L101
	.byte	6
	.word	.L95,.L100,.L101
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ISR_qspi1_Er')
	.sect	'.debug_abbrev'
.L42:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,0,49,16,17,1,18,1
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('ISR_qspi1_Er')
	.sect	'.debug_line'
.L43:
	.word	.L164-.L163
.L163:
	.half	3
	.word	.L166-.L165
.L165:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L166:
	.byte	5,6,7,0,5,2
	.word	.L12
	.byte	3,226,0,1,4,2,5,13,9
	.half	.L100-.L12
	.byte	3,234,3,1,4,1,5,33,9
	.half	.L101-.L100
	.byte	3,153,124,1,5,50,9
	.half	.L167-.L101
	.byte	1,5,1,9
	.half	.L168-.L167
	.byte	3,1,1,9
	.half	.L45-.L168
	.byte	0,1,1
.L164:
	.sdecl	'.debug_ranges',debug,cluster('ISR_qspi1_Er')
	.sect	'.debug_ranges'
.L44:
	.word	-1,.L12,0,.L45-.L12,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L46:
	.word	181
	.half	3
	.word	.L47
	.byte	4,1
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L49,.L48
	.byte	2
	.word	.L17
	.byte	3
	.byte	'.cocofun_8',0,1,73,6,1
	.word	.L8,.L50,.L7
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L47:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L48:
	.word	.L170-.L169
.L169:
	.half	3
	.word	.L172-.L171
.L171:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0,0,0,0,0
.L172:
	.byte	5,36,7,0,5,2
	.word	.L8
	.byte	3,203,0,1,5,45,9
	.half	.L173-.L8
	.byte	1,9
	.half	.L50-.L173
	.byte	0,1,1,5,35,0,5,2
	.word	.L8
	.byte	3,216,0,1,5,44,9
	.half	.L173-.L8
	.byte	1,5,45,9
	.half	.L174-.L173
	.byte	3,115,1,7,9
	.half	.L50-.L174
	.byte	0,1,1,5,33,0,5,2
	.word	.L8
	.byte	3,229,0,1,5,42,9
	.half	.L173-.L8
	.byte	1,5,45,9
	.half	.L174-.L173
	.byte	3,102,1,7,9
	.half	.L50-.L174
	.byte	0,1,1
.L170:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L49:
	.word	-1,.L8,0,.L50-.L8,0,0
	.sdecl	'.debug_info',debug,cluster('g_QspiCpu')
	.sect	'.debug_info'
.L51:
	.word	170
	.half	3
	.word	.L52
	.byte	4,1
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1,2
	.word	.L17
	.byte	3
	.byte	'g_QspiCpu',0,23,49,13
	.word	.L102
	.byte	1,5,3
	.word	g_QspiCpu
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('g_QspiCpu')
	.sect	'.debug_abbrev'
.L52:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('qspi_slave_reg_st')
	.sect	'.debug_info'
.L53:
	.word	178
	.half	3
	.word	.L54
	.byte	4,1
	.byte	'..\\APP\\src\\QspiCpuDemo.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1,2
	.word	.L17
	.byte	3
	.byte	'qspi_slave_reg_st',0,23,51,9
	.word	.L103
	.byte	1,5,3
	.word	qspi_slave_reg_st
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('qspi_slave_reg_st')
	.sect	'.debug_abbrev'
.L54:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L7:
	.word	-1,.L8,0,.L50-.L8
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ISR_qspi1_Er')
	.sect	'.debug_loc'
.L11:
	.word	-1,.L12,0,.L99-.L12
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ISR_qspi1_Rx')
	.sect	'.debug_loc'
.L9:
	.word	-1,.L10,0,.L96-.L10
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ISR_qspi1_Tx')
	.sect	'.debug_loc'
.L5:
	.word	-1,.L6,0,.L90-.L6
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxQspiCpuDemo_init')
	.sect	'.debug_loc'
.L15:
	.word	-1,.L16,0,.L55-.L16
	.half	2
	.byte	138,0
	.word	0,0
.L67:
	.word	0,0
.L63:
	.word	-1,.L16,.L106-.L16,.L107-.L16
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxQspi_Masterinit')
	.sect	'.debug_loc'
.L13:
	.word	-1,.L14,0,.L104-.L14
	.half	2
	.byte	138,0
	.word	.L104-.L14,.L69-.L14
	.half	3
	.byte	138,224,0
	.word	.L69-.L14,.L69-.L14
	.half	2
	.byte	138,0
	.word	0,0
.L71:
	.word	0,0
.L84:
	.word	-1,.L14,0,.L69-.L14
	.half	2
	.byte	145,100
	.word	0,0
.L81:
	.word	-1,.L14,.L105-.L14,.L78-.L14
	.half	1
	.byte	95
	.word	0,0
.L75:
	.word	-1,.L14,0,.L69-.L14
	.half	2
	.byte	145,72
	.word	0,0
.L73:
	.word	-1,.L14,0,.L69-.L14
	.half	3
	.byte	145,160,127
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L175:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('ISR_qspi1_Tx')
	.sect	'.debug_frame'
	.word	12
	.word	.L175,.L6,.L90-.L6
	.sdecl	'.debug_frame',debug,cluster('ISR_qspi1_Rx')
	.sect	'.debug_frame'
	.word	12
	.word	.L175,.L10,.L96-.L10
	.sdecl	'.debug_frame',debug,cluster('ISR_qspi1_Er')
	.sect	'.debug_frame'
	.word	12
	.word	.L175,.L12,.L99-.L12
	.sdecl	'.debug_frame',debug,cluster('IfxQspi_Masterinit')
	.sect	'.debug_frame'
	.word	36
	.word	.L175,.L14,.L69-.L14
	.byte	4
	.word	(.L104-.L14)/2
	.byte	19,224,0,22,26,4,19,138,224,0,4
	.word	(.L69-.L104)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('IfxQspiCpuDemo_init')
	.sect	'.debug_frame'
	.word	12
	.word	.L175,.L16,.L55-.L16
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L176:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L176,.L8,.L50-.L8
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\APP\src\QspiCpuDemo.c	   200  
; ..\APP\src\QspiCpuDemo.c	   201  
; ..\APP\src\QspiCpuDemo.c	   202  /** \brief Demo init API
; ..\APP\src\QspiCpuDemo.c	   203   *
; ..\APP\src\QspiCpuDemo.c	   204   * This function is called from main during initialization phase
	; Module end
