	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 07918494"
	.compiler_invocation	"ctc -f cc18928a --dep-file=.sync_on_halt.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc23x -D__CPU_TC23X__ --core=tc1.6.x --fp-model=+float -D__SWPLATFORM__ -DIFX_CFG_USE_COMPILER_DEFAULT_LINKER -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05 -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\APP\\inc -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Configuration -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Scu/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Stm/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x/_Reg -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/SrvSw -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -g2 --make-target=sync_on_halt.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o sync_on_halt.src ..\\sync_on_halt.c"
	.compiler_name		"ctc"
	;source	'..\\sync_on_halt.c'

	
$TC16X
	

; ..\sync_on_halt.c	     1  /**************************************************************************
; ..\sync_on_halt.c	     2  **                                                                        *
; ..\sync_on_halt.c	     3  **  FILE        :  sync_on_halt.c                                         *
; ..\sync_on_halt.c	     4  **                                                                        *
; ..\sync_on_halt.c	     5  **  DESCRIPTION :                                                         *
; ..\sync_on_halt.c	     6  **      Derivative-specific code that is run, every time the target       *
; ..\sync_on_halt.c	     7  **      halts, to synchronize the target and the debugger.                *
; ..\sync_on_halt.c	     8  **                                                                        *
; ..\sync_on_halt.c	     9  **      This code is linked in by default. At the risk of debugging       *
; ..\sync_on_halt.c	    10  **      problems resulting from e.g. cache incoherence, it can be         *
; ..\sync_on_halt.c	    11  **      left out by right-clicking on the file in the C/C++ Projects      *
; ..\sync_on_halt.c	    12  **      view and selecting "Exclude from build...".                       *
; ..\sync_on_halt.c	    13  **                                                                        *
; ..\sync_on_halt.c	    14  **      If a user-defined TriCore processor is being used, this file      *
; ..\sync_on_halt.c	    15  **      may have to be adapted.                                           *
; ..\sync_on_halt.c	    16  **                                                                        *
; ..\sync_on_halt.c	    17  **  Copyright 1996-2018 TASKING BV                                        *
; ..\sync_on_halt.c	    18  **                                                                        *
; ..\sync_on_halt.c	    19  **************************************************************************/
; ..\sync_on_halt.c	    20  
; ..\sync_on_halt.c	    21  #include <stddef.h>
; ..\sync_on_halt.c	    22  
; ..\sync_on_halt.c	    23  /* Code compaction, for example, must be avoided because this creates
; ..\sync_on_halt.c	    24   * function calls and the CSA chain may not be initialized yet when
; ..\sync_on_halt.c	    25   * this is run.
; ..\sync_on_halt.c	    26   *
; ..\sync_on_halt.c	    27   * Inlining must be avoided because it could make the label
; ..\sync_on_halt.c	    28   * _sync_on_halt_end disappear. */
; ..\sync_on_halt.c	    29  #pragma optimize acefgIklmNopRsuvwy
; ..\sync_on_halt.c	    30  
; ..\sync_on_halt.c	    31  /* Because this code is not part of the application program as such,
; ..\sync_on_halt.c	    32   * it makes no sense to profile it or runtime error check */
; ..\sync_on_halt.c	    33  #pragma profiling off
; ..\sync_on_halt.c	    34  #pragma runtime BCM
; ..\sync_on_halt.c	    35  
; ..\sync_on_halt.c	    36  #pragma nomisrac
; ..\sync_on_halt.c	    37  
; ..\sync_on_halt.c	    38  /* This explicit inclusion is used because the file may be compiled
; ..\sync_on_halt.c	    39   * without SFR inclusion */
; ..\sync_on_halt.c	    40  #include __SFRFILE__(__CPU__)
; ..\sync_on_halt.c	    41  
; ..\sync_on_halt.c	    42  /* As above, but for the assembler. */
; ..\sync_on_halt.c	    43  #define _SYNC_ON_HALT_STRINGIFY1(x) _SYNC_ON_HALT_STRINGIFY2(x)
; ..\sync_on_halt.c	    44  #define _SYNC_ON_HALT_STRINGIFY2(y) #y
; ..\sync_on_halt.c	    45  
; ..\sync_on_halt.c	    46  __asm(".include <sfr/reg" _SYNC_ON_HALT_STRINGIFY1(__CPU__) ".def>");
	.include <sfr/regtc23x.def>
	.sdecl	'.text.sync_on_halt._sync_on_halt_end',code,cluster('_sync_on_halt_end')
	.sect	'.text.sync_on_halt._sync_on_halt_end'
	.align	2
	
	.global	_sync_on_halt_end

; ..\sync_on_halt.c	    47  
; ..\sync_on_halt.c	    48  #if        defined(_REGTC27X_H) || defined(_REGTC27XB_H)        \ 
; ..\sync_on_halt.c	    49          || defined(_REGTC27XC_H) || defined(_REGTC27XD_H)       \ 
; ..\sync_on_halt.c	    50          || defined(_REGTC26X_H) || defined(_REGTC26XB_H)        \ 
; ..\sync_on_halt.c	    51          || defined(_REGTC29X_H) || defined(_REGTC29XB_H)        \ 
; ..\sync_on_halt.c	    52          || defined(_REGTC21X_H) || defined(_REGTC22X_H)         \ 
; ..\sync_on_halt.c	    53          || defined(_REGTC23X_H) || defined(_REGTC23X_ADAS_H)    \ 
; ..\sync_on_halt.c	    54          || defined(_REGTC38X_H) \ 
; ..\sync_on_halt.c	    55          || defined(_REGTC39X_H) || defined(_REGTC39XB_H)
; ..\sync_on_halt.c	    56  #if !defined(__CORE_TC0__) && !defined(__CORE_TC1__) && !defined(__CORE_TC2__)
; ..\sync_on_halt.c	    57  #define __CLONE __clone
; ..\sync_on_halt.c	    58  #else
; ..\sync_on_halt.c	    59  #define __CLONE
; ..\sync_on_halt.c	    60  #endif
; ..\sync_on_halt.c	    61  #define __DSPR_SYNC_ON_HALT_LCX __at(0xd0003f80)
; ..\sync_on_halt.c	    62  #define __DSPR_SYNC_ON_HALT_UCX __at(0xd0003fc0)
; ..\sync_on_halt.c	    63  #else
; ..\sync_on_halt.c	    64  #define __CLONE
; ..\sync_on_halt.c	    65  #define __DSPR_SYNC_ON_HALT_LCX
; ..\sync_on_halt.c	    66  #define __DSPR_SYNC_ON_HALT_UCX
; ..\sync_on_halt.c	    67  #endif
; ..\sync_on_halt.c	    68  unsigned int __near __CLONE __align(64) _sync_on_halt_lcx[16] __DSPR_SYNC_ON_HALT_LCX;
; ..\sync_on_halt.c	    69  unsigned int __near __CLONE __align(64) _sync_on_halt_ucx[16] __DSPR_SYNC_ON_HALT_UCX;
; ..\sync_on_halt.c	    70  
; ..\sync_on_halt.c	    71  /* This function should never be called by the target application itself. */
; ..\sync_on_halt.c	    72  extern void _sync_on_halt_end(void)
; Function _sync_on_halt_end
.L5:
_sync_on_halt_end:	.type	func

; ..\sync_on_halt.c	    73  {
; ..\sync_on_halt.c	    74          __nop();
	nop
.L37:

; ..\sync_on_halt.c	    75          __debug();
	debug
.L38:

; ..\sync_on_halt.c	    76  }
	ret
.L26:
	
___sync_on_halt_end_function_end:
	.size	_sync_on_halt_end,___sync_on_halt_end_function_end-_sync_on_halt_end
.L16:
	; End of function
	
	.sdecl	'.text.sync_on_halt._sync_on_halt',code,cluster('_sync_on_halt'),protect
	.sect	'.text.sync_on_halt._sync_on_halt'
	.align	2
	
	.global	_sync_on_halt

; ..\sync_on_halt.c	    77  
; ..\sync_on_halt.c	    78  /* This function should never be called by the target application itself.
; ..\sync_on_halt.c	    79   * __protect__ is needed to prevent this from being eliminated through
; ..\sync_on_halt.c	    80   * unreferenced section removal. */
; ..\sync_on_halt.c	    81  extern void __protect__ _sync_on_halt(void)
; Function _sync_on_halt
.L7:
_sync_on_halt:	.type	func

; ..\sync_on_halt.c	    82  {
; ..\sync_on_halt.c	    83  #if        defined(_REGTC1762_H) || defined(_REGTC1764_H) || defined(_REGTC1766_H) || defined(_REGTC1766B_H)    \ 
; ..\sync_on_halt.c	    84          || defined(_REGTC1792_H) || defined(_REGTC1796_H) || defined(_REGTC1796B_H)                             \ 
; ..\sync_on_halt.c	    85          || defined(_REGTC1164_H) || defined(_REGTC1166_H)                                                       \ 
; ..\sync_on_halt.c	    86  
; ..\sync_on_halt.c	    87  /* Device has no data cache. */
; ..\sync_on_halt.c	    88  
; ..\sync_on_halt.c	    89  #elif      defined(_REGTC1130_H)
; ..\sync_on_halt.c	    90  #  define _EBU 8
; ..\sync_on_halt.c	    91  
; ..\sync_on_halt.c	    92  #  define _DCACHE_0_ADDRESS     0xc0000000U
; ..\sync_on_halt.c	    93  #  define _DCACHE_0_SIZE        64              /* In kBytes. */
; ..\sync_on_halt.c	    94  
; ..\sync_on_halt.c	    95  #elif      defined(_REGTC1167_H) || defined(_REGTC1197_H)                               \ 
; ..\sync_on_halt.c	    96          || defined(_REGTC1724_H) || defined(_REGTC1728_H)                               \ 
; ..\sync_on_halt.c	    97          || defined(_REGTC1184_H) || defined(_REGTC1784_H)                               \ 
; ..\sync_on_halt.c	    98          || defined(_REGTC1767_H) || defined(_REGTC1768_H) || defined(_REGTC1797_H)      \ 
; ..\sync_on_halt.c	    99          || defined(_REGTC1782_H) || defined(_REGTC1783_H) || defined(_REGTC1746_H)      \ 
; ..\sync_on_halt.c	   100          || defined(_REGTC1337_H) || defined(_REGTC1367_H) || defined(_REGTC1387_H)
; ..\sync_on_halt.c	   101  #  if !defined(__CORE_TC131__)
; ..\sync_on_halt.c	   102  #    error Internal inconsistency.
; ..\sync_on_halt.c	   103  #  endif
; ..\sync_on_halt.c	   104  
; ..\sync_on_halt.c	   105  #  define _DCACHE_LINES         256
; ..\sync_on_halt.c	   106  #  define _DCACHE_WAYS          2
; ..\sync_on_halt.c	   107  #  define _DCACHE_LINE_INDEX    4
; ..\sync_on_halt.c	   108  
; ..\sync_on_halt.c	   109  #  define _DCACHE_OFFSET        0x80000000U
; ..\sync_on_halt.c	   110  
; ..\sync_on_halt.c	   111  
; ..\sync_on_halt.c	   112  #elif defined(_REGTC1736_H) || defined(_REGTC21X_H) || defined(_REGTC22X_H) || defined(_REGTC23X_H) || defined(_REGTC23X_ADAS_H)
; ..\sync_on_halt.c	   113  
; ..\sync_on_halt.c	   114  /* Device has no data cache, but does have a Data Line or Read Buffer (DLB or DRB). We need
; ..\sync_on_halt.c	   115   * to execute CACHEI.WI at least once. */
; ..\sync_on_halt.c	   116  
; ..\sync_on_halt.c	   117  #  if !defined(__CORE_TC131__) && !defined(__CORE_TC16X__) && !defined(__CORE_TC162__)
; ..\sync_on_halt.c	   118  #    error Internal inconsistency.
; ..\sync_on_halt.c	   119  #  endif
; ..\sync_on_halt.c	   120  
; ..\sync_on_halt.c	   121  #  define _DCACHE_LINES         1
; ..\sync_on_halt.c	   122  #  define _DCACHE_WAYS          1
; ..\sync_on_halt.c	   123  #  ifdef _REGTC1736_H
; ..\sync_on_halt.c	   124  #   define _DCACHE_LINE_INDEX   4
; ..\sync_on_halt.c	   125  #  else
; ..\sync_on_halt.c	   126  #   define _DCACHE_LINE_INDEX   5
; ..\sync_on_halt.c	   127  #  endif
; ..\sync_on_halt.c	   128  
; ..\sync_on_halt.c	   129  #  define _DCACHE_OFFSET        0x80000000U
; ..\sync_on_halt.c	   130  
; ..\sync_on_halt.c	   131  #elif defined(_REGTC1798_H) || defined(_REGTC1748_H) || defined(_REGTC1791_H) || defined(_REGTC1793_H)
; ..\sync_on_halt.c	   132  
; ..\sync_on_halt.c	   133  #  ifndef __CORE_TC16__
; ..\sync_on_halt.c	   134  #    error Internal inconsistency.
; ..\sync_on_halt.c	   135  #  endif
; ..\sync_on_halt.c	   136  
; ..\sync_on_halt.c	   137  #  define _DCACHE_LINES         128
; ..\sync_on_halt.c	   138  #  define _DCACHE_WAYS          4
; ..\sync_on_halt.c	   139  #  define _DCACHE_LINE_INDEX    5
; ..\sync_on_halt.c	   140  
; ..\sync_on_halt.c	   141  #  define _DCACHE_OFFSET        0x80000000U
; ..\sync_on_halt.c	   142  
; ..\sync_on_halt.c	   143  #elif      defined(_REGTC27X_H) || defined(_REGTC27XB_H) || defined(_REGTC27XC_H) || defined(_REGTC27XD_H)
; ..\sync_on_halt.c	   144  #  if !defined(__CORE_TC16X__) && !defined(__CORE_TC162__)
; ..\sync_on_halt.c	   145  #    error Internal inconsistency.
; ..\sync_on_halt.c	   146  #  endif
; ..\sync_on_halt.c	   147  
; ..\sync_on_halt.c	   148  /* Cache way number occupies bits 0 and 1, index number occupies bits 5...10. */
; ..\sync_on_halt.c	   149  #  define _DCACHE_LINES         64
; ..\sync_on_halt.c	   150  #  define _DCACHE_WAYS          4
; ..\sync_on_halt.c	   151  #  define _DCACHE_LINE_INDEX    5
; ..\sync_on_halt.c	   152  
; ..\sync_on_halt.c	   153  #  define _DCACHE_OFFSET        0x80000000U
; ..\sync_on_halt.c	   154  
; ..\sync_on_halt.c	   155  #elif      defined(_REGTC26X_H) || defined(_REGTC26XB_H) || defined(_REGTC29X_H)        \ 
; ..\sync_on_halt.c	   156          || defined(_REGTC29XB_H) || defined(_REGTC38X_H) || defined(_REGTC39X_H) || defined(_REGTC39XB_H)
; ..\sync_on_halt.c	   157  #  if !defined(__CORE_TC16X__) && !defined(__CORE_TC162__)
; ..\sync_on_halt.c	   158  #    error Internal inconsistency.
; ..\sync_on_halt.c	   159  #  endif
; ..\sync_on_halt.c	   160  
; ..\sync_on_halt.c	   161  /* Cache way number occupies bit 0, index number occupies bits 5...11. */
; ..\sync_on_halt.c	   162  #  define _DCACHE_LINES         128
; ..\sync_on_halt.c	   163  #  define _DCACHE_WAYS          2
; ..\sync_on_halt.c	   164  #  define _DCACHE_LINE_INDEX    5
; ..\sync_on_halt.c	   165  
; ..\sync_on_halt.c	   166  #  define _DCACHE_OFFSET        0x80000000U
; ..\sync_on_halt.c	   167  
; ..\sync_on_halt.c	   168  #else
; ..\sync_on_halt.c	   169  #  error Unknown device. For user-defined devices, this code may have to be adapted.
; ..\sync_on_halt.c	   170  #endif
; ..\sync_on_halt.c	   171  
; ..\sync_on_halt.c	   172  
; ..\sync_on_halt.c	   173  #ifdef _DCACHE_LINES
; ..\sync_on_halt.c	   174          unsigned char *         line_addr;
; ..\sync_on_halt.c	   175          unsigned int            line_index;
; ..\sync_on_halt.c	   176          unsigned int            way_index;
; ..\sync_on_halt.c	   177  #endif
; ..\sync_on_halt.c	   178  
; ..\sync_on_halt.c	   179  #ifdef _EBU
; ..\sync_on_halt.c	   180          EBU_ADDRSEL0_type *     ebu_addrselx;
; ..\sync_on_halt.c	   181          ptrdiff_t               ebu_addrsel_delta;
; ..\sync_on_halt.c	   182          int                     region_index;
; ..\sync_on_halt.c	   183          unsigned int            region_addr_u;
; ..\sync_on_halt.c	   184  #endif
; ..\sync_on_halt.c	   185  
; ..\sync_on_halt.c	   186  #if defined(_EBU) || defined(_DCACHE_0_ADDRESS)
; ..\sync_on_halt.c	   187          unsigned char *         line_addr;
; ..\sync_on_halt.c	   188          unsigned int            line_count;
; ..\sync_on_halt.c	   189          unsigned int            line_index;
; ..\sync_on_halt.c	   190  #endif
; ..\sync_on_halt.c	   191  
; ..\sync_on_halt.c	   192  
; ..\sync_on_halt.c	   193          /* Determine number of EBU regions. (Note that at the time of this writing at
; ..\sync_on_halt.c	   194           * least it was not actually possible for there to be 5 or 6, only 4 or 7.) */
; ..\sync_on_halt.c	   195  #ifndef _EBU
; ..\sync_on_halt.c	   196     /* (Nothing.) */
; ..\sync_on_halt.c	   197  #elif defined(EBU_ADDRSEL7) || !defined(EBU_ADDRSEL3)
; ..\sync_on_halt.c	   198  #  error Unexpected number of EBU_ADDRSELx registers.
; ..\sync_on_halt.c	   199  #elif defined(EBU_ADDRSEL6)
; ..\sync_on_halt.c	   200  #  define _EBU_REGION_COUNT 7
; ..\sync_on_halt.c	   201  #elif defined(EBU_ADDRSEL5)
; ..\sync_on_halt.c	   202  #  define _EBU_REGION_COUNT 6
; ..\sync_on_halt.c	   203  #elif defined(EBU_ADDRSEL4)
; ..\sync_on_halt.c	   204  #  define _EBU_REGION_COUNT 5
; ..\sync_on_halt.c	   205  #else
; ..\sync_on_halt.c	   206  #  define _EBU_REGION_COUNT 4
; ..\sync_on_halt.c	   207  #endif
; ..\sync_on_halt.c	   208  
; ..\sync_on_halt.c	   209          /* ***************************************************************************************
; ..\sync_on_halt.c	   210           * Save PSW and (most of) the address and data registers. (Not all of these will actually
; ..\sync_on_halt.c	   211           * be used, but that is up to the compiler and cannot be predicted reliably.)
; ..\sync_on_halt.c	   212           *
; ..\sync_on_halt.c	   213           * Note that PSW must be saved because of the switch to supervisor mode below, but also
; ..\sync_on_halt.c	   214           * because the remainder of the code may change the flags.
; ..\sync_on_halt.c	   215           *
; ..\sync_on_halt.c	   216           * The st*cx instructions do not affect the CSA list and do not require it to be properly
; ..\sync_on_halt.c	   217           * initialized (which it might not be at this point). */
; ..\sync_on_halt.c	   218          __asm("stlcx _sync_on_halt_lcx");
	stlcx _sync_on_halt_lcx
.L43:

; ..\sync_on_halt.c	   219          __asm("stucx _sync_on_halt_ucx");
	stucx _sync_on_halt_ucx
.L44:

; ..\sync_on_halt.c	   220  
; ..\sync_on_halt.c	   221          /* Set PSW.IO to 2 (supervisor mode). This is needed for certain operations
; ..\sync_on_halt.c	   222           * performed below. */
; ..\sync_on_halt.c	   223          __mtcr(PSW, (int) (((unsigned int) __mfcr(PSW) & 0xfffff3ffU) | 0x800U));
	mfcr	d15,#65028
.L45:
	insert	d15,d15,#2,#10,#2
.L46:
	mtcr	#65028,d15
	isync
.L47:

; ..\sync_on_halt.c	   224  
; ..\sync_on_halt.c	   225          /* ***************************************************************
; ..\sync_on_halt.c	   226           * Initiate flushing of instruction cache. (Waiting for it to
; ..\sync_on_halt.c	   227           * complete is done later, i.e. in parallel with the data
; ..\sync_on_halt.c	   228           * cache flushing.)
; ..\sync_on_halt.c	   229           */
; ..\sync_on_halt.c	   230  #if        defined(_REGTC1130_H)        \ 
; ..\sync_on_halt.c	   231          || defined(_REGTC1762_H) || defined(_REGTC1764_H)                               \ 
; ..\sync_on_halt.c	   232          || defined(_REGTC1766_H) || defined(_REGTC1766B_H)                              \ 
; ..\sync_on_halt.c	   233          || defined(_REGTC1164_H) || defined(_REGTC1166_H)                               \ 
; ..\sync_on_halt.c	   234          || defined(_REGTC1792_H) || defined(_REGTC1796_H) || defined(_REGTC1796B_H)
; ..\sync_on_halt.c	   235  
; ..\sync_on_halt.c	   236  /* Instruction cache flushing not supported for these devices. */
; ..\sync_on_halt.c	   237  
; ..\sync_on_halt.c	   238  #elif      defined(_REGTC1167_H) || defined(_REGTC1197_H)                               \ 
; ..\sync_on_halt.c	   239          || defined(_REGTC1724_H) || defined(_REGTC1728_H) || defined(_REGTC1736_H)      \ 
; ..\sync_on_halt.c	   240          || defined(_REGTC1184_H) || defined(_REGTC1784_H)                               \ 
; ..\sync_on_halt.c	   241          || defined(_REGTC1767_H) || defined(_REGTC1768_H) || defined(_REGTC1797_H)      \ 
; ..\sync_on_halt.c	   242          || defined(_REGTC1782_H) || defined(_REGTC1783_H) || defined(_REGTC1746_H)      \ 
; ..\sync_on_halt.c	   243          || defined(_REGTC1337_H) || defined(_REGTC1367_H) || defined(_REGTC1387_H)
; ..\sync_on_halt.c	   244  
; ..\sync_on_halt.c	   245  #  define _ICACHE_BIT0  PMI_CON1.B.PCINV
; ..\sync_on_halt.c	   246  #  define _ICACHE_BIT1  PMI_CON1.B.PBINV
; ..\sync_on_halt.c	   247  
; ..\sync_on_halt.c	   248  #elif      defined(_REGTC1798_H) || defined(_REGTC1748_H) || defined(_REGTC1791_H) || defined(_REGTC1793_H)     \ 
; ..\sync_on_halt.c	   249          || defined(_REGTC21X_H)  || defined(_REGTC22X_H)  || defined(_REGTC23X_H)  || defined(_REGTC23X_ADAS_H) \ 
; ..\sync_on_halt.c	   250          || defined(_REGTC27X_H)  || defined(_REGTC27XB_H) || defined(_REGTC27XC_H) || defined(_REGTC27XD_H) \ 
; ..\sync_on_halt.c	   251          || defined(_REGTC26X_H)  || defined(_REGTC26XB_H) || defined(_REGTC29X_H)  || defined(_REGTC29XB_H) \ 
; ..\sync_on_halt.c	   252          || defined(_REGTC38X_H)   || defined(_REGTC39X_H) || defined(_REGTC39XB_H)
; ..\sync_on_halt.c	   253  
; ..\sync_on_halt.c	   254  #  define _ICACHE_BIT0_W(bit_val) \ 
; ..\sync_on_halt.c	   255          __mtcr(PCON1, (int) (((unsigned int) __mfcr(PCON1) & 0xfffffffeU) | (bit_val ? 1 : 0)))
; ..\sync_on_halt.c	   256  #  define _ICACHE_BIT1_W(bit_val) \ 
; ..\sync_on_halt.c	   257          __mtcr(PCON1, (int) (((unsigned int) __mfcr(PCON1) & 0xfffffffdU) | (bit_val ? 2 : 0)))
; ..\sync_on_halt.c	   258  
; ..\sync_on_halt.c	   259  #  define _ICACHE_BIT0_R \ 
; ..\sync_on_halt.c	   260          (((unsigned int) __mfcr(PCON1) & 0x1U)!=0U)
; ..\sync_on_halt.c	   261  #  define _ICACHE_BIT1_R \ 
; ..\sync_on_halt.c	   262          (((unsigned int) __mfcr(PCON1) & 0x2U)!=0U)
; ..\sync_on_halt.c	   263  
; ..\sync_on_halt.c	   264  #else
; ..\sync_on_halt.c	   265  #  error Unknown device.
; ..\sync_on_halt.c	   266  #endif
; ..\sync_on_halt.c	   267  
; ..\sync_on_halt.c	   268  
; ..\sync_on_halt.c	   269  #ifdef _ICACHE_BIT0
; ..\sync_on_halt.c	   270          _ICACHE_BIT0 = 1;
; ..\sync_on_halt.c	   271          _ICACHE_BIT1 = 1;
; ..\sync_on_halt.c	   272  #endif
; ..\sync_on_halt.c	   273  
; ..\sync_on_halt.c	   274  #ifdef _ICACHE_BIT0_W
; ..\sync_on_halt.c	   275          _ICACHE_BIT0_W(1);
	mfcr	d15,#37380
	or	d15,#1
	mtcr	#37380,d15
	isync
.L48:

; ..\sync_on_halt.c	   276          _ICACHE_BIT1_W(1);
	mfcr	d15,#37380
	or	d15,#2
	mtcr	#37380,d15
	isync
.L49:

; ..\sync_on_halt.c	   277  #endif
; ..\sync_on_halt.c	   278  
; ..\sync_on_halt.c	   279          /* **********************************************************
; ..\sync_on_halt.c	   280           * Flush data cache. This will also flush the data line
; ..\sync_on_halt.c	   281           * buffer, if there is one. */
; ..\sync_on_halt.c	   282  
; ..\sync_on_halt.c	   283  #ifdef _EBU
; ..\sync_on_halt.c	   284          ebu_addrselx = &EBU_ADDRSEL0;
; ..\sync_on_halt.c	   285  
; ..\sync_on_halt.c	   286          ebu_addrsel_delta = ((EBU_ADDRSEL0_type *) &EBU_ADDRSEL1) - &EBU_ADDRSEL0;
; ..\sync_on_halt.c	   287  
; ..\sync_on_halt.c	   288          for (   region_index = 0; region_index < _EBU_REGION_COUNT;
; ..\sync_on_halt.c	   289                  region_index++, ebu_addrselx += ebu_addrsel_delta       )
; ..\sync_on_halt.c	   290          {
; ..\sync_on_halt.c	   291                  if (!ebu_addrselx->B.REGENAB)
; ..\sync_on_halt.c	   292                  {
; ..\sync_on_halt.c	   293                          continue;
; ..\sync_on_halt.c	   294                  }
; ..\sync_on_halt.c	   295  
; ..\sync_on_halt.c	   296                  if (       (((ebu_addrselx->B.BASE >> 16) & 0xfU) == _EBU)
; ..\sync_on_halt.c	   297                          || (ebu_addrselx->B.ALTENAB && (ebu_addrselx->B.ALTSEG == _EBU))
; ..\sync_on_halt.c	   298                     )
; ..\sync_on_halt.c	   299                  {
; ..\sync_on_halt.c	   300                          /* EBU region is accessible via segment specified by _EBU. */
; ..\sync_on_halt.c	   301  
; ..\sync_on_halt.c	   302                          /* Calculate start address of region. First, bits 28-31. */
; ..\sync_on_halt.c	   303                          region_addr_u = ((unsigned int) _EBU << 28);
; ..\sync_on_halt.c	   304  
; ..\sync_on_halt.c	   305                          /* Add bits 12-27. */
; ..\sync_on_halt.c	   306                          region_addr_u +=        ((unsigned int) (ebu_addrselx->B.BASE & 0xffff) << 12)
; ..\sync_on_halt.c	   307                                                  & (0xffffffffU << (27 - ebu_addrselx->B.MASK));
; ..\sync_on_halt.c	   308  
; ..\sync_on_halt.c	   309                          /* Size measured in 16-byte (128-bit) cache lines.
; ..\sync_on_halt.c	   310                           * For example, when MASK equals 15, the size is
; ..\sync_on_halt.c	   311                           * 4 kBytes, i.e. 256 lines. */
; ..\sync_on_halt.c	   312                          line_count = 1 << (23 - ebu_addrselx->B.MASK);
; ..\sync_on_halt.c	   313  
; ..\sync_on_halt.c	   314                          line_addr = (unsigned char *) region_addr_u;
; ..\sync_on_halt.c	   315  
; ..\sync_on_halt.c	   316                          for (line_index = 0; line_index < line_count; line_index++)
; ..\sync_on_halt.c	   317                          {
; ..\sync_on_halt.c	   318                                  __cacheawi(line_addr);
; ..\sync_on_halt.c	   319  
; ..\sync_on_halt.c	   320                                  line_addr += 16;
; ..\sync_on_halt.c	   321                          }
; ..\sync_on_halt.c	   322                  }
; ..\sync_on_halt.c	   323          }
; ..\sync_on_halt.c	   324  #endif /* #ifdef _EBU */
; ..\sync_on_halt.c	   325  
; ..\sync_on_halt.c	   326  #ifdef _DCACHE_0_ADDRESS
; ..\sync_on_halt.c	   327          line_count = (_DCACHE_0_SIZE * 1024) / 16;
; ..\sync_on_halt.c	   328          line_addr = (unsigned char *) _DCACHE_0_ADDRESS;
; ..\sync_on_halt.c	   329  
; ..\sync_on_halt.c	   330          for (line_index = 0; line_index < line_count; line_index++)
; ..\sync_on_halt.c	   331          {
; ..\sync_on_halt.c	   332                  __cacheawi(line_addr);
; ..\sync_on_halt.c	   333  
; ..\sync_on_halt.c	   334                  line_addr += 16;
; ..\sync_on_halt.c	   335          }
; ..\sync_on_halt.c	   336  #endif
; ..\sync_on_halt.c	   337  
; ..\sync_on_halt.c	   338  #ifdef _DCACHE_1_ADDRESS
; ..\sync_on_halt.c	   339          line_count = (_DCACHE_1_SIZE * 1024) / 16;
; ..\sync_on_halt.c	   340          line_addr = (unsigned char *) _DCACHE_1_ADDRESS;
; ..\sync_on_halt.c	   341  
; ..\sync_on_halt.c	   342          for (line_index = 0; line_index < line_count; line_index++)
; ..\sync_on_halt.c	   343          {
; ..\sync_on_halt.c	   344                  __cacheawi(line_addr);
; ..\sync_on_halt.c	   345  
; ..\sync_on_halt.c	   346                  line_addr += 16;
; ..\sync_on_halt.c	   347          }
; ..\sync_on_halt.c	   348  #endif
; ..\sync_on_halt.c	   349  
; ..\sync_on_halt.c	   350  
; ..\sync_on_halt.c	   351  #ifdef _DCACHE_LINES
; ..\sync_on_halt.c	   352          /* In the case of a TC1.6E core, there is only a Data Read Buffer (DRB),
; ..\sync_on_halt.c	   353           * not a real cache, and as a result a single __cacheiwi(...) would
; ..\sync_on_halt.c	   354           * actually suffice. However, the loop also works. */
; ..\sync_on_halt.c	   355          line_addr = (unsigned char *) _DCACHE_OFFSET;
	movh.a	a15,#32768
.L50:

; ..\sync_on_halt.c	   356  
; ..\sync_on_halt.c	   357          for (line_index = 0; line_index < _DCACHE_LINES; line_index++)
; ..\sync_on_halt.c	   358          {
; ..\sync_on_halt.c	   359                  for (way_index = 0; way_index < _DCACHE_WAYS; way_index++)
; ..\sync_on_halt.c	   360                  {
; ..\sync_on_halt.c	   361                          __cacheiwi( line_addr+way_index );
	cachei.wi	[a15]0

; ..\sync_on_halt.c	   362                  }
; ..\sync_on_halt.c	   363  
; ..\sync_on_halt.c	   364                  line_addr += (1 << _DCACHE_LINE_INDEX);
; ..\sync_on_halt.c	   365          }
; ..\sync_on_halt.c	   366  #endif
; ..\sync_on_halt.c	   367  
; ..\sync_on_halt.c	   368          /* **********************************************************
; ..\sync_on_halt.c	   369           * Wait for code cache flushing to complete.
; ..\sync_on_halt.c	   370           */
; ..\sync_on_halt.c	   371  #ifdef _ICACHE_BIT0
; ..\sync_on_halt.c	   372          while (_ICACHE_BIT0 || _ICACHE_BIT1);
; ..\sync_on_halt.c	   373  #endif
; ..\sync_on_halt.c	   374  
; ..\sync_on_halt.c	   375  #ifdef _ICACHE_BIT0_R
; ..\sync_on_halt.c	   376          while (_ICACHE_BIT0_R || _ICACHE_BIT1_R);
.L2:
.L3:
	mfcr	d15,#37380
	jnz.t	d15:0,.L3
.L51:
	mfcr	d15,#37380
	jnz.t	d15:1,.L2
.L52:

; ..\sync_on_halt.c	   377  #endif
; ..\sync_on_halt.c	   378  
; ..\sync_on_halt.c	   379          /* ***************************************************************************************
; ..\sync_on_halt.c	   380           * Restore registers. */
; ..\sync_on_halt.c	   381  
; ..\sync_on_halt.c	   382          /* If we switched to supervisor mode above, this restores the prior mode
; ..\sync_on_halt.c	   383           * as well. */
; ..\sync_on_halt.c	   384          __mtcr(PSW, _sync_on_halt_ucx[1]);
	ld.w	d15,_sync_on_halt_ucx+4
.L53:
	mtcr	#65028,d15
	isync
.L54:

; ..\sync_on_halt.c	   385          __asm("lducx _sync_on_halt_ucx");
	lducx _sync_on_halt_ucx
.L55:

; ..\sync_on_halt.c	   386          __asm("ldlcx _sync_on_halt_lcx");
	ldlcx _sync_on_halt_lcx
.L56:

; ..\sync_on_halt.c	   387  
; ..\sync_on_halt.c	   388          /* ***************************************************************************************
; ..\sync_on_halt.c	   389           * Flush pipeline. */
; ..\sync_on_halt.c	   390  
; ..\sync_on_halt.c	   391          __dsync();              /* Synchronize data. */
	dsync
.L57:

; ..\sync_on_halt.c	   392          __isync();              /* Synchronize instructions. */
	isync
.L58:

; ..\sync_on_halt.c	   393          __nop();                /*  */
	nop
.L59:

; ..\sync_on_halt.c	   394          __nop();                /* TC113_CPU9. */
	nop
.L60:

; ..\sync_on_halt.c	   395  
; ..\sync_on_halt.c	   396          /* No function call should be used here, because the CSA may not have
; ..\sync_on_halt.c	   397           * been initialized yet. */
; ..\sync_on_halt.c	   398          __asm("j _sync_on_halt_end");
	j _sync_on_halt_end
.L61:

; ..\sync_on_halt.c	   399          return;
; ..\sync_on_halt.c	   400  }
	ret
.L27:
	
___sync_on_halt_function_end:
	.size	_sync_on_halt,___sync_on_halt_function_end-_sync_on_halt
.L21:
	; End of function
	
	.sdecl	'.zbss.clone.sync_on_halt._sync_on_halt_lcx',data,cluster('_sync_on_halt_lcx') at 0xd0003f80
	.sect	'.zbss.clone.sync_on_halt._sync_on_halt_lcx'
	.global	_sync_on_halt_lcx
	.align	64
_sync_on_halt_lcx:	.type	object
	.size	_sync_on_halt_lcx,64
	.space	64
	.sdecl	'.zbss.clone.sync_on_halt._sync_on_halt_ucx',data,cluster('_sync_on_halt_ucx') at 0xd0003fc0
	.sect	'.zbss.clone.sync_on_halt._sync_on_halt_ucx'
	.global	_sync_on_halt_ucx
	.align	64
_sync_on_halt_ucx:	.type	object
	.size	_sync_on_halt_ucx,64
	.space	64
	.calls	'_sync_on_halt_end','',0
	.calls	'_sync_on_halt','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L9:
	.word	408
	.half	3
	.word	.L10
	.byte	4
.L8:
	.byte	1
	.byte	'..\\sync_on_halt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L11
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	140
	.byte	4
	.byte	'__cacheiwi',0,1,1,1,1,5
	.byte	'p',0
	.word	157
	.byte	0,2
	.byte	'int',0,4,5,4
	.byte	'__mtcr',0,1,1,1,1,6
	.word	186
	.byte	6
	.word	186
	.byte	0,7
	.word	186
	.byte	8
	.byte	'__mfcr',0
	.word	216
	.byte	1,1,1,1,6
	.word	186
	.byte	0,9
	.byte	'__debug',0,1,1,1,1,9
	.byte	'__nop',0,1,1,1,1,9
	.byte	'__isync',0,1,1,1,1,9
	.byte	'__dsync',0,1,1,1,1,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	293
	.byte	2
	.byte	'unsigned int',0,4,7,10
	.byte	'__size_t',0,1,1,1
	.word	324
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	186
	.byte	11,1,3
	.word	377
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	379
.L28:
	.byte	12,64
	.word	324
	.byte	13,15,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L10:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,3,8,73,19,0,0,6,5,0,73,19,0,0,7,53,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39
	.byte	12,63,12,60,12,0,0,9,46,0,3,8,54,15,39,12,63,12,60,12,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21
	.byte	0,54,15,0,0,12,1,1,11,15,73,19,0,0,13,33,0,47,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L11:
	.word	.L30-.L29
.L29:
	.half	3
	.word	.L32-.L31
.L31:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\sync_on_halt.c',0,0,0,0,0
.L32:
.L30:
	.sdecl	'.debug_info',debug,cluster('_sync_on_halt_end')
	.sect	'.debug_info'
.L12:
	.word	193
	.half	3
	.word	.L13
	.byte	4,1
	.byte	'..\\sync_on_halt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L15,.L14
	.byte	2
	.word	.L8
	.byte	3
	.byte	'_sync_on_halt_end',0,1,72,13,1,1,1
	.word	.L5,.L26,.L4
	.byte	4
	.word	.L5,.L26
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('_sync_on_halt_end')
	.sect	'.debug_abbrev'
.L13:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('_sync_on_halt_end')
	.sect	'.debug_line'
.L14:
	.word	.L34-.L33
.L33:
	.half	3
	.word	.L36-.L35
.L35:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\sync_on_halt.c',0,0,0,0,0
.L36:
	.byte	5,14,7,0,5,2
	.word	.L5
	.byte	3,201,0,1,5,16,9
	.half	.L37-.L5
	.byte	3,1,1,5,1,9
	.half	.L38-.L37
	.byte	3,1,1,7,9
	.half	.L16-.L38
	.byte	0,1,1
.L34:
	.sdecl	'.debug_ranges',debug,cluster('_sync_on_halt_end')
	.sect	'.debug_ranges'
.L15:
	.word	-1,.L5,0,.L16-.L5,0,0
	.sdecl	'.debug_info',debug,cluster('_sync_on_halt')
	.sect	'.debug_info'
.L17:
	.word	189
	.half	3
	.word	.L18
	.byte	4,1
	.byte	'..\\sync_on_halt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L20,.L19
	.byte	2
	.word	.L8
	.byte	3
	.byte	'_sync_on_halt',0,1,81,25,1,1,1
	.word	.L7,.L27,.L6
	.byte	4
	.word	.L7,.L27
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('_sync_on_halt')
	.sect	'.debug_abbrev'
.L18:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('_sync_on_halt')
	.sect	'.debug_line'
.L19:
	.word	.L40-.L39
.L39:
	.half	3
	.word	.L42-.L41
.L41:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\sync_on_halt.c',0,0,0,0,0
.L42:
	.byte	5,9,7,0,5,2
	.word	.L7
	.byte	3,217,1,1,9
	.half	.L43-.L7
	.byte	3,1,1,5,50,9
	.half	.L44-.L43
	.byte	3,4,1,5,71,9
	.half	.L45-.L44
	.byte	1,5,15,9
	.half	.L46-.L45
	.byte	1,5,9,9
	.half	.L47-.L46
	.byte	3,52,1,9
	.half	.L48-.L47
	.byte	3,1,1,5,21,9
	.half	.L49-.L48
	.byte	3,207,0,1,5,35,9
	.half	.L50-.L49
	.byte	3,6,1,5,16,9
	.half	.L3-.L50
	.byte	3,15,1,5,34,9
	.half	.L51-.L3
	.byte	1,5,38,9
	.half	.L52-.L51
	.byte	3,8,1,5,15,9
	.half	.L53-.L52
	.byte	1,5,9,9
	.half	.L54-.L53
	.byte	3,1,1,9
	.half	.L55-.L54
	.byte	3,1,1,5,16,9
	.half	.L56-.L55
	.byte	3,5,1,9
	.half	.L57-.L56
	.byte	3,1,1,5,14,9
	.half	.L58-.L57
	.byte	3,1,1,9
	.half	.L59-.L58
	.byte	3,1,1,5,9,9
	.half	.L60-.L59
	.byte	3,4,1,5,1,9
	.half	.L61-.L60
	.byte	3,2,1,7,9
	.half	.L21-.L61
	.byte	0,1,1
.L40:
	.sdecl	'.debug_ranges',debug,cluster('_sync_on_halt')
	.sect	'.debug_ranges'
.L20:
	.word	-1,.L7,0,.L21-.L7,0,0
	.sdecl	'.debug_info',debug,cluster('_sync_on_halt_lcx')
	.sect	'.debug_info'
.L22:
	.word	171
	.half	3
	.word	.L23
	.byte	4,1
	.byte	'..\\sync_on_halt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1,2
	.word	.L8
	.byte	3
	.byte	'_sync_on_halt_lcx',0,1,68,41
	.word	.L28
	.byte	1,5,3
	.word	_sync_on_halt_lcx
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('_sync_on_halt_lcx')
	.sect	'.debug_abbrev'
.L23:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('_sync_on_halt_ucx')
	.sect	'.debug_info'
.L24:
	.word	171
	.half	3
	.word	.L25
	.byte	4,1
	.byte	'..\\sync_on_halt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1,2
	.word	.L8
	.byte	3
	.byte	'_sync_on_halt_ucx',0,1,69,41
	.word	.L28
	.byte	1,5,3
	.word	_sync_on_halt_ucx
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('_sync_on_halt_ucx')
	.sect	'.debug_abbrev'
.L25:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('_sync_on_halt')
	.sect	'.debug_loc'
.L6:
	.word	-1,.L7,0,.L27-.L7
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('_sync_on_halt_end')
	.sect	'.debug_loc'
.L4:
	.word	-1,.L5,0,.L26-.L5
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L62:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('_sync_on_halt_end')
	.sect	'.debug_frame'
	.word	24
	.word	.L62,.L5,.L26-.L5
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('_sync_on_halt')
	.sect	'.debug_frame'
	.word	24
	.word	.L62,.L7,.L27-.L7
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
