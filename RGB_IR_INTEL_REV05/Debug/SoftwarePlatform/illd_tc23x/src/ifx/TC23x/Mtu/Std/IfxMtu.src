	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 07918494"
	.compiler_invocation	"ctc -f cc15344a --dep-file=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\.IfxMtu.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc23x -D__CPU_TC23X__ --core=tc1.6.x --fp-model=+float -DNDEBUG -D__SWPLATFORM__ -DIFX_CFG_USE_COMPILER_DEFAULT_LINKER -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05 -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\APP\\inc -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Configuration -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Scu/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Stm/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x/_Reg -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/SrvSw -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -g2 --no-warnings=542 --make-target=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.src ..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c"
	.compiler_name		"ctc"
	;source	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c'

	
$TC16X
	.sdecl	'.zrodata.IfxMtu..10.cnt',data,rom
	.sect	'.zrodata.IfxMtu..10.cnt'
	.align	2
.10.cnt:	.type	object
	.size	.10.cnt,4
	.word	-268038144
	.sdecl	'.zrodata.IfxMtu..11.cnt',data,rom
	.sect	'.zrodata.IfxMtu..11.cnt'
	.align	2
.11.cnt:	.type	object
	.size	.11.cnt,4
	.word	-268042224
	.sdecl	'.zrodata.IfxMtu..12.cnt',data,rom
	.sect	'.zrodata.IfxMtu..12.cnt'
	.align	2
.12.cnt:	.type	object
	.size	.12.cnt,4
	.word	-268042184
	
	.sdecl	'.text.IfxMtu.IfxMtu_clearErrorTracking',code,cluster('IfxMtu_clearErrorTracking')
	.sect	'.text.IfxMtu.IfxMtu_clearErrorTracking'
	.align	2
	
	.global	IfxMtu_clearErrorTracking

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	     2   * \file IfxMtu.c
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	     3   * \brief MTU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	     4   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	     5   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	     7   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	     9   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    10   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    15   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    16   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    22   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    24   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    25  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    26  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    27  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    28  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    29  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    30  #include "IfxMtu.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    31  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    32  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    33   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    34  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    35  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    36  /*-----------------------Private Function Prototypes--------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    37  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    39  /** \brief API to wait for requested tower depth.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    40   * \param towerDepth tower depth of MBIST Ram
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    41   * \param numInstructions number of instructions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    42   * \param mbistSel Memory Selection
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    43   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    44   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    45  static void IfxMtu_waitForMbistDone(uint32 towerDepth, uint8 numInstructions, IfxMtu_MbistSel mbistSel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    46  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    47  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    48  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    49  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    50  /*-------------------------Function Implementations---------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    52  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    53  void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_clearErrorTracking
.L108:
IfxMtu_clearErrorTracking:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    54  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    55      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	fcall	.cocofun_21
.L511:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    56      mc->ECCD.U |= (1 << IFX_MC_ECCD_TRC_OFF);
	or	d15,#16
	st.h	[a15]16,d15
.L834:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    57  }
	ret
.L473:
	
__IfxMtu_clearErrorTracking_function_end:
	.size	IfxMtu_clearErrorTracking,__IfxMtu_clearErrorTracking_function_end-IfxMtu_clearErrorTracking
.L247:
	; End of function
	
	.sdecl	'.text.IfxMtu..cocofun_21',code,cluster('.cocofun_21')
	.sect	'.text.IfxMtu..cocofun_21'
	.align	2
; Function .cocofun_21
.L110:
.cocofun_21:	.type	func
; Function body .cocofun_21, coco_iter:0
	fcall	.cocofun_26
.L509:
	ld.hu	d15,[a15]16
.L955:
	fret
.L322:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_26',code,cluster('.cocofun_26')
	.sect	'.text.IfxMtu..cocofun_26'
	.align	2
; Function .cocofun_26
.L112:
.cocofun_26:	.type	func
; Function body .cocofun_26, coco_iter:1
	sha	d15,d4,#8
	ld.w	d0,.10.cnt
.L508:
	add	d15,d0
.L979:
	mov.a	a15,d15
.L510:
	fret
.L347:
	; End of function
	.sdecl	'.text.IfxMtu.IfxMtu_clearSram',code,cluster('IfxMtu_clearSram')
	.sect	'.text.IfxMtu.IfxMtu_clearSram'
	.align	2
	
	.global	IfxMtu_clearSram

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    58  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    59  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    60  void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_clearSram
.L114:
IfxMtu_clearSram:	.type	func
	mov	d8,d4
	sub.a	a10,#24
.L512:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    61  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    62      uint8  isEndInitEnabled = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    63      uint16 password         = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    64  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    65      password = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d9,#0
	call	IfxScuWdt_getSafetyWatchdogPassword
.L513:
	mov	d10,d2

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   452  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   453      return password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   454  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   455  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   456  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   458  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
	fcall	.cocofun_22
.L677:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    66  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    67      /* Check if the Endinit is cleared by application. If not, then handle it internally inside teh function.*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    68      if (IfxScuWdt_getSafetyWatchdogEndInit() == 1U)
	jz.t	d15:0,.L2
.L678:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    69      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    70          /* Clear EndInit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    71          IfxScuWdt_clearSafetyEndinit(password);
	mov	d4,d10
	call	IfxScuWdt_clearSafetyEndinit
.L515:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    72          isEndInitEnabled = 1;
	mov	d9,#1
.L2:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    73      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    74  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    75      IfxMtu_clearSramStart(mbistSel);
	mov	d4,d8
	call	IfxMtu_clearSramStart
.L679:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    76  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    77      /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    78      IfxScuWdt_setSafetyEndinit(password);
	mov	d4,d10
	call	IfxScuWdt_setSafetyEndinit
.L382:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    79  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    80      /* wait for the end of the fill operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    81      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    82      IfxMtu_waitForMbistDone(IfxMtu_sramTable[mbistSel].mbistDelay, 1, mbistSel);
	fcall	.cocofun_29
.L518:
	addsc.a	a15,a15,d15,#0
.L680:
	mov	d6,d8
.L516:
	ld.w	d4,[a15]8
.L681:
	mov	d5,#1
	call	IfxMtu_waitForMbistDone
.L517:
	sha	d15,d8,#8
.L682:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    83      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mc->MSTATUS.B.DONE != 0);
	fcall	.cocofun_23
	ld.hu	d15,[a3]4102
	jnz.t	d15:0,.L4
	fcall	.cocofun_17
	st.a	[a10],a15
	fcall	.cocofun_18
	st.a	[a10]4,a15
	fcall	.cocofun_13
	st.a	[a10]8,a15
	mov	d15,#83
	st.w	[a10]12,d15
	movh.a	a15,#@his(_999001___func__)
	lea	a15,[a15]@los(_999001___func__)
	st.a	[a10]16,a15
	fcall	.cocofun_14
	call	printf
.L683:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    84  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    85      while (!IfxMtu_isMbistDone(mbistSel))
	j	.L4
.L5:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    86      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    87          __nop();
	nop
.L4:
	mov	d4,d8
	call	IfxMtu_isMbistDone
.L684:
	jeq	d2,#0,.L5
.L685:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    88      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    89  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    90      /* Clear EndInit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    91      IfxScuWdt_clearSafetyEndinit(password);
	mov	d4,d10
	call	IfxScuWdt_clearSafetyEndinit
.L686:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    92  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    93      IfxMtu_clearSramContinue(mbistSel);
	mov	d4,d8
	call	IfxMtu_clearSramContinue
.L687:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    94  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    95      if (isEndInitEnabled == 1)
	jeq	d9,#0,.L6
.L688:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    96      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    97          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    98          IfxScuWdt_setSafetyEndinit(password);
	mov	d4,d10
.L519:
	j	IfxScuWdt_setSafetyEndinit
.L6:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	    99      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   100  }
	ret
.L375:
	
__IfxMtu_clearSram_function_end:
	.size	IfxMtu_clearSram,__IfxMtu_clearSram_function_end-IfxMtu_clearSram
.L202:
	; End of function
	
	.sdecl	'.text.IfxMtu..cocofun_29',code,cluster('.cocofun_29')
	.sect	'.text.IfxMtu..cocofun_29'
	.align	2
; Function .cocofun_29
.L116:
.cocofun_29:	.type	func
; Function body .cocofun_29, coco_iter:1
	mul	d15,d8,#12
	movh.a	a15,#@his(IfxMtu_sramTable)
	lea	a15,[a15]@los(IfxMtu_sramTable)
.L994:
	fret
.L362:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_23',code,cluster('.cocofun_23')
	.sect	'.text.IfxMtu..cocofun_23'
	.align	2
; Function .cocofun_23
.L118:
.cocofun_23:	.type	func
; Function body .cocofun_23, coco_iter:0
	mov.a	a15,d15
.L964:
	movh.a	a3,#61446
	add.a	a3,a15
.L965:
	fret
.L332:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_22',code,cluster('.cocofun_22')
	.sect	'.text.IfxMtu..cocofun_22'
	.align	2
; Function .cocofun_22
.L120:
.cocofun_22:	.type	func
; Function body .cocofun_22, coco_iter:0

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   452  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   453      return password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   454  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   455  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   456  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   458  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
	movh.a	a15,#61443
.L514:
	ld.w	d15,[a15]@los(0xf00360f0)
	fret
.L327:
	; End of function
	.sdecl	'.text.IfxMtu.IfxMtu_clearSramContinue',code,cluster('IfxMtu_clearSramContinue')
	.sect	'.text.IfxMtu.IfxMtu_clearSramContinue'
	.align	2
	
	.global	IfxMtu_clearSramContinue

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   101  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   102  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   103  void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_clearSramContinue
.L122:
IfxMtu_clearSramContinue:	.type	func
	mov	d15,d4
.L521:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   104  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   105      /* Before clearing the ECC error flags we've to issue a dummy SRAM access to get a valid memory output */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   106      IfxMtu_readSramAddress(mbistSel, 0x0000);
	mov	d5,#0
	call	IfxMtu_readSramAddress
.L520:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   107  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   108      /* Note: a SMU alarm will be flagged HERE if the wrong ECC has been written! */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   109      IfxMtu_disableMbistShell(mbistSel);
	mov	d4,d15
	call	IfxMtu_disableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   110  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   111      /* for auto-init memories: wait for the end of the clear operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   112      while (IfxMtu_isAutoInitRunning(mbistSel))
.L7:
	mov	d4,d15
	call	IfxMtu_isAutoInitRunning
.L693:
	jne	d2,#0,.L7
.L694:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   113      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   114  }
	ret
.L383:
	
__IfxMtu_clearSramContinue_function_end:
	.size	IfxMtu_clearSramContinue,__IfxMtu_clearSramContinue_function_end-IfxMtu_clearSramContinue
.L207:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_clearSramStart',code,cluster('IfxMtu_clearSramStart')
	.sect	'.text.IfxMtu.IfxMtu_clearSramStart'
	.align	2
	
	.global	IfxMtu_clearSramStart

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   116  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   117  void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_clearSramStart
.L124:
IfxMtu_clearSramStart:	.type	func
	mov	d8,d4
	sub.a	a10,#24
.L522:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   118  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   119      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	fcall	.cocofun_19
.L524:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   120  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   121      IfxMtu_enableMbistShell(mbistSel);
	call	IfxMtu_enableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   122  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   123      /* for auto-init memories: wait for the end of the clear operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   124      while (IfxMtu_isAutoInitRunning(mbistSel))
.L8:
	mov	d4,d8
	call	IfxMtu_isAutoInitRunning
.L699:
	jne	d2,#0,.L8
.L700:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   125      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   126  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   127      /* write valid ECC code for all-zero data into RDBFL registers */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   128      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   129          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mbistSel < IFXMTU_NUM_MBIST_TABLE_ITEMS);
	mov	d15,#88
.L525:
	jlt	d8,d15,.L9
	movh.a	a2,#@his(verboseLevelStr+8)
	ld.a	a2,[a2]@los(verboseLevelStr+8)
	st.a	[a10],a2
	movh.a	a15,#@his(.6.str)
	lea	a15,[a15]@los(.6.str)
	st.a	[a10]4,a15
	fcall	.cocofun_13
	st.a	[a10]8,a15
	mov	d15,#129
	st.w	[a10]12,d15
	movh.a	a15,#@his(_999002___func__)
	lea	a15,[a15]@los(_999002___func__)
	st.a	[a10]16,a15
	fcall	.cocofun_14
	call	printf
.L9:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   130          const IfxMtu_SramItem *item      = (IfxMtu_SramItem *)&IfxMtu_sramTable[mbistSel];
	fcall	.cocofun_16
.L529:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   131  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   132          uint8                  numBlocks = item->numBlocks;
	ld.bu	d8,[a13]
.L528:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   133          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, numBlocks > 0);
	jne	d8,#0,.L10
.L701:
	movh.a	a2,#@his(verboseLevelStr+8)
	ld.a	a2,[a2]@los(verboseLevelStr+8)
	st.a	[a10],a2
	movh.a	a15,#@his(.7.str)
	lea	a15,[a15]@los(.7.str)
	st.a	[a10]4,a15
	fcall	.cocofun_13
	st.a	[a10]8,a15
	mov	d15,#133
	st.w	[a10]12,d15
	movh.a	a15,#@his(_999002___func__)
	lea	a15,[a15]@los(_999002___func__)
	st.a	[a10]16,a15
	fcall	.cocofun_14
	call	printf
.L10:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   134  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   135          uint16                 dataSize   = item->dataSize;
	ld.hu	d0,[a13]2
.L530:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   136          uint8                  eccSize    = item->eccSize;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   137          uint32                 eccInvPos0 = dataSize + item->eccInvPos0;
	ld.bu	d15,[a13]5
.L702:
	ld.bu	d1,[a13]4
.L532:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   138          uint32                 eccInvPos1 = dataSize + item->eccInvPos1;
	add	d2,d15,d0
	ld.bu	d15,[a13]6
.L534:
	add	d3,d15,d0
.L535:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   139  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   140          uint32                 memSize    = dataSize + eccSize;
	add	d0,d1
.L531:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   141  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   142          uint32                 bitPos     = 0;
	mov	d1,#0
.L533:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   143          uint32                 wordIx     = 0;
	mov	d15,d1
.L536:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   144          uint16                 data       = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   145          /* de-serialize data stream into 16bit packets */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   146          uint32                 mem;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   147  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   148          for (mem = 0; mem < numBlocks; ++mem)
	mov	e4,d1,d1
	j	.L11
.L12:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   149          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   150              uint32 i;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   151  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   152              for (i = 0; i < memSize; ++i)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   153              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   154                  if ((i == eccInvPos0) || (i == eccInvPos1))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   155                  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   156                      data |= (1 << bitPos);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   157                  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   158  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   159                  ++bitPos;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   160  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   161                  if (bitPos >= 16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   162                  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   163                      mc->RDBFL[wordIx++].U = data;
	addsc.a	a15,a12,d15,#1
.L703:
	mov	d6,#0
.L538:
	lea	a15,[a15]160
.L704:
	j	.L13
.L14:
	jeq	d6,d2,.L15
.L705:
	jne	d6,d3,.L16
.L15:
	mov	d7,#1
.L706:
	sha	d7,d7,d1
.L539:
	or	d4,d7
.L16:
	add	d1,#1
.L707:
	mov	d7,#16
.L708:
	jlt.u	d1,d7,.L17
.L540:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   164                      bitPos                = 0;
	mov	d1,#0
	st.h	[a15+],d4
.L541:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   165                      data                  = 0;
	mov	d4,d1
.L542:
	add	d15,#1
.L17:
	add	d6,#1
.L13:
	jlt.u	d6,d0,.L14
.L405:
	add	d5,#1
.L11:
	jlt.u	d5,d8,.L12
.L543:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   166                  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   167              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   168          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   169  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   170          /* final word? */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   171          if (bitPos != 0)
	jeq	d1,#0,.L18
.L709:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   172          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   173              mc->RDBFL[wordIx].U = data;
	addsc.a	a15,a12,d15,#1
.L544:
	st.h	[a15]160,d4
.L18:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   174          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   175      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   176  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   177      /* start fill operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   178      uint16 mcontrolMask = 0x4000;                                                                        /* set USERED flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   179      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DINIT_OFF) | (1 << IFX_MC_MCONTROL_START_OFF); /* START = DINIT = 1 */
	mov	d15,#16401
	st.h	[a12]4,d15
.L537:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   180      mc->MCONTROL.U = mcontrolMask | (0 << IFX_MC_MCONTROL_DINIT_OFF) | (1 << IFX_MC_MCONTROL_DINIT_OFF); /* START = 0 */
	mov	d15,#16400
	st.h	[a12]4,d15
.L710:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   181  }
	ret
.L385:
	
__IfxMtu_clearSramStart_function_end:
	.size	IfxMtu_clearSramStart,__IfxMtu_clearSramStart_function_end-IfxMtu_clearSramStart
.L212:
	; End of function
	
	.sdecl	'.text.IfxMtu..cocofun_19',code,cluster('.cocofun_19')
	.sect	'.text.IfxMtu..cocofun_19'
	.align	2
; Function .cocofun_19
.L126:
.cocofun_19:	.type	func
; Function body .cocofun_19, coco_iter:0
	fcall	.cocofun_27
.L578:
	mov.a	a12,d15
.L583:
	fret
.L312:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_27',code,cluster('.cocofun_27')
	.sect	'.text.IfxMtu..cocofun_27'
	.align	2
; Function .cocofun_27
.L128:
.cocofun_27:	.type	func
; Function body .cocofun_27, coco_iter:1
	sha	d15,d8,#8
	ld.w	d0,.10.cnt
.L523:
	add	d15,d0
	fret
.L352:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_16',code,cluster('.cocofun_16')
	.sect	'.text.IfxMtu..cocofun_16'
	.align	2
; Function .cocofun_16
.L130:
.cocofun_16:	.type	func
; Function body .cocofun_16, coco_iter:0
	fcall	.cocofun_29
.L526:
	addsc.a	a13,a15,d15,#0
.L527:
	fret
.L297:
	; End of function
	.sdecl	'.text.IfxMtu.IfxMtu_disableMbistShell',code,cluster('IfxMtu_disableMbistShell')
	.sect	'.text.IfxMtu.IfxMtu_disableMbistShell'
	.align	2
	
	.global	IfxMtu_disableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   182  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   183  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   184  void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_disableMbistShell
.L132:
IfxMtu_disableMbistShell:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   185  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   186      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
	sha	d15,d4,#-5
.L657:
	sha	d15,#2
	ld.w	d0,.11.cnt
.L545:
	fcall	.cocofun_15
.L658:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   187      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   188      *mtuMemtest &= ~mask;
	mov	d15,#-1
.L548:
	xor	d1,d15
.L659:
	and	d0,d1
	st.w	[a15],d0
.L660:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   189  }
	ret
.L363:
	
__IfxMtu_disableMbistShell_function_end:
	.size	IfxMtu_disableMbistShell,__IfxMtu_disableMbistShell_function_end-IfxMtu_disableMbistShell
.L187:
	; End of function
	
	.sdecl	'.text.IfxMtu..cocofun_15',code,cluster('.cocofun_15')
	.sect	'.text.IfxMtu..cocofun_15'
	.align	2
; Function .cocofun_15
.L134:
.cocofun_15:	.type	func
; Function body .cocofun_15, coco_iter:0
	add	d15,d0
.L925:
	mov.a	a15,d15
.L547:
	and	d15,d4,#31
.L546:
	ld.w	d0,[a15]
.L926:
	mov	d1,#1
.L927:
	sha	d1,d1,d15
	fret
.L292:
	; End of function
	.sdecl	'.text.IfxMtu.IfxMtu_enableErrorTracking',code,cluster('IfxMtu_enableErrorTracking')
	.sect	'.text.IfxMtu.IfxMtu_enableErrorTracking'
	.align	2
	
	.global	IfxMtu_enableErrorTracking

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   190  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   191  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   192  void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable)
; Function IfxMtu_enableErrorTracking
.L136:
IfxMtu_enableErrorTracking:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   193  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   194      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	fcall	.cocofun_26
.L549:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   195  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   196      if (enable == FALSE)
	jne	d5,#0,.L19
.L839:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   197      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   198          mc->ECCS.U &= ~(1 << IFX_MC_ECCS_TRE_OFF);
	ld.hu	d15,[a15]14
.L550:
	mov.u	d0,#65519
.L840:
	and	d15,d0
	j	.L20
.L19:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   199      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   200      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   201      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   202          mc->ECCS.U |= (1 << IFX_MC_ECCS_TRE_OFF);
	ld.hu	d15,[a15]14
.L551:
	or	d15,#16
.L20:
	st.h	[a15]14,d15
.L841:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   203      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   204  }
	ret
.L477:
	
__IfxMtu_enableErrorTracking_function_end:
	.size	IfxMtu_enableErrorTracking,__IfxMtu_enableErrorTracking_function_end-IfxMtu_enableErrorTracking
.L252:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_enableMbistShell',code,cluster('IfxMtu_enableMbistShell')
	.sect	'.text.IfxMtu.IfxMtu_enableMbistShell'
	.align	2
	
	.global	IfxMtu_enableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   205  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   206  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   207  void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_enableMbistShell
.L138:
IfxMtu_enableMbistShell:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   208  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   209      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
	sha	d15,d4,#-5
.L665:
	sha	d15,#2
	ld.w	d0,.11.cnt
.L552:
	fcall	.cocofun_15
.L553:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   210      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   211      *mtuMemtest |= mask;
	or	d0,d1
	st.w	[a15],d0
.L666:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   212  }
	ret
.L369:
	
__IfxMtu_enableMbistShell_function_end:
	.size	IfxMtu_enableMbistShell,__IfxMtu_enableMbistShell_function_end-IfxMtu_enableMbistShell
.L192:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_getSystemAddress',code,cluster('IfxMtu_getSystemAddress')
	.sect	'.text.IfxMtu.IfxMtu_getSystemAddress'
	.align	2
	
	.global	IfxMtu_getSystemAddress

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   213  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   214  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   215  uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress)
; Function IfxMtu_getSystemAddress
.L140:
IfxMtu_getSystemAddress:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   216  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   217      uint32 sramAddress   = trackedSramAddress.B.ADDR;
	extr.u	d15,d5,#0,#16
	extr.u	d0,d5,#0,#13
.L554:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   218      uint32 mbi           = trackedSramAddress.B.MBI;
	extr.u	d1,d15,#13,#3
.L556:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   219      uint32 systemAddress = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   221      switch (mbistSel)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   222      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   223      case IfxMtu_MbistSel_cpu0Pspr:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   224          systemAddress = 0x70100000 | ((sramAddress << 3) | ((mbi & 1) << 2));
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   225          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   226  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   227      case IfxMtu_MbistSel_cpu0Dspr:
	mov	d15,#14
	jeq	d15,d4,.L21
.L846:
	mov	d15,#16
	jeq	d15,d4,.L22
.L847:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   228          systemAddress = 0x70000000 | ((sramAddress << 4) | ((mbi & 3) << 2));
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   229          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   230  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   231      case IfxMtu_MbistSel_lmu:
	mov	d15,#79
	jeq	d15,d4,.L23
	j	.L24
.L22:
	sh	d0,#3
.L555:
	and	d15,d1,#1
.L848:
	sh	d15,#2
.L849:
	or	d0,d15
.L850:
	movh	d2,#28688
	j	.L25
.L21:
	sh	d0,#4
.L557:
	and	d15,d1,#3
.L851:
	sh	d15,#2
.L852:
	or	d0,d15
.L853:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   232          systemAddress = 0xb0000000 | (sramAddress << 3);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   233          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   234  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   235      default:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   236          systemAddress = 0; /* unsupported address descrambling */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   237      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   238  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   239      return systemAddress;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   240  }
	insert	d2,d0,#7,#28,#3
	ret
.L23:
	sh	d0,#3
.L558:
	movh	d2,#45056
.L25:
	or	d2,d0
	ret
.L24:
	mov	d2,#0
	ret
.L481:
	
__IfxMtu_getSystemAddress_function_end:
	.size	IfxMtu_getSystemAddress,__IfxMtu_getSystemAddress_function_end-IfxMtu_getSystemAddress
.L257:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_getTrackedSramAddresses',code,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.text.IfxMtu.IfxMtu_getTrackedSramAddresses'
	.align	2
	
	.global	IfxMtu_getTrackedSramAddresses

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   241  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   242  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   243  uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses)
; Function IfxMtu_getTrackedSramAddresses
.L142:
IfxMtu_getTrackedSramAddresses:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   244  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   245      Ifx_MC *mc                  = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	fcall	.cocofun_21
.L559:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   246      uint8   validFlags          = (mc->ECCD.U >> IFX_MC_ECCD_VAL_OFF) & IFX_MC_ECCD_VAL_MSK;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   247      uint8   numTrackedAddresses = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   248      int     i;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   249  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   250  #if IFX_MC_ECCD_VAL_LEN > IFXMTU_MAX_TRACKED_ADDRESSES
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   251  # error "Unexpected size of VAL mask"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   252  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   253  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   254      for (i = 0; i < IFXMTU_MAX_TRACKED_ADDRESSES; ++i)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   255      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   256          if (validFlags & (1 << i))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   257          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   258              trackedSramAddresses[numTrackedAddresses].U = mc->ETRR[i].U;
	mov	d2,#0
	lea	a15,[a15]18
.L560:
	sha	d15,#-5
	mov.a	a2,#4
.L562:
	and	d15,#31
.L858:
	mov	d1,d2
.L29:
	mov	d0,#1
.L859:
	sha	d0,d0,d1
.L860:
	and	d0,d15
.L861:
	jeq	d0,#0,.L30
.L862:
	addsc.a	a5,a4,d2,#1
.L863:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   259              ++numTrackedAddresses;
	add	d2,#1
	ld.hu	d0,[a15]0
.L561:
	extr.u	d2,d2,#0,#8
	st.h	[a5],d0
.L30:
	add	d1,#1
	add.a	a15,#2
	loop	a2,.L29
.L864:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   260          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   261      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   262  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   263      return numTrackedAddresses;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   264  }
	ret
.L488:
	
__IfxMtu_getTrackedSramAddresses_function_end:
	.size	IfxMtu_getTrackedSramAddresses,__IfxMtu_getTrackedSramAddresses_function_end-IfxMtu_getTrackedSramAddresses
.L262:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_isAutoInitRunning',code,cluster('IfxMtu_isAutoInitRunning')
	.sect	'.text.IfxMtu.IfxMtu_isAutoInitRunning'
	.align	2
	
	.global	IfxMtu_isAutoInitRunning

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   265  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   266  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   267  boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_isAutoInitRunning
.L144:
IfxMtu_isAutoInitRunning:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   268  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   269      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
	sha	d15,d4,#-5
.L671:
	sha	d15,#2
	ld.w	d0,.12.cnt
.L563:
	fcall	.cocofun_15
.L564:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   270      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   271      return (*mtuMemstat & mask) != 0;
	and	d0,d1
.L672:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   272  }
	ne	d2,d0,#0
	ret
.L373:
	
__IfxMtu_isAutoInitRunning_function_end:
	.size	IfxMtu_isAutoInitRunning,__IfxMtu_isAutoInitRunning_function_end-IfxMtu_isAutoInitRunning
.L197:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_isErrorTrackingEnabled',code,cluster('IfxMtu_isErrorTrackingEnabled')
	.sect	'.text.IfxMtu.IfxMtu_isErrorTrackingEnabled'
	.align	2
	
	.global	IfxMtu_isErrorTrackingEnabled

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   273  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   274  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   275  boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_isErrorTrackingEnabled
.L146:
IfxMtu_isErrorTrackingEnabled:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   276  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   277      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	sha	d15,d4,#8
.L869:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   278      return mc->ECCS.B.TRE ? TRUE : FALSE;
	fcall	.cocofun_23
.L870:
	ld.hu	d15,[a3]4110
	extr.u	d15,d15,#4,#1
.L871:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   279  }
	ne	d2,d15,#0
	ret
.L497:
	
__IfxMtu_isErrorTrackingEnabled_function_end:
	.size	IfxMtu_isErrorTrackingEnabled,__IfxMtu_isErrorTrackingEnabled_function_end-IfxMtu_isErrorTrackingEnabled
.L267:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_isErrorTrackingOverflow',code,cluster('IfxMtu_isErrorTrackingOverflow')
	.sect	'.text.IfxMtu.IfxMtu_isErrorTrackingOverflow'
	.align	2
	
	.global	IfxMtu_isErrorTrackingOverflow

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   280  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   281  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   282  boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_isErrorTrackingOverflow
.L148:
IfxMtu_isErrorTrackingOverflow:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   283  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   284      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	sha	d15,d4,#8
.L876:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   285      return mc->ECCD.B.EOV ? TRUE : FALSE;
	fcall	.cocofun_23
.L877:
	ld.hu	d15,[a3]4112
	extr.u	d15,d15,#15,#1
.L878:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   286  }
	ne	d2,d15,#0
	ret
.L499:
	
__IfxMtu_isErrorTrackingOverflow_function_end:
	.size	IfxMtu_isErrorTrackingOverflow,__IfxMtu_isErrorTrackingOverflow_function_end-IfxMtu_isErrorTrackingOverflow
.L272:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_isMbistDone',code,cluster('IfxMtu_isMbistDone')
	.sect	'.text.IfxMtu.IfxMtu_isMbistDone'
	.align	2
	
	.global	IfxMtu_isMbistDone

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   287  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   288  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   289  boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_isMbistDone
.L150:
IfxMtu_isMbistDone:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   290  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   291      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	fcall	.cocofun_26
.L565:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   292      uint16  status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   293  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   294      status = mc->MSTATUS.U;
	ld.hu	d15,[a15]6
.L566:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   295      return (boolean)(status & 0x01);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   296  }
	and	d2,d15,#1
	ret
.L407:
	
__IfxMtu_isMbistDone_function_end:
	.size	IfxMtu_isMbistDone,__IfxMtu_isMbistDone_function_end-IfxMtu_isMbistDone
.L217:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_readSramAddress',code,cluster('IfxMtu_readSramAddress')
	.sect	'.text.IfxMtu.IfxMtu_readSramAddress'
	.align	2
	
	.global	IfxMtu_readSramAddress

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   297  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   298  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   299  void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress)
; Function IfxMtu_readSramAddress
.L152:
IfxMtu_readSramAddress:	.type	func
	mov	d8,d4
.L567:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   300  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   301      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	fcall	.cocofun_27
.L569:
	mov.a	a15,d15
.L572:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   302  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   303      /* configure MBIST for single read opeation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   304      uint16  mcontrolMask = 0x4000;                                                           /* set USERED flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   305      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF);
	mov	d15,#16392
.L570:
	st.h	[a15]4,d15
.L719:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   306      mc->CONFIG0.U  = (1 << IFX_MC_CONFIG0_NUMACCS_OFF) | (1 << IFX_MC_CONFIG0_ACCSTYPE_OFF); /* 1 read access */
	mov	d0,#4097
	st.h	[a15],d0
.L720:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   307      mc->CONFIG1.U  = 0;                                                                      /* ensure that linear scrambling is used */
	mov	d0,#0
	st.h	[a15]2,d0
.L721:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   308  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   309      /* Set the address to be read (RAEN = 0) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   310      mc->RANGE.U = sramAddress;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   311  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   312      /* Start operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   313      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF) | (1 << IFX_MC_MCONTROL_START_OFF);
	mov	d0,#16393
	st.h	[a15]8,d5
.L722:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   314      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   315  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   316      /* wait for the end of the fill operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   317      IfxMtu_waitForMbistDone(256, 1, mbistSel);
	mov	d6,d8
	st.h	[a15]4,d0
.L568:
	mov	d4,#256
	st.h	[a15]4,d15
.L723:
	mov	d5,#1
	call	IfxMtu_waitForMbistDone
.L571:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   318  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   319      while (!IfxMtu_isMbistDone(mbistSel))
	j	.L36
.L37:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   320      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   321          __nop();
	nop
.L36:
	mov	d4,d8
	call	IfxMtu_isMbistDone
.L724:
	jeq	d2,#0,.L37
.L725:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   322      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   323  }
	ret
.L411:
	
__IfxMtu_readSramAddress_function_end:
	.size	IfxMtu_readSramAddress,__IfxMtu_readSramAddress_function_end-IfxMtu_readSramAddress
.L222:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_runCheckerBoardTest',code,cluster('IfxMtu_runCheckerBoardTest')
	.sect	'.text.IfxMtu.IfxMtu_runCheckerBoardTest'
	.align	2
	
	.global	IfxMtu_runCheckerBoardTest

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   324  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   325  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   326  uint8 IfxMtu_runCheckerBoardTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr, uint32 numberRedundancyLines)
; Function IfxMtu_runCheckerBoardTest
.L154:
IfxMtu_runCheckerBoardTest:	.type	func
	sub.a	a10,#48
.L573:
	fcall	.cocofun_24
.L574:
	st.a	[a10]40,a4
.L579:
	ld.w	d12,[a10]48
.L591:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   327  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   328      /* Select MBIST Memory Controller:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   329       * Ifx_MC is a type describing structure of MBIST Memory Controller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   330       * registers defined in IfxMc_regdef.h file - MC object */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   331      Ifx_MC *mc                            = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	fcall	.cocofun_19
.L582:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   332      uint32  configCheckerBoardSequence[4] = {
	movh.a	a2,#@his(.8.ini)
	lea	a2,[a2]@los(.8.ini)
.L730:
	lea	a4,[a10]20
.L580:
	mov.a	a15,#3
.L38:
	ld.w	d15,[a2+]
	st.w	[a4+],d15
	loop	a15,.L38
.L731:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   333          0x08001000, //up /lin/w0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   334          0x08001001, //up /lin/r0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   335          0x00011000, //down/lin/w1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   336          0x00011001
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   337      };              //down/lin/r1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   338      uint16  password         = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   339      uint8   retVal           = 0U;
	mov	d13,#0
.L592:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   340      uint8   testStep;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   341      uint8   isEndInitEnabled = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   342      password = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d14,d13
	call	IfxScuWdt_getSafetyWatchdogPassword
.L581:
	st.w	[a10]44,d2
.L433:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   452  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   453      return password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   454  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   455  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   456  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   458  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
	fcall	.cocofun_22
.L434:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   343  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   344      /* Check if the Endinit is cleared by application. If not, then handle it internally inside teh function.*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   345      if (IfxScuWdt_getSafetyWatchdogEndInit() == 1U)
	jz.t	d15:0,.L39
.L732:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   346      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   347          /* Clear EndInit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   348          IfxScuWdt_clearSafetyEndinit(password);
	mov	d4,d2
	call	IfxScuWdt_clearSafetyEndinit
.L584:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   349          isEndInitEnabled = 1;
	mov	d14,#1
.L39:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   350      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   351  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   352      /* Enable MBIST Memory Controller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   353      IfxMtu_enableMbistShell(mbistSel);
	mov	d4,d8
	call	IfxMtu_enableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   354  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   355      /* for auto-init memories: wait for the end of the clear operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   356      while (IfxMtu_isAutoInitRunning(mbistSel))
.L40:
	mov	d4,d8
	call	IfxMtu_isAutoInitRunning
.L733:
	jne	d2,#0,.L40
.L734:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   357      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   358  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   359      /* Set the range register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   360      mc->RANGE.U = (rangeSel << 15) | (rangeAddrUp << 7) | (rangeAddrLow << 0);
	fcall	.cocofun_20
.L585:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   361  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   362      /* Run the test */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   363      for (testStep = 0; testStep < 4; ++testStep)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   364      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   365          mc->CONFIG0.U  = configCheckerBoardSequence[testStep] & 0x0000FFFF;
	lea	a15,[a10]20
	st.a	[a10]36,a15
.L735:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   366          mc->CONFIG1.U  = (configCheckerBoardSequence[testStep] & 0xFFFF0000) >> 16;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   367          mc->MCONTROL.U = numberRedundancyLines ? 0x30c9 : 0x00c9; // bit and row toggle
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   368          mc->MCONTROL.U = numberRedundancyLines ? 0x30c8 : 0x00c8; // MCONTROL.B.START will generate a RMW which is too long for small SRAMs!
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   369  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   370          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   371          IfxScuWdt_setSafetyEndinit(password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   372  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   373          /* wait for the end of the fill operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   374          IfxMtu_waitForMbistDone(IfxMtu_sramTable[mbistSel].mbistDelay, 4, mbistSel);
	fcall	.cocofun_16
.L736:
	mov.a	a14,#3
.L41:
	ld.a	a15,[a10]36
	ld.w	d15,[a15]
.L737:
	st.h	[a12],d15
.L738:
	sh	d15,d15,#-16
	st.h	[a12]2,d15
.L739:
	mov	d15,#12489
.L740:
	sel	d15,d12,d15,#201
	st.h	[a12]4,d15
.L741:
	mov	d15,#12488
.L742:
	sel	d15,d12,d15,#200
	st.h	[a12]4,d15
.L743:
	ld.w	d4,[a10]44
.L587:
	call	IfxScuWdt_setSafetyEndinit
.L588:
	mov	d6,d8
	ld.w	d4,[a13]8
.L589:
	mov	d5,#4
	call	IfxMtu_waitForMbistDone
.L590:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   375          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mc->MSTATUS.B.DONE != 0);
	ld.hu	d15,[a12]6
	jnz.t	d15:0,.L47
	fcall	.cocofun_17
	st.a	[a10],a15
	fcall	.cocofun_18
	st.a	[a10]4,a15
	fcall	.cocofun_13
	st.a	[a10]8,a15
	mov	d15,#375
	st.w	[a10]12,d15
	movh.a	a15,#@his(_999003___func__)
	lea	a15,[a15]@los(_999003___func__)
	st.a	[a10]16,a15
	fcall	.cocofun_14
	call	printf
.L744:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   376  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   377          while (!IfxMtu_isMbistDone(mbistSel))
	j	.L47
.L48:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   378          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   379              __nop();
	nop
.L47:
	mov	d4,d8
	call	IfxMtu_isMbistDone
.L745:
	jeq	d2,#0,.L48
.L746:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   380          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   381  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   382          /* Clear EndInit Again */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   383          IfxScuWdt_clearSafetyEndinit(password);
	ld.w	d4,[a10]44
.L593:
	call	IfxScuWdt_clearSafetyEndinit
.L594:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   384  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   385          /* Check the Fail Status */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   386          if (mc->MSTATUS.B.FAIL)
	ld.hu	d15,[a12]6
.L747:
	jz.t	d15:1,.L49
.L748:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   387          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   388              /* Test has failed, check if any un-correctable error */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   389              if (mc->ECCD.B.UERR)
	ld.hu	d15,[a12]16
.L749:
	jz.t	d15:2,.L50
.L750:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   390              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   391                  /* Read Error tracking register and return saying test failed */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   392                  *errorAddr = mc->ETRR[0].U;
	ld.a	a15,[a10]40
.L595:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   393                  retVal     = 1U;
	mov	d13,#1
	ld.hu	d15,[a12]18
.L751:
	st.h	[a15],d15
.L752:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   394                  break;
	j	.L51
.L50:
.L49:
	ld.a	a15,[a10]36
	add.a	a15,#4
.L753:
	st.a	[a10]36,a15
	loop	a14,.L41

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   395              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   396          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   397      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   398  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   399      /* Disable Memory Controller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   400  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   401      IfxMtu_disableMbistShell(mbistSel);
.L51:
	mov	d4,d8
	call	IfxMtu_disableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   403      while (IfxMtu_isAutoInitRunning(mbistSel))
.L52:
	mov	d4,d8
	call	IfxMtu_isAutoInitRunning
.L754:
	jne	d2,#0,.L52
.L755:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   404      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   405  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   406      if (isEndInitEnabled == 1)
	jeq	d14,#0,.L53
.L756:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   407      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   408          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   409          IfxScuWdt_setSafetyEndinit(password);
	ld.w	d4,[a10]44
.L596:
	call	IfxScuWdt_setSafetyEndinit
.L53:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   410      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   411  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   412      return retVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   413  }
	mov	d2,d13
	ret
.L415:
	
__IfxMtu_runCheckerBoardTest_function_end:
	.size	IfxMtu_runCheckerBoardTest,__IfxMtu_runCheckerBoardTest_function_end-IfxMtu_runCheckerBoardTest
.L227:
	; End of function
	
	.sdecl	'.text.IfxMtu..cocofun_24',code,cluster('.cocofun_24')
	.sect	'.text.IfxMtu..cocofun_24'
	.align	2
; Function .cocofun_24
.L156:
.cocofun_24:	.type	func
; Function body .cocofun_24, coco_iter:0
	mov	d8,d4
.L575:
	mov	d10,d5
.L576:
	mov	d9,d6
.L577:
	mov	d11,d7
	fret
.L337:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_20',code,cluster('.cocofun_20')
	.sect	'.text.IfxMtu..cocofun_20'
	.align	2
; Function .cocofun_20
.L158:
.cocofun_20:	.type	func
; Function body .cocofun_20, coco_iter:0
	fcall	.cocofun_28
.L604:
	st.h	[a12]8,d11
.L950:
	fret
.L317:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_28',code,cluster('.cocofun_28')
	.sect	'.text.IfxMtu..cocofun_28'
	.align	2
; Function .cocofun_28
.L160:
.cocofun_28:	.type	func
; Function body .cocofun_28, coco_iter:1
	sha	d15,d10,#15
	extr.u	d15,d15,#0,#16
.L988:
	sha	d9,#7
.L586:
	or	d15,d9
.L989:
	or	d11,d15
	fret
.L357:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_18',code,cluster('.cocofun_18')
	.sect	'.text.IfxMtu..cocofun_18'
	.align	2
; Function .cocofun_18
.L162:
.cocofun_18:	.type	func
; Function body .cocofun_18, coco_iter:0
	movh.a	a15,#@his(.4.str)
	lea	a15,[a15]@los(.4.str)
.L941:
	fret
.L307:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_17',code,cluster('.cocofun_17')
	.sect	'.text.IfxMtu..cocofun_17'
	.align	2
; Function .cocofun_17
.L164:
.cocofun_17:	.type	func
; Function body .cocofun_17, coco_iter:0
	movh.a	a15,#@his(verboseLevelStr+8)
.L647:
	ld.a	a15,[a15]@los(verboseLevelStr+8)
.L936:
	fret
.L302:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_14',code,cluster('.cocofun_14')
	.sect	'.text.IfxMtu..cocofun_14'
	.align	2
; Function .cocofun_14
.L166:
.cocofun_14:	.type	func
; Function body .cocofun_14, coco_iter:0
	movh.a	a4,#@his(.1.str)
	lea	a4,[a4]@los(.1.str)
.L920:
	fret
.L287:
	; End of function
	.sdecl	'.text.IfxMtu..cocofun_13',code,cluster('.cocofun_13')
	.sect	'.text.IfxMtu..cocofun_13'
	.align	2
; Function .cocofun_13
.L168:
.cocofun_13:	.type	func
; Function body .cocofun_13, coco_iter:0
	movh.a	a15,#@his(.5.str)
	lea	a15,[a15]@los(.5.str)
.L915:
	fret
.L282:
	; End of function
	.sdecl	'.text.IfxMtu.IfxMtu_runMarchUTest',code,cluster('IfxMtu_runMarchUTest')
	.sect	'.text.IfxMtu.IfxMtu_runMarchUTest'
	.align	2
	
	.global	IfxMtu_runMarchUTest

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   414  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   415  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   416  uint8 IfxMtu_runMarchUTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr)
; Function IfxMtu_runMarchUTest
.L170:
IfxMtu_runMarchUTest:	.type	func
	sub.a	a10,#56
.L597:
	fcall	.cocofun_24
.L602:
	st.a	[a10]48,a4
.L609:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   417  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   418      /* Select MBIST Memory Controller:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   419       * Ifx_MC is a type describing structure of MBIST Memory Controller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   420       * registers defined in IfxMc_regdef.h file - MC object */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   421      Ifx_MC *mc                      = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	fcall	.cocofun_19
.L600:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   422      uint32  configMarchUSequence[6] = {
	movh.a	a2,#@his(.9.ini)
	lea	a2,[a2]@los(.9.ini)
.L761:
	lea	a4,[a10]20
.L598:
	mov.a	a15,#5
.L55:
	ld.w	d15,[a2+]
	st.w	[a4+],d15
	loop	a15,.L55
.L762:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   423          0x08001000, //up /lin/w0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   424          0x08064005, //up /lin/r0->w1->r1->w0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   425          0x08022001, //up /lin/r0->w1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   426          0x00094005, //down/lin/r1->w0->r0->w1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   427          0x00012001, //down/lin/r1->w0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   428          0x00001001
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   429      };              //down/lin/r0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   430      uint16  password         = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   431      uint8   retVal           = 0U;
	mov	d12,#0
.L610:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   432      uint8   testStep;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   433      uint8   isEndInitEnabled = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   434      password = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d13,d12
	call	IfxScuWdt_getSafetyWatchdogPassword
.L599:
	mov	d14,d2

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   452  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   453      return password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   454  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   455  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   456  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   458  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
	fcall	.cocofun_22
.L763:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   435  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   436      /* Check if the Endinit is cleared by application. If not, then handle it internally inside teh function.*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   437      if (IfxScuWdt_getSafetyWatchdogEndInit() == 1U)
	jz.t	d15:0,.L56
.L764:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   438      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   439          /* Clear EndInit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   440          IfxScuWdt_clearSafetyEndinit(password);
	mov	d4,d14
	call	IfxScuWdt_clearSafetyEndinit
.L601:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   441          isEndInitEnabled = 1;
	mov	d13,#1
.L56:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   442      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   443  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   444      /* Enable MBIST Memory Controller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   445      IfxMtu_enableMbistShell(mbistSel);
	mov	d4,d8
	call	IfxMtu_enableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   446  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   447      /* for auto-init memories: wait for the end of the clear operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   448      while (IfxMtu_isAutoInitRunning(mbistSel))
.L57:
	mov	d4,d8
	call	IfxMtu_isAutoInitRunning
.L765:
	jne	d2,#0,.L57
.L766:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   449      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   450  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   451      /* Set the range register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   452      mc->RANGE.U = (rangeSel << 15) | (rangeAddrUp << 7) | (rangeAddrLow << 0);
	fcall	.cocofun_20
.L603:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   453  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   454      /* Run the test */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   455      for (testStep = 0; testStep < 6; ++testStep)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   456      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   457          mc->CONFIG0.U        = configMarchUSequence[testStep] & 0x0000FFFF;
	lea	a15,[a10]20
	st.a	[a10]44,a15
.L767:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   458          mc->CONFIG1.U        = (configMarchUSequence[testStep] & 0xFFFF0000) >> 16;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   459          mc->MCONTROL.U       = 0x0209;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   460          mc->MCONTROL.B.START = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   462          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   463          IfxScuWdt_setSafetyEndinit(password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   464  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   465          /* wait for the end of the fill operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   466          IfxMtu_waitForMbistDone(IfxMtu_sramTable[mbistSel].mbistDelay, 4, mbistSel);
	fcall	.cocofun_16
.L768:
	mov.a	a14,#5
.L58:
	mov	d4,d14
.L605:
	ld.a	a15,[a10]44
	ld.w	d15,[a15]
.L769:
	st.h	[a12],d15
.L770:
	sh	d15,d15,#-16
	st.h	[a12]2,d15
.L771:
	mov	d15,#521
	st.h	[a12]4,d15
.L772:
	ld.hu	d15,[a12]4
.L773:
	insert	d15,d15,#0,#0,#1
	st.h	[a12]4,d15
.L774:
	call	IfxScuWdt_setSafetyEndinit
.L606:
	mov	d6,d8
	ld.w	d4,[a13]8
.L607:
	mov	d5,#4
	call	IfxMtu_waitForMbistDone
.L608:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   467          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mc->MSTATUS.B.DONE != 0);
	ld.hu	d15,[a12]6
	jnz.t	d15:0,.L60
	fcall	.cocofun_17
	st.a	[a10],a15
	fcall	.cocofun_18
	st.a	[a10]4,a15
	fcall	.cocofun_13
	st.a	[a10]8,a15
	mov	d15,#467
	st.w	[a10]12,d15
	movh.a	a15,#@his(_999004___func__)
	lea	a15,[a15]@los(_999004___func__)
	st.a	[a10]16,a15
	fcall	.cocofun_14
	call	printf
.L775:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   468  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   469          while (!IfxMtu_isMbistDone(mbistSel))
	j	.L60
.L61:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   470          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   471              __nop();
	nop
.L60:
	mov	d4,d8
	call	IfxMtu_isMbistDone
.L776:
	jeq	d2,#0,.L61
.L777:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   472          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   473  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   474          /* Clear EndInit Again */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   475          IfxScuWdt_clearSafetyEndinit(password);
	mov	d4,d14
	call	IfxScuWdt_clearSafetyEndinit
.L778:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   476  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   477          /* Check the Fail Status */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   478          if (mc->MSTATUS.B.FAIL)
	ld.hu	d15,[a12]6
.L779:
	jz.t	d15:1,.L62
.L780:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   479          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   480              /* Test has failed, check if any un-correctable error */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   481              if (mc->ECCD.B.UERR)
	ld.hu	d15,[a12]16
.L781:
	jz.t	d15:2,.L63
.L782:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   482              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   483                  /* Read Error tracking register and return saying test failed */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   484                  *errorAddr = mc->ETRR[0].U;
	ld.a	a15,[a10]48
.L611:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   485                  retVal     = 1U;
	mov	d12,#1
	ld.hu	d15,[a12]18
.L783:
	st.h	[a15],d15
.L784:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   486                  break;
	j	.L64
.L63:
.L62:
	ld.a	a15,[a10]44
	add.a	a15,#4
.L785:
	st.a	[a10]44,a15
	loop	a14,.L58

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   487              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   488          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   489      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   490  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   491      /* Disable Memory Controller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   492      IfxMtu_disableMbistShell(mbistSel);
.L64:
	mov	d4,d8
	call	IfxMtu_disableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   493  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   494      /* for auto-init memories: wait for the end of the clear operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   495      while (IfxMtu_isAutoInitRunning(mbistSel))
.L65:
	mov	d4,d8
	call	IfxMtu_isAutoInitRunning
.L786:
	jne	d2,#0,.L65
.L787:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   496      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   497  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   498      /* Restore the endinit state */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   499      if (isEndInitEnabled == 1)
	jeq	d13,#0,.L66
.L788:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   500      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   501          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   502          IfxScuWdt_setSafetyEndinit(password);
	mov	d4,d14
	call	IfxScuWdt_setSafetyEndinit
.L66:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   503      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   504  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   505      return retVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   506  }
	mov	d2,d12
	ret
.L436:
	
__IfxMtu_runMarchUTest_function_end:
	.size	IfxMtu_runMarchUTest,__IfxMtu_runMarchUTest_function_end-IfxMtu_runMarchUTest
.L232:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_runNonDestructiveInversionTest',code,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.text.IfxMtu.IfxMtu_runNonDestructiveInversionTest'
	.align	2
	
	.global	IfxMtu_runNonDestructiveInversionTest

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   507  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   508  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   509  uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr)
; Function IfxMtu_runNonDestructiveInversionTest
.L172:
IfxMtu_runNonDestructiveInversionTest:	.type	func
	sub.a	a10,#24
.L612:
	fcall	.cocofun_24
.L616:
	mov.aa	a12,a4
.L614:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   510  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   511      /* Select MBIST Memory Controller:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   512       * Ifx_MC is a type describing structure of MBIST Memory Controller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   513       * registers defined in IfxMc_regdef.h file - MC object */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   514      Ifx_MC *mc               = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	fcall	.cocofun_27
.L617:
	mov.a	a13,d15
.L618:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   515      uint16  password         = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   516      uint8   retVal           = 0U;
	mov	d12,#0
.L619:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   517      uint8   isEndInitEnabled = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   518      password = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d13,d12
	call	IfxScuWdt_getSafetyWatchdogPassword
.L613:
	mov	d14,d2

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   452  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   453      return password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   454  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   455  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   456  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   458  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
	movh.a	a2,#61443
.L462:
	ld.w	d15,[a2]@los(0xf00360f0)
.L463:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   519  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   520      /* Check if the Endinit is cleared by application. If not, then handle it internally inside teh function.*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   521      if (IfxScuWdt_getSafetyWatchdogEndInit() == 1U)
	jz.t	d15:0,.L68
.L793:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   522      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   523          /* Clear EndInit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   524          IfxScuWdt_clearSafetyEndinit(password);
	mov	d4,d14
	call	IfxScuWdt_clearSafetyEndinit
.L620:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   525          isEndInitEnabled = 1;
	mov	d13,#1
.L68:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   526      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   527  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   528      /* Enable MBIST Memory Controller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   529      IfxMtu_enableMbistShell(mbistSel);
	mov	d4,d8
	call	IfxMtu_enableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   530  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   531      /* for auto-init memories: wait for the end of the clear operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   532      while (IfxMtu_isAutoInitRunning(mbistSel))
.L69:
	mov	d4,d8
	call	IfxMtu_isAutoInitRunning
.L794:
	jne	d2,#0,.L69
.L795:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   533      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   534  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   535      /* Configure Non-destructive Inversion test */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   536      mc->CONFIG0.U        = 0x4005; //NUMACCS=4, ACCSTYPE=5
	mov	d15,#16389
	st.h	[a13],d15
.L796:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   537      mc->CONFIG1.U        = 0x5000; //AG_MOD=5
	mov	d15,#20480
	st.h	[a13]2,d15
.L615:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   538      /* Set the range register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   539      mc->RANGE.U          = (rangeSel << 15) | (rangeAddrUp << 7) | (rangeAddrLow << 0);
	fcall	.cocofun_28
.L625:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   540      /* Run the tests */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   541      mc->MCONTROL.U       = 0xF201;
	mov.u	d15,#61953
	st.h	[a13]8,d11
.L797:
	st.h	[a13]4,d15
.L798:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   542      mc->MCONTROL.B.START = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   543      /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   544      IfxScuWdt_setSafetyEndinit(password);
	mov	d4,d14
.L621:
	ld.hu	d15,[a13]4
.L799:
	insert	d15,d15,#0,#0,#1
	st.h	[a13]4,d15
.L800:
	call	IfxScuWdt_setSafetyEndinit
.L801:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   545  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   546      /* wait for the end of the fill operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   547      IfxMtu_waitForMbistDone(IfxMtu_sramTable[mbistSel].mbistDelay, 4, mbistSel);
	fcall	.cocofun_25
.L622:
	addsc.a	a15,a2,d15,#0
.L802:
	mov	d6,d8
.L623:
	ld.w	d4,[a15]8
.L803:
	mov	d5,#4
	call	IfxMtu_waitForMbistDone
.L624:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   548      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mc->MSTATUS.B.DONE != 0);
	ld.hu	d15,[a13]6
	jnz.t	d15:0,.L71
	fcall	.cocofun_17
	st.a	[a10],a15
	fcall	.cocofun_18
	st.a	[a10]4,a15
	fcall	.cocofun_13
	st.a	[a10]8,a15
	mov	d15,#548
	st.w	[a10]12,d15
	movh.a	a15,#@his(_999005___func__)
	lea	a15,[a15]@los(_999005___func__)
	st.a	[a10]16,a15
	fcall	.cocofun_14
	call	printf
.L804:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   549  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   550      while (!IfxMtu_isMbistDone(mbistSel))
	j	.L71
.L72:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   551      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   552          __nop();
	nop
.L71:
	mov	d4,d8
	call	IfxMtu_isMbistDone
.L805:
	jeq	d2,#0,.L72
.L806:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   553      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   554  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   555      /* Clear EndInit Again */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   556      IfxScuWdt_clearSafetyEndinit(password);
	mov	d4,d14
	call	IfxScuWdt_clearSafetyEndinit
.L807:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   557  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   558      /* Check the Fail Status */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   559      if (mc->MSTATUS.B.FAIL)
	ld.hu	d15,[a13]6
.L808:
	jz.t	d15:1,.L73
.L809:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   560      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   561          /* Test has failed, check if any un-correctable error */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   562          if (mc->ECCD.B.UERR)
	ld.hu	d15,[a13]16
.L810:
	jz.t	d15:2,.L74
.L811:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   563          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   564              /* Read the Error tracking register and return saying test failed */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   565              *errorAddr = mc->ETRR[0].U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   566              retVal     = 1U;
	mov	d12,#1
	ld.hu	d15,[a13]18
.L812:
	st.h	[a12],d15
.L74:
.L73:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   567          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   568      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   569  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   570      /* Disable Memory Controller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   571      IfxMtu_disableMbistShell(mbistSel);
	mov	d4,d8
	call	IfxMtu_disableMbistShell

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   572  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   573      /* for auto-init memories: wait for the end of the clear operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   574      while (IfxMtu_isAutoInitRunning(mbistSel))
.L75:
	mov	d4,d8
	call	IfxMtu_isAutoInitRunning
.L813:
	jne	d2,#0,.L75
.L814:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   575      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   576  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   577      /* Restore the endinit state */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   578      if (isEndInitEnabled == 1)
	jeq	d13,#0,.L76
.L815:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   579      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   580          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   581          IfxScuWdt_setSafetyEndinit(password);
	mov	d4,d14
	call	IfxScuWdt_setSafetyEndinit
.L76:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   582      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   583  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   584      return retVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   585  }
	mov	d2,d12
	ret
.L450:
	
__IfxMtu_runNonDestructiveInversionTest_function_end:
	.size	IfxMtu_runNonDestructiveInversionTest,__IfxMtu_runNonDestructiveInversionTest_function_end-IfxMtu_runNonDestructiveInversionTest
.L237:
	; End of function
	
	.sdecl	'.text.IfxMtu..cocofun_25',code,cluster('.cocofun_25')
	.sect	'.text.IfxMtu..cocofun_25'
	.align	2
; Function .cocofun_25
.L174:
.cocofun_25:	.type	func
; Function body .cocofun_25, coco_iter:0
	mul	d15,d8,#12
	movh.a	a2,#@his(IfxMtu_sramTable)
	lea	a2,[a2]@los(IfxMtu_sramTable)
.L974:
	fret
.L342:
	; End of function
	.sdecl	'.text.IfxMtu.IfxMtu_waitForMbistDone',code,cluster('IfxMtu_waitForMbistDone')
	.sect	'.text.IfxMtu.IfxMtu_waitForMbistDone'
	.align	2
	

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   586  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   587  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   588  static void IfxMtu_waitForMbistDone(uint32 towerDepth, uint8 numInstructions, IfxMtu_MbistSel mbistSel)
; Function IfxMtu_waitForMbistDone
.L176:
IfxMtu_waitForMbistDone:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   589  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   590      uint32          waitFact = (SCU_CCUCON0.B.SPBDIV / SCU_CCUCON0.B.SRIDIV) * numInstructions;
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf0036032)
.L883:
	mov	e8,d5,d4
	sub.a	a10,#8
.L626:
	and	d0,d15,#15
	ld.bu	d15,[a15]@los(0xf0036031)
	and	d15,#15
.L884:
	div	e0,d0,d15
.L885:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   591      volatile uint32 waitTime;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   592  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   593      switch (mbistSel)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   594      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   595      case IfxMtu_MbistSel_ethermac:
	mov	d15,#22
.L628:
	mul	d0,d9
.L629:
	jeq	d15,d6,.L78
.L886:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   596          waitFact = waitFact * SCU_CCUCON1.B.GTMDIV;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   597          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   598  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   599      case IfxMtu_MbistSel_mcan:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   600      case IfxMtu_MbistSel_mcan1:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   601  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   602          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   603  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   604      case IfxMtu_MbistSel_erayObf:
	mov	d15,#38
	jeq	d15,d6,.L79
.L887:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   605      case IfxMtu_MbistSel_erayIbfTbf:
	mov	d15,#39
	jeq	d15,d6,.L80
.L888:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   606          waitFact = (IfxScuCcu_getSriFrequency() / IfxScuCcu_getPllErayFrequency()) * numInstructions;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   607          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   608  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   609      case IfxMtu_MbistSel_erayMbf:
	mov	d15,#40
	jeq	d15,d6,.L81
.L889:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   610          waitFact = (IfxScuCcu_getSriFrequency() / IfxScuCcu_getPllErayFrequency()) * numInstructions;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   611          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   612  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   613      case IfxMtu_MbistSel_emem0:
	mov	d15,#46
	jeq	d15,d6,.L82
.L890:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   614      case IfxMtu_MbistSel_emem1:
	mov	d15,#47
	jeq	d15,d6,.L83
.L891:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   615      case IfxMtu_MbistSel_emem2:
	mov	d15,#48
	jeq	d15,d6,.L84
.L892:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   616      case IfxMtu_MbistSel_emem3:
	mov	d15,#49
	jeq	d15,d6,.L85
.L893:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   617      case IfxMtu_MbistSel_emem4:
	mov	d15,#50
	jeq	d15,d6,.L86
.L894:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   618      case IfxMtu_MbistSel_emem5:
	mov	d15,#51
	jeq	d15,d6,.L87
.L895:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   619      case IfxMtu_MbistSel_emem6:
	mov	d15,#52
	jeq	d15,d6,.L88
.L896:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   620      case IfxMtu_MbistSel_emem7:
	mov	d15,#53
	jeq	d15,d6,.L89
.L897:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   621      case IfxMtu_MbistSel_ememXtm0:
	mov	d15,#84
	jeq	d15,d6,.L90
.L898:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   622      case IfxMtu_MbistSel_ememXtm1:
	mov	d15,#85
	jeq	d15,d6,.L91
.L899:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   623      case IfxMtu_MbistSel_fft0:
	mov	d15,#86
	jeq	d15,d6,.L92
.L900:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   624      case IfxMtu_MbistSel_fft1:
	mov	d15,#87
	jeq	d15,d6,.L93
	j	.L94
.L78:
	ld.bu	d15,[a15]@los(0xf0036035)
.L901:
	extr.u	d15,d15,#4,#4
	j	.L95
.L80:
.L79:
.L81:
	call	IfxScuCcu_getSriFrequency
.L627:
	mov	d15,d2
	call	IfxScuCcu_getPllErayFrequency
.L902:
	div.f	d15,d15,d2
.L630:
	utof	d0,d9
.L631:
	mul.f	d15,d15,d0
.L903:
	ftouz	d0,d15
	j	.L97
.L93:
.L92:
.L91:
.L90:
.L89:
.L88:
.L87:
.L86:
.L85:
.L84:
.L83:
.L82:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   625          waitFact = waitFact * SCU_CCUCON2.B.BBBDIV;
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf0036040)
	and	d15,#15

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   626          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   627      default:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   628          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   629      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   630  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   631      if (numInstructions == 4)
.L95:
	mul	d0,d15
.L97:
.L94:
	jeq	d9,#4,.L99
.L633:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   632      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   633          waitTime = (towerDepth * waitFact) + 30;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   634      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   635      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   636      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   637          waitTime = ((towerDepth / 4) * waitFact) + 30;
	sh	d8,#-2
.L99:
	mov	d15,#30
.L904:
	madd	d15,d15,d8,d0
	st.w	[a10],d15
.L905:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   638      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   639  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   640      waitTime = waitTime / 3;
	ld.w	d15,[a10]
.L906:
	mov	d0,#3
.L632:
	div.u	e0,d15,d0
	st.w	[a10],d0
.L907:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   641  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   642      while (waitTime--)
	j	.L100
.L101:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   643      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   644          __nop();
	nop
.L100:
	ld.w	d15,[a10]
	ld.w	d0,[a10]
.L908:
	add	d0,#-1
	st.w	[a10],d0
.L909:
	jne	d15,#0,.L101
.L910:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   645      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   646  }
	ret
.L501:
	
__IfxMtu_waitForMbistDone_function_end:
	.size	IfxMtu_waitForMbistDone,__IfxMtu_waitForMbistDone_function_end-IfxMtu_waitForMbistDone
.L277:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_writeSramAddress',code,cluster('IfxMtu_writeSramAddress')
	.sect	'.text.IfxMtu.IfxMtu_writeSramAddress'
	.align	2
	
	.global	IfxMtu_writeSramAddress

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   647  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   648  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   649  void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress)
; Function IfxMtu_writeSramAddress
.L178:
IfxMtu_writeSramAddress:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   650  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   651      Ifx_MC *mc               = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	mov	e8,d5,d4
	ld.w	d1,.10.cnt
.L820:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   652      uint8   isEndInitEnabled = 0;
	mov	d10,#0
	sub.a	a10,#24
.L634:
	sha	d0,d8,#8
.L636:
	add	d0,d1
.L821:
	mov.a	a15,d0
.L637:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   653      uint16  password         = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   654      password = IfxScuWdt_getSafetyWatchdogPassword();
	call	IfxScuWdt_getSafetyWatchdogPassword
.L635:
	mov	d11,d2

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   452  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   453      return password;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   454  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   455  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   456  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   458  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
	movh.a	a2,#61443
.L471:
	ld.w	d15,[a2]@los(0xf00360f0)
.L472:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   655  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   656      /* Check if the Endinit is cleared by application. If not, then handle it internally inside teh function.*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   657      if (IfxScuWdt_getSafetyWatchdogEndInit() == 1U)
	jz.t	d15:0,.L102
.L822:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   658      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   659          /* Clear EndInit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   660          IfxScuWdt_clearSafetyEndinit(password);
	mov	d4,d11
	call	IfxScuWdt_clearSafetyEndinit
.L638:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   661          isEndInitEnabled = 1;
	mov	d10,#1
.L102:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   662      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   663  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   664      /* configure MBIST for single write opeation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   665      uint16 mcontrolMask = 0x4000;                                                            /* set USERED flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   666      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF);
	mov	d0,#16392
	st.h	[a15]4,d0
.L823:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   667      mc->CONFIG0.U  = (1 << IFX_MC_CONFIG0_NUMACCS_OFF) | (0 << IFX_MC_CONFIG0_ACCSTYPE_OFF); /* 1 write access */
	mov	d1,#4096
	st.h	[a15],d1
.L824:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   668      mc->CONFIG1.U  = 0;                                                                      /* ensure that linear scrambling is used */
	mov	d15,#0
	st.h	[a15]2,d15
.L639:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   669  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   670      /* Set the address to be written (RAEN = 0) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   671      mc->RANGE.U = sramAddress;
	st.h	[a15]8,d9
.L640:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   672  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   673      /* Start operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   674      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF) | (1 << IFX_MC_MCONTROL_START_OFF);
	mov	d15,#16393
	st.h	[a15]4,d15
.L825:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   675      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF);
	st.h	[a15]4,d0
.L826:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   676  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   677      if (isEndInitEnabled == 1)
	jeq	d10,#0,.L103
.L641:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   678      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   679          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   680          IfxScuWdt_setSafetyEndinit(password);
	mov	d4,d11
	call	IfxScuWdt_setSafetyEndinit
.L103:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   681      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   682  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   683      /* Wait for the end of the operation */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   684      IfxMtu_waitForMbistDone(IfxMtu_sramTable[mbistSel].mbistDelay, 1, mbistSel);
	fcall	.cocofun_25
.L642:
	addsc.a	a2,a2,d15,#0
.L644:
	mov	d6,d8
.L645:
	ld.w	d4,[a2]8
.L827:
	mov	d5,#1
	call	IfxMtu_waitForMbistDone
.L646:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   685      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mc->MSTATUS.B.DONE != 0);
	ld.hu	d15,[a15]6
	jnz.t	d15:0,.L105
	fcall	.cocofun_17
.L643:
	st.a	[a10],a15
	fcall	.cocofun_18
	st.a	[a10]4,a15
	fcall	.cocofun_13
	st.a	[a10]8,a15
	mov	d15,#685
	st.w	[a10]12,d15
	movh.a	a15,#@his(_999006___func__)
	lea	a15,[a15]@los(_999006___func__)
	st.a	[a10]16,a15
	fcall	.cocofun_14
	call	printf
.L828:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   686  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   687      while (!IfxMtu_isMbistDone(mbistSel))
	j	.L105
.L106:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   688      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   689          __nop();
	nop
.L105:
	mov	d4,d8
	call	IfxMtu_isMbistDone
.L648:
	jeq	d2,#0,.L106
.L829:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   690      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Mtu\Std\IfxMtu.c	   691  }
	ret
.L464:
	
__IfxMtu_writeSramAddress_function_end:
	.size	IfxMtu_writeSramAddress,__IfxMtu_writeSramAddress_function_end-IfxMtu_writeSramAddress
.L242:
	; End of function
	
	.sdecl	'.rodata.IfxCpu..1.str',data,rom
	.sect	'.rodata.IfxCpu..1.str'
.1.str:	.type	object
	.size	.1.str,43
	.byte	91,65,83,83
	.byte	69,82,84,58
	.byte	37,115,93,32
	.byte	39,37,115,39
	.byte	32,105,110,32
	.byte	37,115,58,37
	.byte	100,32,40,102
	.byte	117,110,99,116
	.byte	105,111,110,32
	.byte	39,37,115,39
	.byte	41,10
	.space	1
	.sdecl	'.rodata.IfxMtu..4.str',data,rom
	.sect	'.rodata.IfxMtu..4.str'
.4.str:	.type	object
	.size	.4.str,24
	.byte	109,99,45,62
	.byte	77,83,84,65
	.byte	84,85,83,46
	.byte	66,46,68,79
	.byte	78,69,32,33
	.byte	61,32,48
	.space	1
	.sdecl	'.rodata.IfxMtu..5.str',data,rom
	.sect	'.rodata.IfxMtu..5.str'
.5.str:	.type	object
	.size	.5.str,62
	.byte	46,46,92,83
	.byte	111,102,116,119
	.byte	97,114,101,80
	.byte	108,97,116,102
	.byte	111,114,109,92
	.byte	105,108,108,100
	.byte	95,116,99,50
	.byte	51,120,92,115
	.byte	114,99,92,105
	.byte	102,120,92,84
	.byte	67,50,51,120
	.byte	92,77,116,117
	.byte	92,83,116,100
	.byte	92,73,102,120
	.byte	77,116,117,46
	.byte	99
	.space	1
	.sdecl	'.rodata.IfxMtu._999001___func__',data,rom,cluster('_999001___func__')
	.sect	'.rodata.IfxMtu._999001___func__'
_999001___func__:	.type	object
	.size	_999001___func__,17
	.byte	73,102,120,77
	.byte	116,117,95,99
	.byte	108,101,97,114
	.byte	83,114,97,109
	.space	1
	.sdecl	'.rodata.IfxMtu..6.str',data,rom
	.sect	'.rodata.IfxMtu..6.str'
.6.str:	.type	object
	.size	.6.str,40
	.byte	109,98,105,115
	.byte	116,83,101,108
	.byte	32,60,32,73
	.byte	70,88,77,84
	.byte	85,95,78,85
	.byte	77,95,77,66
	.byte	73,83,84,95
	.byte	84,65,66,76
	.byte	69,95,73,84
	.byte	69,77,83
	.space	1
	.sdecl	'.rodata.IfxMtu._999002___func__',data,rom,cluster('_999002___func__')
	.sect	'.rodata.IfxMtu._999002___func__'
_999002___func__:	.type	object
	.size	_999002___func__,22
	.byte	73,102,120,77
	.byte	116,117,95,99
	.byte	108,101,97,114
	.byte	83,114,97,109
	.byte	83,116,97,114
	.byte	116
	.space	1
	.sdecl	'.rodata.IfxMtu..7.str',data,rom
	.sect	'.rodata.IfxMtu..7.str'
.7.str:	.type	object
	.size	.7.str,14
	.byte	110,117,109,66
	.byte	108,111,99,107
	.byte	115,32,62,32
	.byte	48
	.space	1
	.sdecl	'.rodata.IfxMtu..8.ini',data,rom
	.sect	'.rodata.IfxMtu..8.ini'
	.align	2
.8.ini:	.type	object
	.size	.8.ini,16
	.word	134221824,134221825,69632,69633
	.sdecl	'.rodata.IfxMtu._999003___func__',data,rom,cluster('_999003___func__')
	.sect	'.rodata.IfxMtu._999003___func__'
_999003___func__:	.type	object
	.size	_999003___func__,27
	.byte	73,102,120,77
	.byte	116,117,95,114
	.byte	117,110,67,104
	.byte	101,99,107,101
	.byte	114,66,111,97
	.byte	114,100,84,101
	.byte	115,116
	.space	1
	.sdecl	'.rodata.IfxMtu..9.ini',data,rom
	.sect	'.rodata.IfxMtu..9.ini'
	.align	2
.9.ini:	.type	object
	.size	.9.ini,24
	.word	134221824,134627333,134356993,606213
	.word	73729,4097
	.sdecl	'.rodata.IfxMtu._999004___func__',data,rom,cluster('_999004___func__')
	.sect	'.rodata.IfxMtu._999004___func__'
_999004___func__:	.type	object
	.size	_999004___func__,21
	.byte	73,102,120,77
	.byte	116,117,95,114
	.byte	117,110,77,97
	.byte	114,99,104,85
	.byte	84,101,115,116
	.space	1
	.sdecl	'.rodata.IfxMtu._999005___func__',data,rom,cluster('_999005___func__')
	.sect	'.rodata.IfxMtu._999005___func__'
_999005___func__:	.type	object
	.size	_999005___func__,38
	.byte	73,102,120,77
	.byte	116,117,95,114
	.byte	117,110,78,111
	.byte	110,68,101,115
	.byte	116,114,117,99
	.byte	116,105,118,101
	.byte	73,110,118,101
	.byte	114,115,105,111
	.byte	110,84,101,115
	.byte	116
	.space	1
	.sdecl	'.rodata.IfxMtu._999006___func__',data,rom,cluster('_999006___func__')
	.sect	'.rodata.IfxMtu._999006___func__'
_999006___func__:	.type	object
	.size	_999006___func__,24
	.byte	73,102,120,77
	.byte	116,117,95,119
	.byte	114,105,116,101
	.byte	83,114,97,109
	.byte	65,100,100,114
	.byte	101,115,115
	.space	1
	.calls	'IfxMtu_clearSram','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxMtu_clearSram','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxMtu_clearSram','IfxMtu_clearSramStart'
	.calls	'IfxMtu_clearSram','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxMtu_clearSram','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_clearSram','printf'
	.calls	'IfxMtu_clearSram','IfxMtu_isMbistDone'
	.calls	'IfxMtu_clearSram','IfxMtu_clearSramContinue'
	.calls	'IfxMtu_clearSramContinue','IfxMtu_readSramAddress'
	.calls	'IfxMtu_clearSramContinue','IfxMtu_disableMbistShell'
	.calls	'IfxMtu_clearSramContinue','IfxMtu_isAutoInitRunning'
	.calls	'IfxMtu_clearSramStart','IfxMtu_enableMbistShell'
	.calls	'IfxMtu_clearSramStart','IfxMtu_isAutoInitRunning'
	.calls	'IfxMtu_clearSramStart','printf'
	.calls	'IfxMtu_readSramAddress','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_readSramAddress','IfxMtu_isMbistDone'
	.calls	'IfxMtu_runCheckerBoardTest','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxMtu_runCheckerBoardTest','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxMtu_runCheckerBoardTest','IfxMtu_enableMbistShell'
	.calls	'IfxMtu_runCheckerBoardTest','IfxMtu_isAutoInitRunning'
	.calls	'IfxMtu_runCheckerBoardTest','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxMtu_runCheckerBoardTest','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_runCheckerBoardTest','printf'
	.calls	'IfxMtu_runCheckerBoardTest','IfxMtu_isMbistDone'
	.calls	'IfxMtu_runCheckerBoardTest','IfxMtu_disableMbistShell'
	.calls	'IfxMtu_runMarchUTest','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxMtu_runMarchUTest','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxMtu_runMarchUTest','IfxMtu_enableMbistShell'
	.calls	'IfxMtu_runMarchUTest','IfxMtu_isAutoInitRunning'
	.calls	'IfxMtu_runMarchUTest','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxMtu_runMarchUTest','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_runMarchUTest','printf'
	.calls	'IfxMtu_runMarchUTest','IfxMtu_isMbistDone'
	.calls	'IfxMtu_runMarchUTest','IfxMtu_disableMbistShell'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxMtu_enableMbistShell'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxMtu_isAutoInitRunning'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_runNonDestructiveInversionTest','printf'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxMtu_isMbistDone'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxMtu_disableMbistShell'
	.calls	'IfxMtu_waitForMbistDone','IfxScuCcu_getSriFrequency'
	.calls	'IfxMtu_waitForMbistDone','IfxScuCcu_getPllErayFrequency'
	.calls	'IfxMtu_writeSramAddress','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxMtu_writeSramAddress','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxMtu_writeSramAddress','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxMtu_writeSramAddress','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_writeSramAddress','printf'
	.calls	'IfxMtu_writeSramAddress','IfxMtu_isMbistDone'
	.calls	'IfxMtu_clearErrorTracking','.cocofun_21'
	.calls	'.cocofun_21','.cocofun_26'
	.calls	'IfxMtu_clearSram','.cocofun_22'
	.calls	'IfxMtu_clearSram','.cocofun_29'
	.calls	'IfxMtu_clearSram','.cocofun_23'
	.calls	'IfxMtu_clearSram','.cocofun_17'
	.calls	'IfxMtu_clearSram','.cocofun_18'
	.calls	'IfxMtu_clearSram','.cocofun_13'
	.calls	'IfxMtu_clearSram','.cocofun_14'
	.calls	'IfxMtu_clearSramStart','.cocofun_19'
	.calls	'IfxMtu_clearSramStart','.cocofun_13'
	.calls	'IfxMtu_clearSramStart','.cocofun_14'
	.calls	'IfxMtu_clearSramStart','.cocofun_16'
	.calls	'.cocofun_19','.cocofun_27'
	.calls	'.cocofun_16','.cocofun_29'
	.calls	'IfxMtu_disableMbistShell','.cocofun_15'
	.calls	'IfxMtu_enableErrorTracking','.cocofun_26'
	.calls	'IfxMtu_enableMbistShell','.cocofun_15'
	.calls	'IfxMtu_getTrackedSramAddresses','.cocofun_21'
	.calls	'IfxMtu_isAutoInitRunning','.cocofun_15'
	.calls	'IfxMtu_isErrorTrackingEnabled','.cocofun_23'
	.calls	'IfxMtu_isErrorTrackingOverflow','.cocofun_23'
	.calls	'IfxMtu_isMbistDone','.cocofun_26'
	.calls	'IfxMtu_readSramAddress','.cocofun_27'
	.calls	'IfxMtu_runCheckerBoardTest','.cocofun_24'
	.calls	'IfxMtu_runCheckerBoardTest','.cocofun_19'
	.calls	'IfxMtu_runCheckerBoardTest','.cocofun_22'
	.calls	'IfxMtu_runCheckerBoardTest','.cocofun_20'
	.calls	'IfxMtu_runCheckerBoardTest','.cocofun_16'
	.calls	'IfxMtu_runCheckerBoardTest','.cocofun_17'
	.calls	'IfxMtu_runCheckerBoardTest','.cocofun_18'
	.calls	'IfxMtu_runCheckerBoardTest','.cocofun_13'
	.calls	'IfxMtu_runCheckerBoardTest','.cocofun_14'
	.calls	'.cocofun_20','.cocofun_28'
	.calls	'IfxMtu_runMarchUTest','.cocofun_24'
	.calls	'IfxMtu_runMarchUTest','.cocofun_19'
	.calls	'IfxMtu_runMarchUTest','.cocofun_22'
	.calls	'IfxMtu_runMarchUTest','.cocofun_20'
	.calls	'IfxMtu_runMarchUTest','.cocofun_16'
	.calls	'IfxMtu_runMarchUTest','.cocofun_17'
	.calls	'IfxMtu_runMarchUTest','.cocofun_18'
	.calls	'IfxMtu_runMarchUTest','.cocofun_13'
	.calls	'IfxMtu_runMarchUTest','.cocofun_14'
	.calls	'IfxMtu_runNonDestructiveInversionTest','.cocofun_24'
	.calls	'IfxMtu_runNonDestructiveInversionTest','.cocofun_27'
	.calls	'IfxMtu_runNonDestructiveInversionTest','.cocofun_28'
	.calls	'IfxMtu_runNonDestructiveInversionTest','.cocofun_25'
	.calls	'IfxMtu_runNonDestructiveInversionTest','.cocofun_17'
	.calls	'IfxMtu_runNonDestructiveInversionTest','.cocofun_18'
	.calls	'IfxMtu_runNonDestructiveInversionTest','.cocofun_13'
	.calls	'IfxMtu_runNonDestructiveInversionTest','.cocofun_14'
	.calls	'IfxMtu_writeSramAddress','.cocofun_25'
	.calls	'IfxMtu_writeSramAddress','.cocofun_17'
	.calls	'IfxMtu_writeSramAddress','.cocofun_18'
	.calls	'IfxMtu_writeSramAddress','.cocofun_13'
	.calls	'IfxMtu_writeSramAddress','.cocofun_14'
	.calls	'IfxMtu_clearErrorTracking','',0
	.calls	'.cocofun_21','',0
	.calls	'.cocofun_26','',0
	.calls	'IfxMtu_clearSram','',24
	.calls	'.cocofun_29','',0
	.calls	'.cocofun_23','',0
	.calls	'.cocofun_22','',0
	.calls	'IfxMtu_clearSramContinue','',0
	.calls	'IfxMtu_clearSramStart','',24
	.calls	'.cocofun_19','',0
	.calls	'.cocofun_27','',0
	.calls	'.cocofun_16','',0
	.calls	'IfxMtu_disableMbistShell','',0
	.calls	'.cocofun_15','',0
	.calls	'IfxMtu_enableErrorTracking','',0
	.calls	'IfxMtu_enableMbistShell','',0
	.calls	'IfxMtu_getSystemAddress','',0
	.calls	'IfxMtu_getTrackedSramAddresses','',0
	.calls	'IfxMtu_isAutoInitRunning','',0
	.calls	'IfxMtu_isErrorTrackingEnabled','',0
	.calls	'IfxMtu_isErrorTrackingOverflow','',0
	.calls	'IfxMtu_isMbistDone','',0
	.calls	'IfxMtu_readSramAddress','',0
	.calls	'IfxMtu_runCheckerBoardTest','',48
	.calls	'.cocofun_24','',0
	.calls	'.cocofun_20','',0
	.calls	'.cocofun_28','',0
	.calls	'.cocofun_18','',0
	.calls	'.cocofun_17','',0
	.calls	'.cocofun_14','',0
	.calls	'.cocofun_13','',0
	.calls	'IfxMtu_runMarchUTest','',56
	.calls	'IfxMtu_runNonDestructiveInversionTest','',24
	.calls	'.cocofun_25','',0
	.calls	'IfxMtu_waitForMbistDone','',8
	.extern	printf
	.extern	verboseLevelStr
	.extern	IfxScuWdt_clearSafetyEndinit
	.extern	IfxScuWdt_setSafetyEndinit
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxMtu_sramTable
	.extern	IfxScuCcu_getPllErayFrequency
	.extern	IfxScuCcu_getSriFrequency
	.extern	__printf_int
	.calls	'IfxMtu_writeSramAddress','',24
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L180:
	.word	79080
	.half	3
	.word	.L181
	.byte	4
.L179:
	.byte	1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L182
	.byte	2
	.byte	'__stopPerfCounters',0,3,1,217,1,17,1,1,3,0,4
	.byte	'unsigned long long int',0,8,7,5
	.byte	'void',0,6
	.word	239
	.byte	7
	.byte	'__ld64',0,3,2,110,19
	.word	213
	.byte	1,1,8
	.byte	'addr',0,2,110,32
	.word	245
	.byte	3,0,2
	.byte	'__st64',0,3,2,118,17,1,1,8
	.byte	'addr',0,2,118,30
	.word	245
	.byte	8
	.byte	'value',0,2,118,43
	.word	213
	.byte	3,0,4
	.byte	'unsigned int',0,4,7
.L495:
	.byte	4
	.byte	'int',0,4,5,4
	.byte	'unsigned int',0,4,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,133,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	349
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,4,187,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	365
	.byte	4,2,35,0,0
.L372:
	.byte	4
	.byte	'unsigned char',0,1,8
.L378:
	.byte	4
	.byte	'unsigned short int',0,2,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,142,8,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'IR0',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,4,195,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	540
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,157,8,16,4,10
	.byte	'AE',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,4,203,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	784
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU',0,4,243,13,25,12,12
	.byte	'CON0',0
	.word	461
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	744
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	975
	.byte	4,2,35,8,0,13
	.word	1015
	.byte	6
	.word	1078
	.byte	2
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,130,3,17,1,1,8
	.byte	'watchdog',0,3,130,3,65
	.word	1083
	.byte	8
	.byte	'password',0,3,130,3,82
	.word	518
	.byte	3,0,2
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,222,3,17,1,1,8
	.byte	'watchdog',0,3,222,3,63
	.word	1083
	.byte	8
	.byte	'password',0,3,222,3,80
	.word	518
	.byte	3,0,7
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,187,3,19
	.word	518
	.byte	1,1,8
	.byte	'watchdog',0,3,187,3,74
	.word	1083
	.byte	3,0
.L432:
	.byte	7
	.byte	'IfxScuWdt_getSafetyWatchdogEndInit',0,3,3,201,3,20
	.word	501
	.byte	1,1
.L435:
	.byte	3,0,14,6,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_none',0,1,0,7
	.byte	'IfxCpu_getCoreIndex',0,3,5,170,5,31
	.word	1362
	.byte	1,1,3,0,7
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,185,4,20
	.word	501
	.byte	1,1,3,0
.L397:
	.byte	4
	.byte	'unsigned long int',0,4,7,7
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,190,5,19
	.word	1493
	.byte	1,1,8
	.byte	'address',0,5,190,5,55
	.word	1493
	.byte	3,0,7
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,198,5,20
	.word	501
	.byte	1,1,8
	.byte	'address',0,5,198,5,70
	.word	1493
	.byte	3,0,2
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,153,7,17,1,1,8
	.byte	'address',0,5,153,7,56
	.word	1493
	.byte	8
	.byte	'count',0,5,153,7,72
	.word	1493
	.byte	3,0,9
	.byte	'_Ifx_P_OUT_Bits',0,8,231,2,16,4,10
	.byte	'P0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,8,239,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1722
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMR_Bits',0,8,129,2,16,4,10
	.byte	'PS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'PCL0',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	501
	.byte	1,0,2,35,3,0,11,8,191,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2038
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,10
	.byte	'MODREV',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,8,231,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2609
	.byte	4,2,35,0,0,16,4
	.word	501
	.byte	17,3,0,9
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'PC0',0,1
	.word	501
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	3,5,2,35,1,10
	.byte	'PC1',0,1
	.word	501
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	501
	.byte	3,5,2,35,2,10
	.byte	'PC2',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	3,5,2,35,3,10
	.byte	'PC3',0,1
	.word	501
	.byte	5,0,2,35,3,0,11,8,247,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2737
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'PC4',0,1
	.word	501
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	3,5,2,35,1,10
	.byte	'PC5',0,1
	.word	501
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	501
	.byte	3,5,2,35,2,10
	.byte	'PC6',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	3,5,2,35,3,10
	.byte	'PC7',0,1
	.word	501
	.byte	5,0,2,35,3,0,11,8,135,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2952
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'PC8',0,1
	.word	501
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	3,5,2,35,1,10
	.byte	'PC9',0,1
	.word	501
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	501
	.byte	3,5,2,35,2,10
	.byte	'PC10',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	3,5,2,35,3,10
	.byte	'PC11',0,1
	.word	501
	.byte	5,0,2,35,3,0,11,8,143,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3167
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'PC12',0,1
	.word	501
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	3,5,2,35,1,10
	.byte	'PC13',0,1
	.word	501
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	501
	.byte	3,5,2,35,2,10
	.byte	'PC14',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	3,5,2,35,3,10
	.byte	'PC15',0,1
	.word	501
	.byte	5,0,2,35,3,0,11,8,255,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3384
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,10
	.byte	'P0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,8,239,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3604
	.byte	4,2,35,0,0,16,24
	.word	501
	.byte	17,23,0,9
	.byte	'_Ifx_P_PDR0_Bits',0,8,160,3,16,4,10
	.byte	'PD0',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	501
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'PD2',0,1
	.word	501
	.byte	3,5,2,35,1,10
	.byte	'PL2',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'PD3',0,1
	.word	501
	.byte	3,1,2,35,1,10
	.byte	'PL3',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'PD4',0,1
	.word	501
	.byte	3,5,2,35,2,10
	.byte	'PL4',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'PD5',0,1
	.word	501
	.byte	3,1,2,35,2,10
	.byte	'PL5',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'PD6',0,1
	.word	501
	.byte	3,5,2,35,3,10
	.byte	'PL6',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'PD7',0,1
	.word	501
	.byte	3,1,2,35,3,10
	.byte	'PL7',0,1
	.word	501
	.byte	1,0,2,35,3,0,11,8,135,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3927
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PDR1_Bits',0,8,181,3,16,4,10
	.byte	'PD8',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'PL8',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PD9',0,1
	.word	501
	.byte	3,1,2,35,0,10
	.byte	'PL9',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'PD10',0,1
	.word	501
	.byte	3,5,2,35,1,10
	.byte	'PL10',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'PD11',0,1
	.word	501
	.byte	3,1,2,35,1,10
	.byte	'PL11',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'PD12',0,1
	.word	501
	.byte	3,5,2,35,2,10
	.byte	'PL12',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'PD13',0,1
	.word	501
	.byte	3,1,2,35,2,10
	.byte	'PL13',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'PD14',0,1
	.word	501
	.byte	3,5,2,35,3,10
	.byte	'PL14',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'PD15',0,1
	.word	501
	.byte	3,1,2,35,3,10
	.byte	'PL15',0,1
	.word	501
	.byte	1,0,2,35,3,0,11,8,143,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4231
	.byte	4,2,35,0,0,16,8
	.word	501
	.byte	17,7,0,9
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,10
	.byte	'EN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,8,223,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4556
	.byte	4,2,35,0,0,16,12
	.word	501
	.byte	17,11,0,9
	.byte	'_Ifx_P_PDISC_Bits',0,8,138,3,16,4,10
	.byte	'PDIS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PDIS2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PDIS3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PDIS4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PDIS5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PDIS6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PDIS7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'PDIS8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'PDIS9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'PDIS10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'PDIS11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'PDIS12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'PDIS13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'PDIS14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'PDIS15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,8,255,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4896
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PCSR_Bits',0,8,253,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'SEL1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'SEL2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	518
	.byte	6,7,2,35,0,10
	.byte	'SEL9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'SEL10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	326
	.byte	20,1,2,35,0,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,11,8,247,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5262
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR0_Bits',0,8,166,2,16,4,10
	.byte	'PS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,11,8,207,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5473
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR4_Bits',0,8,187,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'PS4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,11,8,223,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5620
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR8_Bits',0,8,198,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'PS8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	326
	.byte	20,0,2,35,0,0,11,8,231,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5789
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR12_Bits',0,8,176,2,16,4,10
	.byte	'reserved_0',0,2
	.word	518
	.byte	12,4,2,35,0,10
	.byte	'PS12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,8,215,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5961
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR0_Bits',0,8,192,1,16,4,10
	.byte	'reserved_0',0,2
	.word	518
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	518
	.byte	12,0,2,35,2,0,11,8,159,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6136
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR4_Bits',0,8,213,1,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	20,12,2,35,0,10
	.byte	'PCL4',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	8,0,2,35,3,0,11,8,175,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6310
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR8_Bits',0,8,224,1,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	24,8,2,35,0,10
	.byte	'PCL8',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	4,0,2,35,3,0,11,8,183,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6484
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR12_Bits',0,8,203,1,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	28,4,2,35,0,10
	.byte	'PCL12',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	501
	.byte	1,0,2,35,3,0,11,8,167,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6660
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR_Bits',0,8,209,2,16,4,10
	.byte	'PS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,8,199,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6816
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR_Bits',0,8,235,1,16,4,10
	.byte	'reserved_0',0,2
	.word	518
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	501
	.byte	1,0,2,35,3,0,11,8,151,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7149
	.byte	4,2,35,0,0,16,96
	.word	501
	.byte	17,95,0,9
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,11,8,215,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7506
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,10
	.byte	'EN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	501
	.byte	1,0,2,35,3,0,11,8,207,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7593
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P',0,8,159,5,25,128,2,12
	.byte	'OUT',0
	.word	1998
	.byte	4,2,35,0,12
	.byte	'OMR',0
	.word	2569
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	2688
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	2728
	.byte	4,2,35,12,12
	.byte	'IOCR0',0
	.word	2912
	.byte	4,2,35,16,12
	.byte	'IOCR4',0
	.word	3127
	.byte	4,2,35,20,12
	.byte	'IOCR8',0
	.word	3344
	.byte	4,2,35,24,12
	.byte	'IOCR12',0
	.word	3564
	.byte	4,2,35,28,12
	.byte	'reserved_20',0
	.word	2728
	.byte	4,2,35,32,12
	.byte	'IN',0
	.word	3878
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	3918
	.byte	24,2,35,40,12
	.byte	'PDR0',0
	.word	4191
	.byte	4,2,35,64,12
	.byte	'PDR1',0
	.word	4507
	.byte	4,2,35,68,12
	.byte	'reserved_48',0
	.word	4547
	.byte	8,2,35,72,12
	.byte	'ESR',0
	.word	4847
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	4887
	.byte	12,2,35,84,12
	.byte	'PDISC',0
	.word	5222
	.byte	4,2,35,96,12
	.byte	'PCSR',0
	.word	5433
	.byte	4,2,35,100,12
	.byte	'reserved_64',0
	.word	4547
	.byte	8,2,35,104,12
	.byte	'OMSR0',0
	.word	5580
	.byte	4,2,35,112,12
	.byte	'OMSR4',0
	.word	5749
	.byte	4,2,35,116,12
	.byte	'OMSR8',0
	.word	5921
	.byte	4,2,35,120,12
	.byte	'OMSR12',0
	.word	6096
	.byte	4,2,35,124,12
	.byte	'OMCR0',0
	.word	6270
	.byte	4,3,35,128,1,12
	.byte	'OMCR4',0
	.word	6444
	.byte	4,3,35,132,1,12
	.byte	'OMCR8',0
	.word	6620
	.byte	4,3,35,136,1,12
	.byte	'OMCR12',0
	.word	6776
	.byte	4,3,35,140,1,12
	.byte	'OMSR',0
	.word	7109
	.byte	4,3,35,144,1,12
	.byte	'OMCR',0
	.word	7457
	.byte	4,3,35,148,1,12
	.byte	'reserved_98',0
	.word	7497
	.byte	96,3,35,152,1,12
	.byte	'ACCEN1',0
	.word	7553
	.byte	4,3,35,248,1,12
	.byte	'ACCEN0',0
	.word	8120
	.byte	4,3,35,252,1,0,13
	.word	8160
	.byte	6
	.word	8693
	.byte	14,7,131,1,9,4,15
	.byte	'IfxPort_State_notChanged',0,0,15
	.byte	'IfxPort_State_high',0,1,15
	.byte	'IfxPort_State_low',0,128,128,4,15
	.byte	'IfxPort_State_toggled',0,129,128,4,0,2
	.byte	'IfxPort_setPinState',0,3,7,143,4,17,1,1,8
	.byte	'port',0,7,143,4,44
	.word	8698
	.byte	8
	.byte	'pinIndex',0,7,143,4,56
	.word	501
	.byte	8
	.byte	'action',0,7,143,4,80
	.word	8703
	.byte	3,0,18
	.byte	'__nop',0,1,1,1,1,4
	.byte	'char',0,1,6,19
	.word	8895
	.byte	6
	.word	8903
	.byte	20
	.word	8908
	.byte	21
	.byte	'printf',0,9,143,1,16
	.word	342
	.byte	1,1,1,1,22,9,143,1,38
	.word	8913
	.byte	23,9,143,1,50,0,24
	.word	184
	.byte	3,0,24
	.word	250
	.byte	25
	.word	268
	.byte	3,0,24
	.word	283
	.byte	25
	.word	297
	.byte	25
	.word	310
	.byte	3,0,24
	.word	1088
	.byte	25
	.word	1128
	.byte	25
	.word	1146
	.byte	3,0,24
	.word	1166
	.byte	25
	.word	1204
	.byte	25
	.word	1222
	.byte	3,0,26
	.byte	'IfxScuWdt_clearSafetyEndinit',0,3,199,1,17,1,1,1,1,8
	.byte	'password',0,3,199,1,53
	.word	518
	.byte	0,26
	.byte	'IfxScuWdt_setSafetyEndinit',0,3,219,1,17,1,1,1,1,8
	.byte	'password',0,3,219,1,51
	.word	518
	.byte	0,24
	.word	1242
	.byte	25
	.word	1293
	.byte	3,0,24
	.word	1313
	.byte	3,0,27
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,3,230,2,19
	.word	518
	.byte	1,1,1,1,24
	.word	1417
	.byte	3,0,24
	.word	1451
	.byte	3,0,24
	.word	1514
	.byte	25
	.word	1555
	.byte	3,0,24
	.word	1574
	.byte	25
	.word	1629
	.byte	3,0,24
	.word	1648
	.byte	25
	.word	1688
	.byte	25
	.word	1705
	.byte	3,0,24
	.word	8806
	.byte	25
	.word	8834
	.byte	25
	.word	8848
	.byte	25
	.word	8866
	.byte	3,0,4
	.byte	'float',0,4,4,27
	.byte	'IfxScuCcu_getPllErayFrequency',0,10,243,6,20
	.word	9280
	.byte	1,1,1,1,27
	.byte	'IfxScuCcu_getSriFrequency',0,10,151,7,20
	.word	9280
	.byte	1,1,1,1
.L364:
	.byte	14,11,66,9,1,15
	.byte	'IfxMtu_MbistSel_none',0,127,15
	.byte	'IfxMtu_MbistSel_miniMcds',0,13,15
	.byte	'IfxMtu_MbistSel_cpu0Dspr',0,14,15
	.byte	'IfxMtu_MbistSel_cpu0Pspr',0,16,15
	.byte	'IfxMtu_MbistSel_cpu0Ptag',0,17,15
	.byte	'IfxMtu_MbistSel_ethermac',0,22,15
	.byte	'IfxMtu_MbistSel_mod1',0,23,15
	.byte	'IfxMtu_MbistSel_mod2',0,24,15
	.byte	'IfxMtu_MbistSel_mod3',0,25,15
	.byte	'IfxMtu_MbistSel_mod4',0,26,15
	.byte	'IfxMtu_MbistSel_mcan',0,36,15
	.byte	'IfxMtu_MbistSel_mcan1',0,37,15
	.byte	'IfxMtu_MbistSel_erayObf',0,38,15
	.byte	'IfxMtu_MbistSel_erayIbfTbf',0,39,15
	.byte	'IfxMtu_MbistSel_erayMbf',0,40,15
	.byte	'IfxMtu_MbistSel_mcds',0,45,15
	.byte	'IfxMtu_MbistSel_emem0',0,46,15
	.byte	'IfxMtu_MbistSel_emem1',0,47,15
	.byte	'IfxMtu_MbistSel_emem2',0,48,15
	.byte	'IfxMtu_MbistSel_emem3',0,49,15
	.byte	'IfxMtu_MbistSel_emem4',0,50,15
	.byte	'IfxMtu_MbistSel_emem5',0,51,15
	.byte	'IfxMtu_MbistSel_emem6',0,52,15
	.byte	'IfxMtu_MbistSel_emem7',0,53,15
	.byte	'IfxMtu_MbistSel_lmu',0,207,0,15
	.byte	'IfxMtu_MbistSel_ememXtm0',0,212,0,15
	.byte	'IfxMtu_MbistSel_ememXtm1',0,213,0,15
	.byte	'IfxMtu_MbistSel_fft0',0,214,0,15
	.byte	'IfxMtu_MbistSel_fft1',0,215,0,0,13
	.word	1493
.L367:
	.byte	6
	.word	10097
	.byte	16,17
	.word	8895
	.byte	17,16,0
.L380:
	.byte	19
	.word	10107
	.byte	4
	.byte	'short int',0,2,5,4
	.byte	'unsigned short int',0,2,7,9
	.byte	'_Ifx_MC_CONFIG0_Bits',0,12,45,16,2,10
	.byte	'ACCSTYPE',0,2
	.word	10134
	.byte	8,8,2,35,0,10
	.byte	'reserved_8',0,2
	.word	10134
	.byte	4,4,2,35,0,10
	.byte	'NUMACCS',0,2
	.word	10134
	.byte	4,0,2,35,0,0,11,12,151,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	10156
	.byte	2,2,35,0,0,9
	.byte	'_Ifx_MC_CONFIG1_Bits',0,12,53,16,2,10
	.byte	'ACCSPAT',0,2
	.word	10134
	.byte	8,8,2,35,0,10
	.byte	'SELFASTB',0,2
	.word	10134
	.byte	4,4,2,35,0,10
	.byte	'AG_MOD',0,2
	.word	10134
	.byte	4,0,2,35,0,0,11,12,159,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	10284
	.byte	2,2,35,0,0,9
	.byte	'_Ifx_MC_MCONTROL_Bits',0,12,100,16,2,10
	.byte	'START',0,2
	.word	10134
	.byte	1,15,2,35,0,10
	.byte	'RESUME',0,2
	.word	10134
	.byte	1,14,2,35,0,10
	.byte	'ESTF',0,2
	.word	10134
	.byte	1,13,2,35,0,10
	.byte	'DIR',0,2
	.word	10134
	.byte	1,12,2,35,0,10
	.byte	'DINIT',0,2
	.word	10134
	.byte	1,11,2,35,0,10
	.byte	'RCADR',0,2
	.word	10134
	.byte	1,10,2,35,0,10
	.byte	'ROWTOG',0,2
	.word	10134
	.byte	1,9,2,35,0,10
	.byte	'BITTOG',0,2
	.word	10134
	.byte	1,8,2,35,0,10
	.byte	'GP_BASE',0,2
	.word	10134
	.byte	1,7,2,35,0,10
	.byte	'FAILDMP',0,2
	.word	10134
	.byte	1,6,2,35,0,10
	.byte	'Res4',0,2
	.word	10134
	.byte	5,1,2,35,0,10
	.byte	'reserved_15',0,2
	.word	10134
	.byte	1,0,2,35,0,0,11,12,191,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	10408
	.byte	2,2,35,0,0,9
	.byte	'_Ifx_MC_MSTATUS_Bits',0,12,117,16,2,10
	.byte	'DONE',0,2
	.word	10134
	.byte	1,15,2,35,0,10
	.byte	'FAIL',0,2
	.word	10134
	.byte	1,14,2,35,0,10
	.byte	'FDA',0,2
	.word	10134
	.byte	1,13,2,35,0,10
	.byte	'SFAIL',0,2
	.word	10134
	.byte	1,12,2,35,0,10
	.byte	'reserved_4',0,2
	.word	10134
	.byte	12,0,2,35,0,0,11,12,199,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	10689
	.byte	2,2,35,0,0,9
	.byte	'_Ifx_MC_RANGE_Bits',0,12,127,16,2,10
	.byte	'ADDR',0,2
	.word	10134
	.byte	15,1,2,35,0,10
	.byte	'RAEN',0,2
	.word	10134
	.byte	1,0,2,35,0,0,11,12,207,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	10842
	.byte	2,2,35,0,0,16,2
	.word	501
	.byte	17,1,0,9
	.byte	'_Ifx_MC_REVID_Bits',0,12,140,1,16,2,10
	.byte	'REV_ID',0,2
	.word	10134
	.byte	16,0,2,35,0,0,11,12,223,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	10948
	.byte	2,2,35,0,0,9
	.byte	'_Ifx_MC_ECCS_Bits',0,12,78,16,2,10
	.byte	'CENE',0,2
	.word	10134
	.byte	1,15,2,35,0,10
	.byte	'UENE',0,2
	.word	10134
	.byte	1,14,2,35,0,10
	.byte	'AENE',0,2
	.word	10134
	.byte	1,13,2,35,0,10
	.byte	'ECE',0,2
	.word	10134
	.byte	1,12,2,35,0,10
	.byte	'TRE',0,2
	.word	10134
	.byte	1,11,2,35,0,10
	.byte	'BFLE',0,2
	.word	10134
	.byte	1,10,2,35,0,10
	.byte	'SFLE',0,2
	.word	10134
	.byte	2,8,2,35,0,10
	.byte	'ECCMAP',0,2
	.word	10134
	.byte	2,6,2,35,0,10
	.byte	'TC_WAY_SEL',0,2
	.word	10134
	.byte	2,4,2,35,0,10
	.byte	'reserved_12',0,2
	.word	10134
	.byte	4,0,2,35,0,0,11,12,175,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	11032
	.byte	2,2,35,0,0,9
	.byte	'_Ifx_MC_ECCD_Bits',0,12,61,16,2,10
	.byte	'SERR',0,2
	.word	10134
	.byte	1,15,2,35,0,10
	.byte	'CERR',0,2
	.word	10134
	.byte	1,14,2,35,0,10
	.byte	'UERR',0,2
	.word	10134
	.byte	1,13,2,35,0,10
	.byte	'AERR',0,2
	.word	10134
	.byte	1,12,2,35,0,10
	.byte	'TRC',0,2
	.word	10134
	.byte	1,11,2,35,0,10
	.byte	'VAL',0,2
	.word	10134
	.byte	5,6,2,35,0,10
	.byte	'reserved_10',0,2
	.word	10134
	.byte	1,5,2,35,0,10
	.byte	'CENE',0,2
	.word	10134
	.byte	1,4,2,35,0,10
	.byte	'UENE',0,2
	.word	10134
	.byte	1,3,2,35,0,10
	.byte	'AENE',0,2
	.word	10134
	.byte	1,2,2,35,0,10
	.byte	'ECE',0,2
	.word	10134
	.byte	1,1,2,35,0,10
	.byte	'EOV',0,2
	.word	10134
	.byte	1,0,2,35,0,0,11,12,167,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	11269
	.byte	2,2,35,0,0,9
	.byte	'_Ifx_MC_ETRR_Bits',0,12,93,16,2,10
	.byte	'ADDR',0,2
	.word	10134
	.byte	13,3,2,35,0,10
	.byte	'MBI',0,2
	.word	10134
	.byte	3,0,2,35,0,0
.L483:
	.byte	11,12,183,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	11528
	.byte	2,2,35,0,0,16,10
	.word	11583
	.byte	17,4,0,16,132,1
	.word	501
	.byte	17,131,1,0,9
	.byte	'_Ifx_MC_RDBFL_Bits',0,12,134,1,16,2,10
	.byte	'WDATA',0,2
	.word	10134
	.byte	16,0,2,35,0,0,11,12,215,1,9,2,12
	.byte	'U',0
	.word	518
	.byte	2,2,35,0,12
	.byte	'I',0
	.word	10121
	.byte	2,2,35,0,12
	.byte	'B',0
	.word	11643
	.byte	2,2,35,0,0,16,80
	.word	11686
	.byte	17,39,0,16,16
	.word	501
	.byte	17,15,0,9
	.byte	'_Ifx_MC',0,12,239,1,25,128,2,12
	.byte	'CONFIG0',0
	.word	10244
	.byte	2,2,35,0,12
	.byte	'CONFIG1',0
	.word	10368
	.byte	2,2,35,2,12
	.byte	'MCONTROL',0
	.word	10649
	.byte	2,2,35,4,12
	.byte	'MSTATUS',0
	.word	10802
	.byte	2,2,35,6,12
	.byte	'RANGE',0
	.word	10899
	.byte	2,2,35,8,12
	.byte	'reserved_A',0
	.word	10939
	.byte	2,2,35,10,12
	.byte	'REVID',0
	.word	10992
	.byte	2,2,35,12,12
	.byte	'ECCS',0
	.word	11229
	.byte	2,2,35,14,12
	.byte	'ECCD',0
	.word	11488
	.byte	2,2,35,16,12
	.byte	'ETRR',0
	.word	11623
	.byte	10,2,35,18,12
	.byte	'reserved_1C',0
	.word	11632
	.byte	132,1,2,35,28,12
	.byte	'RDBFL',0
	.word	11726
	.byte	80,3,35,160,1,12
	.byte	'reserved_F0',0
	.word	11735
	.byte	16,3,35,240,1,0,13
	.word	11744
.L388:
	.byte	6
	.word	11981
	.byte	16,22
	.word	8895
	.byte	17,21,0
.L390:
	.byte	19
	.word	11991
	.byte	28,11,105,9,12,12
	.byte	'numBlocks',0
	.word	501
	.byte	1,2,35,0,12
	.byte	'dataSize',0
	.word	518
	.byte	2,2,35,2,12
	.byte	'eccSize',0
	.word	501
	.byte	1,2,35,4,12
	.byte	'eccInvPos0',0
	.word	501
	.byte	1,2,35,5,12
	.byte	'eccInvPos1',0
	.word	501
	.byte	1,2,35,6,12
	.byte	'mbistDelay',0
	.word	1493
	.byte	4,2,35,8,0,19
	.word	12005
.L392:
	.byte	6
	.word	12125
.L420:
	.byte	6
	.word	518
.L425:
	.byte	16,16
	.word	1493
	.byte	17,3,0,16,27
	.word	8895
	.byte	17,26,0
.L431:
	.byte	19
	.word	12149
.L443:
	.byte	16,24
	.word	1493
	.byte	17,5,0,16,21
	.word	8895
	.byte	17,20,0
.L449:
	.byte	19
	.word	12172
	.byte	16,38
	.word	8895
	.byte	17,37,0
.L461:
	.byte	19
	.word	12186
	.byte	16,24
	.word	8895
	.byte	17,23,0
.L470:
	.byte	19
	.word	12200
.L490:
	.byte	6
	.word	11583
.L506:
	.byte	13
	.word	1493
	.byte	29
	.byte	'__wchar_t',0,13,1,1
	.word	10121
	.byte	29
	.byte	'__size_t',0,13,1,1
	.word	326
	.byte	29
	.byte	'__ptrdiff_t',0,13,1,1
	.word	342
	.byte	30,1,6
	.word	12279
	.byte	29
	.byte	'__codeptr',0,13,1,1
	.word	12281
	.byte	29
	.byte	'__intptr_t',0,13,1,1
	.word	342
	.byte	29
	.byte	'__uintptr_t',0,13,1,1
	.word	326
	.byte	29
	.byte	'_iob_flag_t',0,9,82,25
	.word	518
	.byte	16,24
	.word	8908
	.byte	17,5,0,31
	.byte	'verboseLevelStr',0,14,29,20
	.word	12363
	.byte	1,1,29
	.byte	'uint8',0,15,89,24
	.word	501
	.byte	29
	.byte	'sint16',0,15,90,24
	.word	10121
	.byte	29
	.byte	'uint16',0,15,91,24
	.word	518
	.byte	4
	.byte	'long int',0,4,5,29
	.byte	'sint32',0,15,92,24
	.word	12442
	.byte	29
	.byte	'uint32',0,15,93,24
	.word	1493
	.byte	29
	.byte	'float32',0,15,94,24
	.word	9280
	.byte	29
	.byte	'boolean',0,15,104,24
	.word	501
	.byte	4
	.byte	'long long int',0,8,5,29
	.byte	'sint64',0,16,36,28
	.word	12516
	.byte	29
	.byte	'uint64',0,16,37,28
	.word	213
	.byte	29
	.byte	'pvoid',0,16,40,28
	.word	245
	.byte	29
	.byte	'Ifx_TickTime',0,16,43,28
	.word	12516
	.byte	14,16,94,9,1,15
	.byte	'Ifx_RxSel_a',0,0,15
	.byte	'Ifx_RxSel_b',0,1,15
	.byte	'Ifx_RxSel_c',0,2,15
	.byte	'Ifx_RxSel_d',0,3,15
	.byte	'Ifx_RxSel_e',0,4,15
	.byte	'Ifx_RxSel_f',0,5,15
	.byte	'Ifx_RxSel_g',0,6,15
	.byte	'Ifx_RxSel_h',0,7,0,29
	.byte	'Ifx_RxSel',0,16,104,3
	.word	12598
	.byte	9
	.byte	'_Ifx_CPU_A_Bits',0,17,45,16,4,10
	.byte	'ADDR',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_A_Bits',0,17,48,3
	.word	12734
	.byte	9
	.byte	'_Ifx_CPU_BIV_Bits',0,17,51,16,4,10
	.byte	'VSS',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'BIV',0,4
	.word	349
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_BIV_Bits',0,17,55,3
	.word	12795
	.byte	9
	.byte	'_Ifx_CPU_BTV_Bits',0,17,58,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'BTV',0,4
	.word	349
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_BTV_Bits',0,17,62,3
	.word	12874
	.byte	9
	.byte	'_Ifx_CPU_CCNT_Bits',0,17,65,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_CCNT_Bits',0,17,69,3
	.word	12960
	.byte	9
	.byte	'_Ifx_CPU_CCTRL_Bits',0,17,72,16,4,10
	.byte	'CM',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'CE',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'M1',0,4
	.word	349
	.byte	3,27,2,35,0,10
	.byte	'M2',0,4
	.word	349
	.byte	3,24,2,35,0,10
	.byte	'M3',0,4
	.word	349
	.byte	3,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	349
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_CPU_CCTRL_Bits',0,17,80,3
	.word	13049
	.byte	9
	.byte	'_Ifx_CPU_COMPAT_Bits',0,17,83,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'RM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'SP',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	349
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_COMPAT_Bits',0,17,89,3
	.word	13195
	.byte	9
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,17,92,16,4,10
	.byte	'CORE_ID',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CORE_ID_Bits',0,17,96,3
	.word	13322
	.byte	9
	.byte	'_Ifx_CPU_CPR_L_Bits',0,17,99,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	349
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_L_Bits',0,17,103,3
	.word	13420
	.byte	9
	.byte	'_Ifx_CPU_CPR_U_Bits',0,17,106,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	349
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_U_Bits',0,17,110,3
	.word	13513
	.byte	9
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,17,113,16,4,10
	.byte	'MODREV',0,4
	.word	349
	.byte	8,24,2,35,0,10
	.byte	'MOD_32B',0,4
	.word	349
	.byte	8,16,2,35,0,10
	.byte	'MOD',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPU_ID_Bits',0,17,118,3
	.word	13606
	.byte	9
	.byte	'_Ifx_CPU_CPXE_Bits',0,17,121,16,4,10
	.byte	'XE',0,4
	.word	349
	.byte	8,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPXE_Bits',0,17,125,3
	.word	13713
	.byte	9
	.byte	'_Ifx_CPU_CREVT_Bits',0,17,128,1,16,4,10
	.byte	'EVTA',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	349
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_CREVT_Bits',0,17,136,1,3
	.word	13800
	.byte	9
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,17,139,1,16,4,10
	.byte	'CID',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CUS_ID_Bits',0,17,143,1,3
	.word	13954
	.byte	9
	.byte	'_Ifx_CPU_D_Bits',0,17,146,1,16,4,10
	.byte	'DATA',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_D_Bits',0,17,149,1,3
	.word	14048
	.byte	9
	.byte	'_Ifx_CPU_DATR_Bits',0,17,152,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'SBE',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'reserved_4',0,4
	.word	349
	.byte	5,23,2,35,0,10
	.byte	'CWE',0,4
	.word	349
	.byte	1,22,2,35,0,10
	.byte	'CFE',0,4
	.word	349
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	349
	.byte	3,18,2,35,0,10
	.byte	'SOE',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'SME',0,4
	.word	349
	.byte	1,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DATR_Bits',0,17,163,1,3
	.word	14111
	.byte	9
	.byte	'_Ifx_CPU_DBGSR_Bits',0,17,166,1,16,4,10
	.byte	'DE',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'HALT',0,4
	.word	349
	.byte	2,29,2,35,0,10
	.byte	'SIH',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'PREVSUSP',0,4
	.word	349
	.byte	1,25,2,35,0,10
	.byte	'PEVT',0,4
	.word	349
	.byte	1,24,2,35,0,10
	.byte	'EVTSRC',0,4
	.word	349
	.byte	5,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	349
	.byte	19,0,2,35,0,0,29
	.byte	'Ifx_CPU_DBGSR_Bits',0,17,177,1,3
	.word	14329
	.byte	9
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,17,180,1,16,4,10
	.byte	'DTA',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	349
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_DBGTCR_Bits',0,17,184,1,3
	.word	14544
	.byte	9
	.byte	'_Ifx_CPU_DCON0_Bits',0,17,187,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'DCBYP',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	349
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_CPU_DCON0_Bits',0,17,192,1,3
	.word	14638
	.byte	9
	.byte	'_Ifx_CPU_DCON2_Bits',0,17,195,1,16,4,10
	.byte	'DCACHE_SZE',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'DSCRATCH_SZE',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DCON2_Bits',0,17,199,1,3
	.word	14754
	.byte	9
	.byte	'_Ifx_CPU_DCX_Bits',0,17,202,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	6,26,2,35,0,10
	.byte	'DCXValue',0,4
	.word	349
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_CPU_DCX_Bits',0,17,206,1,3
	.word	14855
	.byte	9
	.byte	'_Ifx_CPU_DEADD_Bits',0,17,209,1,16,4,10
	.byte	'ERROR_ADDRESS',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_DEADD_Bits',0,17,212,1,3
	.word	14948
	.byte	9
	.byte	'_Ifx_CPU_DIEAR_Bits',0,17,215,1,16,4,10
	.byte	'TA',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_DIEAR_Bits',0,17,218,1,3
	.word	15028
	.byte	9
	.byte	'_Ifx_CPU_DIETR_Bits',0,17,221,1,16,4,10
	.byte	'IED',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	349
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	349
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	349
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	349
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	349
	.byte	18,0,2,35,0,0,29
	.byte	'Ifx_CPU_DIETR_Bits',0,17,233,1,3
	.word	15097
	.byte	9
	.byte	'_Ifx_CPU_DMS_Bits',0,17,236,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'DMSValue',0,4
	.word	349
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_DMS_Bits',0,17,240,1,3
	.word	15326
	.byte	9
	.byte	'_Ifx_CPU_DPR_L_Bits',0,17,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	349
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_L_Bits',0,17,247,1,3
	.word	15419
	.byte	9
	.byte	'_Ifx_CPU_DPR_U_Bits',0,17,250,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	349
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_U_Bits',0,17,254,1,3
	.word	15514
	.byte	9
	.byte	'_Ifx_CPU_DPRE_Bits',0,17,129,2,16,4,10
	.byte	'RE',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPRE_Bits',0,17,133,2,3
	.word	15609
	.byte	9
	.byte	'_Ifx_CPU_DPWE_Bits',0,17,136,2,16,4,10
	.byte	'WE',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPWE_Bits',0,17,140,2,3
	.word	15699
	.byte	9
	.byte	'_Ifx_CPU_DSTR_Bits',0,17,143,2,16,4,10
	.byte	'SRE',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'GAE',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'LBE',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	3,26,2,35,0,10
	.byte	'CRE',0,4
	.word	349
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	349
	.byte	7,18,2,35,0,10
	.byte	'DTME',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'LOE',0,4
	.word	349
	.byte	1,16,2,35,0,10
	.byte	'SDE',0,4
	.word	349
	.byte	1,15,2,35,0,10
	.byte	'SCE',0,4
	.word	349
	.byte	1,14,2,35,0,10
	.byte	'CAC',0,4
	.word	349
	.byte	1,13,2,35,0,10
	.byte	'MPE',0,4
	.word	349
	.byte	1,12,2,35,0,10
	.byte	'CLE',0,4
	.word	349
	.byte	1,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	349
	.byte	3,8,2,35,0,10
	.byte	'ALN',0,4
	.word	349
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	349
	.byte	7,0,2,35,0,0,29
	.byte	'Ifx_CPU_DSTR_Bits',0,17,161,2,3
	.word	15789
	.byte	9
	.byte	'_Ifx_CPU_EXEVT_Bits',0,17,164,2,16,4,10
	.byte	'EVTA',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	349
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_EXEVT_Bits',0,17,172,2,3
	.word	16113
	.byte	9
	.byte	'_Ifx_CPU_FCX_Bits',0,17,175,2,16,4,10
	.byte	'FCXO',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'FCXS',0,4
	.word	349
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	349
	.byte	12,0,2,35,0,0,29
	.byte	'Ifx_CPU_FCX_Bits',0,17,180,2,3
	.word	16267
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,17,183,2,16,4,10
	.byte	'TST',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'TCL',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	349
	.byte	6,24,2,35,0,10
	.byte	'RM',0,4
	.word	349
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	349
	.byte	8,14,2,35,0,10
	.byte	'FXE',0,4
	.word	349
	.byte	1,13,2,35,0,10
	.byte	'FUE',0,4
	.word	349
	.byte	1,12,2,35,0,10
	.byte	'FZE',0,4
	.word	349
	.byte	1,11,2,35,0,10
	.byte	'FVE',0,4
	.word	349
	.byte	1,10,2,35,0,10
	.byte	'FIE',0,4
	.word	349
	.byte	1,9,2,35,0,10
	.byte	'reserved_23',0,4
	.word	349
	.byte	3,6,2,35,0,10
	.byte	'FX',0,4
	.word	349
	.byte	1,5,2,35,0,10
	.byte	'FU',0,4
	.word	349
	.byte	1,4,2,35,0,10
	.byte	'FZ',0,4
	.word	349
	.byte	1,3,2,35,0,10
	.byte	'FV',0,4
	.word	349
	.byte	1,2,2,35,0,10
	.byte	'FI',0,4
	.word	349
	.byte	1,1,2,35,0,10
	.byte	'reserved_31',0,4
	.word	349
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,17,202,2,3
	.word	16373
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,17,205,2,16,4,10
	.byte	'OPC',0,4
	.word	349
	.byte	8,24,2,35,0,10
	.byte	'FMT',0,4
	.word	349
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	349
	.byte	7,16,2,35,0,10
	.byte	'DREG',0,4
	.word	349
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	349
	.byte	12,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,17,212,2,3
	.word	16722
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,17,215,2,16,4,10
	.byte	'PC',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,17,218,2,3
	.word	16882
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,17,221,2,16,4,10
	.byte	'SRC1',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,17,224,2,3
	.word	16963
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,17,227,2,16,4,10
	.byte	'SRC2',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,17,230,2,3
	.word	17050
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,17,233,2,16,4,10
	.byte	'SRC3',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,17,236,2,3
	.word	17137
	.byte	9
	.byte	'_Ifx_CPU_ICNT_Bits',0,17,239,2,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_ICNT_Bits',0,17,243,2,3
	.word	17224
	.byte	9
	.byte	'_Ifx_CPU_ICR_Bits',0,17,246,2,16,4,10
	.byte	'CCPN',0,4
	.word	349
	.byte	10,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	349
	.byte	5,17,2,35,0,10
	.byte	'IE',0,4
	.word	349
	.byte	1,16,2,35,0,10
	.byte	'PIPN',0,4
	.word	349
	.byte	10,6,2,35,0,10
	.byte	'reserved_26',0,4
	.word	349
	.byte	6,0,2,35,0,0,29
	.byte	'Ifx_CPU_ICR_Bits',0,17,253,2,3
	.word	17315
	.byte	9
	.byte	'_Ifx_CPU_ISP_Bits',0,17,128,3,16,4,10
	.byte	'ISP',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_ISP_Bits',0,17,131,3,3
	.word	17458
	.byte	9
	.byte	'_Ifx_CPU_LCX_Bits',0,17,134,3,16,4,10
	.byte	'LCXO',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'LCXS',0,4
	.word	349
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	349
	.byte	12,0,2,35,0,0,29
	.byte	'Ifx_CPU_LCX_Bits',0,17,139,3,3
	.word	17524
	.byte	9
	.byte	'_Ifx_CPU_M1CNT_Bits',0,17,142,3,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_M1CNT_Bits',0,17,146,3,3
	.word	17630
	.byte	9
	.byte	'_Ifx_CPU_M2CNT_Bits',0,17,149,3,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_M2CNT_Bits',0,17,153,3,3
	.word	17723
	.byte	9
	.byte	'_Ifx_CPU_M3CNT_Bits',0,17,156,3,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_M3CNT_Bits',0,17,160,3,3
	.word	17816
	.byte	9
	.byte	'_Ifx_CPU_PC_Bits',0,17,163,3,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'PC',0,4
	.word	349
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_PC_Bits',0,17,167,3,3
	.word	17909
	.byte	9
	.byte	'_Ifx_CPU_PCON0_Bits',0,17,170,3,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'PCBYP',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	349
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCON0_Bits',0,17,175,3,3
	.word	17994
	.byte	9
	.byte	'_Ifx_CPU_PCON1_Bits',0,17,178,3,16,4,10
	.byte	'PCINV',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'PBINV',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	349
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCON1_Bits',0,17,183,3,3
	.word	18110
	.byte	9
	.byte	'_Ifx_CPU_PCON2_Bits',0,17,186,3,16,4,10
	.byte	'PCACHE_SZE',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'PSCRATCH_SZE',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCON2_Bits',0,17,190,3,3
	.word	18221
	.byte	9
	.byte	'_Ifx_CPU_PCXI_Bits',0,17,193,3,16,4,10
	.byte	'PCXO',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'PCXS',0,4
	.word	349
	.byte	4,12,2,35,0,10
	.byte	'UL',0,4
	.word	349
	.byte	1,11,2,35,0,10
	.byte	'PIE',0,4
	.word	349
	.byte	1,10,2,35,0,10
	.byte	'PCPN',0,4
	.word	349
	.byte	10,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCXI_Bits',0,17,200,3,3
	.word	18322
	.byte	9
	.byte	'_Ifx_CPU_PIEAR_Bits',0,17,203,3,16,4,10
	.byte	'TA',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_PIEAR_Bits',0,17,206,3,3
	.word	18452
	.byte	9
	.byte	'_Ifx_CPU_PIETR_Bits',0,17,209,3,16,4,10
	.byte	'IED',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	349
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	349
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	349
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	349
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	349
	.byte	18,0,2,35,0,0,29
	.byte	'Ifx_CPU_PIETR_Bits',0,17,221,3,3
	.word	18521
	.byte	9
	.byte	'_Ifx_CPU_PMA0_Bits',0,17,224,3,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	13,19,2,35,0,10
	.byte	'DAC',0,4
	.word	349
	.byte	3,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PMA0_Bits',0,17,229,3,3
	.word	18750
	.byte	9
	.byte	'_Ifx_CPU_PMA1_Bits',0,17,232,3,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	14,18,2,35,0,10
	.byte	'CAC',0,4
	.word	349
	.byte	2,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PMA1_Bits',0,17,237,3,3
	.word	18863
	.byte	9
	.byte	'_Ifx_CPU_PMA2_Bits',0,17,240,3,16,4,10
	.byte	'PSI',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PMA2_Bits',0,17,244,3,3
	.word	18976
	.byte	9
	.byte	'_Ifx_CPU_PSTR_Bits',0,17,247,3,16,4,10
	.byte	'FRE',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'FBE',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	9,20,2,35,0,10
	.byte	'FPE',0,4
	.word	349
	.byte	1,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	349
	.byte	1,18,2,35,0,10
	.byte	'FME',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	349
	.byte	17,0,2,35,0,0,29
	.byte	'Ifx_CPU_PSTR_Bits',0,17,129,4,3
	.word	19067
	.byte	9
	.byte	'_Ifx_CPU_PSW_Bits',0,17,132,4,16,4,10
	.byte	'CDC',0,4
	.word	349
	.byte	7,25,2,35,0,10
	.byte	'CDE',0,4
	.word	349
	.byte	1,24,2,35,0,10
	.byte	'GW',0,4
	.word	349
	.byte	1,23,2,35,0,10
	.byte	'IS',0,4
	.word	349
	.byte	1,22,2,35,0,10
	.byte	'IO',0,4
	.word	349
	.byte	2,20,2,35,0,10
	.byte	'PRS',0,4
	.word	349
	.byte	2,18,2,35,0,10
	.byte	'S',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	349
	.byte	12,5,2,35,0,10
	.byte	'SAV',0,4
	.word	349
	.byte	1,4,2,35,0,10
	.byte	'AV',0,4
	.word	349
	.byte	1,3,2,35,0,10
	.byte	'SV',0,4
	.word	349
	.byte	1,2,2,35,0,10
	.byte	'V',0,4
	.word	349
	.byte	1,1,2,35,0,10
	.byte	'C',0,4
	.word	349
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_PSW_Bits',0,17,147,4,3
	.word	19270
	.byte	9
	.byte	'_Ifx_CPU_SEGEN_Bits',0,17,150,4,16,4,10
	.byte	'ADFLIP',0,4
	.word	349
	.byte	8,24,2,35,0,10
	.byte	'ADTYPE',0,4
	.word	349
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	349
	.byte	21,1,2,35,0,10
	.byte	'AE',0,4
	.word	349
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_SEGEN_Bits',0,17,156,4,3
	.word	19513
	.byte	9
	.byte	'_Ifx_CPU_SMACON_Bits',0,17,159,4,16,4,10
	.byte	'PC',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'PT',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	5,24,2,35,0,10
	.byte	'DC',0,4
	.word	349
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	349
	.byte	1,22,2,35,0,10
	.byte	'DT',0,4
	.word	349
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	349
	.byte	13,8,2,35,0,10
	.byte	'IODT',0,4
	.word	349
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	349
	.byte	7,0,2,35,0,0,29
	.byte	'Ifx_CPU_SMACON_Bits',0,17,171,4,3
	.word	19641
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,17,174,4,16,4,10
	.byte	'EN',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,17,177,4,3
	.word	19882
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,17,180,4,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,17,183,4,3
	.word	19965
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,17,186,4,16,4,10
	.byte	'EN',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,17,189,4,3
	.word	20056
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,17,192,4,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,17,195,4,3
	.word	20147
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,17,198,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	326
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,17,202,4,3
	.word	20246
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,17,205,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	326
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,17,209,4,3
	.word	20353
	.byte	9
	.byte	'_Ifx_CPU_SWEVT_Bits',0,17,212,4,16,4,10
	.byte	'EVTA',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	349
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_SWEVT_Bits',0,17,220,4,3
	.word	20460
	.byte	9
	.byte	'_Ifx_CPU_SYSCON_Bits',0,17,223,4,16,4,10
	.byte	'FCDSF',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'PROTEN',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'TPROTEN',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'IS',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'IT',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	349
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_SYSCON_Bits',0,17,231,4,3
	.word	20614
	.byte	9
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,17,234,4,16,4,10
	.byte	'ASI',0,4
	.word	349
	.byte	5,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	349
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,17,238,4,3
	.word	20775
	.byte	9
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,17,241,4,16,4,10
	.byte	'TEXP0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'TEXP1',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'TEXP2',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	13,16,2,35,0,10
	.byte	'TTRAP',0,4
	.word	349
	.byte	1,15,2,35,0,10
	.byte	'reserved_17',0,4
	.word	349
	.byte	15,0,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_CON_Bits',0,17,249,4,3
	.word	20873
	.byte	9
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,17,252,4,16,4,10
	.byte	'Timer',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,17,255,4,3
	.word	21045
	.byte	9
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,17,130,5,16,4,10
	.byte	'ADDR',0,4
	.word	349
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_TR_ADR_Bits',0,17,133,5,3
	.word	21125
	.byte	9
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,17,136,5,16,4,10
	.byte	'EVTA',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	349
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	4,20,2,35,0,10
	.byte	'TYP',0,4
	.word	349
	.byte	1,19,2,35,0,10
	.byte	'RNG',0,4
	.word	349
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'ASI_EN',0,4
	.word	349
	.byte	1,16,2,35,0,10
	.byte	'ASI',0,4
	.word	349
	.byte	5,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	349
	.byte	6,5,2,35,0,10
	.byte	'AST',0,4
	.word	349
	.byte	1,4,2,35,0,10
	.byte	'ALD',0,4
	.word	349
	.byte	1,3,2,35,0,10
	.byte	'reserved_29',0,4
	.word	349
	.byte	3,0,2,35,0,0,29
	.byte	'Ifx_CPU_TR_EVT_Bits',0,17,153,5,3
	.word	21198
	.byte	9
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,17,156,5,16,4,10
	.byte	'T0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'T1',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'T2',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'T3',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'T4',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'T5',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'T6',0,4
	.word	349
	.byte	1,25,2,35,0,10
	.byte	'T7',0,4
	.word	349
	.byte	1,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,17,167,5,3
	.word	21516
	.byte	11,17,175,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12734
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_A',0,17,180,5,3
	.word	21711
	.byte	11,17,183,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12795
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_BIV',0,17,188,5,3
	.word	21770
	.byte	11,17,191,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12874
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_BTV',0,17,196,5,3
	.word	21831
	.byte	11,17,199,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12960
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CCNT',0,17,204,5,3
	.word	21892
	.byte	11,17,207,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13049
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CCTRL',0,17,212,5,3
	.word	21954
	.byte	11,17,215,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13195
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_COMPAT',0,17,220,5,3
	.word	22017
	.byte	11,17,223,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13322
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CORE_ID',0,17,228,5,3
	.word	22081
	.byte	11,17,231,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13420
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_L',0,17,236,5,3
	.word	22146
	.byte	11,17,239,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13513
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_U',0,17,244,5,3
	.word	22209
	.byte	11,17,247,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13606
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPU_ID',0,17,252,5,3
	.word	22272
	.byte	11,17,255,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13713
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPXE',0,17,132,6,3
	.word	22336
	.byte	11,17,135,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13800
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CREVT',0,17,140,6,3
	.word	22398
	.byte	11,17,143,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13954
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CUS_ID',0,17,148,6,3
	.word	22461
	.byte	11,17,151,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14048
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_D',0,17,156,6,3
	.word	22525
	.byte	11,17,159,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14111
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DATR',0,17,164,6,3
	.word	22584
	.byte	11,17,167,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14329
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DBGSR',0,17,172,6,3
	.word	22646
	.byte	11,17,175,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14544
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DBGTCR',0,17,180,6,3
	.word	22709
	.byte	11,17,183,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14638
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DCON0',0,17,188,6,3
	.word	22773
	.byte	11,17,191,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14754
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DCON2',0,17,196,6,3
	.word	22836
	.byte	11,17,199,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14855
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DCX',0,17,204,6,3
	.word	22899
	.byte	11,17,207,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14948
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DEADD',0,17,212,6,3
	.word	22960
	.byte	11,17,215,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15028
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DIEAR',0,17,220,6,3
	.word	23023
	.byte	11,17,223,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15097
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DIETR',0,17,228,6,3
	.word	23086
	.byte	11,17,231,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15326
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DMS',0,17,236,6,3
	.word	23149
	.byte	11,17,239,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15419
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_L',0,17,244,6,3
	.word	23210
	.byte	11,17,247,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15514
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_U',0,17,252,6,3
	.word	23273
	.byte	11,17,255,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15609
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPRE',0,17,132,7,3
	.word	23336
	.byte	11,17,135,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15699
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPWE',0,17,140,7,3
	.word	23398
	.byte	11,17,143,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15789
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DSTR',0,17,148,7,3
	.word	23460
	.byte	11,17,151,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16113
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_EXEVT',0,17,156,7,3
	.word	23522
	.byte	11,17,159,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16267
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FCX',0,17,164,7,3
	.word	23585
	.byte	11,17,167,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16373
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,17,172,7,3
	.word	23646
	.byte	11,17,175,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16722
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,17,180,7,3
	.word	23716
	.byte	11,17,183,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16882
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,17,188,7,3
	.word	23786
	.byte	11,17,191,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16963
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,17,196,7,3
	.word	23855
	.byte	11,17,199,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17050
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,17,204,7,3
	.word	23926
	.byte	11,17,207,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17137
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,17,212,7,3
	.word	23997
	.byte	11,17,215,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17224
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_ICNT',0,17,220,7,3
	.word	24068
	.byte	11,17,223,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17315
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_ICR',0,17,228,7,3
	.word	24130
	.byte	11,17,231,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17458
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_ISP',0,17,236,7,3
	.word	24191
	.byte	11,17,239,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17524
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_LCX',0,17,244,7,3
	.word	24252
	.byte	11,17,247,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17630
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_M1CNT',0,17,252,7,3
	.word	24313
	.byte	11,17,255,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17723
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_M2CNT',0,17,132,8,3
	.word	24376
	.byte	11,17,135,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17816
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_M3CNT',0,17,140,8,3
	.word	24439
	.byte	11,17,143,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17909
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PC',0,17,148,8,3
	.word	24502
	.byte	11,17,151,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17994
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCON0',0,17,156,8,3
	.word	24562
	.byte	11,17,159,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18110
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCON1',0,17,164,8,3
	.word	24625
	.byte	11,17,167,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18221
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCON2',0,17,172,8,3
	.word	24688
	.byte	11,17,175,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18322
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCXI',0,17,180,8,3
	.word	24751
	.byte	11,17,183,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18452
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PIEAR',0,17,188,8,3
	.word	24813
	.byte	11,17,191,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18521
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PIETR',0,17,196,8,3
	.word	24876
	.byte	11,17,199,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18750
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PMA0',0,17,204,8,3
	.word	24939
	.byte	11,17,207,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18863
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PMA1',0,17,212,8,3
	.word	25001
	.byte	11,17,215,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18976
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PMA2',0,17,220,8,3
	.word	25063
	.byte	11,17,223,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19067
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PSTR',0,17,228,8,3
	.word	25125
	.byte	11,17,231,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19270
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PSW',0,17,236,8,3
	.word	25187
	.byte	11,17,239,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19513
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SEGEN',0,17,244,8,3
	.word	25248
	.byte	11,17,247,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19641
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SMACON',0,17,252,8,3
	.word	25311
	.byte	11,17,255,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19882
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENA',0,17,132,9,3
	.word	25375
	.byte	11,17,135,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19965
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENB',0,17,140,9,3
	.word	25445
	.byte	11,17,143,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20056
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,17,148,9,3
	.word	25515
	.byte	11,17,151,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20147
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,17,156,9,3
	.word	25589
	.byte	11,17,159,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20246
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,17,164,9,3
	.word	25663
	.byte	11,17,167,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20353
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,17,172,9,3
	.word	25733
	.byte	11,17,175,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20460
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SWEVT',0,17,180,9,3
	.word	25803
	.byte	11,17,183,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20614
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SYSCON',0,17,188,9,3
	.word	25866
	.byte	11,17,191,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20775
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TASK_ASI',0,17,196,9,3
	.word	25930
	.byte	11,17,199,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20873
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_CON',0,17,204,9,3
	.word	25996
	.byte	11,17,207,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21045
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_TIMER',0,17,212,9,3
	.word	26061
	.byte	11,17,215,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21125
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TR_ADR',0,17,220,9,3
	.word	26128
	.byte	11,17,223,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21198
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TR_EVT',0,17,228,9,3
	.word	26192
	.byte	11,17,231,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21516
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TRIG_ACC',0,17,236,9,3
	.word	26256
	.byte	9
	.byte	'_Ifx_CPU_CPR',0,17,247,9,25,8,12
	.byte	'L',0
	.word	22146
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	22209
	.byte	4,2,35,4,0,13
	.word	26322
	.byte	29
	.byte	'Ifx_CPU_CPR',0,17,251,9,3
	.word	26364
	.byte	9
	.byte	'_Ifx_CPU_DPR',0,17,254,9,25,8,12
	.byte	'L',0
	.word	23210
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	23273
	.byte	4,2,35,4,0,13
	.word	26390
	.byte	29
	.byte	'Ifx_CPU_DPR',0,17,130,10,3
	.word	26432
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN',0,17,133,10,25,16,12
	.byte	'LA',0
	.word	25663
	.byte	4,2,35,0,12
	.byte	'UA',0
	.word	25733
	.byte	4,2,35,4,12
	.byte	'ACCENA',0
	.word	25515
	.byte	4,2,35,8,12
	.byte	'ACCENB',0
	.word	25589
	.byte	4,2,35,12,0,13
	.word	26458
	.byte	29
	.byte	'Ifx_CPU_SPROT_RGN',0,17,139,10,3
	.word	26540
	.byte	16,12
	.word	26061
	.byte	17,2,0,9
	.byte	'_Ifx_CPU_TPS',0,17,142,10,25,16,12
	.byte	'CON',0
	.word	25996
	.byte	4,2,35,0,12
	.byte	'TIMER',0
	.word	26572
	.byte	12,2,35,4,0,13
	.word	26581
	.byte	29
	.byte	'Ifx_CPU_TPS',0,17,146,10,3
	.word	26629
	.byte	9
	.byte	'_Ifx_CPU_TR',0,17,149,10,25,8,12
	.byte	'EVT',0
	.word	26192
	.byte	4,2,35,0,12
	.byte	'ADR',0
	.word	26128
	.byte	4,2,35,4,0,13
	.word	26655
	.byte	29
	.byte	'Ifx_CPU_TR',0,17,153,10,3
	.word	26700
	.byte	29
	.byte	'IfxCpu_ResourceCpu',0,6,87,3
	.word	1362
	.byte	9
	.byte	'_Ifx_SRC_SRCR_Bits',0,18,45,16,4,10
	.byte	'SRPN',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'ECC',0,1
	.word	501
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	3,0,2,35,2,10
	.byte	'SRR',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SRC_SRCR_Bits',0,18,62,3
	.word	26752
	.byte	11,18,70,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26752
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SRC_SRCR',0,18,75,3
	.word	27068
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,18,86,25,12,12
	.byte	'TX',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	27068
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	27068
	.byte	4,2,35,8,0,13
	.word	27128
	.byte	29
	.byte	'Ifx_SRC_ASCLIN',0,18,91,3
	.word	27187
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,18,94,25,4,12
	.byte	'SBSRC',0
	.word	27068
	.byte	4,2,35,0,0,13
	.word	27215
	.byte	29
	.byte	'Ifx_SRC_BCUSPB',0,18,97,3
	.word	27252
	.byte	16,64
	.word	27068
	.byte	17,15,0,9
	.byte	'_Ifx_SRC_CAN',0,18,100,25,64,12
	.byte	'INT',0
	.word	27280
	.byte	64,2,35,0,0,13
	.word	27289
	.byte	29
	.byte	'Ifx_SRC_CAN',0,18,103,3
	.word	27321
	.byte	16,32
	.word	27068
	.byte	17,7,0,9
	.byte	'_Ifx_SRC_CAN1',0,18,106,25,32,12
	.byte	'INT',0
	.word	27346
	.byte	32,2,35,0,0,13
	.word	27355
	.byte	29
	.byte	'Ifx_SRC_CAN1',0,18,109,3
	.word	27388
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,18,112,25,16,12
	.byte	'SR0',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	27068
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	27068
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	27068
	.byte	4,2,35,12,0,13
	.word	27414
	.byte	29
	.byte	'Ifx_SRC_CCU6',0,18,118,3
	.word	27486
	.byte	16,8
	.word	27068
	.byte	17,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,18,121,25,8,12
	.byte	'SR',0
	.word	27512
	.byte	8,2,35,0,0,13
	.word	27521
	.byte	29
	.byte	'Ifx_SRC_CERBERUS',0,18,124,3
	.word	27557
	.byte	16,28
	.word	501
	.byte	17,27,0,9
	.byte	'_Ifx_SRC_CPU',0,18,127,25,32,12
	.byte	'SBSRC',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	27587
	.byte	28,2,35,4,0,13
	.word	27596
	.byte	29
	.byte	'Ifx_SRC_CPU',0,18,131,1,3
	.word	27650
	.byte	9
	.byte	'_Ifx_SRC_DMA',0,18,134,1,25,80,12
	.byte	'ERR',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	4887
	.byte	12,2,35,4,12
	.byte	'CH',0
	.word	27280
	.byte	64,2,35,16,0,13
	.word	27676
	.byte	29
	.byte	'Ifx_SRC_DMA',0,18,139,1,3
	.word	27741
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,18,142,1,25,4,12
	.byte	'SR',0
	.word	27068
	.byte	4,2,35,0,0,13
	.word	27767
	.byte	29
	.byte	'Ifx_SRC_EMEM',0,18,145,1,3
	.word	27800
	.byte	16,40
	.word	501
	.byte	17,39,0,9
	.byte	'_Ifx_SRC_ERAY',0,18,148,1,25,80,12
	.byte	'INT',0
	.word	27512
	.byte	8,2,35,0,12
	.byte	'TINT',0
	.word	27512
	.byte	8,2,35,8,12
	.byte	'NDAT',0
	.word	27512
	.byte	8,2,35,16,12
	.byte	'MBSC',0
	.word	27512
	.byte	8,2,35,24,12
	.byte	'OBUSY',0
	.word	27068
	.byte	4,2,35,32,12
	.byte	'IBUSY',0
	.word	27068
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	27827
	.byte	40,2,35,40,0,13
	.word	27836
	.byte	29
	.byte	'Ifx_SRC_ERAY',0,18,157,1,3
	.word	27963
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,18,160,1,25,4,12
	.byte	'SR',0
	.word	27068
	.byte	4,2,35,0,0,13
	.word	27990
	.byte	29
	.byte	'Ifx_SRC_ETH',0,18,163,1,3
	.word	28022
	.byte	9
	.byte	'_Ifx_SRC_EVR',0,18,166,1,25,8,12
	.byte	'WUT',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'SCDC',0
	.word	27068
	.byte	4,2,35,4,0,13
	.word	28048
	.byte	29
	.byte	'Ifx_SRC_EVR',0,18,170,1,3
	.word	28095
	.byte	9
	.byte	'_Ifx_SRC_FFT',0,18,173,1,25,12,12
	.byte	'DONE',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'ERR',0
	.word	27068
	.byte	4,2,35,4,12
	.byte	'RFS',0
	.word	27068
	.byte	4,2,35,8,0,13
	.word	28121
	.byte	29
	.byte	'Ifx_SRC_FFT',0,18,178,1,3
	.word	28181
	.byte	16,240,11
	.word	501
	.byte	17,239,11,0,9
	.byte	'_Ifx_SRC_GPSR',0,18,181,1,25,128,12,12
	.byte	'SR0',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	27068
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	27068
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	27068
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	28207
	.byte	240,11,2,35,16,0,13
	.word	28218
	.byte	29
	.byte	'Ifx_SRC_GPSR',0,18,188,1,3
	.word	28314
	.byte	9
	.byte	'_Ifx_SRC_GPT12',0,18,191,1,25,48,12
	.byte	'CIRQ',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'T2',0
	.word	27068
	.byte	4,2,35,4,12
	.byte	'T3',0
	.word	27068
	.byte	4,2,35,8,12
	.byte	'T4',0
	.word	27068
	.byte	4,2,35,12,12
	.byte	'T5',0
	.word	27068
	.byte	4,2,35,16,12
	.byte	'T6',0
	.word	27068
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	3918
	.byte	24,2,35,24,0,13
	.word	28341
	.byte	29
	.byte	'Ifx_SRC_GPT12',0,18,200,1,3
	.word	28458
	.byte	16,236,2
	.word	501
	.byte	17,235,2,0,16,32
	.word	27346
	.byte	17,0,0,16,224,7
	.word	501
	.byte	17,223,7,0,16,64
	.word	27346
	.byte	17,1,0,9
	.byte	'_Ifx_SRC_GTM',0,18,203,1,25,192,11,12
	.byte	'AEIIRQ',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	28486
	.byte	236,2,2,35,4,12
	.byte	'ERR',0
	.word	27068
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	4887
	.byte	12,3,35,244,2,12
	.byte	'TIM',0
	.word	28497
	.byte	32,3,35,128,3,12
	.byte	'reserved_1A0',0
	.word	28506
	.byte	224,7,3,35,160,3,12
	.byte	'TOM',0
	.word	28517
	.byte	64,3,35,128,11,0,13
	.word	28526
	.byte	29
	.byte	'Ifx_SRC_GTM',0,18,212,1,3
	.word	28673
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,18,215,1,25,8,12
	.byte	'HSM',0
	.word	27512
	.byte	8,2,35,0,0,13
	.word	28699
	.byte	29
	.byte	'Ifx_SRC_HSM',0,18,218,1,3
	.word	28732
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,18,221,1,25,4,12
	.byte	'SR',0
	.word	27068
	.byte	4,2,35,0,0,13
	.word	28758
	.byte	29
	.byte	'Ifx_SRC_LMU',0,18,224,1,3
	.word	28790
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,18,227,1,25,4,12
	.byte	'SR',0
	.word	27068
	.byte	4,2,35,0,0,13
	.word	28816
	.byte	29
	.byte	'Ifx_SRC_PMU',0,18,230,1,3
	.word	28848
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,18,233,1,25,24,12
	.byte	'TX',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	27068
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	27068
	.byte	4,2,35,8,12
	.byte	'PT',0
	.word	27068
	.byte	4,2,35,12,12
	.byte	'HC',0
	.word	27068
	.byte	4,2,35,16,12
	.byte	'U',0
	.word	27068
	.byte	4,2,35,20,0,13
	.word	28874
	.byte	29
	.byte	'Ifx_SRC_QSPI',0,18,241,1,3
	.word	28967
	.byte	16,16
	.word	27068
	.byte	17,3,0,9
	.byte	'_Ifx_SRC_SCU',0,18,244,1,25,20,12
	.byte	'DTS',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'ERU',0
	.word	28994
	.byte	16,2,35,4,0,13
	.word	29003
	.byte	29
	.byte	'Ifx_SRC_SCU',0,18,248,1,3
	.word	29049
	.byte	9
	.byte	'_Ifx_SRC_SENT',0,18,251,1,25,16,12
	.byte	'SR',0
	.word	28994
	.byte	16,2,35,0,0,13
	.word	29075
	.byte	29
	.byte	'Ifx_SRC_SENT',0,18,254,1,3
	.word	29108
	.byte	16,12
	.word	27068
	.byte	17,2,0,9
	.byte	'_Ifx_SRC_SMU',0,18,129,2,25,12,12
	.byte	'SR',0
	.word	29135
	.byte	12,2,35,0,0,13
	.word	29144
	.byte	29
	.byte	'Ifx_SRC_SMU',0,18,132,2,3
	.word	29176
	.byte	16,88
	.word	501
	.byte	17,87,0,9
	.byte	'_Ifx_SRC_STM',0,18,135,2,25,96,12
	.byte	'SR0',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	27068
	.byte	4,2,35,4,12
	.byte	'reserved_8',0
	.word	29202
	.byte	88,2,35,8,0,13
	.word	29211
	.byte	29
	.byte	'Ifx_SRC_STM',0,18,140,2,3
	.word	29277
	.byte	16,176,2
	.word	501
	.byte	17,175,2,0,9
	.byte	'_Ifx_SRC_VADCCG',0,18,143,2,25,192,2,12
	.byte	'SR0',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	27068
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	27068
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	27068
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	29303
	.byte	176,2,2,35,16,0,13
	.word	29314
	.byte	29
	.byte	'Ifx_SRC_VADCCG',0,18,150,2,3
	.word	29412
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,18,153,2,25,16,12
	.byte	'SR0',0
	.word	27068
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	27068
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	27068
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	27068
	.byte	4,2,35,12,0,13
	.word	29441
	.byte	29
	.byte	'Ifx_SRC_VADCG',0,18,159,2,3
	.word	29515
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,18,162,2,25,4,12
	.byte	'SRC',0
	.word	27068
	.byte	4,2,35,0,0,13
	.word	29543
	.byte	29
	.byte	'Ifx_SRC_XBAR',0,18,165,2,3
	.word	29577
	.byte	16,24
	.word	27128
	.byte	17,1,0,13
	.word	29604
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,18,178,2,25,24,12
	.byte	'ASCLIN',0
	.word	29613
	.byte	24,2,35,0,0,13
	.word	29618
	.byte	29
	.byte	'Ifx_SRC_GASCLIN',0,18,181,2,3
	.word	29658
	.byte	13
	.word	27215
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,18,184,2,25,4,12
	.byte	'SPB',0
	.word	29688
	.byte	4,2,35,0,0,13
	.word	29693
	.byte	29
	.byte	'Ifx_SRC_GBCU',0,18,187,2,3
	.word	29727
	.byte	16,64
	.word	27289
	.byte	17,0,0,13
	.word	29754
	.byte	16,32
	.word	27355
	.byte	17,0,0,13
	.word	29768
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,18,190,2,25,96,12
	.byte	'CAN',0
	.word	29763
	.byte	64,2,35,0,12
	.byte	'CAN1',0
	.word	29777
	.byte	32,2,35,64,0,13
	.word	29782
	.byte	29
	.byte	'Ifx_SRC_GCAN',0,18,194,2,3
	.word	29830
	.byte	16,32
	.word	27414
	.byte	17,1,0,13
	.word	29857
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,18,197,2,25,32,12
	.byte	'CCU6',0
	.word	29866
	.byte	32,2,35,0,0,13
	.word	29871
	.byte	29
	.byte	'Ifx_SRC_GCCU6',0,18,200,2,3
	.word	29907
	.byte	13
	.word	27521
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,18,203,2,25,8,12
	.byte	'CERBERUS',0
	.word	29935
	.byte	8,2,35,0,0,13
	.word	29940
	.byte	29
	.byte	'Ifx_SRC_GCERBERUS',0,18,206,2,3
	.word	29984
	.byte	16,32
	.word	27596
	.byte	17,0,0,13
	.word	30016
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,18,209,2,25,32,12
	.byte	'CPU',0
	.word	30025
	.byte	32,2,35,0,0,13
	.word	30030
	.byte	29
	.byte	'Ifx_SRC_GCPU',0,18,212,2,3
	.word	30064
	.byte	16,80
	.word	27676
	.byte	17,0,0,13
	.word	30091
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,18,215,2,25,80,12
	.byte	'DMA',0
	.word	30100
	.byte	80,2,35,0,0,13
	.word	30105
	.byte	29
	.byte	'Ifx_SRC_GDMA',0,18,218,2,3
	.word	30139
	.byte	16,4
	.word	27767
	.byte	17,0,0,13
	.word	30166
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,18,221,2,25,4,12
	.byte	'EMEM',0
	.word	30175
	.byte	4,2,35,0,0,13
	.word	30180
	.byte	29
	.byte	'Ifx_SRC_GEMEM',0,18,224,2,3
	.word	30216
	.byte	16,80
	.word	27836
	.byte	17,0,0,13
	.word	30244
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,18,227,2,25,80,12
	.byte	'ERAY',0
	.word	30253
	.byte	80,2,35,0,0,13
	.word	30258
	.byte	29
	.byte	'Ifx_SRC_GERAY',0,18,230,2,3
	.word	30294
	.byte	16,4
	.word	27990
	.byte	17,0,0,13
	.word	30322
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,18,233,2,25,4,12
	.byte	'ETH',0
	.word	30331
	.byte	4,2,35,0,0,13
	.word	30336
	.byte	29
	.byte	'Ifx_SRC_GETH',0,18,236,2,3
	.word	30370
	.byte	16,8
	.word	28048
	.byte	17,0,0,13
	.word	30397
	.byte	9
	.byte	'_Ifx_SRC_GEVR',0,18,239,2,25,8,12
	.byte	'EVR',0
	.word	30406
	.byte	8,2,35,0,0,13
	.word	30411
	.byte	29
	.byte	'Ifx_SRC_GEVR',0,18,242,2,3
	.word	30445
	.byte	16,12
	.word	28121
	.byte	17,0,0,13
	.word	30472
	.byte	9
	.byte	'_Ifx_SRC_GFFT',0,18,245,2,25,12,12
	.byte	'FFT',0
	.word	30481
	.byte	12,2,35,0,0,13
	.word	30486
	.byte	29
	.byte	'Ifx_SRC_GFFT',0,18,248,2,3
	.word	30520
	.byte	16,128,12
	.word	28218
	.byte	17,0,0,13
	.word	30547
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,18,251,2,25,128,12,12
	.byte	'GPSR',0
	.word	30557
	.byte	128,12,2,35,0,0,13
	.word	30562
	.byte	29
	.byte	'Ifx_SRC_GGPSR',0,18,254,2,3
	.word	30600
	.byte	16,48
	.word	28341
	.byte	17,0,0,13
	.word	30628
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,18,129,3,25,48,12
	.byte	'GPT12',0
	.word	30637
	.byte	48,2,35,0,0,13
	.word	30642
	.byte	29
	.byte	'Ifx_SRC_GGPT12',0,18,132,3,3
	.word	30680
	.byte	16,192,11
	.word	28526
	.byte	17,0,0,13
	.word	30709
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,18,135,3,25,192,11,12
	.byte	'GTM',0
	.word	30719
	.byte	192,11,2,35,0,0,13
	.word	30724
	.byte	29
	.byte	'Ifx_SRC_GGTM',0,18,138,3,3
	.word	30760
	.byte	16,8
	.word	28699
	.byte	17,0,0,13
	.word	30787
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,18,141,3,25,8,12
	.byte	'HSM',0
	.word	30796
	.byte	8,2,35,0,0,13
	.word	30801
	.byte	29
	.byte	'Ifx_SRC_GHSM',0,18,144,3,3
	.word	30835
	.byte	16,4
	.word	28758
	.byte	17,0,0,13
	.word	30862
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,18,147,3,25,4,12
	.byte	'LMU',0
	.word	30871
	.byte	4,2,35,0,0,13
	.word	30876
	.byte	29
	.byte	'Ifx_SRC_GLMU',0,18,150,3,3
	.word	30910
	.byte	16,8
	.word	28816
	.byte	17,1,0,13
	.word	30937
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,18,153,3,25,8,12
	.byte	'PMU',0
	.word	30946
	.byte	8,2,35,0,0,13
	.word	30951
	.byte	29
	.byte	'Ifx_SRC_GPMU',0,18,156,3,3
	.word	30985
	.byte	16,96
	.word	28874
	.byte	17,3,0,13
	.word	31012
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,18,159,3,25,96,12
	.byte	'QSPI',0
	.word	31021
	.byte	96,2,35,0,0,13
	.word	31026
	.byte	29
	.byte	'Ifx_SRC_GQSPI',0,18,162,3,3
	.word	31062
	.byte	13
	.word	29003
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,18,165,3,25,20,12
	.byte	'SCU',0
	.word	31090
	.byte	20,2,35,0,0,13
	.word	31095
	.byte	29
	.byte	'Ifx_SRC_GSCU',0,18,168,3,3
	.word	31129
	.byte	16,16
	.word	29075
	.byte	17,0,0,13
	.word	31156
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,18,171,3,25,16,12
	.byte	'SENT',0
	.word	31165
	.byte	16,2,35,0,0,13
	.word	31170
	.byte	29
	.byte	'Ifx_SRC_GSENT',0,18,174,3,3
	.word	31206
	.byte	16,12
	.word	29144
	.byte	17,0,0,13
	.word	31234
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,18,177,3,25,12,12
	.byte	'SMU',0
	.word	31243
	.byte	12,2,35,0,0,13
	.word	31248
	.byte	29
	.byte	'Ifx_SRC_GSMU',0,18,180,3,3
	.word	31282
	.byte	16,96
	.word	29211
	.byte	17,0,0,13
	.word	31309
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,18,183,3,25,96,12
	.byte	'STM',0
	.word	31318
	.byte	96,2,35,0,0,13
	.word	31323
	.byte	29
	.byte	'Ifx_SRC_GSTM',0,18,186,3,3
	.word	31357
	.byte	16,64
	.word	29441
	.byte	17,3,0,13
	.word	31384
	.byte	16,224,1
	.word	501
	.byte	17,223,1,0,16,192,2
	.word	29314
	.byte	17,0,0,13
	.word	31409
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,18,189,3,25,224,4,12
	.byte	'G',0
	.word	31393
	.byte	64,2,35,0,12
	.byte	'reserved_40',0
	.word	31398
	.byte	224,1,2,35,64,12
	.byte	'CG',0
	.word	31419
	.byte	192,2,3,35,160,2,0,13
	.word	31424
	.byte	29
	.byte	'Ifx_SRC_GVADC',0,18,194,3,3
	.word	31494
	.byte	13
	.word	29543
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,18,197,3,25,4,12
	.byte	'XBAR',0
	.word	31522
	.byte	4,2,35,0,0,13
	.word	31527
	.byte	29
	.byte	'Ifx_SRC_GXBAR',0,18,200,3,3
	.word	31563
	.byte	9
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,10
	.byte	'EN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	31591
	.byte	9
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	32148
	.byte	9
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,10
	.byte	'STM0DIS',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'STM1DIS',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'STM2DIS',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	326
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	32225
	.byte	9
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'BAUD2DIV',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'SRIDIV',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'LPDIV',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'SPBDIV',0,1
	.word	501
	.byte	4,4,2,35,2,10
	.byte	'FSI2DIV',0,1
	.word	501
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'FSIDIV',0,1
	.word	501
	.byte	2,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	2,4,2,35,3,10
	.byte	'CLKSEL',0,1
	.word	501
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	32361
	.byte	9
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,10
	.byte	'CANDIV',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'ERAYDIV',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'STMDIV',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'GTMDIV',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'ETHDIV',0,1
	.word	501
	.byte	4,4,2,35,2,10
	.byte	'ASCLINFDIV',0,1
	.word	501
	.byte	4,0,2,35,2,10
	.byte	'ASCLINSDIV',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'INSEL',0,1
	.word	501
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	32643
	.byte	9
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,10
	.byte	'BBBDIV',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	32881
	.byte	9
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,10
	.byte	'PLLDIV',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'PLLSEL',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'PLLERAYDIV',0,1
	.word	501
	.byte	6,2,2,35,1,10
	.byte	'PLLERAYSEL',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'SRIDIV',0,1
	.word	501
	.byte	6,2,2,35,2,10
	.byte	'SRISEL',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,149,1,3
	.word	33009
	.byte	9
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,152,1,16,4,10
	.byte	'SPBDIV',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'SPBSEL',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'GTMDIV',0,1
	.word	501
	.byte	6,2,2,35,1,10
	.byte	'GTMSEL',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'STMDIV',0,1
	.word	501
	.byte	6,2,2,35,2,10
	.byte	'STMSEL',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,163,1,3
	.word	33236
	.byte	9
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,166,1,16,4,10
	.byte	'MAXDIV',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,172,1,3
	.word	33455
	.byte	9
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,175,1,16,4,10
	.byte	'CPU0DIV',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	326
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,179,1,3
	.word	33583
	.byte	9
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,182,1,16,4,10
	.byte	'CHREV',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'CHTEC',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'CHID',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'EEA',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'UCODE',0,1
	.word	501
	.byte	7,0,2,35,2,10
	.byte	'FSIZE',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'SP',0,1
	.word	501
	.byte	2,2,2,35,3,10
	.byte	'SEC',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,193,1,3
	.word	33683
	.byte	9
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,196,1,16,4,10
	.byte	'PWD',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'START',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'CAL',0,4
	.word	326
	.byte	22,6,2,35,0,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	5,1,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,204,1,3
	.word	33891
	.byte	9
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,207,1,16,4,10
	.byte	'LOWER',0,2
	.word	518
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	501
	.byte	5,1,2,35,1,10
	.byte	'LLU',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'UPPER',0,2
	.word	518
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	4,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'UOF',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,216,1,3
	.word	34056
	.byte	9
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,219,1,16,4,10
	.byte	'RESULT',0,2
	.word	518
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	501
	.byte	4,2,2,35,1,10
	.byte	'RDY',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'BUSY',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,226,1,3
	.word	34239
	.byte	9
	.byte	'_Ifx_SCU_EICR_Bits',0,4,229,1,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'EXIS0',0,1
	.word	501
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'FEN0',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'REN0',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'LDEN0',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'EIEN0',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'INP0',0,1
	.word	501
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	326
	.byte	5,12,2,35,0,10
	.byte	'EXIS1',0,1
	.word	501
	.byte	3,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'FEN1',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'REN1',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'LDEN1',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'EIEN1',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'INP1',0,1
	.word	501
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EICR_Bits',0,4,248,1,3
	.word	34393
	.byte	9
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,251,1,16,4,10
	.byte	'INTF0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'INTF1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'INTF2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'INTF3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'INTF4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'INTF5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'INTF6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'INTF7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_EIFR_Bits',0,4,134,2,3
	.word	34757
	.byte	9
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,137,2,16,4,10
	.byte	'POL',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'MODE',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'ENON',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PSEL',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	518
	.byte	12,0,2,35,0,10
	.byte	'EMSF',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'SEMSF',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	6,0,2,35,2,10
	.byte	'EMSFM',0,1
	.word	501
	.byte	2,6,2,35,3,10
	.byte	'SEMSFM',0,1
	.word	501
	.byte	2,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_EMSR_Bits',0,4,150,2,3
	.word	34968
	.byte	9
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,153,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	7,1,2,35,0,10
	.byte	'EDCON',0,2
	.word	518
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	326
	.byte	23,0,2,35,0,0,29
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,158,2,3
	.word	35220
	.byte	9
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,161,2,16,4,10
	.byte	'ARI',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ARC',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,166,2,3
	.word	35338
	.byte	9
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,169,2,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	28,4,2,35,0,10
	.byte	'EVR13OFF',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'BPEVR13OFF',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,176,2,3
	.word	35449
	.byte	9
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,179,2,16,4,10
	.byte	'ADC13V',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'ADCSWDV',0,1
	.word	501
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,186,2,3
	.word	35612
	.byte	9
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,189,2,16,4,10
	.byte	'EVR13OVMOD',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'EVR13UVMOD',0,1
	.word	501
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	518
	.byte	10,0,2,35,0,10
	.byte	'SWDOVMOD',0,1
	.word	501
	.byte	2,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	2,4,2,35,2,10
	.byte	'SWDUVMOD',0,1
	.word	501
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	518
	.byte	8,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,201,2,3
	.word	35774
	.byte	9
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,204,2,16,4,10
	.byte	'EVR13OVVAL',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'SWDOVVAL',0,1
	.word	501
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,212,2,3
	.word	36052
	.byte	9
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,215,2,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	28,4,2,35,0,10
	.byte	'RSTSWDOFF',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'BPRSTSWDOFF',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,222,2,3
	.word	36231
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,225,2,16,4,10
	.byte	'SD33P',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'SD33I',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	326
	.byte	19,1,2,35,0,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,232,2,3
	.word	36391
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,235,2,16,4,10
	.byte	'SDFREQSPRD',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'TON',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'TOFF',0,1
	.word	501
	.byte	8,0,2,35,2,10
	.byte	'SDSTEP',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'SYNCDIV',0,1
	.word	501
	.byte	3,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,244,2,3
	.word	36552
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,247,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'STBS',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'STSP',0,1
	.word	501
	.byte	2,4,2,35,1,10
	.byte	'NS',0,1
	.word	501
	.byte	2,2,2,35,1,10
	.byte	'OL',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'PIAD',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'ADCMODE',0,1
	.word	501
	.byte	4,4,2,35,2,10
	.byte	'ADCLPF',0,1
	.word	501
	.byte	2,2,2,35,2,10
	.byte	'ADCLSB',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'SDLUT',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,134,3,3
	.word	36744
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,137,3,16,4,10
	.byte	'SDOLCON',0,1
	.word	501
	.byte	7,1,2,35,0,10
	.byte	'MODSEL',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'MODLOW',0,1
	.word	501
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'SDVOKLVL',0,1
	.word	501
	.byte	6,2,2,35,2,10
	.byte	'MODMAN',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'MODHIGH',0,1
	.word	501
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,147,3,3
	.word	37040
	.byte	9
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,150,3,16,4,10
	.byte	'EVR13',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'OV13',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'OVSWD',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'UV13',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'UVSWD',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'BGPROK',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'SCMOD',0,1
	.word	501
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	326
	.byte	18,0,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,164,3,3
	.word	37255
	.byte	9
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,167,3,16,4,10
	.byte	'EVR13UVVAL',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'SWDUVVAL',0,1
	.word	501
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,175,3,3
	.word	37544
	.byte	9
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,178,3,16,4,10
	.byte	'EN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'SEL0',0,1
	.word	501
	.byte	4,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	518
	.byte	10,0,2,35,0,10
	.byte	'EN1',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'NSEL',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'SEL1',0,1
	.word	501
	.byte	4,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'DIV1',0,1
	.word	501
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,189,3,3
	.word	37723
	.byte	9
	.byte	'_Ifx_SCU_FDR_Bits',0,4,192,3,16,4,10
	.byte	'STEP',0,2
	.word	518
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	501
	.byte	4,2,2,35,1,10
	.byte	'DM',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'RESULT',0,2
	.word	518
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	5,1,2,35,3,10
	.byte	'DISCLK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_FDR_Bits',0,4,200,3,3
	.word	37941
	.byte	9
	.byte	'_Ifx_SCU_FMR_Bits',0,4,203,3,16,4,10
	.byte	'FS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'FS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'FS2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'FS3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'FS4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'FS5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'FS6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'FS7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'FC0',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'FC1',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'FC2',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'FC3',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'FC4',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'FC5',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'FC6',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'FC7',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_SCU_FMR_Bits',0,4,223,3,3
	.word	38104
	.byte	9
	.byte	'_Ifx_SCU_ID_Bits',0,4,226,3,16,4,10
	.byte	'MODREV',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_ID_Bits',0,4,231,3,3
	.word	38440
	.byte	9
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,234,3,16,4,10
	.byte	'IPEN00',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'IPEN01',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'IPEN02',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'IPEN03',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'IPEN04',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IPEN05',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'IPEN06',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'IPEN07',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	5,3,2,35,1,10
	.byte	'GEEN0',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'IGP0',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'IPEN10',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'IPEN11',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'IPEN12',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'IPEN13',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'IPEN14',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'IPEN15',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'IPEN16',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'IPEN17',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	5,3,2,35,3,10
	.byte	'GEEN1',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'IGP1',0,1
	.word	501
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_SCU_IGCR_Bits',0,4,130,4,3
	.word	38547
	.byte	9
	.byte	'_Ifx_SCU_IN_Bits',0,4,133,4,16,4,10
	.byte	'P0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_IN_Bits',0,4,138,4,3
	.word	38999
	.byte	9
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,141,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'PC0',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'PC1',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_IOCR_Bits',0,4,148,4,3
	.word	39098
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,151,4,16,4,10
	.byte	'LBISTREQ',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'LBISTREQP',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PATTERNS',0,2
	.word	518
	.byte	14,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,157,4,3
	.word	39248
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,160,4,16,4,10
	.byte	'SEED',0,4
	.word	326
	.byte	23,9,2,35,0,10
	.byte	'reserved_23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'SPLITSH',0,1
	.word	501
	.byte	3,5,2,35,3,10
	.byte	'BODY',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'LBISTFREQU',0,1
	.word	501
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,167,4,3
	.word	39397
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,170,4,16,4,10
	.byte	'SIGNATURE',0,4
	.word	326
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	7,1,2,35,3,10
	.byte	'LBISTDONE',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,175,4,3
	.word	39558
	.byte	9
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,178,4,16,4,10
	.byte	'reserved_0',0,2
	.word	518
	.byte	16,0,2,35,0,10
	.byte	'LS',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	518
	.byte	14,1,2,35,2,10
	.byte	'LSEN',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,184,4,3
	.word	39688
	.byte	9
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,187,4,16,4,10
	.byte	'LCLT0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'LCLT1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,192,4,3
	.word	39822
	.byte	9
	.byte	'_Ifx_SCU_MANID_Bits',0,4,195,4,16,4,10
	.byte	'DEPT',0,1
	.word	501
	.byte	5,3,2,35,0,10
	.byte	'MANUF',0,2
	.word	518
	.byte	11,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_MANID_Bits',0,4,200,4,3
	.word	39937
	.byte	9
	.byte	'_Ifx_SCU_OMR_Bits',0,4,203,4,16,4,10
	.byte	'PS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	518
	.byte	14,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	518
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_SCU_OMR_Bits',0,4,211,4,3
	.word	40048
	.byte	9
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,214,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PLLLV',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'OSCRES',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'GAINSEL',0,1
	.word	501
	.byte	2,3,2,35,0,10
	.byte	'MODE',0,1
	.word	501
	.byte	2,1,2,35,0,10
	.byte	'SHBY',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'PLLHV',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'X1D',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'X1DEN',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'OSCVAL',0,1
	.word	501
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	2,1,2,35,2,10
	.byte	'APREN',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,231,4,3
	.word	40206
	.byte	9
	.byte	'_Ifx_SCU_OUT_Bits',0,4,234,4,16,4,10
	.byte	'P0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_OUT_Bits',0,4,239,4,3
	.word	40546
	.byte	9
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,242,4,16,4,10
	.byte	'CSEL0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'CSEL1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'CSEL2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	518
	.byte	13,0,2,35,0,10
	.byte	'OVSTRT',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'OVSTP',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'DCINVAL',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'OVCONF',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'POVCONF',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	6,0,2,35,3,0,29
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,255,4,3
	.word	40647
	.byte	9
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,130,5,16,4,10
	.byte	'OVEN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'OVEN1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'OVEN2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	326
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,136,5,3
	.word	40914
	.byte	9
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,139,5,16,4,10
	.byte	'PDIS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDISC_Bits',0,4,144,5,3
	.word	41050
	.byte	9
	.byte	'_Ifx_SCU_PDR_Bits',0,4,147,5,16,4,10
	.byte	'PD0',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	501
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDR_Bits',0,4,154,5,3
	.word	41161
	.byte	9
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,157,5,16,4,10
	.byte	'PDR0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PDR1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PDR2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PDR3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PDR4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PDR5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PDR6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PDR7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDRR_Bits',0,4,168,5,3
	.word	41294
	.byte	9
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,171,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'MODEN',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	518
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,188,5,3
	.word	41497
	.byte	9
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,191,5,16,4,10
	.byte	'K2DIV',0,1
	.word	501
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	501
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	501
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	518
	.byte	9,0,2,35,2,0,29
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,199,5,3
	.word	41853
	.byte	9
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,202,5,16,4,10
	.byte	'MODCFG',0,2
	.word	518
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,206,5,3
	.word	42031
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,209,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	518
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	501
	.byte	5,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,226,5,3
	.word	42131
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,229,5,16,4,10
	.byte	'K2DIV',0,1
	.word	501
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	501
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	518
	.byte	9,0,2,35,2,0,29
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,237,5,3
	.word	42501
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,240,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PWDSTAT',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	326
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,249,5,3
	.word	42687
	.byte	9
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,252,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'MODRUN',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,135,6,3
	.word	42885
	.byte	9
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,138,6,16,4,10
	.byte	'REQSLP',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'SMUSLP',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	501
	.byte	5,0,2,35,0,10
	.byte	'PMST',0,1
	.word	501
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	326
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,145,6,3
	.word	43118
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,148,6,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1WKEN',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PINAWKEN',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PINBWKEN',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'ESR0DFEN',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'ESR0EDCON',0,1
	.word	501
	.byte	2,1,2,35,0,10
	.byte	'ESR1DFEN',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'ESR1EDCON',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'PINADFEN',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'PINAEDCON',0,1
	.word	501
	.byte	2,3,2,35,1,10
	.byte	'PINBDFEN',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'PINBEDCON',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'STBYRAMSEL',0,1
	.word	501
	.byte	2,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	2,1,2,35,2,10
	.byte	'PORSTDF',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'DCDCSYNC',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	3,3,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,174,6,3
	.word	43270
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,177,6,16,4,10
	.byte	'reserved_0',0,2
	.word	518
	.byte	12,4,2,35,0,10
	.byte	'IRADIS',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	326
	.byte	14,5,2,35,0,10
	.byte	'STBYEVEN',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'STBYEV',0,1
	.word	501
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,185,6,3
	.word	43829
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR3_Bits',0,4,188,6,16,4,10
	.byte	'WUTREL',0,4
	.word	326
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'WUTDIV',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWCR3_Bits',0,4,196,6,3
	.word	44012
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,199,6,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKP',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUN',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PINAWKP',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUN',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PINBWKP',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUN',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'PORSTDF',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'HWCFGEVR',0,1
	.word	501
	.byte	3,3,2,35,1,10
	.byte	'STBYRAM',0,1
	.word	501
	.byte	2,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'WUTWKP',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUN',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'ESR1WKEN',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'PINAWKEN',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'PINBWKEN',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	518
	.byte	4,5,2,35,2,10
	.byte	'ESR0TRIST',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'WUTRUN',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,226,6,3
	.word	44181
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,229,6,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKPCLR',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUNCLR',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PINAWKPCLR',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUNCLR',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PINBWKPCLR',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUNCLR',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'WUTWKPCLR',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUNCLR',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	518
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,242,6,3
	.word	44748
	.byte	9
	.byte	'_Ifx_SCU_PMSWUTCNT_Bits',0,4,245,6,16,4,10
	.byte	'WUTCNT',0,4
	.word	326
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWUTCNT_Bits',0,4,250,6,3
	.word	45064
	.byte	9
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,253,6,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'CLRC',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	518
	.byte	10,4,2,35,0,10
	.byte	'CSS0',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'CSS1',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'CSS2',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'USRINFO',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,135,7,3
	.word	45183
	.byte	9
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,138,7,16,4,10
	.byte	'ESR0',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'ESR1',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	2,2,2,35,0,10
	.byte	'SMU',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'SW',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'STM0',0,1
	.word	501
	.byte	2,4,2,35,1,10
	.byte	'STM1',0,1
	.word	501
	.byte	2,2,2,35,1,10
	.byte	'STM2',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,149,7,3
	.word	45392
	.byte	9
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,152,7,16,4,10
	.byte	'ESR0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMU',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'SW',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'STM0',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'STM1',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'STM2',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'PORST',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'CB0',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'CB1',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'CB3',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	2,1,2,35,2,10
	.byte	'EVR13',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'EVR33',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'SWD',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	2,4,2,35,3,10
	.byte	'STBYR',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	501
	.byte	3,0,2,35,3,0,29
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,175,7,3
	.word	45603
	.byte	9
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,178,7,16,4,10
	.byte	'HBT',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	326
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,182,7,3
	.word	46035
	.byte	9
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,185,7,16,4,10
	.byte	'HWCFG',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'FTM',0,1
	.word	501
	.byte	7,1,2,35,1,10
	.byte	'MODE',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'FCBAE',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'LUDIS',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'TRSTL',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'SPDEN',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	3,0,2,35,2,10
	.byte	'RAMINT',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	501
	.byte	7,0,2,35,3,0,29
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,198,7,3
	.word	46131
	.byte	9
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,201,7,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'SWRSTREQ',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,206,7,3
	.word	46391
	.byte	9
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,209,7,16,4,10
	.byte	'CCTRIG0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'RAMINTM',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'SETLUDIS',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	501
	.byte	3,0,2,35,0,10
	.byte	'DATM',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	326
	.byte	23,0,2,35,0,0,29
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,218,7,3
	.word	46516
	.byte	9
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,221,7,16,4,10
	.byte	'ESR0T',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,228,7,3
	.word	46713
	.byte	9
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,231,7,16,4,10
	.byte	'ESR0T',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,238,7,3
	.word	46866
	.byte	9
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,241,7,16,4,10
	.byte	'ESR0T',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,248,7,3
	.word	47019
	.byte	9
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,251,7,16,4,10
	.byte	'ESR0T',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,130,8,3
	.word	47172
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,139,8,3
	.word	365
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,154,8,3
	.word	540
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,170,8,3
	.word	784
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,173,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	349
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	349
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,179,8,3
	.word	47427
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,182,8,16,4,10
	.byte	'CLRIRF',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'IR0',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,195,8,3
	.word	47553
	.byte	9
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,198,8,16,4,10
	.byte	'AE',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,211,8,3
	.word	47805
	.byte	11,4,219,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31591
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN0',0,4,224,8,3
	.word	48024
	.byte	11,4,227,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32148
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN1',0,4,232,8,3
	.word	48088
	.byte	11,4,235,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32225
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ARSTDIS',0,4,240,8,3
	.word	48152
	.byte	11,4,243,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32361
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON0',0,4,248,8,3
	.word	48217
	.byte	11,4,251,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32643
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON1',0,4,128,9,3
	.word	48282
	.byte	11,4,131,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32881
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON2',0,4,136,9,3
	.word	48347
	.byte	11,4,139,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33009
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON3',0,4,144,9,3
	.word	48412
	.byte	11,4,147,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33236
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON4',0,4,152,9,3
	.word	48477
	.byte	11,4,155,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33455
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON5',0,4,160,9,3
	.word	48542
	.byte	11,4,163,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33583
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON6',0,4,168,9,3
	.word	48607
	.byte	11,4,171,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33683
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CHIPID',0,4,176,9,3
	.word	48672
	.byte	11,4,179,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33891
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSCON',0,4,184,9,3
	.word	48736
	.byte	11,4,187,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34056
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSLIM',0,4,192,9,3
	.word	48800
	.byte	11,4,195,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34239
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSSTAT',0,4,200,9,3
	.word	48864
	.byte	11,4,203,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34393
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EICR',0,4,208,9,3
	.word	48929
	.byte	11,4,211,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34757
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EIFR',0,4,216,9,3
	.word	48991
	.byte	11,4,219,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34968
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EMSR',0,4,224,9,3
	.word	49053
	.byte	11,4,227,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35220
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ESRCFG',0,4,232,9,3
	.word	49115
	.byte	11,4,235,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35338
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ESROCFG',0,4,240,9,3
	.word	49179
	.byte	11,4,243,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35449
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVR13CON',0,4,248,9,3
	.word	49244
	.byte	11,4,251,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35612
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,128,10,3
	.word	49310
	.byte	11,4,131,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35774
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,136,10,3
	.word	49378
	.byte	11,4,139,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36052
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVROVMON',0,4,144,10,3
	.word	49446
	.byte	11,4,147,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36231
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRRSTCON',0,4,152,10,3
	.word	49512
	.byte	11,4,155,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36391
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,160,10,3
	.word	49579
	.byte	11,4,163,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36552
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,168,10,3
	.word	49648
	.byte	11,4,171,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36744
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,176,10,3
	.word	49716
	.byte	11,4,179,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37040
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,184,10,3
	.word	49784
	.byte	11,4,187,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37255
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSTAT',0,4,192,10,3
	.word	49852
	.byte	11,4,195,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37544
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRUVMON',0,4,200,10,3
	.word	49917
	.byte	11,4,203,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37723
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EXTCON',0,4,208,10,3
	.word	49983
	.byte	11,4,211,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37941
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_FDR',0,4,216,10,3
	.word	50047
	.byte	11,4,219,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38104
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_FMR',0,4,224,10,3
	.word	50108
	.byte	11,4,227,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38440
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ID',0,4,232,10,3
	.word	50169
	.byte	11,4,235,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38547
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IGCR',0,4,240,10,3
	.word	50229
	.byte	11,4,243,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38999
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IN',0,4,248,10,3
	.word	50291
	.byte	11,4,251,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39098
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IOCR',0,4,128,11,3
	.word	50351
	.byte	11,4,131,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39248
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,136,11,3
	.word	50413
	.byte	11,4,139,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39397
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,144,11,3
	.word	50481
	.byte	11,4,147,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39558
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,152,11,3
	.word	50549
	.byte	11,4,155,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39688
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LCLCON0',0,4,160,11,3
	.word	50617
	.byte	11,4,163,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39822
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LCLTEST',0,4,168,11,3
	.word	50682
	.byte	11,4,171,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39937
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_MANID',0,4,176,11,3
	.word	50747
	.byte	11,4,179,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40048
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OMR',0,4,184,11,3
	.word	50810
	.byte	11,4,187,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40206
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OSCCON',0,4,192,11,3
	.word	50871
	.byte	11,4,195,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40546
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OUT',0,4,200,11,3
	.word	50935
	.byte	11,4,203,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40647
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OVCCON',0,4,208,11,3
	.word	50996
	.byte	11,4,211,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40914
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OVCENABLE',0,4,216,11,3
	.word	51060
	.byte	11,4,219,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41050
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDISC',0,4,224,11,3
	.word	51127
	.byte	11,4,227,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41161
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDR',0,4,232,11,3
	.word	51190
	.byte	11,4,235,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41294
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDRR',0,4,240,11,3
	.word	51251
	.byte	11,4,243,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41497
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLCON0',0,4,248,11,3
	.word	51313
	.byte	11,4,251,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41853
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLCON1',0,4,128,12,3
	.word	51378
	.byte	11,4,131,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42031
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLCON2',0,4,136,12,3
	.word	51443
	.byte	11,4,139,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42131
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,144,12,3
	.word	51508
	.byte	11,4,147,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42501
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,152,12,3
	.word	51577
	.byte	11,4,155,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42687
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,160,12,3
	.word	51646
	.byte	11,4,163,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42885
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLSTAT',0,4,168,12,3
	.word	51715
	.byte	11,4,171,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43118
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR',0,4,176,12,3
	.word	51780
	.byte	11,4,179,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43270
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWCR0',0,4,184,12,3
	.word	51843
	.byte	11,4,187,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43829
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWCR1',0,4,192,12,3
	.word	51908
	.byte	11,4,195,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44012
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWCR3',0,4,200,12,3
	.word	51973
	.byte	11,4,203,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44181
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWSTAT',0,4,208,12,3
	.word	52038
	.byte	11,4,211,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44748
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,216,12,3
	.word	52104
	.byte	11,4,219,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45064
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWUTCNT',0,4,224,12,3
	.word	52173
	.byte	11,4,227,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45392
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON',0,4,232,12,3
	.word	52240
	.byte	11,4,235,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45183
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON2',0,4,240,12,3
	.word	52304
	.byte	11,4,243,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45603
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTSTAT',0,4,248,12,3
	.word	52369
	.byte	11,4,251,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46035
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SAFECON',0,4,128,13,3
	.word	52434
	.byte	11,4,131,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46131
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STSTAT',0,4,136,13,3
	.word	52499
	.byte	11,4,139,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46391
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SWRSTCON',0,4,144,13,3
	.word	52563
	.byte	11,4,147,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46516
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SYSCON',0,4,152,13,3
	.word	52629
	.byte	11,4,155,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46713
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPCLR',0,4,160,13,3
	.word	52693
	.byte	11,4,163,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46866
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPDIS',0,4,168,13,3
	.word	52758
	.byte	11,4,171,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47019
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSET',0,4,176,13,3
	.word	52823
	.byte	11,4,179,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47172
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSTAT',0,4,184,13,3
	.word	52888
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,192,13,3
	.word	461
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,200,13,3
	.word	744
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,208,13,3
	.word	975
	.byte	11,4,211,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47427
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON0',0,4,216,13,3
	.word	53039
	.byte	11,4,219,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47553
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON1',0,4,224,13,3
	.word	53106
	.byte	11,4,227,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47805
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_SR',0,4,232,13,3
	.word	53173
	.byte	13
	.word	1015
	.byte	29
	.byte	'Ifx_SCU_WDTCPU',0,4,248,13,3
	.word	53238
	.byte	9
	.byte	'_Ifx_SCU_WDTS',0,4,251,13,25,12,12
	.byte	'CON0',0
	.word	53039
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	53106
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	53173
	.byte	4,2,35,8,0,13
	.word	53267
	.byte	29
	.byte	'Ifx_SCU_WDTS',0,4,128,14,3
	.word	53328
	.byte	16,8
	.word	49115
	.byte	17,1,0,16,4
	.word	51780
	.byte	17,0,0,13
	.word	53267
	.byte	16,12
	.word	1015
	.byte	17,0,0,13
	.word	53378
	.byte	16,20
	.word	501
	.byte	17,19,0,16,16
	.word	48929
	.byte	17,3,0,16,16
	.word	50229
	.byte	17,3,0,16,188,1
	.word	501
	.byte	17,187,1,0,16,244,1
	.word	501
	.byte	17,243,1,0,9
	.byte	'_Ifx_SCU',0,4,141,14,25,128,8,12
	.byte	'reserved_0',0
	.word	4547
	.byte	8,2,35,0,12
	.byte	'ID',0
	.word	50169
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	2728
	.byte	4,2,35,12,12
	.byte	'OSCCON',0
	.word	50871
	.byte	4,2,35,16,12
	.byte	'PLLSTAT',0
	.word	51715
	.byte	4,2,35,20,12
	.byte	'PLLCON0',0
	.word	51313
	.byte	4,2,35,24,12
	.byte	'PLLCON1',0
	.word	51378
	.byte	4,2,35,28,12
	.byte	'PLLCON2',0
	.word	51443
	.byte	4,2,35,32,12
	.byte	'PLLERAYSTAT',0
	.word	51646
	.byte	4,2,35,36,12
	.byte	'PLLERAYCON0',0
	.word	51508
	.byte	4,2,35,40,12
	.byte	'PLLERAYCON1',0
	.word	51577
	.byte	4,2,35,44,12
	.byte	'CCUCON0',0
	.word	48217
	.byte	4,2,35,48,12
	.byte	'CCUCON1',0
	.word	48282
	.byte	4,2,35,52,12
	.byte	'FDR',0
	.word	50047
	.byte	4,2,35,56,12
	.byte	'EXTCON',0
	.word	49983
	.byte	4,2,35,60,12
	.byte	'CCUCON2',0
	.word	48347
	.byte	4,2,35,64,12
	.byte	'CCUCON3',0
	.word	48412
	.byte	4,2,35,68,12
	.byte	'CCUCON4',0
	.word	48477
	.byte	4,2,35,72,12
	.byte	'CCUCON5',0
	.word	48542
	.byte	4,2,35,76,12
	.byte	'RSTSTAT',0
	.word	52369
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	2728
	.byte	4,2,35,84,12
	.byte	'RSTCON',0
	.word	52240
	.byte	4,2,35,88,12
	.byte	'ARSTDIS',0
	.word	48152
	.byte	4,2,35,92,12
	.byte	'SWRSTCON',0
	.word	52563
	.byte	4,2,35,96,12
	.byte	'RSTCON2',0
	.word	52304
	.byte	4,2,35,100,12
	.byte	'reserved_68',0
	.word	2728
	.byte	4,2,35,104,12
	.byte	'EVRRSTCON',0
	.word	49512
	.byte	4,2,35,108,12
	.byte	'ESRCFG',0
	.word	53355
	.byte	8,2,35,112,12
	.byte	'ESROCFG',0
	.word	49179
	.byte	4,2,35,120,12
	.byte	'SYSCON',0
	.word	52629
	.byte	4,2,35,124,12
	.byte	'CCUCON6',0
	.word	48607
	.byte	4,3,35,128,1,12
	.byte	'reserved_84',0
	.word	3918
	.byte	24,3,35,132,1,12
	.byte	'PDR',0
	.word	51190
	.byte	4,3,35,156,1,12
	.byte	'IOCR',0
	.word	50351
	.byte	4,3,35,160,1,12
	.byte	'OUT',0
	.word	50935
	.byte	4,3,35,164,1,12
	.byte	'OMR',0
	.word	50810
	.byte	4,3,35,168,1,12
	.byte	'IN',0
	.word	50291
	.byte	4,3,35,172,1,12
	.byte	'EVRSTAT',0
	.word	49852
	.byte	4,3,35,176,1,12
	.byte	'reserved_B4',0
	.word	2728
	.byte	4,3,35,180,1,12
	.byte	'EVR13CON',0
	.word	49244
	.byte	4,3,35,184,1,12
	.byte	'reserved_BC',0
	.word	2728
	.byte	4,3,35,188,1,12
	.byte	'STSTAT',0
	.word	52499
	.byte	4,3,35,192,1,12
	.byte	'reserved_C4',0
	.word	2728
	.byte	4,3,35,196,1,12
	.byte	'PMSWCR0',0
	.word	51843
	.byte	4,3,35,200,1,12
	.byte	'PMSWSTAT',0
	.word	52038
	.byte	4,3,35,204,1,12
	.byte	'PMSWSTATCLR',0
	.word	52104
	.byte	4,3,35,208,1,12
	.byte	'PMCSR',0
	.word	53364
	.byte	4,3,35,212,1,12
	.byte	'reserved_D8',0
	.word	4547
	.byte	8,3,35,216,1,12
	.byte	'DTSSTAT',0
	.word	48864
	.byte	4,3,35,224,1,12
	.byte	'DTSCON',0
	.word	48736
	.byte	4,3,35,228,1,12
	.byte	'PMSWCR1',0
	.word	51908
	.byte	4,3,35,232,1,12
	.byte	'reserved_EC',0
	.word	2728
	.byte	4,3,35,236,1,12
	.byte	'WDTS',0
	.word	53373
	.byte	12,3,35,240,1,12
	.byte	'EMSR',0
	.word	49053
	.byte	4,3,35,252,1,12
	.byte	'WDTCPU',0
	.word	53387
	.byte	12,3,35,128,2,12
	.byte	'reserved_10C',0
	.word	3918
	.byte	24,3,35,140,2,12
	.byte	'TRAPSTAT',0
	.word	52888
	.byte	4,3,35,164,2,12
	.byte	'TRAPSET',0
	.word	52823
	.byte	4,3,35,168,2,12
	.byte	'TRAPCLR',0
	.word	52693
	.byte	4,3,35,172,2,12
	.byte	'TRAPDIS',0
	.word	52758
	.byte	4,3,35,176,2,12
	.byte	'LCLCON0',0
	.word	50617
	.byte	4,3,35,180,2,12
	.byte	'reserved_138',0
	.word	2728
	.byte	4,3,35,184,2,12
	.byte	'LCLTEST',0
	.word	50682
	.byte	4,3,35,188,2,12
	.byte	'CHIPID',0
	.word	48672
	.byte	4,3,35,192,2,12
	.byte	'MANID',0
	.word	50747
	.byte	4,3,35,196,2,12
	.byte	'reserved_148',0
	.word	4547
	.byte	8,3,35,200,2,12
	.byte	'SAFECON',0
	.word	52434
	.byte	4,3,35,208,2,12
	.byte	'reserved_154',0
	.word	11735
	.byte	16,3,35,212,2,12
	.byte	'LBISTCTRL0',0
	.word	50413
	.byte	4,3,35,228,2,12
	.byte	'LBISTCTRL1',0
	.word	50481
	.byte	4,3,35,232,2,12
	.byte	'LBISTCTRL2',0
	.word	50549
	.byte	4,3,35,236,2,12
	.byte	'reserved_170',0
	.word	27587
	.byte	28,3,35,240,2,12
	.byte	'PDISC',0
	.word	51127
	.byte	4,3,35,140,3,12
	.byte	'reserved_190',0
	.word	4887
	.byte	12,3,35,144,3,12
	.byte	'EVRADCSTAT',0
	.word	49310
	.byte	4,3,35,156,3,12
	.byte	'EVRUVMON',0
	.word	49917
	.byte	4,3,35,160,3,12
	.byte	'EVROVMON',0
	.word	49446
	.byte	4,3,35,164,3,12
	.byte	'EVRMONCTRL',0
	.word	49378
	.byte	4,3,35,168,3,12
	.byte	'reserved_1AC',0
	.word	2728
	.byte	4,3,35,172,3,12
	.byte	'EVRSDCTRL1',0
	.word	49648
	.byte	4,3,35,176,3,12
	.byte	'EVRSDCTRL2',0
	.word	49716
	.byte	4,3,35,180,3,12
	.byte	'EVRSDCTRL3',0
	.word	49784
	.byte	4,3,35,184,3,12
	.byte	'reserved_1BC',0
	.word	4547
	.byte	8,3,35,188,3,12
	.byte	'EVRSDCOEFF2',0
	.word	49579
	.byte	4,3,35,196,3,12
	.byte	'reserved_1C8',0
	.word	53392
	.byte	20,3,35,200,3,12
	.byte	'PMSWUTCNT',0
	.word	52173
	.byte	4,3,35,220,3,12
	.byte	'OVCENABLE',0
	.word	51060
	.byte	4,3,35,224,3,12
	.byte	'OVCCON',0
	.word	50996
	.byte	4,3,35,228,3,12
	.byte	'reserved_1E8',0
	.word	27827
	.byte	40,3,35,232,3,12
	.byte	'EICR',0
	.word	53401
	.byte	16,3,35,144,4,12
	.byte	'EIFR',0
	.word	48991
	.byte	4,3,35,160,4,12
	.byte	'FMR',0
	.word	50108
	.byte	4,3,35,164,4,12
	.byte	'PDRR',0
	.word	51251
	.byte	4,3,35,168,4,12
	.byte	'IGCR',0
	.word	53410
	.byte	16,3,35,172,4,12
	.byte	'reserved_23C',0
	.word	2728
	.byte	4,3,35,188,4,12
	.byte	'DTSLIM',0
	.word	48800
	.byte	4,3,35,192,4,12
	.byte	'reserved_244',0
	.word	53419
	.byte	188,1,3,35,196,4,12
	.byte	'PMSWCR3',0
	.word	51973
	.byte	4,3,35,128,6,12
	.byte	'reserved_304',0
	.word	53430
	.byte	244,1,3,35,132,6,12
	.byte	'ACCEN1',0
	.word	48088
	.byte	4,3,35,248,7,12
	.byte	'ACCEN0',0
	.word	48024
	.byte	4,3,35,252,7,0,13
	.word	53441
	.byte	29
	.byte	'Ifx_SCU',0,4,244,14,3
	.word	55337
	.byte	14,19,139,10,9,1,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,29
	.byte	'IfxScu_CCUCON0_CLKSEL',0,19,143,10,3
	.word	55359
	.byte	14,19,153,10,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,29
	.byte	'IfxScu_WDTCON1_IR',0,19,158,10,3
	.word	55456
	.byte	14,5,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,29
	.byte	'IfxCpu_CounterMode',0,5,122,3
	.word	55578
	.byte	28,5,132,1,9,6,12
	.byte	'counter',0
	.word	1493
	.byte	4,2,35,0,12
	.byte	'overlfow',0
	.word	501
	.byte	1,2,35,4,0,29
	.byte	'IfxCpu_Counter',0,5,136,1,3
	.word	55665
	.byte	28,5,144,1,9,32,12
	.byte	'instruction',0
	.word	55665
	.byte	6,2,35,0,12
	.byte	'clock',0
	.word	55665
	.byte	6,2,35,6,12
	.byte	'counter1',0
	.word	55665
	.byte	6,2,35,12,12
	.byte	'counter2',0
	.word	55665
	.byte	6,2,35,18,12
	.byte	'counter3',0
	.word	55665
	.byte	6,2,35,24,0,29
	.byte	'IfxCpu_Perf',0,5,151,1,3
	.word	55731
	.byte	9
	.byte	'_Ifx_MTU_ACCEN0_Bits',0,20,45,16,4,10
	.byte	'EN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_MTU_ACCEN0_Bits',0,20,79,3
	.word	55849
	.byte	9
	.byte	'_Ifx_MTU_ACCEN1_Bits',0,20,82,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_MTU_ACCEN1_Bits',0,20,85,3
	.word	56406
	.byte	9
	.byte	'_Ifx_MTU_CLC_Bits',0,20,88,16,4,10
	.byte	'DISR',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'Resvd',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_MTU_CLC_Bits',0,20,95,3
	.word	56483
	.byte	9
	.byte	'_Ifx_MTU_ID_Bits',0,20,98,16,4,10
	.byte	'MODREV',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_MTU_ID_Bits',0,20,103,3
	.word	56619
	.byte	9
	.byte	'_Ifx_MTU_MEMMAP_Bits',0,20,106,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'CPU2DxMAP',0,1
	.word	501
	.byte	2,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'CPU2PxMAP',0,1
	.word	501
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'CPU1DxMAP',0,2
	.word	518
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'CPU1PxMAP',0,1
	.word	501
	.byte	2,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	501
	.byte	3,1,2,35,1,10
	.byte	'CPU0PCMAP',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'CPU0PTMAP',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'CPU0DxMAP',0,1
	.word	501
	.byte	2,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	518
	.byte	12,0,2,35,2,0,29
	.byte	'Ifx_MTU_MEMMAP_Bits',0,20,122,3
	.word	56724
	.byte	9
	.byte	'_Ifx_MTU_MEMSTAT0_Bits',0,20,125,16,4,10
	.byte	'CPU2DSAIU',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'CPU2DTAIU',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'CPU2PSAIU',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'CPU2PTAIU',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'CPU1DSAIU',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'CPU1DTAIU',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'CPU1PSAIU',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'CPU1PTAIU',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	501
	.byte	2,2,2,35,1,10
	.byte	'CPU0DSAIU',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'CPU0PSAIU',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'CPU0PTAIU',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'CPU0DxAIU',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'CPU1DS2AIU',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'CPU2DS2AIU',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'HSMCAIU',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'HSMTAIU',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'HSMRAIU',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'FSI0AIU',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'CPU0DS2AIU',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_MTU_MEMSTAT0_Bits',0,20,155,1,3
	.word	57083
	.byte	9
	.byte	'_Ifx_MTU_MEMSTAT1_Bits',0,20,158,1,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_MTU_MEMSTAT1_Bits',0,20,161,1,3
	.word	57741
	.byte	9
	.byte	'_Ifx_MTU_MEMSTAT2_Bits',0,20,164,1,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_MTU_MEMSTAT2_Bits',0,20,167,1,3
	.word	57824
	.byte	9
	.byte	'_Ifx_MTU_MEMTEST0_Bits',0,20,170,1,16,4,10
	.byte	'CPU2XEN',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'CPU1XEN',0,2
	.word	518
	.byte	6,4,2,35,0,10
	.byte	'LMUEN',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'MMCDSEN',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'CPU0DSEN',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'Res',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'CPU0PSEN',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'CPU0PTEN',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'CPU0DTEN',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'CPUXDS2EN',0,1
	.word	501
	.byte	2,2,2,35,2,10
	.byte	'ETHEN',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	518
	.byte	3,6,2,35,2,10
	.byte	'FSI0EN',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'CPU0DS2EN',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'GTMFEN',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'GTMM0EN',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'GTMM1EN',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'GTM1AEN',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_MTU_MEMTEST0_Bits',0,20,191,1,3
	.word	57907
	.byte	9
	.byte	'_Ifx_MTU_MEMTEST1_Bits',0,20,194,1,16,4,10
	.byte	'GTM1BEN',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'GTM2EN',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PSI5EN',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'MCAN0EN',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'MCAN1EN',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'ERAY0OEN',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'ERAY0TEN',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'ERAY0MEN',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'ERAY1XEN',0,1
	.word	501
	.byte	3,4,2,35,1,10
	.byte	'STBY1EN',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'MCDSEN',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'EMEML0EN',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'EMEML1EN',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'EMEML2EN',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'EMEML3EN',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'EMEMLXEN',0,2
	.word	518
	.byte	12,2,2,35,2,10
	.byte	'EMEMUXEN',0,1
	.word	501
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_MTU_MEMTEST1_Bits',0,20,214,1,3
	.word	58335
	.byte	9
	.byte	'_Ifx_MTU_MEMTEST2_Bits',0,20,217,1,16,4,10
	.byte	'EMEMUxEN',0,2
	.word	518
	.byte	14,2,2,35,0,10
	.byte	'CIF0EN',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'DAMEN',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'CIFxEN',0,1
	.word	501
	.byte	2,6,2,35,2,10
	.byte	'STBY2EN',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'DMAEN',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'XTM0EN',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'XTM1EN',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'FFT0EN',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'FFT1EN',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_MTU_MEMTEST2_Bits',0,20,230,1,3
	.word	58748
	.byte	11,20,238,1,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55849
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_ACCEN0',0,20,243,1,3
	.word	59013
	.byte	11,20,246,1,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56406
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_ACCEN1',0,20,251,1,3
	.word	59077
	.byte	11,20,254,1,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56483
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_CLC',0,20,131,2,3
	.word	59141
	.byte	11,20,134,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56619
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_ID',0,20,139,2,3
	.word	59202
	.byte	11,20,142,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56724
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_MEMMAP',0,20,147,2,3
	.word	59262
	.byte	11,20,150,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57083
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_MEMSTAT0',0,20,155,2,3
	.word	59326
	.byte	11,20,158,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57741
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_MEMSTAT1',0,20,163,2,3
	.word	59392
	.byte	11,20,166,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57824
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_MEMSTAT2',0,20,171,2,3
	.word	59458
	.byte	11,20,174,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57907
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_MEMTEST0',0,20,179,2,3
	.word	59524
	.byte	11,20,182,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58335
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_MEMTEST1',0,20,187,2,3
	.word	59590
	.byte	11,20,190,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58748
	.byte	4,2,35,0,0,29
	.byte	'Ifx_MTU_MEMTEST2',0,20,195,2,3
	.word	59656
	.byte	29
	.byte	'Ifx_MC_CONFIG0_Bits',0,12,50,3
	.word	10156
	.byte	29
	.byte	'Ifx_MC_CONFIG1_Bits',0,12,58,3
	.word	10284
	.byte	29
	.byte	'Ifx_MC_ECCD_Bits',0,12,75,3
	.word	11269
	.byte	29
	.byte	'Ifx_MC_ECCS_Bits',0,12,90,3
	.word	11032
	.byte	29
	.byte	'Ifx_MC_ETRR_Bits',0,12,97,3
	.word	11528
	.byte	29
	.byte	'Ifx_MC_MCONTROL_Bits',0,12,114,3
	.word	10408
	.byte	29
	.byte	'Ifx_MC_MSTATUS_Bits',0,12,124,3
	.word	10689
	.byte	29
	.byte	'Ifx_MC_RANGE_Bits',0,12,131,1,3
	.word	10842
	.byte	29
	.byte	'Ifx_MC_RDBFL_Bits',0,12,137,1,3
	.word	11643
	.byte	29
	.byte	'Ifx_MC_REVID_Bits',0,12,143,1,3
	.word	10948
	.byte	29
	.byte	'Ifx_MC_CONFIG0',0,12,156,1,3
	.word	10244
	.byte	29
	.byte	'Ifx_MC_CONFIG1',0,12,164,1,3
	.word	10368
	.byte	29
	.byte	'Ifx_MC_ECCD',0,12,172,1,3
	.word	11488
	.byte	29
	.byte	'Ifx_MC_ECCS',0,12,180,1,3
	.word	11229
	.byte	29
	.byte	'Ifx_MC_ETRR',0,12,188,1,3
	.word	11583
	.byte	29
	.byte	'Ifx_MC_MCONTROL',0,12,196,1,3
	.word	10649
	.byte	29
	.byte	'Ifx_MC_MSTATUS',0,12,204,1,3
	.word	10802
	.byte	29
	.byte	'Ifx_MC_RANGE',0,12,212,1,3
	.word	10899
	.byte	29
	.byte	'Ifx_MC_RDBFL',0,12,220,1,3
	.word	11686
	.byte	29
	.byte	'Ifx_MC_REVID',0,12,228,1,3
	.word	10992
	.byte	29
	.byte	'IfxMtu_MbistSel',0,11,97,3
	.word	9371
	.byte	29
	.byte	'IfxMtu_SramItem',0,11,113,3
	.word	12005
	.byte	16,160,8
	.word	12005
	.byte	17,87,0,19
	.word	60265
	.byte	31
	.byte	'IfxMtu_sramTable',0,11,119,34
	.word	60275
	.byte	1,1,9
	.byte	'_Ifx_STM_ACCEN0_Bits',0,21,45,16,4,10
	.byte	'EN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_STM_ACCEN0_Bits',0,21,79,3
	.word	60307
	.byte	9
	.byte	'_Ifx_STM_ACCEN1_Bits',0,21,82,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_ACCEN1_Bits',0,21,85,3
	.word	60864
	.byte	9
	.byte	'_Ifx_STM_CAP_Bits',0,21,88,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_CAP_Bits',0,21,91,3
	.word	60941
	.byte	9
	.byte	'_Ifx_STM_CAPSV_Bits',0,21,94,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_CAPSV_Bits',0,21,97,3
	.word	61013
	.byte	9
	.byte	'_Ifx_STM_CLC_Bits',0,21,100,16,4,10
	.byte	'DISR',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_STM_CLC_Bits',0,21,107,3
	.word	61089
	.byte	9
	.byte	'_Ifx_STM_CMCON_Bits',0,21,110,16,4,10
	.byte	'MSIZE0',0,1
	.word	501
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	501
	.byte	3,0,2,35,0,10
	.byte	'MSTART0',0,1
	.word	501
	.byte	5,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	501
	.byte	3,0,2,35,1,10
	.byte	'MSIZE1',0,1
	.word	501
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	3,0,2,35,2,10
	.byte	'MSTART1',0,1
	.word	501
	.byte	5,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	501
	.byte	3,0,2,35,3,0,29
	.byte	'Ifx_STM_CMCON_Bits',0,21,120,3
	.word	61230
	.byte	9
	.byte	'_Ifx_STM_CMP_Bits',0,21,123,16,4,10
	.byte	'CMPVAL',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_CMP_Bits',0,21,126,3
	.word	61448
	.byte	9
	.byte	'_Ifx_STM_ICR_Bits',0,21,129,1,16,4,10
	.byte	'CMP0EN',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'CMP0IR',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'CMP0OS',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'CMP1EN',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'CMP1IR',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'CMP1OS',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,4
	.word	326
	.byte	25,0,2,35,0,0,29
	.byte	'Ifx_STM_ICR_Bits',0,21,139,1,3
	.word	61515
	.byte	9
	.byte	'_Ifx_STM_ID_Bits',0,21,142,1,16,4,10
	.byte	'MODREV',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_STM_ID_Bits',0,21,147,1,3
	.word	61718
	.byte	9
	.byte	'_Ifx_STM_ISCR_Bits',0,21,150,1,16,4,10
	.byte	'CMP0IRR',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'CMP0IRS',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'CMP1IRR',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'CMP1IRS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_STM_ISCR_Bits',0,21,157,1,3
	.word	61825
	.byte	9
	.byte	'_Ifx_STM_KRST0_Bits',0,21,160,1,16,4,10
	.byte	'RST',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_STM_KRST0_Bits',0,21,165,1,3
	.word	61976
	.byte	9
	.byte	'_Ifx_STM_KRST1_Bits',0,21,168,1,16,4,10
	.byte	'RST',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	326
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_STM_KRST1_Bits',0,21,172,1,3
	.word	62087
	.byte	9
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,21,175,1,16,4,10
	.byte	'CLR',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	326
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_STM_KRSTCLR_Bits',0,21,179,1,3
	.word	62179
	.byte	9
	.byte	'_Ifx_STM_OCS_Bits',0,21,182,1,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	24,8,2,35,0,10
	.byte	'SUS',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	501
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_STM_OCS_Bits',0,21,189,1,3
	.word	62275
	.byte	9
	.byte	'_Ifx_STM_TIM0_Bits',0,21,192,1,16,4,10
	.byte	'STM31_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM0_Bits',0,21,195,1,3
	.word	62421
	.byte	9
	.byte	'_Ifx_STM_TIM0SV_Bits',0,21,198,1,16,4,10
	.byte	'STM31_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM0SV_Bits',0,21,201,1,3
	.word	62493
	.byte	9
	.byte	'_Ifx_STM_TIM1_Bits',0,21,204,1,16,4,10
	.byte	'STM35_4',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM1_Bits',0,21,207,1,3
	.word	62569
	.byte	9
	.byte	'_Ifx_STM_TIM2_Bits',0,21,210,1,16,4,10
	.byte	'STM39_8',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM2_Bits',0,21,213,1,3
	.word	62641
	.byte	9
	.byte	'_Ifx_STM_TIM3_Bits',0,21,216,1,16,4,10
	.byte	'STM43_12',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM3_Bits',0,21,219,1,3
	.word	62713
	.byte	9
	.byte	'_Ifx_STM_TIM4_Bits',0,21,222,1,16,4,10
	.byte	'STM47_16',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM4_Bits',0,21,225,1,3
	.word	62786
	.byte	9
	.byte	'_Ifx_STM_TIM5_Bits',0,21,228,1,16,4,10
	.byte	'STM51_20',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM5_Bits',0,21,231,1,3
	.word	62859
	.byte	9
	.byte	'_Ifx_STM_TIM6_Bits',0,21,234,1,16,4,10
	.byte	'STM63_32',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM6_Bits',0,21,237,1,3
	.word	62932
	.byte	11,21,245,1,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60307
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ACCEN0',0,21,250,1,3
	.word	63005
	.byte	11,21,253,1,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60864
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ACCEN1',0,21,130,2,3
	.word	63069
	.byte	11,21,133,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60941
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CAP',0,21,138,2,3
	.word	63133
	.byte	11,21,141,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61013
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CAPSV',0,21,146,2,3
	.word	63194
	.byte	11,21,149,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61089
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CLC',0,21,154,2,3
	.word	63257
	.byte	11,21,157,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61230
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CMCON',0,21,162,2,3
	.word	63318
	.byte	11,21,165,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61448
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CMP',0,21,170,2,3
	.word	63381
	.byte	11,21,173,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61515
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ICR',0,21,178,2,3
	.word	63442
	.byte	11,21,181,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61718
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ID',0,21,186,2,3
	.word	63503
	.byte	11,21,189,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61825
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ISCR',0,21,194,2,3
	.word	63563
	.byte	11,21,197,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61976
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_KRST0',0,21,202,2,3
	.word	63625
	.byte	11,21,205,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62087
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_KRST1',0,21,210,2,3
	.word	63688
	.byte	11,21,213,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62179
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_KRSTCLR',0,21,218,2,3
	.word	63751
	.byte	11,21,221,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62275
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_OCS',0,21,226,2,3
	.word	63816
	.byte	11,21,229,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62421
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM0',0,21,234,2,3
	.word	63877
	.byte	11,21,237,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62493
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM0SV',0,21,242,2,3
	.word	63939
	.byte	11,21,245,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62569
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM1',0,21,250,2,3
	.word	64003
	.byte	11,21,253,2,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62641
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM2',0,21,130,3,3
	.word	64065
	.byte	11,21,133,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62713
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM3',0,21,138,3,3
	.word	64127
	.byte	11,21,141,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62786
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM4',0,21,146,3,3
	.word	64189
	.byte	11,21,149,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62859
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM5',0,21,154,3,3
	.word	64251
	.byte	11,21,157,3,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62932
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM6',0,21,162,3,3
	.word	64313
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,22,45,16,4,10
	.byte	'EN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,22,79,3
	.word	64375
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,22,82,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,22,85,3
	.word	64936
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,22,88,16,4,10
	.byte	'SEL',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	326
	.byte	22,0,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,22,95,3
	.word	65017
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,22,98,16,4,10
	.byte	'VLD0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'VLD1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'VLD2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'VLD3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'VLD4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'VLD5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'VLD6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'VLD7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'VLD8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'VLD9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	326
	.byte	22,0,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,22,111,3
	.word	65170
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,22,114,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	326
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,22,121,3
	.word	65418
	.byte	9
	.byte	'_Ifx_FLASH_COMM0_Bits',0,22,124,16,4,10
	.byte	'STATUS',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM0_Bits',0,22,128,1,3
	.word	65564
	.byte	9
	.byte	'_Ifx_FLASH_COMM1_Bits',0,22,131,1,16,4,10
	.byte	'STATUS',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_COMM1_Bits',0,22,136,1,3
	.word	65662
	.byte	9
	.byte	'_Ifx_FLASH_COMM2_Bits',0,22,139,1,16,4,10
	.byte	'STATUS',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_COMM2_Bits',0,22,144,1,3
	.word	65778
	.byte	9
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,22,147,1,16,4,10
	.byte	'RCODE',0,4
	.word	326
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	518
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ECCRD_Bits',0,22,153,1,3
	.word	65894
	.byte	9
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,22,156,1,16,4,10
	.byte	'RCODE',0,4
	.word	326
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	518
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ECCRP_Bits',0,22,162,1,3
	.word	66034
	.byte	9
	.byte	'_Ifx_FLASH_ECCW_Bits',0,22,165,1,16,4,10
	.byte	'WCODE',0,4
	.word	326
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	518
	.byte	8,2,2,35,2,10
	.byte	'DECENCDIS',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'PECENCDIS',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ECCW_Bits',0,22,171,1,3
	.word	66174
	.byte	9
	.byte	'_Ifx_FLASH_FCON_Bits',0,22,174,1,16,4,10
	.byte	'WSPFLASH',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'WSECPF',0,1
	.word	501
	.byte	2,2,2,35,0,10
	.byte	'WSDFLASH',0,2
	.word	518
	.byte	6,4,2,35,0,10
	.byte	'WSECDF',0,1
	.word	501
	.byte	3,1,2,35,1,10
	.byte	'IDLE',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'ESLDIS',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'SLEEP',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'NSAFECC',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'STALL',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'RES21',0,1
	.word	501
	.byte	2,2,2,35,2,10
	.byte	'RES23',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'VOPERM',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'PROERM',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	501
	.byte	3,2,2,35,3,10
	.byte	'PR5V',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_FCON_Bits',0,22,193,1,3
	.word	66313
	.byte	9
	.byte	'_Ifx_FLASH_FPRO_Bits',0,22,196,1,16,4,10
	.byte	'PROINP',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PRODISP',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PROIND',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PRODISD',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PROINHSMCOTP',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PROINOTP',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'RES7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'PROINDBG',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'PRODISDBG',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'PROINHSM',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	501
	.byte	5,0,2,35,1,10
	.byte	'DCFP',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'DDFP',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'DDFPX',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'DDFD',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'ENPE',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_FLASH_FPRO_Bits',0,22,218,1,3
	.word	66675
	.byte	9
	.byte	'_Ifx_FLASH_FSR_Bits',0,22,221,1,16,4,10
	.byte	'FABUSY',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'D0BUSY',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'RES1',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'P0BUSY',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'RES4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'RES6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PROG',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'PFPAGE',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'PROER',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'PFSBER',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'PFDBER',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'PFMBER',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'RES17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'DFSBER',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'DFDBER',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'DFTBER',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'DFMBER',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'SRIADDERR',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	518
	.byte	2,7,2,35,2,10
	.byte	'PVER',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'SLM',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'ORIER',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_FSR_Bits',0,22,254,1,3
	.word	67116
	.byte	9
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,22,129,2,16,4,10
	.byte	'LCKHSMUCB',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	22,8,2,35,0,10
	.byte	'VOPERM',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	5,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,22,137,2,3
	.word	67720
	.byte	9
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,22,140,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	501
	.byte	4,1,2,35,0,10
	.byte	'PROG',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	326
	.byte	12,7,2,35,0,10
	.byte	'PVER',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,22,156,2,3
	.word	67900
	.byte	9
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,22,159,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'SELD1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,4
	.word	326
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,22,167,2,3
	.word	68222
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,22,170,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	326
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,22,174,2,3
	.word	68403
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,22,177,2,16,4,10
	.byte	'STRT',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	501
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,22,188,2,3
	.word	68503
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,22,191,2,16,4,10
	.byte	'DATA',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,22,194,2,3
	.word	68719
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,22,197,2,16,4,10
	.byte	'DATA',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,22,200,2,3
	.word	68798
	.byte	9
	.byte	'_Ifx_FLASH_ID_Bits',0,22,203,2,16,4,10
	.byte	'MODREV',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_ID_Bits',0,22,208,2,3
	.word	68877
	.byte	9
	.byte	'_Ifx_FLASH_MARD_Bits',0,22,211,2,16,4,10
	.byte	'HMARGIN',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'SELD0',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	518
	.byte	10,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_MARD_Bits',0,22,221,2,3
	.word	68988
	.byte	9
	.byte	'_Ifx_FLASH_MARP_Bits',0,22,224,2,16,4,10
	.byte	'SELP0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'RES1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'RES2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'RES3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	518
	.byte	11,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_MARP_Bits',0,22,233,2,3
	.word	69202
	.byte	9
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,22,236,2,16,4,10
	.byte	'L',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'NSAFECC',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'RAMIN',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'RAMINSEL',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'RES8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'RES9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'RES10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'RES11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'RES12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'RES13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'RES14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'RES15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'ESR0CNT',0,2
	.word	518
	.byte	12,4,2,35,2,10
	.byte	'RES29',0,1
	.word	501
	.byte	2,2,2,35,3,10
	.byte	'RES30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCOND_Bits',0,22,254,2,3
	.word	69388
	.byte	9
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,22,129,3,16,4,10
	.byte	'OCDSDIS',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'EDM',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,22,135,3,3
	.word	69723
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,22,138,3,16,4,10
	.byte	'HSMDBGDIS',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'TSTIFLCK',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'HSMTSTDIS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'RES15',0,2
	.word	518
	.byte	12,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,22,146,3,3
	.word	69866
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,22,149,3,16,4,10
	.byte	'HSMBOOTEN',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'SSWWAIT',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'HSMDX',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'HSM6X',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'HSM16X',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'HSM17X',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'HSMENPINS',0,2
	.word	518
	.byte	2,7,2,35,0,10
	.byte	'HSMENRES',0,1
	.word	501
	.byte	2,5,2,35,1,10
	.byte	'DESTDBG',0,1
	.word	501
	.byte	2,3,2,35,1,10
	.byte	'BLKFLAN',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'BOOTSEL',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	518
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,22,166,3,3
	.word	70055
	.byte	9
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,22,169,3,16,4,10
	.byte	'S0ROM',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'S1ROM',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'S2ROM',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'S3ROM',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'S4ROM',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'S5ROM',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'S7ROM',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'S8ROM',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'S9ROM',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'S10ROM',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'S11ROM',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'S12ROM',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'S13ROM',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'S14ROM',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'S15ROM',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'S18ROM',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'S19ROM',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'S20ROM',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'S21ROM',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'S22ROM',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'S23ROM',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'S24ROM',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'S25ROM',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'S26ROM',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	501
	.byte	2,3,2,35,3,10
	.byte	'BML',0,1
	.word	501
	.byte	2,1,2,35,3,10
	.byte	'TP',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,22,201,3,3
	.word	70414
	.byte	9
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,22,204,3,16,4,10
	.byte	'S0L',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'S1L',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'S2L',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'S3L',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'S4L',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'S5L',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'S6L',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'S7L',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'S8L',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'S9L',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'S10L',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'S11L',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'S12L',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'S13L',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'S14L',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'S15L',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'S16L',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'S17L',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'S18L',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'S19L',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'S20L',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'S21L',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'S22L',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'S23L',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'S24L',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'S25L',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'S26L',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	501
	.byte	4,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCONP_Bits',0,22,235,3,3
	.word	71009
	.byte	9
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,22,238,3,16,4,10
	.byte	'S0WOP',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'S1WOP',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'S2WOP',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'S3WOP',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'S4WOP',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'S5WOP',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'S6WOP',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'S7WOP',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'S8WOP',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'S9WOP',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'S10WOP',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'S11WOP',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'S12WOP',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'S13WOP',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'S14WOP',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'S15WOP',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'S16WOP',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'S17WOP',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'S18WOP',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'S19WOP',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'S20WOP',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'S21WOP',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'S22WOP',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'S23WOP',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'S24WOP',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'S25WOP',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'S26WOP',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	501
	.byte	4,1,2,35,3,10
	.byte	'DATM',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,22,141,4,3
	.word	71533
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,22,144,4,16,4,10
	.byte	'TAG',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	326
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,22,148,4,3
	.word	72115
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,22,151,4,16,4,10
	.byte	'TAG',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	326
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,22,155,4,3
	.word	72217
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,22,158,4,16,4,10
	.byte	'TAG',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	326
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,22,162,4,3
	.word	72319
	.byte	9
	.byte	'_Ifx_FLASH_RRAD_Bits',0,22,165,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	326
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RRAD_Bits',0,22,169,4,3
	.word	72421
	.byte	9
	.byte	'_Ifx_FLASH_RRCT_Bits',0,22,172,4,16,4,10
	.byte	'STRT',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	501
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	518
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_RRCT_Bits',0,22,183,4,3
	.word	72515
	.byte	9
	.byte	'_Ifx_FLASH_RRD0_Bits',0,22,186,4,16,4,10
	.byte	'DATA',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD0_Bits',0,22,189,4,3
	.word	72725
	.byte	9
	.byte	'_Ifx_FLASH_RRD1_Bits',0,22,192,4,16,4,10
	.byte	'DATA',0,4
	.word	326
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD1_Bits',0,22,195,4,3
	.word	72798
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,22,198,4,16,4,10
	.byte	'SEL',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	326
	.byte	22,0,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,22,205,4,3
	.word	72871
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,22,208,4,16,4,10
	.byte	'VLD0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	326
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,22,212,4,3
	.word	73026
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,22,215,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	326
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	501
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,22,222,4,3
	.word	73131
	.byte	11,22,230,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64375
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ACCEN0',0,22,235,4,3
	.word	73279
	.byte	11,22,238,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64936
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ACCEN1',0,22,243,4,3
	.word	73345
	.byte	11,22,246,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65017
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_CFG',0,22,251,4,3
	.word	73411
	.byte	11,22,254,4,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65170
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_STAT',0,22,131,5,3
	.word	73479
	.byte	11,22,134,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65418
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_TOP',0,22,139,5,3
	.word	73548
	.byte	11,22,142,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65564
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM0',0,22,147,5,3
	.word	73616
	.byte	11,22,150,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65662
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM1',0,22,155,5,3
	.word	73681
	.byte	11,22,158,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65778
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM2',0,22,163,5,3
	.word	73746
	.byte	11,22,166,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65894
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ECCRD',0,22,171,5,3
	.word	73811
	.byte	11,22,174,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66034
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ECCRP',0,22,179,5,3
	.word	73876
	.byte	11,22,182,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66174
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ECCW',0,22,187,5,3
	.word	73941
	.byte	11,22,190,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66313
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_FCON',0,22,195,5,3
	.word	74005
	.byte	11,22,198,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66675
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_FPRO',0,22,203,5,3
	.word	74069
	.byte	11,22,206,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67116
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_FSR',0,22,211,5,3
	.word	74133
	.byte	11,22,214,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67720
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMFCON',0,22,219,5,3
	.word	74196
	.byte	11,22,222,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	67900
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMFSR',0,22,227,5,3
	.word	74263
	.byte	11,22,230,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68222
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMMARD',0,22,235,5,3
	.word	74329
	.byte	11,22,238,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68403
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRAD',0,22,243,5,3
	.word	74396
	.byte	11,22,246,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68503
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRCT',0,22,251,5,3
	.word	74463
	.byte	11,22,254,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68719
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRD0',0,22,131,6,3
	.word	74530
	.byte	11,22,134,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68798
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_HSMRRD1',0,22,139,6,3
	.word	74597
	.byte	11,22,142,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68877
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ID',0,22,147,6,3
	.word	74664
	.byte	11,22,150,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	68988
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_MARD',0,22,155,6,3
	.word	74726
	.byte	11,22,158,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69202
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_MARP',0,22,163,6,3
	.word	74790
	.byte	11,22,166,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69388
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCOND',0,22,171,6,3
	.word	74854
	.byte	11,22,174,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69723
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONDBG',0,22,179,6,3
	.word	74921
	.byte	11,22,182,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69866
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONHSM',0,22,187,6,3
	.word	74990
	.byte	11,22,190,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70055
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,22,195,6,3
	.word	75059
	.byte	11,22,198,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70414
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONOTP',0,22,203,6,3
	.word	75132
	.byte	11,22,206,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71009
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONP',0,22,211,6,3
	.word	75201
	.byte	11,22,214,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71533
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONWOP',0,22,219,6,3
	.word	75268
	.byte	11,22,222,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72115
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG0',0,22,227,6,3
	.word	75337
	.byte	11,22,230,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72217
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG1',0,22,235,6,3
	.word	75405
	.byte	11,22,238,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72319
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG2',0,22,243,6,3
	.word	75473
	.byte	11,22,246,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72421
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRAD',0,22,251,6,3
	.word	75541
	.byte	11,22,254,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72515
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRCT',0,22,131,7,3
	.word	75605
	.byte	11,22,134,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72725
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD0',0,22,139,7,3
	.word	75669
	.byte	11,22,142,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72798
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD1',0,22,147,7,3
	.word	75733
	.byte	11,22,150,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72871
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_CFG',0,22,155,7,3
	.word	75797
	.byte	11,22,158,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73026
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_STAT',0,22,163,7,3
	.word	75865
	.byte	11,22,166,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73131
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_TOP',0,22,171,7,3
	.word	75934
	.byte	16,36
	.word	501
	.byte	17,35,0,9
	.byte	'_Ifx_FLASH_CBAB',0,22,182,7,25,48,12
	.byte	'CFG',0
	.word	73411
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	73479
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	73548
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	76002
	.byte	36,2,35,12,0,13
	.word	76011
	.byte	29
	.byte	'Ifx_FLASH_CBAB',0,22,188,7,3
	.word	76094
	.byte	9
	.byte	'_Ifx_FLASH_RDB',0,22,191,7,25,48,12
	.byte	'CFG0',0
	.word	75337
	.byte	4,2,35,0,12
	.byte	'CFG1',0
	.word	75405
	.byte	4,2,35,4,12
	.byte	'CFG2',0
	.word	75473
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	76002
	.byte	36,2,35,12,0,13
	.word	76123
	.byte	29
	.byte	'Ifx_FLASH_RDB',0,22,197,7,3
	.word	76207
	.byte	16,80
	.word	501
	.byte	17,79,0,9
	.byte	'_Ifx_FLASH_UBAB',0,22,200,7,25,92,12
	.byte	'CFG',0
	.word	75797
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	75865
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	75934
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	76235
	.byte	80,2,35,12,0,13
	.word	76244
	.byte	29
	.byte	'Ifx_FLASH_UBAB',0,22,206,7,3
	.word	76327
	.byte	29
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	7593
	.byte	29
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	7506
	.byte	29
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4556
	.byte	29
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2609
	.byte	29
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3604
	.byte	29
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2737
	.byte	29
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3384
	.byte	29
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	2952
	.byte	29
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3167
	.byte	29
	.byte	'Ifx_P_OMCR0_Bits',0,8,200,1,3
	.word	6136
	.byte	29
	.byte	'Ifx_P_OMCR12_Bits',0,8,210,1,3
	.word	6660
	.byte	29
	.byte	'Ifx_P_OMCR4_Bits',0,8,221,1,3
	.word	6310
	.byte	29
	.byte	'Ifx_P_OMCR8_Bits',0,8,232,1,3
	.word	6484
	.byte	29
	.byte	'Ifx_P_OMCR_Bits',0,8,254,1,3
	.word	7149
	.byte	29
	.byte	'Ifx_P_OMR_Bits',0,8,163,2,3
	.word	2038
	.byte	29
	.byte	'Ifx_P_OMSR0_Bits',0,8,173,2,3
	.word	5473
	.byte	29
	.byte	'Ifx_P_OMSR12_Bits',0,8,184,2,3
	.word	5961
	.byte	29
	.byte	'Ifx_P_OMSR4_Bits',0,8,195,2,3
	.word	5620
	.byte	29
	.byte	'Ifx_P_OMSR8_Bits',0,8,206,2,3
	.word	5789
	.byte	29
	.byte	'Ifx_P_OMSR_Bits',0,8,228,2,3
	.word	6816
	.byte	29
	.byte	'Ifx_P_OUT_Bits',0,8,250,2,3
	.word	1722
	.byte	29
	.byte	'Ifx_P_PCSR_Bits',0,8,135,3,3
	.word	5262
	.byte	29
	.byte	'Ifx_P_PDISC_Bits',0,8,157,3,3
	.word	4896
	.byte	29
	.byte	'Ifx_P_PDR0_Bits',0,8,178,3,3
	.word	3927
	.byte	29
	.byte	'Ifx_P_PDR1_Bits',0,8,199,3,3
	.word	4231
	.byte	29
	.byte	'Ifx_P_ACCEN0',0,8,212,3,3
	.word	8120
	.byte	29
	.byte	'Ifx_P_ACCEN1',0,8,220,3,3
	.word	7553
	.byte	29
	.byte	'Ifx_P_ESR',0,8,228,3,3
	.word	4847
	.byte	29
	.byte	'Ifx_P_ID',0,8,236,3,3
	.word	2688
	.byte	29
	.byte	'Ifx_P_IN',0,8,244,3,3
	.word	3878
	.byte	29
	.byte	'Ifx_P_IOCR0',0,8,252,3,3
	.word	2912
	.byte	29
	.byte	'Ifx_P_IOCR12',0,8,132,4,3
	.word	3564
	.byte	29
	.byte	'Ifx_P_IOCR4',0,8,140,4,3
	.word	3127
	.byte	29
	.byte	'Ifx_P_IOCR8',0,8,148,4,3
	.word	3344
	.byte	29
	.byte	'Ifx_P_OMCR',0,8,156,4,3
	.word	7457
	.byte	29
	.byte	'Ifx_P_OMCR0',0,8,164,4,3
	.word	6270
	.byte	29
	.byte	'Ifx_P_OMCR12',0,8,172,4,3
	.word	6776
	.byte	29
	.byte	'Ifx_P_OMCR4',0,8,180,4,3
	.word	6444
	.byte	29
	.byte	'Ifx_P_OMCR8',0,8,188,4,3
	.word	6620
	.byte	29
	.byte	'Ifx_P_OMR',0,8,196,4,3
	.word	2569
	.byte	29
	.byte	'Ifx_P_OMSR',0,8,204,4,3
	.word	7109
	.byte	29
	.byte	'Ifx_P_OMSR0',0,8,212,4,3
	.word	5580
	.byte	29
	.byte	'Ifx_P_OMSR12',0,8,220,4,3
	.word	6096
	.byte	29
	.byte	'Ifx_P_OMSR4',0,8,228,4,3
	.word	5749
	.byte	29
	.byte	'Ifx_P_OMSR8',0,8,236,4,3
	.word	5921
	.byte	29
	.byte	'Ifx_P_OUT',0,8,244,4,3
	.word	1998
	.byte	29
	.byte	'Ifx_P_PCSR',0,8,252,4,3
	.word	5433
	.byte	29
	.byte	'Ifx_P_PDISC',0,8,132,5,3
	.word	5222
	.byte	29
	.byte	'Ifx_P_PDR0',0,8,140,5,3
	.word	4191
	.byte	29
	.byte	'Ifx_P_PDR1',0,8,148,5,3
	.word	4507
	.byte	13
	.word	8160
	.byte	29
	.byte	'Ifx_P',0,8,193,5,3
	.word	77503
	.byte	14,7,54,9,1,15
	.byte	'IfxPort_InputMode_undefined',0,127,15
	.byte	'IfxPort_InputMode_noPullDevice',0,0,15
	.byte	'IfxPort_InputMode_pullDown',0,8,15
	.byte	'IfxPort_InputMode_pullUp',0,16,0,29
	.byte	'IfxPort_InputMode',0,7,60,3
	.word	77523
	.byte	14,7,91,9,1,15
	.byte	'IfxPort_OutputIdx_general',0,128,1,15
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,15
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,15
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,15
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,15
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,15
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,15
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,29
	.byte	'IfxPort_OutputIdx',0,7,101,3
	.word	77674
	.byte	14,7,105,9,1,15
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,15
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,29
	.byte	'IfxPort_OutputMode',0,7,109,3
	.word	77917
	.byte	14,7,115,9,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,15
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,15
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,15
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,15
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,29
	.byte	'IfxPort_PadDriver',0,7,125,3
	.word	78013
	.byte	29
	.byte	'IfxPort_State',0,7,137,1,3
	.word	8703
	.byte	28,7,149,1,9,8,12
	.byte	'port',0
	.word	8698
	.byte	4,2,35,0,12
	.byte	'pinIndex',0
	.word	501
	.byte	1,2,35,4,0,29
	.byte	'IfxPort_Pin',0,7,153,1,3
	.word	78352
	.byte	32,1,1,6
	.word	78412
	.byte	29
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,10,129,1,16
	.word	78415
	.byte	28,10,197,5,9,8,12
	.byte	'value',0
	.word	1493
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	1493
	.byte	4,2,35,4,0,29
	.byte	'IfxScuCcu_CcuconRegConfig',0,10,201,5,3
	.word	78460
	.byte	28,10,206,5,9,8,12
	.byte	'pDivider',0
	.word	501
	.byte	1,2,35,0,12
	.byte	'nDivider',0
	.word	501
	.byte	1,2,35,1,12
	.byte	'k2Initial',0
	.word	501
	.byte	1,2,35,2,12
	.byte	'waitTime',0
	.word	9280
	.byte	4,2,35,4,0,29
	.byte	'IfxScuCcu_InitialStepConfig',0,10,212,5,3
	.word	78531
	.byte	28,10,216,5,9,12,12
	.byte	'k2Step',0
	.word	501
	.byte	1,2,35,0,12
	.byte	'waitTime',0
	.word	9280
	.byte	4,2,35,2,12
	.byte	'hookFunction',0
	.word	78420
	.byte	4,2,35,8,0,29
	.byte	'IfxScuCcu_PllStepsConfig',0,10,221,5,3
	.word	78648
	.byte	6
	.word	78412
	.byte	28,10,229,5,9,40,12
	.byte	'ccucon0',0
	.word	78460
	.byte	8,2,35,0,12
	.byte	'ccucon1',0
	.word	78460
	.byte	8,2,35,8,12
	.byte	'ccucon2',0
	.word	78460
	.byte	8,2,35,16,12
	.byte	'ccucon5',0
	.word	78460
	.byte	8,2,35,24,12
	.byte	'ccucon6',0
	.word	78460
	.byte	8,2,35,32,0,29
	.byte	'IfxScuCcu_ClockDistributionConfig',0,10,236,5,3
	.word	78750
	.byte	28,10,240,5,9,8,12
	.byte	'value',0
	.word	1493
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	1493
	.byte	4,2,35,4,0,29
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,10,244,5,3
	.word	78885
	.byte	6
	.word	78648
	.byte	28,10,249,5,9,16,12
	.byte	'numOfPllDividerSteps',0
	.word	501
	.byte	1,2,35,0,12
	.byte	'pllDividerStep',0
	.word	78961
	.byte	4,2,35,4,12
	.byte	'pllInitialStep',0
	.word	78531
	.byte	8,2,35,8,0,29
	.byte	'IfxScuCcu_SysPllConfig',0,10,254,5,3
	.word	78966
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L181:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,36,0,3,8,11,15,62,15,0,0,5,59,0,3,8,0,0,6,15,0,73,19,0,0,7,46,1,3,8,32,13,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,0,0,8,5,0,3,8,58,15,59,15,57,15,73,19,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,11,23,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,13,53,0,73,19,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0
	.byte	0,17,33,0,47,15,0,0,18,46,0,3,8,54,15,39,12,63,12,60,12,0,0,19,38,0,73,19,0,0,20,55,0,73,19,0,0,21,46
	.byte	1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,22,5,0,58,15,59,15,57,15,73,19,0,0,23,24,0,58
	.byte	15,59,15,57,15,0,0,24,46,1,49,19,0,0,25,5,0,49,19,0,0,26,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12
	.byte	60,12,0,0,27,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,28,19,1,58,15,59,15,57,15,11
	.byte	15,0,0,29,22,0,3,8,58,15,59,15,57,15,73,19,0,0,30,21,0,54,15,0,0,31,52,0,3,8,58,15,59,15,57,15,73,19,63
	.byte	12,60,12,0,0,32,21,0,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L182:
	.word	.L650-.L649
.L649:
	.half	3
	.word	.L652-.L651
.L651:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Reg',0
	.byte	'C:\\TASKING\\TriCore v6.2r2\\ctc\\include\\',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_common\\ifx_cfg\\include',0
	.byte	0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxCpu_cfg.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Port\\Std\\IfxPort.h',0
	.byte	0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'stdio.h',0,2,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuCcu.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxMtu_cfg.h',0
	.byte	0,0,0
	.byte	'IfxMc_regdef.h',0,1,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'Ifx_Cfg.h',0,3,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Platform_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Ifx_Types.h',0
	.byte	0,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxScu_cfg.h',0
	.byte	0,0,0
	.byte	'IfxMtu_regdef.h',0,1,0,0
	.byte	'IfxStm_regdef.h',0,1,0,0
	.byte	'IfxFlash_regdef.h',0,1,0,0,0
.L652:
.L650:
	.sdecl	'.debug_info',debug,cluster('IfxMtu_disableMbistShell')
	.sect	'.debug_info'
.L183:
	.word	288
	.half	3
	.word	.L184
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L186,.L185
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_disableMbistShell',0,1,184,1,6,1,1,1
	.word	.L132,.L363,.L131
	.byte	4
	.byte	'mbistSel',0,1,184,1,47
	.word	.L364,.L365
	.byte	5
	.word	.L366
	.byte	6
	.byte	'mtuMemtest',0,1,186,1,22
	.word	.L367,.L368
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_disableMbistShell')
	.sect	'.debug_abbrev'
.L184:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_disableMbistShell')
	.sect	'.debug_line'
.L185:
	.word	.L654-.L653
.L653:
	.half	3
	.word	.L656-.L655
.L655:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L656:
	.byte	5,93,7,0,5,2
	.word	.L132
	.byte	3,185,1,1,5,55,9
	.half	.L657-.L132
	.byte	1,5,81,9
	.half	.L545-.L657
	.byte	1,5,20,9
	.half	.L658-.L545
	.byte	3,2,1,5,17,9
	.half	.L659-.L658
	.byte	1,5,1,9
	.half	.L660-.L659
	.byte	3,1,1,7,9
	.half	.L187-.L660
	.byte	0,1,1
.L654:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_disableMbistShell')
	.sect	'.debug_ranges'
.L186:
	.word	-1,.L132,0,.L187-.L132,0,0
.L366:
	.word	-1,.L132,0,.L363-.L132,-1,.L134,0,.L292-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_enableMbistShell')
	.sect	'.debug_info'
.L188:
	.word	291
	.half	3
	.word	.L189
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L191,.L190
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_enableMbistShell',0,1,207,1,6,1,1,1
	.word	.L138,.L369,.L137
	.byte	4
	.byte	'mbistSel',0,1,207,1,46
	.word	.L364,.L370
	.byte	5
	.word	.L138,.L369
	.byte	6
	.byte	'mtuMemtest',0,1,209,1,22
	.word	.L367,.L371
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_enableMbistShell')
	.sect	'.debug_abbrev'
.L189:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_enableMbistShell')
	.sect	'.debug_line'
.L190:
	.word	.L662-.L661
.L661:
	.half	3
	.word	.L664-.L663
.L663:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L664:
	.byte	5,93,7,0,5,2
	.word	.L138
	.byte	3,208,1,1,5,55,9
	.half	.L665-.L138
	.byte	1,5,81,9
	.half	.L552-.L665
	.byte	1,5,17,9
	.half	.L553-.L552
	.byte	3,2,1,5,1,9
	.half	.L666-.L553
	.byte	3,1,1,7,9
	.half	.L192-.L666
	.byte	0,1,1
.L662:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_enableMbistShell')
	.sect	'.debug_ranges'
.L191:
	.word	-1,.L138,0,.L192-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_isAutoInitRunning')
	.sect	'.debug_info'
.L193:
	.word	271
	.half	3
	.word	.L194
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L196,.L195
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_isAutoInitRunning',0,1,139,2,9
	.word	.L372
	.byte	1,1,1
	.word	.L144,.L373,.L143
	.byte	4
	.byte	'mbistSel',0,1,139,2,50
	.word	.L364,.L374
	.byte	5
	.word	.L144,.L373
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_isAutoInitRunning')
	.sect	'.debug_abbrev'
.L194:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_isAutoInitRunning')
	.sect	'.debug_line'
.L195:
	.word	.L668-.L667
.L667:
	.half	3
	.word	.L670-.L669
.L669:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L670:
	.byte	5,93,7,0,5,2
	.word	.L144
	.byte	3,140,2,1,5,55,9
	.half	.L671-.L144
	.byte	1,5,81,9
	.half	.L563-.L671
	.byte	1,5,25,9
	.half	.L564-.L563
	.byte	3,2,1,5,33,9
	.half	.L672-.L564
	.byte	1,5,1,3,1,1,7,9
	.half	.L197-.L672
	.byte	0,1,1
.L668:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_isAutoInitRunning')
	.sect	'.debug_ranges'
.L196:
	.word	-1,.L144,0,.L197-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_info'
.L198:
	.word	336
	.half	3
	.word	.L199
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L201,.L200
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_clearSram',0,1,60,6,1,1,1
	.word	.L114,.L375,.L113
	.byte	4
	.byte	'mbistSel',0,1,60,39
	.word	.L364,.L376
	.byte	5
	.word	.L114,.L375
	.byte	6
	.byte	'isEndInitEnabled',0,1,62,12
	.word	.L372,.L377
	.byte	6
	.byte	'password',0,1,63,12
	.word	.L378,.L379
	.byte	7
	.byte	'__func__',0,1,83,5
	.word	.L380
	.byte	5,3
	.word	_999001___func__
	.byte	8
	.word	.L381
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_abbrev'
.L199:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,8,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_line'
.L200:
	.word	.L674-.L673
.L673:
	.half	3
	.word	.L676-.L675
.L675:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0,0
.L676:
	.byte	5,6,7,0,5,2
	.word	.L114
	.byte	3,59,1,5,29,9
	.half	.L512-.L114
	.byte	3,2,1,5,51,3,3,1,5,14,9
	.half	.L513-.L512
	.byte	1,4,2,5,43,3,138,3,1,4,1,5,5,9
	.half	.L677-.L513
	.byte	3,249,124,1,5,38,7,9
	.half	.L678-.L677
	.byte	3,3,1,5,26,9
	.half	.L515-.L678
	.byte	3,1,1,5,27,9
	.half	.L2-.L515
	.byte	3,3,1,5,32,9
	.half	.L679-.L2
	.byte	3,3,1,5,45,9
	.half	.L382-.L679
	.byte	3,4,1,5,71,9
	.half	.L680-.L382
	.byte	1,5,55,9
	.half	.L516-.L680
	.byte	1,5,68,9
	.half	.L681-.L516
	.byte	1,5,71,1,5,62,9
	.half	.L517-.L681
	.byte	3,127,1,5,5,9
	.half	.L682-.L517
	.byte	3,2,1,5,41,9
	.half	.L683-.L682
	.byte	3,2,1,5,14,9
	.half	.L5-.L683
	.byte	3,2,1,5,32,9
	.half	.L4-.L5
	.byte	3,126,1,5,13,9
	.half	.L684-.L4
	.byte	1,5,34,7,9
	.half	.L685-.L684
	.byte	3,6,1,5,30,9
	.half	.L686-.L685
	.byte	3,2,1,5,5,9
	.half	.L687-.L686
	.byte	3,2,1,5,36,7,9
	.half	.L688-.L687
	.byte	3,3,1,5,1,9
	.half	.L6-.L688
	.byte	3,2,1,7,9
	.half	.L202-.L6
	.byte	0,1,1
.L674:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_ranges'
.L201:
	.word	-1,.L114,0,.L202-.L114,0,0
.L381:
	.word	-1,.L114,.L382-.L114,.L375-.L114,-1,.L116,0,.L362-.L116,-1,.L118,0,.L332-.L118,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_info'
.L203:
	.word	265
	.half	3
	.word	.L204
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L206,.L205
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_clearSramContinue',0,1,103,6,1,1,1
	.word	.L122,.L383,.L121
	.byte	4
	.byte	'mbistSel',0,1,103,47
	.word	.L364,.L384
	.byte	5
	.word	.L122,.L383
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_abbrev'
.L204:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_line'
.L205:
	.word	.L690-.L689
.L689:
	.half	3
	.word	.L692-.L691
.L691:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L692:
	.byte	5,6,7,0,5,2
	.word	.L122
	.byte	3,230,0,1,5,38,9
	.half	.L521-.L122
	.byte	3,3,1,5,30,9
	.half	.L520-.L521
	.byte	3,3,1,5,37,9
	.half	.L7-.L520
	.byte	3,3,1,5,46,9
	.half	.L693-.L7
	.byte	1,5,1,7,9
	.half	.L694-.L693
	.byte	3,2,1,7,9
	.half	.L207-.L694
	.byte	0,1,1
.L690:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_ranges'
.L206:
	.word	-1,.L122,0,.L207-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_info'
.L208:
	.word	576
	.half	3
	.word	.L209
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L211,.L210
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_clearSramStart',0,1,117,6,1,1,1
	.word	.L124,.L385,.L123
	.byte	4
	.byte	'mbistSel',0,1,117,44
	.word	.L364,.L386
	.byte	5
	.word	.L387
	.byte	6
	.byte	'mc',0,1,119,13
	.word	.L388,.L389
	.byte	7
	.byte	'__func__',0,1,129,1,9
	.word	.L390
	.byte	5,3
	.word	_999002___func__
	.byte	5
	.word	.L391
	.byte	6
	.byte	'item',0,1,130,1,32
	.word	.L392,.L393
	.byte	6
	.byte	'numBlocks',0,1,132,1,32
	.word	.L372,.L394
	.byte	8
	.word	.L10,.L18
	.byte	6
	.byte	'dataSize',0,1,135,1,32
	.word	.L378,.L395
	.byte	6
	.byte	'eccSize',0,1,136,1,32
	.word	.L372,.L396
	.byte	6
	.byte	'eccInvPos0',0,1,137,1,32
	.word	.L397,.L398
	.byte	6
	.byte	'eccInvPos1',0,1,138,1,32
	.word	.L397,.L399
	.byte	6
	.byte	'memSize',0,1,140,1,32
	.word	.L397,.L400
	.byte	6
	.byte	'bitPos',0,1,142,1,32
	.word	.L397,.L401
	.byte	6
	.byte	'wordIx',0,1,143,1,32
	.word	.L397,.L402
	.byte	6
	.byte	'data',0,1,144,1,32
	.word	.L378,.L403
	.byte	6
	.byte	'mem',0,1,146,1,32
	.word	.L397,.L404
	.byte	8
	.word	.L12,.L405
	.byte	6
	.byte	'i',0,1,150,1,20
	.word	.L397,.L406
	.byte	0,0,0,9
	.word	.L18,.L385
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_abbrev'
.L209:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,8,11,1,17,1,18,1,0,0,9,11,0,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_line'
.L210:
	.word	.L696-.L695
.L695:
	.half	3
	.word	.L698-.L697
.L697:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L698:
	.byte	5,6,7,0,5,2
	.word	.L124
	.byte	3,244,0,1,5,62,9
	.half	.L522-.L124
	.byte	3,2,1,5,29,9
	.half	.L524-.L522
	.byte	3,2,1,5,37,9
	.half	.L8-.L524
	.byte	3,3,1,5,46,9
	.half	.L699-.L8
	.byte	1,5,9,7,9
	.half	.L700-.L699
	.byte	3,5,1,5,80,9
	.half	.L9-.L700
	.byte	3,1,1,5,48,9
	.half	.L529-.L9
	.byte	3,2,1,5,9,9
	.half	.L528-.L529
	.byte	3,1,1,7,9
	.half	.L701-.L528
	.byte	1,5,49,9
	.half	.L10-.L701
	.byte	3,2,1,5,60,9
	.half	.L530-.L10
	.byte	3,2,1,5,49,9
	.half	.L702-.L530
	.byte	3,127,1,5,54,9
	.half	.L532-.L702
	.byte	3,1,1,5,60,3,1,1,5,54,9
	.half	.L534-.L532
	.byte	1,9
	.half	.L535-.L534
	.byte	3,2,1,5,43,9
	.half	.L531-.L535
	.byte	3,2,1,9
	.half	.L533-.L531
	.byte	3,1,1,9
	.half	.L536-.L533
	.byte	3,1,1,5,38,3,4,1,5,30,9
	.half	.L12-.L536
	.byte	3,15,1,5,20,9
	.half	.L703-.L12
	.byte	3,117,1,5,23,9
	.half	.L538-.L703
	.byte	3,11,1,5,36,9
	.half	.L704-.L538
	.byte	3,117,1,5,21,9
	.half	.L14-.L704
	.byte	3,2,1,5,45,7,9
	.half	.L705-.L14
	.byte	1,5,30,7,9
	.half	.L15-.L705
	.byte	3,2,1,5,32,9
	.half	.L706-.L15
	.byte	1,5,26,9
	.half	.L539-.L706
	.byte	1,5,17,9
	.half	.L16-.L539
	.byte	3,3,1,5,31,9
	.half	.L707-.L16
	.byte	3,2,1,5,17,9
	.half	.L708-.L707
	.byte	1,5,43,7,9
	.half	.L540-.L708
	.byte	3,3,1,3,127,1,9
	.half	.L541-.L540
	.byte	3,2,1,5,37,9
	.half	.L542-.L541
	.byte	3,126,1,5,38,9
	.half	.L17-.L542
	.byte	3,117,1,5,36,9
	.half	.L13-.L17
	.byte	1,5,40,7,9
	.half	.L405-.L13
	.byte	3,124,1,5,38,9
	.half	.L11-.L405
	.byte	1,5,9,7,9
	.half	.L543-.L11
	.byte	3,23,1,5,22,7,9
	.half	.L709-.L543
	.byte	3,2,1,5,33,9
	.half	.L544-.L709
	.byte	1,5,22,9
	.half	.L18-.L544
	.byte	3,6,1,5,20,1,5,70,9
	.half	.L537-.L18
	.byte	3,1,1,5,20,1,5,1,9
	.half	.L710-.L537
	.byte	3,1,1,7,9
	.half	.L212-.L710
	.byte	0,1,1
.L696:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_ranges'
.L211:
	.word	-1,.L124,0,.L212-.L124,0,0
.L387:
	.word	-1,.L124,0,.L385-.L124,-1,.L126,0,.L312-.L126,-1,.L128,0,.L352-.L128,0,0
.L391:
	.word	-1,.L124,.L9-.L124,.L18-.L124,-1,.L130,0,.L297-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_isMbistDone')
	.sect	'.debug_info'
.L213:
	.word	302
	.half	3
	.word	.L214
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L216,.L215
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_isMbistDone',0,1,161,2,9
	.word	.L372
	.byte	1,1,1
	.word	.L150,.L407,.L149
	.byte	4
	.byte	'mbistSel',0,1,161,2,44
	.word	.L364,.L408
	.byte	5
	.word	.L150,.L407
	.byte	6
	.byte	'mc',0,1,163,2,13
	.word	.L388,.L409
	.byte	6
	.byte	'status',0,1,164,2,13
	.word	.L378,.L410
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_isMbistDone')
	.sect	'.debug_abbrev'
.L214:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_isMbistDone')
	.sect	'.debug_line'
.L215:
	.word	.L712-.L711
.L711:
	.half	3
	.word	.L714-.L713
.L713:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L714:
	.byte	5,62,7,0,5,2
	.word	.L150
	.byte	3,162,2,1,5,25,9
	.half	.L565-.L150
	.byte	3,3,1,5,29,9
	.half	.L566-.L565
	.byte	3,1,1,5,1,3,1,1,7,9
	.half	.L217-.L566
	.byte	0,1,1
.L712:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_isMbistDone')
	.sect	'.debug_ranges'
.L216:
	.word	-1,.L150,0,.L217-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_info'
.L218:
	.word	307
	.half	3
	.word	.L219
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L221,.L220
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_readSramAddress',0,1,171,2,6,1,1,1
	.word	.L152,.L411,.L151
	.byte	4
	.byte	'mbistSel',0,1,171,2,45
	.word	.L364,.L412
	.byte	4
	.byte	'sramAddress',0,1,171,2,62
	.word	.L378,.L413
	.byte	5
	.word	.L152,.L411
	.byte	6
	.byte	'mc',0,1,173,2,13
	.word	.L388,.L414
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_abbrev'
.L219:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_line'
.L220:
	.word	.L716-.L715
.L715:
	.half	3
	.word	.L718-.L717
.L717:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L718:
	.byte	5,6,7,0,5,2
	.word	.L152
	.byte	3,170,2,1,5,62,9
	.half	.L567-.L152
	.byte	3,2,1,5,16,9
	.half	.L569-.L567
	.byte	1,5,35,9
	.half	.L572-.L569
	.byte	3,4,1,5,20,9
	.half	.L570-.L572
	.byte	1,5,56,9
	.half	.L719-.L570
	.byte	3,1,1,5,20,1,5,22,9
	.half	.L720-.L719
	.byte	3,1,1,5,20,1,5,22,9
	.half	.L721-.L720
	.byte	3,6,1,5,17,3,125,1,5,37,9
	.half	.L722-.L721
	.byte	3,7,1,5,20,3,124,1,5,29,9
	.half	.L568-.L722
	.byte	3,4,1,5,20,3,125,1,5,34,9
	.half	.L723-.L568
	.byte	3,3,1,5,37,1,5,41,9
	.half	.L571-.L723
	.byte	3,2,1,5,14,9
	.half	.L37-.L571
	.byte	3,2,1,5,32,9
	.half	.L36-.L37
	.byte	3,126,1,5,13,9
	.half	.L724-.L36
	.byte	1,5,1,7,9
	.half	.L725-.L724
	.byte	3,4,1,7,9
	.half	.L222-.L725
	.byte	0,1,1
.L716:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_ranges'
.L221:
	.word	-1,.L152,0,.L222-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_runCheckerBoardTest')
	.sect	'.debug_info'
.L223:
	.word	603
	.half	3
	.word	.L224
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L226,.L225
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_runCheckerBoardTest',0,1,198,2,7
	.word	.L372
	.byte	1,1,1
	.word	.L154,.L415,.L153
	.byte	4
	.byte	'mbistSel',0,1,198,2,50
	.word	.L364,.L416
	.byte	4
	.byte	'rangeSel',0,1,198,2,66
	.word	.L372,.L417
	.byte	4
	.byte	'rangeAddrUp',0,1,198,2,82
	.word	.L372,.L418
	.byte	4
	.byte	'rangeAddrLow',0,1,198,2,101
	.word	.L372,.L419
	.byte	4
	.byte	'errorAddr',0,1,198,2,123
	.word	.L420,.L421
	.byte	4
	.byte	'numberRedundancyLines',0,1,198,2,141,1
	.word	.L397,.L422
	.byte	5
	.word	.L423
	.byte	6
	.byte	'mc',0,1,203,2,13
	.word	.L388,.L424
	.byte	6
	.byte	'configCheckerBoardSequence',0,1,204,2,13
	.word	.L425,.L426
	.byte	6
	.byte	'password',0,1,210,2,13
	.word	.L378,.L427
	.byte	6
	.byte	'retVal',0,1,211,2,13
	.word	.L372,.L428
	.byte	6
	.byte	'testStep',0,1,212,2,13
	.word	.L372,.L429
	.byte	6
	.byte	'isEndInitEnabled',0,1,213,2,13
	.word	.L372,.L430
	.byte	7
	.byte	'__func__',0,1,247,2,9
	.word	.L431
	.byte	5,3
	.word	_999003___func__
	.byte	8
	.word	.L432,.L433,.L434
	.byte	9
	.word	.L435,.L433,.L434
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_runCheckerBoardTest')
	.sect	'.debug_abbrev'
.L224:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,8,29,1,49,16,17,1,18,1
	.byte	0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_runCheckerBoardTest')
	.sect	'.debug_line'
.L225:
	.word	.L727-.L726
.L726:
	.half	3
	.word	.L729-.L728
.L728:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0,0
.L729:
	.byte	5,7,7,0,5,2
	.word	.L154
	.byte	3,197,2,1,5,89,9
	.half	.L591-.L154
	.byte	3,5,1,5,45,9
	.half	.L582-.L591
	.byte	3,1,1,5,43,9
	.half	.L730-.L582
	.byte	1,5,30,9
	.half	.L731-.L730
	.byte	3,7,1,9
	.half	.L592-.L731
	.byte	3,2,1,5,51,3,1,1,5,14,9
	.half	.L581-.L592
	.byte	1,4,2,5,43,9
	.half	.L433-.L581
	.byte	3,245,0,1,4,1,5,5,9
	.half	.L434-.L433
	.byte	3,142,127,1,5,38,7,9
	.half	.L732-.L434
	.byte	3,3,1,5,26,9
	.half	.L584-.L732
	.byte	3,1,1,5,29,9
	.half	.L39-.L584
	.byte	3,4,1,5,37,9
	.half	.L40-.L39
	.byte	3,3,1,5,46,9
	.half	.L733-.L40
	.byte	1,5,29,7,9
	.half	.L734-.L733
	.byte	3,4,1,5,26,9
	.half	.L585-.L734
	.byte	3,5,1,5,49,9
	.half	.L735-.L585
	.byte	3,9,1,5,36,9
	.half	.L736-.L735
	.byte	3,117,1,5,52,9
	.half	.L41-.L736
	.byte	3,2,1,5,24,9
	.half	.L737-.L41
	.byte	1,5,78,9
	.half	.L738-.L737
	.byte	3,1,1,5,24,1,5,48,9
	.half	.L739-.L738
	.byte	3,1,1,5,24,9
	.half	.L740-.L739
	.byte	1,5,48,9
	.half	.L741-.L740
	.byte	3,1,1,5,24,9
	.half	.L742-.L741
	.byte	1,5,36,9
	.half	.L743-.L742
	.byte	3,3,1,5,75,9
	.half	.L588-.L743
	.byte	3,3,1,5,59,1,5,72,9
	.half	.L589-.L588
	.byte	1,5,75,1,5,9,9
	.half	.L590-.L589
	.byte	3,1,1,5,45,9
	.half	.L744-.L590
	.byte	3,2,1,5,18,9
	.half	.L48-.L744
	.byte	3,2,1,5,36,9
	.half	.L47-.L48
	.byte	3,126,1,5,17,9
	.half	.L745-.L47
	.byte	1,5,38,7,9
	.half	.L746-.L745
	.byte	3,6,1,5,26,9
	.half	.L594-.L746
	.byte	3,3,1,5,9,9
	.half	.L747-.L594
	.byte	1,5,27,7,9
	.half	.L748-.L747
	.byte	3,3,1,5,13,9
	.half	.L749-.L748
	.byte	1,5,28,7,9
	.half	.L750-.L749
	.byte	3,3,1,9
	.half	.L595-.L750
	.byte	3,1,1,5,41,3,127,1,5,28,9
	.half	.L751-.L595
	.byte	1,5,17,9
	.half	.L752-.L751
	.byte	3,2,1,5,38,9
	.half	.L49-.L752
	.byte	3,97,1,5,36,9
	.half	.L753-.L49
	.byte	1,5,30,7,9
	.half	.L51-.L753
	.byte	3,38,1,5,37,9
	.half	.L52-.L51
	.byte	3,2,1,5,46,9
	.half	.L754-.L52
	.byte	1,5,5,7,9
	.half	.L755-.L754
	.byte	3,3,1,5,36,7,9
	.half	.L756-.L755
	.byte	3,3,1,5,5,9
	.half	.L53-.L756
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L227-.L53
	.byte	0,1,1
.L727:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_runCheckerBoardTest')
	.sect	'.debug_ranges'
.L226:
	.word	-1,.L154,0,.L227-.L154,0,0
.L423:
	.word	-1,.L154,0,.L415-.L154,-1,.L156,0,.L337-.L156,-1,.L158,0,.L317-.L158,-1,.L160,0,.L357-.L160,-1,.L162,0
	.word	.L307-.L162,-1,.L164,0,.L302-.L164,-1,.L166,0,.L287-.L166,-1,.L168,0,.L282-.L168,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_runMarchUTest')
	.sect	'.debug_info'
.L228:
	.word	532
	.half	3
	.word	.L229
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L231,.L230
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_runMarchUTest',0,1,160,3,7
	.word	.L372
	.byte	1,1,1
	.word	.L170,.L436,.L169
	.byte	4
	.byte	'mbistSel',0,1,160,3,44
	.word	.L364,.L437
	.byte	4
	.byte	'rangeSel',0,1,160,3,60
	.word	.L372,.L438
	.byte	4
	.byte	'rangeAddrUp',0,1,160,3,76
	.word	.L372,.L439
	.byte	4
	.byte	'rangeAddrLow',0,1,160,3,95
	.word	.L372,.L440
	.byte	4
	.byte	'errorAddr',0,1,160,3,117
	.word	.L420,.L441
	.byte	5
	.word	.L170,.L436
	.byte	6
	.byte	'mc',0,1,165,3,13
	.word	.L388,.L442
	.byte	6
	.byte	'configMarchUSequence',0,1,166,3,13
	.word	.L443,.L444
	.byte	6
	.byte	'password',0,1,174,3,13
	.word	.L378,.L445
	.byte	6
	.byte	'retVal',0,1,175,3,13
	.word	.L372,.L446
	.byte	6
	.byte	'testStep',0,1,176,3,13
	.word	.L372,.L447
	.byte	6
	.byte	'isEndInitEnabled',0,1,177,3,13
	.word	.L372,.L448
	.byte	7
	.byte	'__func__',0,1,211,3,9
	.word	.L449
	.byte	5,3
	.word	_999004___func__
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_runMarchUTest')
	.sect	'.debug_abbrev'
.L229:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_runMarchUTest')
	.sect	'.debug_line'
.L230:
	.word	.L758-.L757
.L757:
	.half	3
	.word	.L760-.L759
.L759:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0,0
.L760:
	.byte	5,7,7,0,5,2
	.word	.L170
	.byte	3,159,3,1,5,83,9
	.half	.L609-.L170
	.byte	3,5,1,5,39,9
	.half	.L600-.L609
	.byte	3,1,1,5,37,9
	.half	.L761-.L600
	.byte	1,5,30,9
	.half	.L762-.L761
	.byte	3,9,1,9
	.half	.L610-.L762
	.byte	3,2,1,5,51,3,1,1,5,14,9
	.half	.L599-.L610
	.byte	1,4,2,5,43,3,25,1,4,1,5,5,9
	.half	.L763-.L599
	.byte	3,106,1,5,38,7,9
	.half	.L764-.L763
	.byte	3,3,1,5,26,9
	.half	.L601-.L764
	.byte	3,1,1,5,29,9
	.half	.L56-.L601
	.byte	3,4,1,5,37,9
	.half	.L57-.L56
	.byte	3,3,1,5,46,9
	.half	.L765-.L57
	.byte	1,5,29,7,9
	.half	.L766-.L765
	.byte	3,4,1,5,32,9
	.half	.L603-.L766
	.byte	3,5,1,5,49,9
	.half	.L767-.L603
	.byte	3,9,1,5,36,9
	.half	.L768-.L767
	.byte	3,117,1,9
	.half	.L58-.L768
	.byte	3,8,1,5,52,9
	.half	.L605-.L58
	.byte	3,122,1,5,30,9
	.half	.L769-.L605
	.byte	1,5,78,9
	.half	.L770-.L769
	.byte	3,1,1,5,30,1,5,32,9
	.half	.L771-.L770
	.byte	3,1,1,5,30,1,5,23,9
	.half	.L772-.L771
	.byte	3,1,1,5,30,9
	.half	.L773-.L772
	.byte	1,5,36,9
	.half	.L774-.L773
	.byte	3,3,1,5,75,9
	.half	.L606-.L774
	.byte	3,3,1,5,59,1,5,72,9
	.half	.L607-.L606
	.byte	1,5,75,1,5,9,9
	.half	.L608-.L607
	.byte	3,1,1,5,45,9
	.half	.L775-.L608
	.byte	3,2,1,5,18,9
	.half	.L61-.L775
	.byte	3,2,1,5,36,9
	.half	.L60-.L61
	.byte	3,126,1,5,17,9
	.half	.L776-.L60
	.byte	1,5,38,7,9
	.half	.L777-.L776
	.byte	3,6,1,5,26,9
	.half	.L778-.L777
	.byte	3,3,1,5,9,9
	.half	.L779-.L778
	.byte	1,5,27,7,9
	.half	.L780-.L779
	.byte	3,3,1,5,13,9
	.half	.L781-.L780
	.byte	1,5,28,7,9
	.half	.L782-.L781
	.byte	3,3,1,9
	.half	.L611-.L782
	.byte	3,1,1,5,41,3,127,1,5,28,9
	.half	.L783-.L611
	.byte	1,5,17,9
	.half	.L784-.L783
	.byte	3,2,1,5,38,9
	.half	.L62-.L784
	.byte	3,97,1,5,36,9
	.half	.L785-.L62
	.byte	1,5,30,7,9
	.half	.L64-.L785
	.byte	3,37,1,5,37,9
	.half	.L65-.L64
	.byte	3,3,1,5,46,9
	.half	.L786-.L65
	.byte	1,5,5,7,9
	.half	.L787-.L786
	.byte	3,4,1,5,36,7,9
	.half	.L788-.L787
	.byte	3,3,1,5,5,9
	.half	.L66-.L788
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L232-.L66
	.byte	0,1,1
.L758:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_runMarchUTest')
	.sect	'.debug_ranges'
.L231:
	.word	-1,.L170,0,.L232-.L170,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_info'
.L233:
	.word	517
	.half	3
	.word	.L234
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L236,.L235
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_runNonDestructiveInversionTest',0,1,253,3,7
	.word	.L372
	.byte	1,1,1
	.word	.L172,.L450,.L171
	.byte	4
	.byte	'mbistSel',0,1,253,3,61
	.word	.L364,.L451
	.byte	4
	.byte	'rangeSel',0,1,253,3,77
	.word	.L372,.L452
	.byte	4
	.byte	'rangeAddrUp',0,1,253,3,93
	.word	.L372,.L453
	.byte	4
	.byte	'rangeAddrLow',0,1,253,3,112
	.word	.L372,.L454
	.byte	4
	.byte	'errorAddr',0,1,253,3,134,1
	.word	.L420,.L455
	.byte	5
	.word	.L456
	.byte	6
	.byte	'mc',0,1,130,4,13
	.word	.L388,.L457
	.byte	6
	.byte	'password',0,1,131,4,13
	.word	.L378,.L458
	.byte	6
	.byte	'retVal',0,1,132,4,13
	.word	.L372,.L459
	.byte	6
	.byte	'isEndInitEnabled',0,1,133,4,13
	.word	.L372,.L460
	.byte	7
	.byte	'__func__',0,1,164,4,5
	.word	.L461
	.byte	5,3
	.word	_999005___func__
	.byte	8
	.word	.L432,.L462,.L463
	.byte	9
	.word	.L435,.L462,.L463
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_abbrev'
.L234:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,8,29,1,49,16,17,1,18,1
	.byte	0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_line'
.L235:
	.word	.L790-.L789
.L789:
	.half	3
	.word	.L792-.L791
.L791:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0,0
.L792:
	.byte	5,7,7,0,5,2
	.word	.L172
	.byte	3,252,3,1,5,76,9
	.half	.L614-.L172
	.byte	3,5,1,5,30,9
	.half	.L617-.L614
	.byte	1,9
	.half	.L618-.L617
	.byte	3,2,1,9
	.half	.L619-.L618
	.byte	3,1,1,5,51,3,1,1,5,14,9
	.half	.L613-.L619
	.byte	1,4,2,5,43,3,69,1,4,1,5,5,9
	.half	.L463-.L613
	.byte	3,62,1,5,38,7,9
	.half	.L793-.L463
	.byte	3,3,1,5,26,9
	.half	.L620-.L793
	.byte	3,1,1,5,29,9
	.half	.L68-.L620
	.byte	3,4,1,5,37,9
	.half	.L69-.L68
	.byte	3,3,1,5,46,9
	.half	.L794-.L69
	.byte	1,5,28,7,9
	.half	.L795-.L794
	.byte	3,4,1,5,26,1,5,28,9
	.half	.L796-.L795
	.byte	3,1,1,5,26,1,5,38,9
	.half	.L615-.L796
	.byte	3,2,1,5,28,9
	.half	.L625-.L615
	.byte	3,2,1,5,26,3,126,1,9
	.half	.L797-.L625
	.byte	3,2,1,5,32,9
	.half	.L798-.L797
	.byte	3,3,1,5,19,9
	.half	.L621-.L798
	.byte	3,126,1,5,26,9
	.half	.L799-.L621
	.byte	1,5,32,9
	.half	.L800-.L799
	.byte	3,2,1,5,45,9
	.half	.L801-.L800
	.byte	3,3,1,5,71,9
	.half	.L802-.L801
	.byte	1,5,55,9
	.half	.L623-.L802
	.byte	1,5,68,9
	.half	.L803-.L623
	.byte	1,5,71,1,5,5,9
	.half	.L624-.L803
	.byte	3,1,1,5,41,9
	.half	.L804-.L624
	.byte	3,2,1,5,14,9
	.half	.L72-.L804
	.byte	3,2,1,5,32,9
	.half	.L71-.L72
	.byte	3,126,1,5,13,9
	.half	.L805-.L71
	.byte	1,5,34,7,9
	.half	.L806-.L805
	.byte	3,6,1,5,22,9
	.half	.L807-.L806
	.byte	3,3,1,5,5,9
	.half	.L808-.L807
	.byte	1,5,23,7,9
	.half	.L809-.L808
	.byte	3,3,1,5,9,9
	.half	.L810-.L809
	.byte	1,5,24,7,9
	.half	.L811-.L810
	.byte	3,4,1,5,37,3,127,1,5,24,9
	.half	.L812-.L811
	.byte	1,5,30,9
	.half	.L73-.L812
	.byte	3,6,1,5,37,9
	.half	.L75-.L73
	.byte	3,3,1,5,46,9
	.half	.L813-.L75
	.byte	1,5,5,7,9
	.half	.L814-.L813
	.byte	3,4,1,5,36,7,9
	.half	.L815-.L814
	.byte	3,3,1,5,5,9
	.half	.L76-.L815
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L237-.L76
	.byte	0,1,1
.L790:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_ranges'
.L236:
	.word	-1,.L172,0,.L237-.L172,0,0
.L456:
	.word	-1,.L172,0,.L450-.L172,-1,.L174,0,.L342-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_info'
.L238:
	.word	420
	.half	3
	.word	.L239
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L241,.L240
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_writeSramAddress',0,1,137,5,6,1,1,1
	.word	.L178,.L464,.L177
	.byte	4
	.byte	'mbistSel',0,1,137,5,46
	.word	.L364,.L465
	.byte	4
	.byte	'sramAddress',0,1,137,5,63
	.word	.L378,.L466
	.byte	5
	.word	.L178,.L464
	.byte	6
	.byte	'mc',0,1,139,5,13
	.word	.L388,.L467
	.byte	6
	.byte	'isEndInitEnabled',0,1,140,5,13
	.word	.L372,.L468
	.byte	6
	.byte	'password',0,1,141,5,13
	.word	.L378,.L469
	.byte	7
	.byte	'__func__',0,1,173,5,5
	.word	.L470
	.byte	5,3
	.word	_999006___func__
	.byte	8
	.word	.L432,.L471,.L472
	.byte	9
	.word	.L435,.L471,.L472
	.byte	0,10
	.word	.L102,.L464
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_abbrev'
.L239:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,8,29,1,49,16,17,1,18,1,0
	.byte	0,9,11,0,49,16,17,1,18,1,0,0,10,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_line'
.L240:
	.word	.L817-.L816
.L816:
	.half	3
	.word	.L819-.L818
.L818:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0,0
.L819:
	.byte	5,6,7,0,5,2
	.word	.L178
	.byte	3,136,5,1,5,43,3,2,1,5,30,9
	.half	.L820-.L178
	.byte	3,1,1,5,6,3,125,1,5,76,9
	.half	.L634-.L820
	.byte	3,2,1,5,66,9
	.half	.L636-.L634
	.byte	1,5,30,9
	.half	.L821-.L636
	.byte	1,5,51,9
	.half	.L637-.L821
	.byte	3,3,1,5,14,9
	.half	.L635-.L637
	.byte	1,4,2,5,43,3,189,126,1,4,1,5,5,9
	.half	.L472-.L635
	.byte	3,198,1,1,5,38,7,9
	.half	.L822-.L472
	.byte	3,3,1,5,26,9
	.half	.L638-.L822
	.byte	3,1,1,5,35,9
	.half	.L102-.L638
	.byte	3,5,1,5,20,1,5,56,9
	.half	.L823-.L102
	.byte	3,1,1,5,20,1,5,22,9
	.half	.L824-.L823
	.byte	3,1,1,5,20,1,5,17,9
	.half	.L639-.L824
	.byte	3,3,1,5,22,9
	.half	.L640-.L639
	.byte	3,3,1,5,20,1,9
	.half	.L825-.L640
	.byte	3,1,1,5,5,9
	.half	.L826-.L825
	.byte	3,2,1,5,36,7,9
	.half	.L641-.L826
	.byte	3,3,1,5,45,9
	.half	.L103-.L641
	.byte	3,4,1,5,71,9
	.half	.L644-.L103
	.byte	1,5,55,9
	.half	.L645-.L644
	.byte	1,5,68,9
	.half	.L827-.L645
	.byte	1,5,71,1,5,5,9
	.half	.L646-.L827
	.byte	3,1,1,5,41,9
	.half	.L828-.L646
	.byte	3,2,1,5,14,9
	.half	.L106-.L828
	.byte	3,2,1,5,32,9
	.half	.L105-.L106
	.byte	3,126,1,5,13,9
	.half	.L648-.L105
	.byte	1,5,1,7,9
	.half	.L829-.L648
	.byte	3,4,1,7,9
	.half	.L242-.L829
	.byte	0,1,1
.L817:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_ranges'
.L241:
	.word	-1,.L178,0,.L242-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_info'
.L243:
	.word	278
	.half	3
	.word	.L244
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L246,.L245
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_clearErrorTracking',0,1,53,6,1,1,1
	.word	.L108,.L473,.L107
	.byte	4
	.byte	'mbistSel',0,1,53,48
	.word	.L364,.L474
	.byte	5
	.word	.L475
	.byte	6
	.byte	'mc',0,1,55,13
	.word	.L388,.L476
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_abbrev'
.L244:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_line'
.L245:
	.word	.L831-.L830
.L830:
	.half	3
	.word	.L833-.L832
.L832:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L833:
	.byte	5,62,7,0,5,2
	.word	.L108
	.byte	3,54,1,5,16,9
	.half	.L511-.L108
	.byte	3,1,1,5,1,9
	.half	.L834-.L511
	.byte	3,1,1,7,9
	.half	.L247-.L834
	.byte	0,1,1
.L831:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_ranges'
.L246:
	.word	-1,.L108,0,.L247-.L108,0,0
.L475:
	.word	-1,.L108,0,.L473-.L108,-1,.L110,0,.L322-.L110,-1,.L112,0,.L347-.L112,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_info'
.L248:
	.word	306
	.half	3
	.word	.L249
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L251,.L250
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_enableErrorTracking',0,1,192,1,6,1,1,1
	.word	.L136,.L477,.L135
	.byte	4
	.byte	'mbistSel',0,1,192,1,49
	.word	.L364,.L478
	.byte	4
	.byte	'enable',0,1,192,1,67
	.word	.L372,.L479
	.byte	5
	.word	.L136,.L477
	.byte	6
	.byte	'mc',0,1,194,1,13
	.word	.L388,.L480
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_abbrev'
.L249:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_line'
.L250:
	.word	.L836-.L835
.L835:
	.half	3
	.word	.L838-.L837
.L837:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L838:
	.byte	5,62,7,0,5,2
	.word	.L136
	.byte	3,193,1,1,5,5,9
	.half	.L549-.L136
	.byte	3,2,1,5,17,7,9
	.half	.L839-.L549
	.byte	3,2,1,5,23,9
	.half	.L550-.L839
	.byte	1,5,20,9
	.half	.L840-.L550
	.byte	1,5,50,1,5,17,9
	.half	.L19-.L840
	.byte	3,4,1,5,20,9
	.half	.L551-.L19
	.byte	1,5,1,9
	.half	.L841-.L551
	.byte	3,2,1,7,9
	.half	.L252-.L841
	.byte	0,1,1
.L836:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_ranges'
.L251:
	.word	-1,.L136,0,.L252-.L136,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_info'
.L253:
	.word	372
	.half	3
	.word	.L254
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L256,.L255
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_getSystemAddress',0,1,215,1,8
	.word	.L397
	.byte	1,1,1
	.word	.L140,.L481,.L139
	.byte	4
	.byte	'mbistSel',0,1,215,1,48
	.word	.L364,.L482
	.byte	4
	.byte	'trackedSramAddress',0,1,215,1,70
	.word	.L483,.L484
	.byte	5
	.word	.L140,.L481
	.byte	6
	.byte	'sramAddress',0,1,217,1,12
	.word	.L397,.L485
	.byte	6
	.byte	'mbi',0,1,218,1,12
	.word	.L397,.L486
	.byte	6
	.byte	'systemAddress',0,1,219,1,12
	.word	.L397,.L487
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_abbrev'
.L254:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_line'
.L255:
	.word	.L843-.L842
.L842:
	.half	3
	.word	.L845-.L844
.L844:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L845:
	.byte	5,48,7,0,5,2
	.word	.L140
	.byte	3,216,1,1,9
	.half	.L554-.L140
	.byte	3,1,1,5,10,9
	.half	.L556-.L554
	.byte	3,9,1,9
	.half	.L846-.L556
	.byte	3,124,1,9
	.half	.L847-.L846
	.byte	3,8,1,5,52,9
	.half	.L22-.L847
	.byte	3,121,1,5,66,9
	.half	.L555-.L22
	.byte	1,5,71,9
	.half	.L848-.L555
	.byte	1,5,58,9
	.half	.L849-.L848
	.byte	1,5,25,9
	.half	.L850-.L849
	.byte	1,5,9,3,1,1,5,52,9
	.half	.L21-.L850
	.byte	3,3,1,5,66,9
	.half	.L557-.L21
	.byte	1,5,71,9
	.half	.L851-.L557
	.byte	1,5,58,9
	.half	.L852-.L851
	.byte	1,5,36,9
	.half	.L853-.L852
	.byte	1,5,1,3,12,1,5,51,7,9
	.half	.L23-.L853
	.byte	3,120,1,5,25,9
	.half	.L558-.L23
	.byte	1,5,36,9
	.half	.L25-.L558
	.byte	1,5,1,3,8,1,5,23,7,9
	.half	.L24-.L25
	.byte	3,124,1,5,1,3,4,1,7,9
	.half	.L257-.L24
	.byte	0,1,1
.L843:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_ranges'
.L256:
	.word	-1,.L140,0,.L257-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_info'
.L258:
	.word	400
	.half	3
	.word	.L259
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L261,.L260
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_getTrackedSramAddresses',0,1,243,1,7
	.word	.L372
	.byte	1,1,1
	.word	.L142,.L488,.L141
	.byte	4
	.byte	'mbistSel',0,1,243,1,54
	.word	.L364,.L489
	.byte	4
	.byte	'trackedSramAddresses',0,1,243,1,77
	.word	.L490,.L491
	.byte	5
	.word	.L142,.L488
	.byte	6
	.byte	'mc',0,1,245,1,13
	.word	.L388,.L492
	.byte	6
	.byte	'validFlags',0,1,246,1,13
	.word	.L372,.L493
	.byte	6
	.byte	'numTrackedAddresses',0,1,247,1,13
	.word	.L372,.L494
	.byte	6
	.byte	'i',0,1,248,1,13
	.word	.L495,.L496
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_abbrev'
.L259:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_line'
.L260:
	.word	.L855-.L854
.L854:
	.half	3
	.word	.L857-.L856
.L856:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L857:
	.byte	5,79,7,0,5,2
	.word	.L142
	.byte	3,244,1,1,5,33,9
	.half	.L559-.L142
	.byte	3,2,1,5,61,3,11,1,5,47,9
	.half	.L560-.L559
	.byte	3,116,1,5,49,3,8,1,5,71,9
	.half	.L562-.L560
	.byte	3,120,1,5,12,9
	.half	.L858-.L562
	.byte	3,8,1,5,27,9
	.half	.L29-.L858
	.byte	3,2,1,5,29,9
	.half	.L859-.L29
	.byte	1,5,24,9
	.half	.L860-.L859
	.byte	1,5,9,9
	.half	.L861-.L860
	.byte	1,5,33,7,9
	.half	.L862-.L861
	.byte	3,2,1,5,13,9
	.half	.L863-.L862
	.byte	3,1,1,5,70,3,127,1,5,13,9
	.half	.L561-.L863
	.byte	3,1,1,5,57,3,127,1,5,51,9
	.half	.L30-.L561
	.byte	3,124,1,5,49,1,5,1,7,9
	.half	.L864-.L30
	.byte	3,10,1,7,9
	.half	.L262-.L864
	.byte	0,1,1
.L855:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_ranges'
.L261:
	.word	-1,.L142,0,.L262-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_isErrorTrackingEnabled')
	.sect	'.debug_info'
.L263:
	.word	276
	.half	3
	.word	.L264
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L266,.L265
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_isErrorTrackingEnabled',0,1,147,2,9
	.word	.L372
	.byte	1,1,1
	.word	.L146,.L497,.L145
	.byte	4
	.byte	'mbistSel',0,1,147,2,55
	.word	.L364,.L498
	.byte	5
	.word	.L146,.L497
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_isErrorTrackingEnabled')
	.sect	'.debug_abbrev'
.L264:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_isErrorTrackingEnabled')
	.sect	'.debug_line'
.L265:
	.word	.L866-.L865
.L865:
	.half	3
	.word	.L868-.L867
.L867:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L868:
	.byte	5,62,7,0,5,2
	.word	.L146
	.byte	3,148,2,1,5,14,9
	.half	.L869-.L146
	.byte	3,1,1,5,22,9
	.half	.L870-.L869
	.byte	1,5,12,9
	.half	.L871-.L870
	.byte	1,5,1,3,1,1,7,9
	.half	.L267-.L871
	.byte	0,1,1
.L866:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_isErrorTrackingEnabled')
	.sect	'.debug_ranges'
.L266:
	.word	-1,.L146,0,.L267-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_isErrorTrackingOverflow')
	.sect	'.debug_info'
.L268:
	.word	277
	.half	3
	.word	.L269
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L271,.L270
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_isErrorTrackingOverflow',0,1,154,2,9
	.word	.L372
	.byte	1,1,1
	.word	.L148,.L499,.L147
	.byte	4
	.byte	'mbistSel',0,1,154,2,56
	.word	.L364,.L500
	.byte	5
	.word	.L148,.L499
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_isErrorTrackingOverflow')
	.sect	'.debug_abbrev'
.L269:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_isErrorTrackingOverflow')
	.sect	'.debug_line'
.L270:
	.word	.L873-.L872
.L872:
	.half	3
	.word	.L875-.L874
.L874:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L875:
	.byte	5,62,7,0,5,2
	.word	.L148
	.byte	3,155,2,1,5,14,9
	.half	.L876-.L148
	.byte	3,1,1,5,22,9
	.half	.L877-.L876
	.byte	1,5,12,9
	.half	.L878-.L877
	.byte	1,5,1,3,1,1,7,9
	.half	.L272-.L878
	.byte	0,1,1
.L873:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_isErrorTrackingOverflow')
	.sect	'.debug_ranges'
.L271:
	.word	-1,.L148,0,.L272-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_info'
.L273:
	.word	363
	.half	3
	.word	.L274
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L276,.L275
	.byte	2
	.word	.L179
	.byte	3
	.byte	'IfxMtu_waitForMbistDone',0,1,204,4,13,1,1
	.word	.L176,.L501,.L175
	.byte	4
	.byte	'towerDepth',0,1,204,4,44
	.word	.L397,.L502
	.byte	4
	.byte	'numInstructions',0,1,204,4,62
	.word	.L372,.L503
	.byte	4
	.byte	'mbistSel',0,1,204,4,95
	.word	.L364,.L504
	.byte	5
	.word	.L176,.L501
	.byte	6
	.byte	'waitFact',0,1,206,4,21
	.word	.L397,.L505
	.byte	6
	.byte	'waitTime',0,1,207,4,21
	.word	.L506,.L507
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_abbrev'
.L274:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_line'
.L275:
	.word	.L880-.L879
.L879:
	.half	3
	.word	.L882-.L881
.L881:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L882:
	.byte	5,46,7,0,5,2
	.word	.L176
	.byte	3,205,4,1,5,13,9
	.half	.L883-.L176
	.byte	3,126,1,5,46,9
	.half	.L626-.L883
	.byte	3,2,1,5,69,1,5,54,9
	.half	.L884-.L626
	.byte	1,5,10,9
	.half	.L885-.L884
	.byte	3,5,1,5,78,9
	.half	.L628-.L885
	.byte	3,123,1,5,10,9
	.half	.L629-.L628
	.byte	3,5,1,7,9
	.half	.L886-.L629
	.byte	3,9,1,9
	.half	.L887-.L886
	.byte	3,1,1,9
	.half	.L888-.L887
	.byte	3,4,1,9
	.half	.L889-.L888
	.byte	3,4,1,9
	.half	.L890-.L889
	.byte	3,1,1,9
	.half	.L891-.L890
	.byte	3,1,1,9
	.half	.L892-.L891
	.byte	3,1,1,9
	.half	.L893-.L892
	.byte	3,1,1,9
	.half	.L894-.L893
	.byte	3,1,1,9
	.half	.L895-.L894
	.byte	3,1,1,9
	.half	.L896-.L895
	.byte	3,1,1,9
	.half	.L897-.L896
	.byte	3,1,1,9
	.half	.L898-.L897
	.byte	3,1,1,9
	.half	.L899-.L898
	.byte	3,1,1,9
	.half	.L900-.L899
	.byte	3,1,1,5,44,9
	.half	.L78-.L900
	.byte	3,100,1,5,9,9
	.half	.L901-.L78
	.byte	3,1,1,5,46,9
	.half	.L81-.L901
	.byte	3,13,1,5,49,9
	.half	.L627-.L81
	.byte	1,5,80,1,5,49,9
	.half	.L902-.L627
	.byte	1,5,86,9
	.half	.L630-.L902
	.byte	1,5,84,9
	.half	.L631-.L630
	.byte	1,5,9,9
	.half	.L903-.L631
	.byte	3,1,1,5,44,9
	.half	.L82-.L903
	.byte	3,14,1,5,29,9
	.half	.L95-.L82
	.byte	1,5,5,9
	.half	.L94-.L95
	.byte	3,6,1,5,22,7,9
	.half	.L633-.L94
	.byte	3,6,1,5,52,9
	.half	.L99-.L633
	.byte	1,5,50,9
	.half	.L904-.L99
	.byte	1,5,18,1,5,16,9
	.half	.L905-.L904
	.byte	3,3,1,5,27,9
	.half	.L906-.L905
	.byte	1,5,25,9
	.half	.L632-.L906
	.byte	1,5,14,1,5,22,9
	.half	.L907-.L632
	.byte	3,2,1,5,14,9
	.half	.L101-.L907
	.byte	3,2,1,5,12,9
	.half	.L100-.L101
	.byte	3,126,1,5,20,9
	.half	.L908-.L100
	.byte	1,5,22,9
	.half	.L909-.L908
	.byte	1,5,1,7,9
	.half	.L910-.L909
	.byte	3,4,1,7,9
	.half	.L277-.L910
	.byte	0,1,1
.L880:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_ranges'
.L276:
	.word	-1,.L176,0,.L277-.L176,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_13')
	.sect	'.debug_info'
.L278:
	.word	220
	.half	3
	.word	.L279
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L281,.L280
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_13',0,1,198,2,7,1
	.word	.L168,.L282,.L167
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_13')
	.sect	'.debug_abbrev'
.L279:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_13')
	.sect	'.debug_line'
.L280:
	.word	.L912-.L911
.L911:
	.half	3
	.word	.L914-.L913
.L913:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L914:
	.byte	5,9,7,0,5,2
	.word	.L168
	.byte	3,246,2,1,9
	.half	.L282-.L168
	.byte	0,1,1,5,5,0,5,2
	.word	.L168
	.byte	3,210,0,1,5,9,9
	.half	.L915-.L168
	.byte	3,164,2,1,7,9
	.half	.L282-.L915
	.byte	0,1,1,5,9,0,5,2
	.word	.L168
	.byte	3,128,1,1,9
	.half	.L915-.L168
	.byte	3,246,1,1,7,9
	.half	.L282-.L915
	.byte	0,1,1,5,9,0,5,2
	.word	.L168
	.byte	3,132,1,1,9
	.half	.L915-.L168
	.byte	3,242,1,1,7,9
	.half	.L282-.L915
	.byte	0,1,1,5,9,0,5,2
	.word	.L168
	.byte	3,210,3,1,9
	.half	.L915-.L168
	.byte	3,164,127,1,7,9
	.half	.L282-.L915
	.byte	0,1,1,5,5,0,5,2
	.word	.L168
	.byte	3,163,4,1,5,9,9
	.half	.L915-.L168
	.byte	3,211,126,1,7,9
	.half	.L282-.L915
	.byte	0,1,1,5,5,0,5,2
	.word	.L168
	.byte	3,172,5,1,5,9,9
	.half	.L915-.L168
	.byte	3,202,125,1,7,9
	.half	.L282-.L915
	.byte	0,1,1
.L912:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_13')
	.sect	'.debug_ranges'
.L281:
	.word	-1,.L168,0,.L282-.L168,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_14')
	.sect	'.debug_info'
.L283:
	.word	220
	.half	3
	.word	.L284
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L286,.L285
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_14',0,1,198,2,7,1
	.word	.L166,.L287,.L165
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_14')
	.sect	'.debug_abbrev'
.L284:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_14')
	.sect	'.debug_line'
.L285:
	.word	.L917-.L916
.L916:
	.half	3
	.word	.L919-.L918
.L918:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L919:
	.byte	5,9,7,0,5,2
	.word	.L166
	.byte	3,246,2,1,9
	.half	.L287-.L166
	.byte	0,1,1,5,5,0,5,2
	.word	.L166
	.byte	3,210,0,1,5,9,9
	.half	.L920-.L166
	.byte	3,164,2,1,7,9
	.half	.L287-.L920
	.byte	0,1,1,5,9,0,5,2
	.word	.L166
	.byte	3,128,1,1,9
	.half	.L920-.L166
	.byte	3,246,1,1,7,9
	.half	.L287-.L920
	.byte	0,1,1,5,9,0,5,2
	.word	.L166
	.byte	3,132,1,1,9
	.half	.L920-.L166
	.byte	3,242,1,1,7,9
	.half	.L287-.L920
	.byte	0,1,1,5,9,0,5,2
	.word	.L166
	.byte	3,210,3,1,9
	.half	.L920-.L166
	.byte	3,164,127,1,7,9
	.half	.L287-.L920
	.byte	0,1,1,5,5,0,5,2
	.word	.L166
	.byte	3,163,4,1,5,9,9
	.half	.L920-.L166
	.byte	3,211,126,1,7,9
	.half	.L287-.L920
	.byte	0,1,1,5,5,0,5,2
	.word	.L166
	.byte	3,172,5,1,5,9,9
	.half	.L920-.L166
	.byte	3,202,125,1,7,9
	.half	.L287-.L920
	.byte	0,1,1
.L917:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_14')
	.sect	'.debug_ranges'
.L286:
	.word	-1,.L166,0,.L287-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_15')
	.sect	'.debug_info'
.L288:
	.word	220
	.half	3
	.word	.L289
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L291,.L290
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_15',0,1,184,1,6,1
	.word	.L134,.L292,.L133
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_15')
	.sect	'.debug_abbrev'
.L289:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_15')
	.sect	'.debug_line'
.L290:
	.word	.L922-.L921
.L921:
	.half	3
	.word	.L924-.L923
.L923:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L924:
	.byte	5,81,7,0,5,2
	.word	.L134
	.byte	3,185,1,1,5,33,9
	.half	.L925-.L134
	.byte	1,5,50,9
	.half	.L547-.L925
	.byte	3,1,1,5,6,9
	.half	.L546-.L547
	.byte	3,1,1,5,35,9
	.half	.L926-.L546
	.byte	3,127,1,5,37,9
	.half	.L927-.L926
	.byte	1,9
	.half	.L292-.L927
	.byte	0,1,1,5,81,0,5,2
	.word	.L134
	.byte	3,208,1,1,5,33,9
	.half	.L925-.L134
	.byte	1,5,50,9
	.half	.L547-.L925
	.byte	3,1,1,5,6,9
	.half	.L546-.L547
	.byte	3,1,1,5,35,9
	.half	.L926-.L546
	.byte	3,127,1,5,37,9
	.half	.L927-.L926
	.byte	1,3,105,1,7,9
	.half	.L292-.L927
	.byte	0,1,1,5,81,0,5,2
	.word	.L134
	.byte	3,140,2,1,5,35,9
	.half	.L925-.L134
	.byte	1,5,50,9
	.half	.L547-.L925
	.byte	3,1,1,5,13,9
	.half	.L546-.L547
	.byte	3,1,1,5,35,9
	.half	.L926-.L546
	.byte	3,127,1,5,37,9
	.half	.L927-.L926
	.byte	1,3,173,127,1,7,9
	.half	.L292-.L927
	.byte	0,1,1
.L922:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_15')
	.sect	'.debug_ranges'
.L291:
	.word	-1,.L134,0,.L292-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_16')
	.sect	'.debug_info'
.L293:
	.word	219
	.half	3
	.word	.L294
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L296,.L295
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_16',0,1,117,6,1
	.word	.L130,.L297,.L129
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_16')
	.sect	'.debug_abbrev'
.L294:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_16')
	.sect	'.debug_line'
.L295:
	.word	.L929-.L928
.L928:
	.half	3
	.word	.L931-.L930
.L930:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L931:
	.byte	5,80,7,0,5,2
	.word	.L130
	.byte	3,129,1,1,9
	.half	.L297-.L130
	.byte	0,1,1,5,80,0,5,2
	.word	.L130
	.byte	3,129,1,1,5,49,9
	.half	.L526-.L130
	.byte	3,244,1,1,5,80,9
	.half	.L527-.L526
	.byte	3,140,126,1,7,9
	.half	.L297-.L527
	.byte	0,1,1,5,80,0,5,2
	.word	.L130
	.byte	3,129,1,1,5,49,9
	.half	.L526-.L130
	.byte	3,208,2,1,5,80,9
	.half	.L527-.L526
	.byte	3,176,125,1,7,9
	.half	.L297-.L527
	.byte	0,1,1
.L929:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_16')
	.sect	'.debug_ranges'
.L296:
	.word	-1,.L130,0,.L297-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_17')
	.sect	'.debug_info'
.L298:
	.word	220
	.half	3
	.word	.L299
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L301,.L300
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_17',0,1,198,2,7,1
	.word	.L164,.L302,.L163
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_17')
	.sect	'.debug_abbrev'
.L299:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_17')
	.sect	'.debug_line'
.L300:
	.word	.L933-.L932
.L932:
	.half	3
	.word	.L935-.L934
.L934:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L935:
	.byte	5,9,7,0,5,2
	.word	.L164
	.byte	3,246,2,1,9
	.half	.L302-.L164
	.byte	0,1,1,5,5,0,5,2
	.word	.L164
	.byte	3,210,0,1,5,9,9
	.half	.L936-.L164
	.byte	3,164,2,1,7,9
	.half	.L302-.L936
	.byte	0,1,1,5,9,0,5,2
	.word	.L164
	.byte	3,210,3,1,9
	.half	.L936-.L164
	.byte	3,164,127,1,7,9
	.half	.L302-.L936
	.byte	0,1,1,5,5,0,5,2
	.word	.L164
	.byte	3,163,4,1,5,9,9
	.half	.L936-.L164
	.byte	3,211,126,1,7,9
	.half	.L302-.L936
	.byte	0,1,1,5,5,0,5,2
	.word	.L164
	.byte	3,172,5,1,5,9,9
	.half	.L936-.L164
	.byte	3,202,125,1,7,9
	.half	.L302-.L936
	.byte	0,1,1
.L933:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_17')
	.sect	'.debug_ranges'
.L301:
	.word	-1,.L164,0,.L302-.L164,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_18')
	.sect	'.debug_info'
.L303:
	.word	220
	.half	3
	.word	.L304
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L306,.L305
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_18',0,1,198,2,7,1
	.word	.L162,.L307,.L161
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_18')
	.sect	'.debug_abbrev'
.L304:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_18')
	.sect	'.debug_line'
.L305:
	.word	.L938-.L937
.L937:
	.half	3
	.word	.L940-.L939
.L939:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L940:
	.byte	5,9,7,0,5,2
	.word	.L162
	.byte	3,246,2,1,9
	.half	.L307-.L162
	.byte	0,1,1,5,5,0,5,2
	.word	.L162
	.byte	3,210,0,1,5,9,9
	.half	.L941-.L162
	.byte	3,164,2,1,7,9
	.half	.L307-.L941
	.byte	0,1,1,5,9,0,5,2
	.word	.L162
	.byte	3,210,3,1,9
	.half	.L941-.L162
	.byte	3,164,127,1,7,9
	.half	.L307-.L941
	.byte	0,1,1,5,5,0,5,2
	.word	.L162
	.byte	3,163,4,1,5,9,9
	.half	.L941-.L162
	.byte	3,211,126,1,7,9
	.half	.L307-.L941
	.byte	0,1,1,5,5,0,5,2
	.word	.L162
	.byte	3,172,5,1,5,9,9
	.half	.L941-.L162
	.byte	3,202,125,1,7,9
	.half	.L307-.L941
	.byte	0,1,1
.L938:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_18')
	.sect	'.debug_ranges'
.L306:
	.word	-1,.L162,0,.L307-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_19')
	.sect	'.debug_info'
.L308:
	.word	219
	.half	3
	.word	.L309
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L311,.L310
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_19',0,1,117,6,1
	.word	.L126,.L312,.L125
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_19')
	.sect	'.debug_abbrev'
.L309:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_19')
	.sect	'.debug_line'
.L310:
	.word	.L943-.L942
.L942:
	.half	3
	.word	.L945-.L944
.L944:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L945:
	.byte	5,62,7,0,5,2
	.word	.L126
	.byte	3,246,0,1,5,16,9
	.half	.L578-.L126
	.byte	1,9
	.half	.L312-.L578
	.byte	0,1,1,5,62,0,5,2
	.word	.L126
	.byte	3,246,0,1,5,43,9
	.half	.L578-.L126
	.byte	3,212,1,1,5,16,9
	.half	.L583-.L578
	.byte	3,172,126,1,7,9
	.half	.L312-.L583
	.byte	0,1,1,5,62,0,5,2
	.word	.L126
	.byte	3,246,0,1,5,37,9
	.half	.L578-.L126
	.byte	3,174,2,1,5,16,9
	.half	.L583-.L578
	.byte	3,210,125,1,7,9
	.half	.L312-.L583
	.byte	0,1,1
.L943:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_19')
	.sect	'.debug_ranges'
.L311:
	.word	-1,.L126,0,.L312-.L126,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_20')
	.sect	'.debug_info'
.L313:
	.word	220
	.half	3
	.word	.L314
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L316,.L315
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_20',0,1,198,2,7,1
	.word	.L158,.L317,.L157
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_20')
	.sect	'.debug_abbrev'
.L314:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_20')
	.sect	'.debug_line'
.L315:
	.word	.L947-.L946
.L946:
	.half	3
	.word	.L949-.L948
.L948:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L949:
	.byte	5,29,7,0,5,2
	.word	.L158
	.byte	3,231,2,1,5,17,9
	.half	.L604-.L158
	.byte	1,9
	.half	.L317-.L604
	.byte	0,1,1,5,29,0,5,2
	.word	.L158
	.byte	3,231,2,1,5,17,9
	.half	.L604-.L158
	.byte	3,220,0,1,9
	.half	.L950-.L604
	.byte	3,164,127,1,7,9
	.half	.L317-.L950
	.byte	0,1,1
.L947:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_20')
	.sect	'.debug_ranges'
.L316:
	.word	-1,.L158,0,.L317-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_21')
	.sect	'.debug_info'
.L318:
	.word	219
	.half	3
	.word	.L319
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L321,.L320
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_21',0,1,53,6,1
	.word	.L110,.L322,.L109
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_21')
	.sect	'.debug_abbrev'
.L319:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_21')
	.sect	'.debug_line'
.L320:
	.word	.L952-.L951
.L951:
	.half	3
	.word	.L954-.L953
.L953:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L954:
	.byte	5,62,7,0,5,2
	.word	.L110
	.byte	3,54,1,5,13,9
	.half	.L509-.L110
	.byte	3,1,1,9
	.half	.L322-.L509
	.byte	0,1,1,5,62,0,5,2
	.word	.L110
	.byte	3,54,1,5,44,9
	.half	.L509-.L110
	.byte	3,191,1,1,5,13,9
	.half	.L955-.L509
	.byte	3,194,126,1,7,9
	.half	.L322-.L955
	.byte	0,1,1
.L952:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_21')
	.sect	'.debug_ranges'
.L321:
	.word	-1,.L110,0,.L322-.L110,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_22')
	.sect	'.debug_info'
.L323:
	.word	229
	.half	3
	.word	.L324
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L326,.L325
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_22',0,1,60,6,1
	.word	.L120,.L327,.L119
	.byte	4
	.word	.L120,.L327
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_22')
	.sect	'.debug_abbrev'
.L324:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_22')
	.sect	'.debug_line'
.L325:
	.word	.L957-.L956
.L956:
	.half	3
	.word	.L959-.L958
.L958:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0,0
.L959:
	.byte	4,2,5,43,7,0,5,2
	.word	.L120
	.byte	3,202,3,1,9
	.half	.L327-.L120
	.byte	0,1,1,4,2,5,43,0,5,2
	.word	.L120
	.byte	3,202,3,1,9
	.half	.L327-.L120
	.byte	0,1,1,4,2,5,43,0,5,2
	.word	.L120
	.byte	3,202,3,1,9
	.half	.L327-.L120
	.byte	0,1,1
.L957:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_22')
	.sect	'.debug_ranges'
.L326:
	.word	-1,.L120,0,.L327-.L120,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_23')
	.sect	'.debug_info'
.L328:
	.word	219
	.half	3
	.word	.L329
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L331,.L330
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_23',0,1,60,6,1
	.word	.L118,.L332,.L117
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_23')
	.sect	'.debug_abbrev'
.L329:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_23')
	.sect	'.debug_line'
.L330:
	.word	.L961-.L960
.L960:
	.half	3
	.word	.L963-.L962
.L962:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L963:
	.byte	5,5,7,0,5,2
	.word	.L118
	.byte	3,210,0,1,9
	.half	.L332-.L118
	.byte	0,1,1,5,14,0,5,2
	.word	.L118
	.byte	3,149,2,1,5,22,9
	.half	.L964-.L118
	.byte	1,5,5,9
	.half	.L965-.L964
	.byte	3,189,126,1,7,9
	.half	.L332-.L965
	.byte	0,1,1,5,14,0,5,2
	.word	.L118
	.byte	3,156,2,1,5,22,9
	.half	.L964-.L118
	.byte	1,5,5,9
	.half	.L965-.L964
	.byte	3,182,126,1,7,9
	.half	.L332-.L965
	.byte	0,1,1
.L961:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_23')
	.sect	'.debug_ranges'
.L331:
	.word	-1,.L118,0,.L332-.L118,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_24')
	.sect	'.debug_info'
.L333:
	.word	220
	.half	3
	.word	.L334
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L336,.L335
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_24',0,1,198,2,7,1
	.word	.L156,.L337,.L155
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_24')
	.sect	'.debug_abbrev'
.L334:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_24')
	.sect	'.debug_line'
.L335:
	.word	.L967-.L966
.L966:
	.half	3
	.word	.L969-.L968
.L968:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L969:
	.byte	5,7,7,0,5,2
	.word	.L156
	.byte	3,197,2,1,9
	.half	.L337-.L156
	.byte	0,1,1,5,7,0,5,2
	.word	.L156
	.byte	3,159,3,1,9
	.half	.L577-.L156
	.byte	3,166,127,1,7,9
	.half	.L337-.L577
	.byte	0,1,1,5,7,0,5,2
	.word	.L156
	.byte	3,252,3,1,9
	.half	.L577-.L156
	.byte	3,201,126,1,7,9
	.half	.L337-.L577
	.byte	0,1,1
.L967:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_24')
	.sect	'.debug_ranges'
.L336:
	.word	-1,.L156,0,.L337-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_25')
	.sect	'.debug_info'
.L338:
	.word	220
	.half	3
	.word	.L339
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L341,.L340
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_25',0,1,253,3,7,1
	.word	.L174,.L342,.L173
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_25')
	.sect	'.debug_abbrev'
.L339:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_25')
	.sect	'.debug_line'
.L340:
	.word	.L971-.L970
.L970:
	.half	3
	.word	.L973-.L972
.L972:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L973:
	.byte	5,45,7,0,5,2
	.word	.L174
	.byte	3,162,4,1,5,29,1,9
	.half	.L342-.L174
	.byte	0,1,1,5,45,0,5,2
	.word	.L174
	.byte	3,171,5,1,5,29,1,9
	.half	.L974-.L174
	.byte	3,247,126,1,7,9
	.half	.L342-.L974
	.byte	0,1,1
.L971:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_25')
	.sect	'.debug_ranges'
.L341:
	.word	-1,.L174,0,.L342-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_26')
	.sect	'.debug_info'
.L343:
	.word	219
	.half	3
	.word	.L344
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L346,.L345
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_26',0,1,53,6,1
	.word	.L112,.L347,.L111
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_26')
	.sect	'.debug_abbrev'
.L344:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_26')
	.sect	'.debug_line'
.L345:
	.word	.L976-.L975
.L975:
	.half	3
	.word	.L978-.L977
.L977:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L978:
	.byte	5,62,7,0,5,2
	.word	.L112
	.byte	3,54,1,5,29,1,5,52,9
	.half	.L508-.L112
	.byte	1,5,16,9
	.half	.L979-.L508
	.byte	1,9
	.half	.L347-.L979
	.byte	0,1,1,5,79,0,5,2
	.word	.L112
	.byte	3,244,1,1,5,46,1,5,69,9
	.half	.L508-.L112
	.byte	1,5,33,9
	.half	.L979-.L508
	.byte	1,5,16,9
	.half	.L510-.L979
	.byte	3,194,126,1,7,9
	.half	.L347-.L510
	.byte	0,1,1,5,62,0,5,2
	.word	.L112
	.byte	3,193,1,1,5,29,1,5,52,9
	.half	.L508-.L112
	.byte	1,5,16,9
	.half	.L979-.L508
	.byte	1,9
	.half	.L510-.L979
	.byte	3,245,126,1,7,9
	.half	.L347-.L510
	.byte	0,1,1,5,62,0,5,2
	.word	.L112
	.byte	3,162,2,1,5,29,1,5,52,9
	.half	.L508-.L112
	.byte	1,5,16,9
	.half	.L979-.L508
	.byte	1,9
	.half	.L510-.L979
	.byte	3,148,126,1,7,9
	.half	.L347-.L510
	.byte	0,1,1
.L976:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_26')
	.sect	'.debug_ranges'
.L346:
	.word	-1,.L112,0,.L347-.L112,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_27')
	.sect	'.debug_info'
.L348:
	.word	219
	.half	3
	.word	.L349
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L351,.L350
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_27',0,1,117,6,1
	.word	.L128,.L352,.L127
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_27')
	.sect	'.debug_abbrev'
.L349:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_27')
	.sect	'.debug_line'
.L350:
	.word	.L981-.L980
.L980:
	.half	3
	.word	.L983-.L982
.L982:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L983:
	.byte	5,62,7,0,5,2
	.word	.L128
	.byte	3,246,0,1,5,29,1,5,52,9
	.half	.L523-.L128
	.byte	1,9
	.half	.L352-.L523
	.byte	0,1,1,5,89,0,5,2
	.word	.L128
	.byte	3,202,2,1,5,56,1,5,79,9
	.half	.L523-.L128
	.byte	1,5,52,3,172,126,1,7,9
	.half	.L352-.L523
	.byte	0,1,1,5,83,0,5,2
	.word	.L128
	.byte	3,164,3,1,5,50,1,5,73,9
	.half	.L523-.L128
	.byte	1,5,52,3,210,125,1,7,9
	.half	.L352-.L523
	.byte	0,1,1,5,62,0,5,2
	.word	.L128
	.byte	3,172,2,1,5,29,1,5,52,9
	.half	.L523-.L128
	.byte	1,3,202,126,1,7,9
	.half	.L352-.L523
	.byte	0,1,1,5,76,0,5,2
	.word	.L128
	.byte	3,129,4,1,5,43,1,5,66,9
	.half	.L523-.L128
	.byte	1,5,52,3,245,124,1,7,9
	.half	.L352-.L523
	.byte	0,1,1
.L981:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_27')
	.sect	'.debug_ranges'
.L351:
	.word	-1,.L128,0,.L352-.L128,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_28')
	.sect	'.debug_info'
.L353:
	.word	220
	.half	3
	.word	.L354
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L356,.L355
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_28',0,1,198,2,7,1
	.word	.L160,.L357,.L159
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_28')
	.sect	'.debug_abbrev'
.L354:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_28')
	.sect	'.debug_line'
.L355:
	.word	.L985-.L984
.L984:
	.half	3
	.word	.L987-.L986
.L986:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L987:
	.byte	5,29,7,0,5,2
	.word	.L160
	.byte	3,231,2,1,5,51,9
	.half	.L988-.L160
	.byte	1,5,36,9
	.half	.L586-.L988
	.byte	1,5,57,9
	.half	.L989-.L586
	.byte	1,9
	.half	.L357-.L989
	.byte	0,1,1,5,29,0,5,2
	.word	.L160
	.byte	3,195,3,1,5,51,9
	.half	.L988-.L160
	.byte	1,5,36,9
	.half	.L586-.L988
	.byte	1,5,57,9
	.half	.L989-.L586
	.byte	1,3,164,127,1,7,9
	.half	.L357-.L989
	.byte	0,1,1,5,38,0,5,2
	.word	.L160
	.byte	3,154,4,1,5,60,9
	.half	.L988-.L160
	.byte	1,5,45,9
	.half	.L586-.L988
	.byte	1,5,66,9
	.half	.L989-.L586
	.byte	1,5,57,3,205,126,1,7,9
	.half	.L357-.L989
	.byte	0,1,1
.L985:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_28')
	.sect	'.debug_ranges'
.L356:
	.word	-1,.L160,0,.L357-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_29')
	.sect	'.debug_info'
.L358:
	.word	219
	.half	3
	.word	.L359
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L361,.L360
	.byte	2
	.word	.L179
	.byte	3
	.byte	'.cocofun_29',0,1,60,6,1
	.word	.L116,.L362,.L115
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_29')
	.sect	'.debug_abbrev'
.L359:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_29')
	.sect	'.debug_line'
.L360:
	.word	.L991-.L990
.L990:
	.half	3
	.word	.L993-.L992
.L992:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L993:
	.byte	5,45,7,0,5,2
	.word	.L116
	.byte	3,209,0,1,5,29,1,9
	.half	.L362-.L116
	.byte	0,1,1,5,80,0,5,2
	.word	.L116
	.byte	3,129,1,1,5,64,1,5,29,9
	.half	.L994-.L116
	.byte	3,80,1,7,9
	.half	.L362-.L994
	.byte	0,1,1,5,49,0,5,2
	.word	.L116
	.byte	3,245,2,1,5,33,1,5,29,9
	.half	.L994-.L116
	.byte	3,220,125,1,7,9
	.half	.L362-.L994
	.byte	0,1,1,5,49,0,5,2
	.word	.L116
	.byte	3,209,3,1,5,33,1,5,29,9
	.half	.L994-.L116
	.byte	3,128,125,1,7,9
	.half	.L362-.L994
	.byte	0,1,1
.L991:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_29')
	.sect	'.debug_ranges'
.L361:
	.word	-1,.L116,0,.L362-.L116,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_13')
	.sect	'.debug_loc'
.L167:
	.word	-1,.L168,0,.L282-.L168
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_14')
	.sect	'.debug_loc'
.L165:
	.word	-1,.L166,0,.L287-.L166
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_15')
	.sect	'.debug_loc'
.L133:
	.word	-1,.L134,0,.L292-.L134
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_16')
	.sect	'.debug_loc'
.L129:
	.word	-1,.L130,0,.L297-.L130
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_17')
	.sect	'.debug_loc'
.L163:
	.word	-1,.L164,0,.L302-.L164
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_18')
	.sect	'.debug_loc'
.L161:
	.word	-1,.L162,0,.L307-.L162
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_19')
	.sect	'.debug_loc'
.L125:
	.word	-1,.L126,0,.L312-.L126
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_20')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L158,0,.L317-.L158
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_21')
	.sect	'.debug_loc'
.L109:
	.word	-1,.L110,0,.L322-.L110
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_22')
	.sect	'.debug_loc'
.L119:
	.word	-1,.L120,0,.L327-.L120
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_23')
	.sect	'.debug_loc'
.L117:
	.word	-1,.L118,0,.L332-.L118
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_24')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L156,0,.L337-.L156
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_25')
	.sect	'.debug_loc'
.L173:
	.word	-1,.L174,0,.L342-.L174
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_26')
	.sect	'.debug_loc'
.L111:
	.word	-1,.L112,0,.L347-.L112
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_27')
	.sect	'.debug_loc'
.L127:
	.word	-1,.L128,0,.L352-.L128
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_28')
	.sect	'.debug_loc'
.L159:
	.word	-1,.L160,0,.L357-.L160
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_29')
	.sect	'.debug_loc'
.L115:
	.word	-1,.L116,0,.L362-.L116
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_loc'
.L107:
	.word	-1,.L108,0,.L473-.L108
	.half	2
	.byte	138,0
	.word	0,0
.L474:
	.word	-1,.L108,.L112-.L108,.L347-.L108
	.half	1
	.byte	84
	.word	.L509-.L108,.L322-.L108
	.half	1
	.byte	84
	.word	.L511-.L108,.L473-.L108
	.half	1
	.byte	84
	.word	0,0
.L476:
	.word	-1,.L108,.L508-.L108,.L347-.L108
	.half	1
	.byte	95
	.word	.L510-.L108,.L347-.L108
	.half	1
	.byte	111
	.word	.L509-.L108,.L322-.L108
	.half	1
	.byte	111
	.word	.L509-.L108,.L322-.L108
	.half	1
	.byte	95
	.word	.L511-.L108,.L473-.L108
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_loc'
.L113:
	.word	-1,.L114,0,.L512-.L114
	.half	2
	.byte	138,0
	.word	.L512-.L114,.L6-.L114
	.half	2
	.byte	138,24
	.word	.L6-.L114,.L6-.L114
	.half	2
	.byte	138,0
	.word	.L6-.L114,.L375-.L114
	.half	2
	.byte	138,24
	.word	.L375-.L114,.L375-.L114
	.half	2
	.byte	138,0
	.word	0,0
.L377:
	.word	-1,.L114,.L514-.L114,.L327-.L114
	.half	1
	.byte	89
	.word	.L513-.L114,.L382-.L114
	.half	1
	.byte	89
	.word	.L116-.L114,.L362-.L114
	.half	1
	.byte	89
	.word	.L118-.L114,.L332-.L114
	.half	1
	.byte	89
	.word	.L164-.L114,.L302-.L114
	.half	1
	.byte	89
	.word	.L162-.L114,.L307-.L114
	.half	1
	.byte	89
	.word	.L168-.L114,.L282-.L114
	.half	1
	.byte	89
	.word	.L166-.L114,.L287-.L114
	.half	1
	.byte	89
	.word	.L518-.L114,.L375-.L114
	.half	1
	.byte	89
	.word	0,0
.L376:
	.word	-1,.L114,0,.L513-.L114
	.half	1
	.byte	84
	.word	.L514-.L114,.L327-.L114
	.half	1
	.byte	88
	.word	.L512-.L114,.L382-.L114
	.half	1
	.byte	88
	.word	.L116-.L114,.L362-.L114
	.half	1
	.byte	88
	.word	.L516-.L114,.L517-.L114
	.half	1
	.byte	86
	.word	.L118-.L114,.L332-.L114
	.half	1
	.byte	88
	.word	.L164-.L114,.L302-.L114
	.half	1
	.byte	88
	.word	.L162-.L114,.L307-.L114
	.half	1
	.byte	88
	.word	.L168-.L114,.L282-.L114
	.half	1
	.byte	88
	.word	.L166-.L114,.L287-.L114
	.half	1
	.byte	88
	.word	.L518-.L114,.L375-.L114
	.half	1
	.byte	88
	.word	0,0
.L379:
	.word	-1,.L114,.L514-.L114,.L327-.L114
	.half	1
	.byte	90
	.word	.L514-.L114,.L327-.L114
	.half	1
	.byte	82
	.word	.L513-.L114,.L382-.L114
	.half	1
	.byte	90
	.word	.L513-.L114,.L515-.L114
	.half	1
	.byte	82
	.word	.L116-.L114,.L362-.L114
	.half	1
	.byte	90
	.word	.L118-.L114,.L332-.L114
	.half	1
	.byte	90
	.word	.L164-.L114,.L302-.L114
	.half	1
	.byte	90
	.word	.L162-.L114,.L307-.L114
	.half	1
	.byte	90
	.word	.L168-.L114,.L282-.L114
	.half	1
	.byte	90
	.word	.L166-.L114,.L287-.L114
	.half	1
	.byte	90
	.word	.L518-.L114,.L375-.L114
	.half	1
	.byte	90
	.word	.L519-.L114,.L6-.L114
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_loc'
.L121:
	.word	-1,.L122,0,.L383-.L122
	.half	2
	.byte	138,0
	.word	0,0
.L384:
	.word	-1,.L122,0,.L520-.L122
	.half	1
	.byte	84
	.word	.L521-.L122,.L383-.L122
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_loc'
.L123:
	.word	-1,.L124,0,.L522-.L124
	.half	2
	.byte	138,0
	.word	.L522-.L124,.L385-.L124
	.half	2
	.byte	138,24
	.word	.L385-.L124,.L385-.L124
	.half	2
	.byte	138,0
	.word	0,0
.L401:
	.word	-1,.L124,.L533-.L124,.L385-.L124
	.half	1
	.byte	81
	.word	0,0
.L403:
	.word	-1,.L124,.L539-.L124,.L16-.L124
	.half	1
	.byte	84
	.word	.L540-.L124,.L541-.L124
	.half	1
	.byte	84
	.word	.L542-.L124,.L17-.L124
	.half	1
	.byte	84
	.word	.L544-.L124,.L18-.L124
	.half	1
	.byte	84
	.word	0,0
.L395:
	.word	-1,.L124,.L530-.L124,.L531-.L124
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L398:
	.word	-1,.L124,.L534-.L124,.L385-.L124
	.half	1
	.byte	82
	.word	0,0
.L399:
	.word	-1,.L124,.L535-.L124,.L385-.L124
	.half	1
	.byte	83
	.word	0,0
.L396:
	.word	-1,.L124,.L532-.L124,.L533-.L124
	.half	1
	.byte	81
	.word	0,0
.L406:
	.word	-1,.L124,.L538-.L124,.L11-.L124
	.half	1
	.byte	86
	.word	0,0
.L393:
	.word	-1,.L124,.L527-.L124,.L297-.L124
	.half	1
	.byte	109
	.word	.L168-.L124,.L282-.L124
	.half	1
	.byte	109
	.word	.L166-.L124,.L287-.L124
	.half	1
	.byte	109
	.word	.L529-.L124,.L385-.L124
	.half	1
	.byte	109
	.word	0,0
.L386:
	.word	-1,.L124,0,.L522-.L124
	.half	1
	.byte	84
	.word	.L128-.L124,.L352-.L124
	.half	1
	.byte	84
	.word	.L128-.L124,.L352-.L124
	.half	1
	.byte	88
	.word	.L524-.L124,.L8-.L124
	.half	1
	.byte	84
	.word	.L168-.L124,.L282-.L124
	.half	1
	.byte	88
	.word	.L166-.L124,.L287-.L124
	.half	1
	.byte	88
	.word	.L116-.L124,.L362-.L124
	.half	1
	.byte	88
	.word	.L526-.L124,.L297-.L124
	.half	1
	.byte	88
	.word	.L524-.L124,.L528-.L124
	.half	1
	.byte	88
	.word	0,0
.L389:
	.word	-1,.L124,.L523-.L124,.L352-.L124
	.half	1
	.byte	95
	.word	.L524-.L124,.L525-.L124
	.half	1
	.byte	95
	.word	.L523-.L124,.L352-.L124
	.half	1
	.byte	108
	.word	.L168-.L124,.L282-.L124
	.half	1
	.byte	108
	.word	.L166-.L124,.L287-.L124
	.half	1
	.byte	108
	.word	.L116-.L124,.L362-.L124
	.half	1
	.byte	108
	.word	.L526-.L124,.L297-.L124
	.half	1
	.byte	108
	.word	.L524-.L124,.L385-.L124
	.half	1
	.byte	108
	.word	0,0
.L404:
	.word	-1,.L124,.L405-.L124,.L543-.L124
	.half	1
	.byte	85
	.word	0,0
.L400:
	.word	-1,.L124,.L535-.L124,.L385-.L124
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L394:
	.word	-1,.L124,.L168-.L124,.L282-.L124
	.half	1
	.byte	88
	.word	.L166-.L124,.L287-.L124
	.half	1
	.byte	88
	.word	.L528-.L124,.L385-.L124
	.half	1
	.byte	88
	.word	0,0
.L402:
	.word	-1,.L124,.L536-.L124,.L537-.L124
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_disableMbistShell')
	.sect	'.debug_loc'
.L131:
	.word	-1,.L132,0,.L363-.L132
	.half	2
	.byte	138,0
	.word	0,0
.L365:
	.word	-1,.L132,0,.L545-.L132
	.half	1
	.byte	84
	.word	.L134-.L132,.L292-.L132
	.half	1
	.byte	84
	.word	.L548-.L132,.L363-.L132
	.half	1
	.byte	84
	.word	0,0
.L368:
	.word	-1,.L132,.L134-.L132,.L546-.L132
	.half	1
	.byte	95
	.word	.L547-.L132,.L292-.L132
	.half	1
	.byte	111
	.word	.L548-.L132,.L363-.L132
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_loc'
.L135:
	.word	-1,.L136,0,.L477-.L136
	.half	2
	.byte	138,0
	.word	0,0
.L479:
	.word	-1,.L136,.L112-.L136,.L347-.L136
	.half	1
	.byte	85
	.word	.L549-.L136,.L477-.L136
	.half	1
	.byte	85
	.word	0,0
.L478:
	.word	-1,.L136,.L112-.L136,.L347-.L136
	.half	1
	.byte	84
	.word	.L549-.L136,.L477-.L136
	.half	1
	.byte	84
	.word	0,0
.L480:
	.word	-1,.L136,.L508-.L136,.L347-.L136
	.half	1
	.byte	95
	.word	.L510-.L136,.L347-.L136
	.half	1
	.byte	111
	.word	.L549-.L136,.L477-.L136
	.half	1
	.byte	111
	.word	.L549-.L136,.L550-.L136
	.half	1
	.byte	95
	.word	.L19-.L136,.L551-.L136
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_enableMbistShell')
	.sect	'.debug_loc'
.L137:
	.word	-1,.L138,0,.L369-.L138
	.half	2
	.byte	138,0
	.word	0,0
.L370:
	.word	-1,.L138,0,.L552-.L138
	.half	1
	.byte	84
	.word	.L134-.L138,.L292-.L138
	.half	1
	.byte	84
	.word	.L553-.L138,.L369-.L138
	.half	1
	.byte	84
	.word	0,0
.L371:
	.word	-1,.L138,.L134-.L138,.L546-.L138
	.half	1
	.byte	95
	.word	.L547-.L138,.L292-.L138
	.half	1
	.byte	111
	.word	.L553-.L138,.L369-.L138
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_loc'
.L139:
	.word	-1,.L140,0,.L481-.L140
	.half	2
	.byte	138,0
	.word	0,0
.L486:
	.word	-1,.L140,.L556-.L140,.L481-.L140
	.half	1
	.byte	81
	.word	0,0
.L482:
	.word	-1,.L140,0,.L481-.L140
	.half	1
	.byte	84
	.word	0,0
.L485:
	.word	-1,.L140,.L554-.L140,.L555-.L140
	.half	5
	.byte	144,32,157,32,0
	.word	.L21-.L140,.L557-.L140
	.half	5
	.byte	144,32,157,32,0
	.word	.L23-.L140,.L558-.L140
	.half	5
	.byte	144,32,157,32,0
	.word	.L24-.L140,.L481-.L140
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L487:
	.word	-1,.L140,.L25-.L140,.L24-.L140
	.half	1
	.byte	82
	.word	0,0
.L484:
	.word	-1,.L140,0,.L481-.L140
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_loc'
.L141:
	.word	-1,.L142,0,.L488-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L496:
	.word	-1,.L142,.L29-.L142,.L488-.L142
	.half	1
	.byte	81
	.word	0,0
.L489:
	.word	-1,.L142,.L112-.L142,.L347-.L142
	.half	1
	.byte	84
	.word	.L509-.L142,.L322-.L142
	.half	1
	.byte	84
	.word	.L559-.L142,.L488-.L142
	.half	1
	.byte	84
	.word	0,0
.L492:
	.word	-1,.L142,.L508-.L142,.L347-.L142
	.half	1
	.byte	95
	.word	.L510-.L142,.L347-.L142
	.half	1
	.byte	111
	.word	.L509-.L142,.L322-.L142
	.half	1
	.byte	111
	.word	.L509-.L142,.L322-.L142
	.half	1
	.byte	95
	.word	.L559-.L142,.L560-.L142
	.half	1
	.byte	111
	.word	0,0
.L494:
	.word	-1,.L142,.L560-.L142,.L561-.L142
	.half	1
	.byte	82
	.word	.L30-.L142,.L488-.L142
	.half	1
	.byte	82
	.word	0,0
.L491:
	.word	-1,.L142,.L112-.L142,.L347-.L142
	.half	1
	.byte	100
	.word	.L509-.L142,.L322-.L142
	.half	1
	.byte	100
	.word	.L559-.L142,.L488-.L142
	.half	1
	.byte	100
	.word	0,0
.L493:
	.word	-1,.L142,.L562-.L142,.L488-.L142
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_isAutoInitRunning')
	.sect	'.debug_loc'
.L143:
	.word	-1,.L144,0,.L373-.L144
	.half	2
	.byte	138,0
	.word	0,0
.L374:
	.word	-1,.L144,0,.L563-.L144
	.half	1
	.byte	84
	.word	.L134-.L144,.L292-.L144
	.half	1
	.byte	84
	.word	.L564-.L144,.L373-.L144
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_isErrorTrackingEnabled')
	.sect	'.debug_loc'
.L145:
	.word	-1,.L146,0,.L497-.L146
	.half	2
	.byte	138,0
	.word	0,0
.L498:
	.word	-1,.L146,.L118-.L146,.L332-.L146
	.half	1
	.byte	84
	.word	0,.L497-.L146
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_isErrorTrackingOverflow')
	.sect	'.debug_loc'
.L147:
	.word	-1,.L148,0,.L499-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L500:
	.word	-1,.L148,.L118-.L148,.L332-.L148
	.half	1
	.byte	84
	.word	0,.L499-.L148
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_isMbistDone')
	.sect	'.debug_loc'
.L149:
	.word	-1,.L150,0,.L407-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L408:
	.word	-1,.L150,.L112-.L150,.L347-.L150
	.half	1
	.byte	84
	.word	.L565-.L150,.L407-.L150
	.half	1
	.byte	84
	.word	0,0
.L409:
	.word	-1,.L150,.L508-.L150,.L347-.L150
	.half	1
	.byte	95
	.word	.L510-.L150,.L347-.L150
	.half	1
	.byte	111
	.word	.L565-.L150,.L407-.L150
	.half	1
	.byte	111
	.word	.L565-.L150,.L566-.L150
	.half	1
	.byte	95
	.word	0,0
.L410:
	.word	-1,.L150,.L566-.L150,.L407-.L150
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L411-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L412:
	.word	-1,.L152,.L128-.L152,.L352-.L152
	.half	1
	.byte	88
	.word	.L128-.L152,.L352-.L152
	.half	1
	.byte	84
	.word	.L567-.L152,.L411-.L152
	.half	1
	.byte	88
	.word	0,.L568-.L152
	.half	1
	.byte	84
	.word	.L568-.L152,.L571-.L152
	.half	1
	.byte	86
	.word	0,0
.L414:
	.word	-1,.L152,.L523-.L152,.L352-.L152
	.half	1
	.byte	95
	.word	.L569-.L152,.L570-.L152
	.half	1
	.byte	95
	.word	.L572-.L152,.L411-.L152
	.half	1
	.byte	111
	.word	0,0
.L413:
	.word	-1,.L152,.L128-.L152,.L352-.L152
	.half	1
	.byte	85
	.word	0,.L571-.L152
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_runCheckerBoardTest')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L573-.L154
	.half	2
	.byte	138,0
	.word	.L573-.L154,.L415-.L154
	.half	2
	.byte	138,48
	.word	.L415-.L154,.L415-.L154
	.half	2
	.byte	138,0
	.word	0,0
.L426:
	.word	-1,.L154,0,.L574-.L154
	.half	2
	.byte	145,100
	.word	.L156-.L154,.L337-.L154
	.half	2
	.byte	145,100
	.word	.L128-.L154,.L352-.L154
	.half	2
	.byte	145,100
	.word	.L578-.L154,.L312-.L154
	.half	2
	.byte	145,100
	.word	.L120-.L154,.L327-.L154
	.half	2
	.byte	145,100
	.word	.L160-.L154,.L357-.L154
	.half	2
	.byte	145,100
	.word	.L116-.L154,.L362-.L154
	.half	2
	.byte	145,100
	.word	.L526-.L154,.L297-.L154
	.half	2
	.byte	145,100
	.word	.L164-.L154,.L302-.L154
	.half	2
	.byte	145,100
	.word	.L162-.L154,.L307-.L154
	.half	2
	.byte	145,100
	.word	.L168-.L154,.L282-.L154
	.half	2
	.byte	145,100
	.word	.L166-.L154,.L287-.L154
	.half	2
	.byte	145,100
	.word	.L579-.L154,.L415-.L154
	.half	2
	.byte	145,100
	.word	0,0
.L421:
	.word	-1,.L154,0,.L574-.L154
	.half	1
	.byte	100
	.word	.L156-.L154,.L337-.L154
	.half	1
	.byte	100
	.word	.L577-.L154,.L337-.L154
	.half	2
	.byte	145,120
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	100
	.word	.L128-.L154,.L352-.L154
	.half	2
	.byte	145,120
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	100
	.word	.L578-.L154,.L312-.L154
	.half	2
	.byte	145,120
	.word	.L579-.L154,.L580-.L154
	.half	1
	.byte	100
	.word	.L120-.L154,.L327-.L154
	.half	2
	.byte	145,120
	.word	.L160-.L154,.L357-.L154
	.half	2
	.byte	145,120
	.word	.L116-.L154,.L362-.L154
	.half	2
	.byte	145,120
	.word	.L526-.L154,.L297-.L154
	.half	2
	.byte	145,120
	.word	.L164-.L154,.L302-.L154
	.half	2
	.byte	145,120
	.word	.L162-.L154,.L307-.L154
	.half	2
	.byte	145,120
	.word	.L168-.L154,.L282-.L154
	.half	2
	.byte	145,120
	.word	.L166-.L154,.L287-.L154
	.half	2
	.byte	145,120
	.word	.L579-.L154,.L415-.L154
	.half	2
	.byte	145,120
	.word	.L595-.L154,.L49-.L154
	.half	1
	.byte	111
	.word	0,0
.L430:
	.word	-1,.L154,.L120-.L154,.L327-.L154
	.half	1
	.byte	94
	.word	.L160-.L154,.L357-.L154
	.half	1
	.byte	94
	.word	.L116-.L154,.L362-.L154
	.half	1
	.byte	94
	.word	.L526-.L154,.L297-.L154
	.half	1
	.byte	94
	.word	.L164-.L154,.L302-.L154
	.half	1
	.byte	94
	.word	.L162-.L154,.L307-.L154
	.half	1
	.byte	94
	.word	.L168-.L154,.L282-.L154
	.half	1
	.byte	94
	.word	.L166-.L154,.L287-.L154
	.half	1
	.byte	94
	.word	.L581-.L154,.L415-.L154
	.half	1
	.byte	94
	.word	0,0
.L416:
	.word	-1,.L154,0,.L574-.L154
	.half	1
	.byte	84
	.word	.L156-.L154,.L337-.L154
	.half	1
	.byte	84
	.word	.L575-.L154,.L337-.L154
	.half	1
	.byte	88
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	88
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	84
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	88
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	84
	.word	.L579-.L154,.L581-.L154
	.half	1
	.byte	84
	.word	.L120-.L154,.L327-.L154
	.half	1
	.byte	88
	.word	.L160-.L154,.L357-.L154
	.half	1
	.byte	88
	.word	.L116-.L154,.L362-.L154
	.half	1
	.byte	88
	.word	.L526-.L154,.L297-.L154
	.half	1
	.byte	88
	.word	.L589-.L154,.L590-.L154
	.half	1
	.byte	86
	.word	.L164-.L154,.L302-.L154
	.half	1
	.byte	88
	.word	.L162-.L154,.L307-.L154
	.half	1
	.byte	88
	.word	.L168-.L154,.L282-.L154
	.half	1
	.byte	88
	.word	.L166-.L154,.L287-.L154
	.half	1
	.byte	88
	.word	.L579-.L154,.L415-.L154
	.half	1
	.byte	88
	.word	0,0
.L424:
	.word	-1,.L154,.L523-.L154,.L352-.L154
	.half	1
	.byte	95
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	95
	.word	.L582-.L154,.L38-.L154
	.half	1
	.byte	95
	.word	.L583-.L154,.L312-.L154
	.half	1
	.byte	108
	.word	.L120-.L154,.L327-.L154
	.half	1
	.byte	108
	.word	.L160-.L154,.L357-.L154
	.half	1
	.byte	108
	.word	.L116-.L154,.L362-.L154
	.half	1
	.byte	108
	.word	.L526-.L154,.L297-.L154
	.half	1
	.byte	108
	.word	.L164-.L154,.L302-.L154
	.half	1
	.byte	108
	.word	.L162-.L154,.L307-.L154
	.half	1
	.byte	108
	.word	.L168-.L154,.L282-.L154
	.half	1
	.byte	108
	.word	.L166-.L154,.L287-.L154
	.half	1
	.byte	108
	.word	.L582-.L154,.L415-.L154
	.half	1
	.byte	108
	.word	0,0
.L422:
	.word	-1,.L154,0,.L574-.L154
	.half	2
	.byte	145,0
	.word	.L156-.L154,.L337-.L154
	.half	2
	.byte	145,0
	.word	.L128-.L154,.L352-.L154
	.half	2
	.byte	145,0
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	92
	.word	.L578-.L154,.L312-.L154
	.half	2
	.byte	145,0
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	92
	.word	.L120-.L154,.L327-.L154
	.half	2
	.byte	145,0
	.word	.L120-.L154,.L327-.L154
	.half	1
	.byte	92
	.word	.L160-.L154,.L357-.L154
	.half	2
	.byte	145,0
	.word	.L160-.L154,.L357-.L154
	.half	1
	.byte	92
	.word	.L116-.L154,.L362-.L154
	.half	2
	.byte	145,0
	.word	.L116-.L154,.L362-.L154
	.half	1
	.byte	92
	.word	.L526-.L154,.L297-.L154
	.half	2
	.byte	145,0
	.word	.L526-.L154,.L297-.L154
	.half	1
	.byte	92
	.word	.L164-.L154,.L302-.L154
	.half	2
	.byte	145,0
	.word	.L164-.L154,.L302-.L154
	.half	1
	.byte	92
	.word	.L162-.L154,.L307-.L154
	.half	2
	.byte	145,0
	.word	.L162-.L154,.L307-.L154
	.half	1
	.byte	92
	.word	.L168-.L154,.L282-.L154
	.half	2
	.byte	145,0
	.word	.L168-.L154,.L282-.L154
	.half	1
	.byte	92
	.word	.L166-.L154,.L287-.L154
	.half	2
	.byte	145,0
	.word	.L166-.L154,.L287-.L154
	.half	1
	.byte	92
	.word	.L579-.L154,.L415-.L154
	.half	2
	.byte	145,0
	.word	.L591-.L154,.L415-.L154
	.half	1
	.byte	92
	.word	0,0
.L427:
	.word	-1,.L154,.L120-.L154,.L327-.L154
	.half	2
	.byte	145,124
	.word	.L120-.L154,.L327-.L154
	.half	1
	.byte	82
	.word	.L581-.L154,.L584-.L154
	.half	1
	.byte	82
	.word	.L160-.L154,.L357-.L154
	.half	2
	.byte	145,124
	.word	.L116-.L154,.L362-.L154
	.half	2
	.byte	145,124
	.word	.L526-.L154,.L297-.L154
	.half	2
	.byte	145,124
	.word	.L587-.L154,.L588-.L154
	.half	1
	.byte	84
	.word	.L164-.L154,.L302-.L154
	.half	2
	.byte	145,124
	.word	.L162-.L154,.L307-.L154
	.half	2
	.byte	145,124
	.word	.L168-.L154,.L282-.L154
	.half	2
	.byte	145,124
	.word	.L166-.L154,.L287-.L154
	.half	2
	.byte	145,124
	.word	.L433-.L154,.L415-.L154
	.half	2
	.byte	145,124
	.word	.L593-.L154,.L594-.L154
	.half	1
	.byte	84
	.word	.L596-.L154,.L53-.L154
	.half	1
	.byte	84
	.word	0,0
.L419:
	.word	-1,.L154,0,.L574-.L154
	.half	1
	.byte	87
	.word	.L156-.L154,.L337-.L154
	.half	1
	.byte	87
	.word	.L577-.L154,.L337-.L154
	.half	1
	.byte	91
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	91
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	87
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	91
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	87
	.word	.L579-.L154,.L581-.L154
	.half	1
	.byte	87
	.word	.L120-.L154,.L327-.L154
	.half	1
	.byte	91
	.word	.L579-.L154,.L585-.L154
	.half	1
	.byte	91
	.word	.L160-.L154,.L357-.L154
	.half	1
	.byte	91
	.word	0,0
.L418:
	.word	-1,.L154,0,.L574-.L154
	.half	1
	.byte	86
	.word	.L156-.L154,.L337-.L154
	.half	1
	.byte	86
	.word	.L577-.L154,.L337-.L154
	.half	1
	.byte	89
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	89
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	86
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	89
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	86
	.word	.L579-.L154,.L581-.L154
	.half	1
	.byte	86
	.word	.L120-.L154,.L327-.L154
	.half	1
	.byte	89
	.word	.L579-.L154,.L585-.L154
	.half	1
	.byte	89
	.word	.L160-.L154,.L586-.L154
	.half	1
	.byte	89
	.word	0,0
.L417:
	.word	-1,.L154,0,.L574-.L154
	.half	1
	.byte	85
	.word	.L156-.L154,.L337-.L154
	.half	1
	.byte	85
	.word	.L576-.L154,.L337-.L154
	.half	1
	.byte	90
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	85
	.word	.L128-.L154,.L352-.L154
	.half	1
	.byte	90
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	85
	.word	.L578-.L154,.L312-.L154
	.half	1
	.byte	90
	.word	.L579-.L154,.L581-.L154
	.half	1
	.byte	85
	.word	.L120-.L154,.L327-.L154
	.half	1
	.byte	90
	.word	.L160-.L154,.L357-.L154
	.half	1
	.byte	90
	.word	.L116-.L154,.L362-.L154
	.half	1
	.byte	90
	.word	.L526-.L154,.L297-.L154
	.half	1
	.byte	90
	.word	.L164-.L154,.L302-.L154
	.half	1
	.byte	90
	.word	.L162-.L154,.L307-.L154
	.half	1
	.byte	90
	.word	.L168-.L154,.L282-.L154
	.half	1
	.byte	90
	.word	.L166-.L154,.L287-.L154
	.half	1
	.byte	90
	.word	.L579-.L154,.L415-.L154
	.half	1
	.byte	90
	.word	0,0
.L428:
	.word	-1,.L154,.L120-.L154,.L327-.L154
	.half	1
	.byte	93
	.word	.L160-.L154,.L357-.L154
	.half	1
	.byte	93
	.word	.L116-.L154,.L362-.L154
	.half	1
	.byte	93
	.word	.L526-.L154,.L297-.L154
	.half	1
	.byte	93
	.word	.L164-.L154,.L302-.L154
	.half	1
	.byte	93
	.word	.L162-.L154,.L307-.L154
	.half	1
	.byte	93
	.word	.L168-.L154,.L282-.L154
	.half	1
	.byte	93
	.word	.L166-.L154,.L287-.L154
	.half	1
	.byte	93
	.word	.L592-.L154,.L415-.L154
	.half	1
	.byte	93
	.word	0,0
.L429:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_runMarchUTest')
	.sect	'.debug_loc'
.L169:
	.word	-1,.L170,0,.L597-.L170
	.half	2
	.byte	138,0
	.word	.L597-.L170,.L436-.L170
	.half	2
	.byte	138,56
	.word	.L436-.L170,.L436-.L170
	.half	2
	.byte	138,0
	.word	0,0
.L444:
	.word	-1,.L170,.L156-.L170,.L337-.L170
	.half	2
	.byte	145,92
	.word	.L128-.L170,.L352-.L170
	.half	2
	.byte	145,92
	.word	.L578-.L170,.L312-.L170
	.half	2
	.byte	145,92
	.word	.L514-.L170,.L327-.L170
	.half	2
	.byte	145,92
	.word	.L160-.L170,.L357-.L170
	.half	2
	.byte	145,92
	.word	.L604-.L170,.L317-.L170
	.half	2
	.byte	145,92
	.word	.L116-.L170,.L362-.L170
	.half	2
	.byte	145,92
	.word	.L526-.L170,.L297-.L170
	.half	2
	.byte	145,92
	.word	.L164-.L170,.L302-.L170
	.half	2
	.byte	145,92
	.word	.L162-.L170,.L307-.L170
	.half	2
	.byte	145,92
	.word	.L168-.L170,.L282-.L170
	.half	2
	.byte	145,92
	.word	.L166-.L170,.L287-.L170
	.half	2
	.byte	145,92
	.word	0,.L436-.L170
	.half	2
	.byte	145,92
	.word	0,0
.L441:
	.word	-1,.L170,.L156-.L170,.L337-.L170
	.half	1
	.byte	100
	.word	.L128-.L170,.L352-.L170
	.half	1
	.byte	100
	.word	.L128-.L170,.L352-.L170
	.half	2
	.byte	145,120
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	100
	.word	.L578-.L170,.L312-.L170
	.half	2
	.byte	145,120
	.word	0,.L598-.L170
	.half	1
	.byte	100
	.word	.L514-.L170,.L327-.L170
	.half	2
	.byte	145,120
	.word	.L160-.L170,.L357-.L170
	.half	2
	.byte	145,120
	.word	.L604-.L170,.L317-.L170
	.half	2
	.byte	145,120
	.word	.L116-.L170,.L362-.L170
	.half	2
	.byte	145,120
	.word	.L526-.L170,.L297-.L170
	.half	2
	.byte	145,120
	.word	.L164-.L170,.L302-.L170
	.half	2
	.byte	145,120
	.word	.L162-.L170,.L307-.L170
	.half	2
	.byte	145,120
	.word	.L168-.L170,.L282-.L170
	.half	2
	.byte	145,120
	.word	.L166-.L170,.L287-.L170
	.half	2
	.byte	145,120
	.word	.L609-.L170,.L436-.L170
	.half	2
	.byte	145,120
	.word	.L611-.L170,.L62-.L170
	.half	1
	.byte	111
	.word	0,0
.L448:
	.word	-1,.L170,.L514-.L170,.L327-.L170
	.half	1
	.byte	93
	.word	.L160-.L170,.L357-.L170
	.half	1
	.byte	93
	.word	.L604-.L170,.L317-.L170
	.half	1
	.byte	93
	.word	.L116-.L170,.L362-.L170
	.half	1
	.byte	93
	.word	.L526-.L170,.L297-.L170
	.half	1
	.byte	93
	.word	.L164-.L170,.L302-.L170
	.half	1
	.byte	93
	.word	.L162-.L170,.L307-.L170
	.half	1
	.byte	93
	.word	.L168-.L170,.L282-.L170
	.half	1
	.byte	93
	.word	.L166-.L170,.L287-.L170
	.half	1
	.byte	93
	.word	.L599-.L170,.L436-.L170
	.half	1
	.byte	93
	.word	0,0
.L437:
	.word	-1,.L170,.L156-.L170,.L337-.L170
	.half	1
	.byte	84
	.word	.L575-.L170,.L337-.L170
	.half	1
	.byte	88
	.word	.L128-.L170,.L352-.L170
	.half	1
	.byte	88
	.word	.L128-.L170,.L352-.L170
	.half	1
	.byte	84
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	88
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	84
	.word	0,.L599-.L170
	.half	1
	.byte	84
	.word	.L514-.L170,.L327-.L170
	.half	1
	.byte	88
	.word	.L160-.L170,.L357-.L170
	.half	1
	.byte	88
	.word	.L604-.L170,.L317-.L170
	.half	1
	.byte	88
	.word	.L116-.L170,.L362-.L170
	.half	1
	.byte	88
	.word	.L526-.L170,.L297-.L170
	.half	1
	.byte	88
	.word	.L607-.L170,.L608-.L170
	.half	1
	.byte	86
	.word	.L164-.L170,.L302-.L170
	.half	1
	.byte	88
	.word	.L162-.L170,.L307-.L170
	.half	1
	.byte	88
	.word	.L168-.L170,.L282-.L170
	.half	1
	.byte	88
	.word	.L166-.L170,.L287-.L170
	.half	1
	.byte	88
	.word	.L602-.L170,.L436-.L170
	.half	1
	.byte	88
	.word	0,0
.L442:
	.word	-1,.L170,.L523-.L170,.L352-.L170
	.half	1
	.byte	95
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	95
	.word	.L583-.L170,.L312-.L170
	.half	1
	.byte	108
	.word	.L600-.L170,.L55-.L170
	.half	1
	.byte	95
	.word	.L514-.L170,.L327-.L170
	.half	1
	.byte	108
	.word	.L160-.L170,.L357-.L170
	.half	1
	.byte	108
	.word	.L604-.L170,.L317-.L170
	.half	1
	.byte	108
	.word	.L116-.L170,.L362-.L170
	.half	1
	.byte	108
	.word	.L526-.L170,.L297-.L170
	.half	1
	.byte	108
	.word	.L164-.L170,.L302-.L170
	.half	1
	.byte	108
	.word	.L162-.L170,.L307-.L170
	.half	1
	.byte	108
	.word	.L168-.L170,.L282-.L170
	.half	1
	.byte	108
	.word	.L166-.L170,.L287-.L170
	.half	1
	.byte	108
	.word	.L600-.L170,.L436-.L170
	.half	1
	.byte	108
	.word	0,0
.L445:
	.word	-1,.L170,.L514-.L170,.L327-.L170
	.half	1
	.byte	94
	.word	.L514-.L170,.L327-.L170
	.half	1
	.byte	82
	.word	.L599-.L170,.L601-.L170
	.half	1
	.byte	82
	.word	.L160-.L170,.L357-.L170
	.half	1
	.byte	94
	.word	.L604-.L170,.L317-.L170
	.half	1
	.byte	94
	.word	.L116-.L170,.L362-.L170
	.half	1
	.byte	94
	.word	.L526-.L170,.L297-.L170
	.half	1
	.byte	94
	.word	.L605-.L170,.L606-.L170
	.half	1
	.byte	84
	.word	.L164-.L170,.L302-.L170
	.half	1
	.byte	94
	.word	.L162-.L170,.L307-.L170
	.half	1
	.byte	94
	.word	.L168-.L170,.L282-.L170
	.half	1
	.byte	94
	.word	.L166-.L170,.L287-.L170
	.half	1
	.byte	94
	.word	.L599-.L170,.L436-.L170
	.half	1
	.byte	94
	.word	0,0
.L440:
	.word	-1,.L170,.L156-.L170,.L337-.L170
	.half	1
	.byte	87
	.word	.L577-.L170,.L337-.L170
	.half	1
	.byte	91
	.word	.L128-.L170,.L352-.L170
	.half	1
	.byte	91
	.word	.L128-.L170,.L352-.L170
	.half	1
	.byte	87
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	91
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	87
	.word	0,.L599-.L170
	.half	1
	.byte	87
	.word	.L514-.L170,.L327-.L170
	.half	1
	.byte	91
	.word	.L602-.L170,.L603-.L170
	.half	1
	.byte	91
	.word	.L160-.L170,.L357-.L170
	.half	1
	.byte	91
	.word	0,0
.L439:
	.word	-1,.L170,.L156-.L170,.L337-.L170
	.half	1
	.byte	86
	.word	.L577-.L170,.L337-.L170
	.half	1
	.byte	89
	.word	.L128-.L170,.L352-.L170
	.half	1
	.byte	86
	.word	.L128-.L170,.L352-.L170
	.half	1
	.byte	89
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	86
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	89
	.word	0,.L599-.L170
	.half	1
	.byte	86
	.word	.L514-.L170,.L327-.L170
	.half	1
	.byte	89
	.word	.L602-.L170,.L603-.L170
	.half	1
	.byte	89
	.word	.L160-.L170,.L586-.L170
	.half	1
	.byte	89
	.word	0,0
.L438:
	.word	-1,.L170,.L156-.L170,.L337-.L170
	.half	1
	.byte	85
	.word	.L576-.L170,.L337-.L170
	.half	1
	.byte	90
	.word	.L128-.L170,.L352-.L170
	.half	1
	.byte	85
	.word	.L128-.L170,.L352-.L170
	.half	1
	.byte	90
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	85
	.word	.L578-.L170,.L312-.L170
	.half	1
	.byte	90
	.word	0,.L599-.L170
	.half	1
	.byte	85
	.word	.L514-.L170,.L327-.L170
	.half	1
	.byte	90
	.word	.L160-.L170,.L357-.L170
	.half	1
	.byte	90
	.word	.L604-.L170,.L317-.L170
	.half	1
	.byte	90
	.word	.L116-.L170,.L362-.L170
	.half	1
	.byte	90
	.word	.L526-.L170,.L297-.L170
	.half	1
	.byte	90
	.word	.L164-.L170,.L302-.L170
	.half	1
	.byte	90
	.word	.L162-.L170,.L307-.L170
	.half	1
	.byte	90
	.word	.L168-.L170,.L282-.L170
	.half	1
	.byte	90
	.word	.L166-.L170,.L287-.L170
	.half	1
	.byte	90
	.word	.L602-.L170,.L436-.L170
	.half	1
	.byte	90
	.word	0,0
.L446:
	.word	-1,.L170,.L514-.L170,.L327-.L170
	.half	1
	.byte	92
	.word	.L160-.L170,.L357-.L170
	.half	1
	.byte	92
	.word	.L604-.L170,.L317-.L170
	.half	1
	.byte	92
	.word	.L116-.L170,.L362-.L170
	.half	1
	.byte	92
	.word	.L526-.L170,.L297-.L170
	.half	1
	.byte	92
	.word	.L164-.L170,.L302-.L170
	.half	1
	.byte	92
	.word	.L162-.L170,.L307-.L170
	.half	1
	.byte	92
	.word	.L168-.L170,.L282-.L170
	.half	1
	.byte	92
	.word	.L166-.L170,.L287-.L170
	.half	1
	.byte	92
	.word	.L610-.L170,.L436-.L170
	.half	1
	.byte	92
	.word	0,0
.L447:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_loc'
.L171:
	.word	-1,.L172,0,.L612-.L172
	.half	2
	.byte	138,0
	.word	.L612-.L172,.L450-.L172
	.half	2
	.byte	138,24
	.word	.L450-.L172,.L450-.L172
	.half	2
	.byte	138,0
	.word	0,0
.L455:
	.word	-1,.L172,.L156-.L172,.L337-.L172
	.half	1
	.byte	100
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	100
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	108
	.word	0,.L613-.L172
	.half	1
	.byte	100
	.word	.L614-.L172,.L615-.L172
	.half	1
	.byte	108
	.word	.L160-.L172,.L357-.L172
	.half	1
	.byte	108
	.word	.L174-.L172,.L342-.L172
	.half	1
	.byte	108
	.word	.L164-.L172,.L302-.L172
	.half	1
	.byte	108
	.word	.L162-.L172,.L307-.L172
	.half	1
	.byte	108
	.word	.L168-.L172,.L282-.L172
	.half	1
	.byte	108
	.word	.L166-.L172,.L287-.L172
	.half	1
	.byte	108
	.word	.L625-.L172,.L450-.L172
	.half	1
	.byte	108
	.word	0,0
.L460:
	.word	-1,.L172,.L613-.L172,.L615-.L172
	.half	1
	.byte	93
	.word	.L160-.L172,.L357-.L172
	.half	1
	.byte	93
	.word	.L174-.L172,.L342-.L172
	.half	1
	.byte	93
	.word	.L164-.L172,.L302-.L172
	.half	1
	.byte	93
	.word	.L162-.L172,.L307-.L172
	.half	1
	.byte	93
	.word	.L168-.L172,.L282-.L172
	.half	1
	.byte	93
	.word	.L166-.L172,.L287-.L172
	.half	1
	.byte	93
	.word	.L625-.L172,.L450-.L172
	.half	1
	.byte	93
	.word	0,0
.L451:
	.word	-1,.L172,.L156-.L172,.L337-.L172
	.half	1
	.byte	84
	.word	.L575-.L172,.L337-.L172
	.half	1
	.byte	88
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	84
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	88
	.word	0,.L613-.L172
	.half	1
	.byte	84
	.word	.L616-.L172,.L615-.L172
	.half	1
	.byte	88
	.word	.L160-.L172,.L357-.L172
	.half	1
	.byte	88
	.word	.L174-.L172,.L342-.L172
	.half	1
	.byte	88
	.word	.L623-.L172,.L624-.L172
	.half	1
	.byte	86
	.word	.L164-.L172,.L302-.L172
	.half	1
	.byte	88
	.word	.L162-.L172,.L307-.L172
	.half	1
	.byte	88
	.word	.L168-.L172,.L282-.L172
	.half	1
	.byte	88
	.word	.L166-.L172,.L287-.L172
	.half	1
	.byte	88
	.word	.L625-.L172,.L450-.L172
	.half	1
	.byte	88
	.word	0,0
.L457:
	.word	-1,.L172,.L523-.L172,.L352-.L172
	.half	1
	.byte	95
	.word	.L617-.L172,.L463-.L172
	.half	1
	.byte	95
	.word	.L618-.L172,.L615-.L172
	.half	1
	.byte	109
	.word	.L160-.L172,.L357-.L172
	.half	1
	.byte	109
	.word	.L174-.L172,.L342-.L172
	.half	1
	.byte	109
	.word	.L164-.L172,.L302-.L172
	.half	1
	.byte	109
	.word	.L162-.L172,.L307-.L172
	.half	1
	.byte	109
	.word	.L168-.L172,.L282-.L172
	.half	1
	.byte	109
	.word	.L166-.L172,.L287-.L172
	.half	1
	.byte	109
	.word	.L625-.L172,.L450-.L172
	.half	1
	.byte	109
	.word	0,0
.L458:
	.word	-1,.L172,.L613-.L172,.L620-.L172
	.half	1
	.byte	82
	.word	.L462-.L172,.L615-.L172
	.half	1
	.byte	94
	.word	.L160-.L172,.L357-.L172
	.half	1
	.byte	94
	.word	.L621-.L172,.L622-.L172
	.half	1
	.byte	84
	.word	.L174-.L172,.L342-.L172
	.half	1
	.byte	94
	.word	.L164-.L172,.L302-.L172
	.half	1
	.byte	94
	.word	.L162-.L172,.L307-.L172
	.half	1
	.byte	94
	.word	.L168-.L172,.L282-.L172
	.half	1
	.byte	94
	.word	.L166-.L172,.L287-.L172
	.half	1
	.byte	94
	.word	.L625-.L172,.L450-.L172
	.half	1
	.byte	94
	.word	0,0
.L454:
	.word	-1,.L172,.L156-.L172,.L337-.L172
	.half	1
	.byte	87
	.word	.L577-.L172,.L337-.L172
	.half	1
	.byte	91
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	91
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	87
	.word	.L616-.L172,.L615-.L172
	.half	1
	.byte	91
	.word	0,.L613-.L172
	.half	1
	.byte	87
	.word	.L160-.L172,.L357-.L172
	.half	1
	.byte	91
	.word	0,0
.L453:
	.word	-1,.L172,.L156-.L172,.L337-.L172
	.half	1
	.byte	86
	.word	.L577-.L172,.L337-.L172
	.half	1
	.byte	89
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	86
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	89
	.word	0,.L613-.L172
	.half	1
	.byte	86
	.word	.L616-.L172,.L615-.L172
	.half	1
	.byte	89
	.word	.L160-.L172,.L586-.L172
	.half	1
	.byte	89
	.word	0,0
.L452:
	.word	-1,.L172,.L156-.L172,.L337-.L172
	.half	1
	.byte	85
	.word	.L576-.L172,.L337-.L172
	.half	1
	.byte	90
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	90
	.word	.L128-.L172,.L352-.L172
	.half	1
	.byte	85
	.word	.L616-.L172,.L615-.L172
	.half	1
	.byte	90
	.word	0,.L613-.L172
	.half	1
	.byte	85
	.word	.L160-.L172,.L357-.L172
	.half	1
	.byte	90
	.word	.L174-.L172,.L342-.L172
	.half	1
	.byte	90
	.word	.L164-.L172,.L302-.L172
	.half	1
	.byte	90
	.word	.L162-.L172,.L307-.L172
	.half	1
	.byte	90
	.word	.L168-.L172,.L282-.L172
	.half	1
	.byte	90
	.word	.L166-.L172,.L287-.L172
	.half	1
	.byte	90
	.word	.L625-.L172,.L450-.L172
	.half	1
	.byte	90
	.word	0,0
.L459:
	.word	-1,.L172,.L619-.L172,.L615-.L172
	.half	1
	.byte	92
	.word	.L160-.L172,.L357-.L172
	.half	1
	.byte	92
	.word	.L174-.L172,.L342-.L172
	.half	1
	.byte	92
	.word	.L164-.L172,.L302-.L172
	.half	1
	.byte	92
	.word	.L162-.L172,.L307-.L172
	.half	1
	.byte	92
	.word	.L168-.L172,.L282-.L172
	.half	1
	.byte	92
	.word	.L166-.L172,.L287-.L172
	.half	1
	.byte	92
	.word	.L625-.L172,.L450-.L172
	.half	1
	.byte	92
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_loc'
.L175:
	.word	-1,.L176,0,.L626-.L176
	.half	2
	.byte	138,0
	.word	.L626-.L176,.L501-.L176
	.half	2
	.byte	138,8
	.word	.L501-.L176,.L501-.L176
	.half	2
	.byte	138,0
	.word	0,0
.L504:
	.word	-1,.L176,0,.L627-.L176
	.half	1
	.byte	86
	.word	.L82-.L176,.L94-.L176
	.half	1
	.byte	86
	.word	0,0
.L503:
	.word	-1,.L176,0,.L627-.L176
	.half	1
	.byte	85
	.word	.L628-.L176,.L629-.L176
	.half	1
	.byte	89
	.word	.L630-.L176,.L631-.L176
	.half	1
	.byte	89
	.word	.L82-.L176,.L94-.L176
	.half	1
	.byte	85
	.word	.L94-.L176,.L633-.L176
	.half	1
	.byte	89
	.word	0,0
.L502:
	.word	-1,.L176,0,.L627-.L176
	.half	1
	.byte	84
	.word	.L82-.L176,.L94-.L176
	.half	1
	.byte	84
	.word	0,0
.L505:
	.word	-1,.L176,.L628-.L176,.L627-.L176
	.half	5
	.byte	144,32,157,32,0
	.word	.L82-.L176,.L632-.L176
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L507:
	.word	-1,.L176,0,.L501-.L176
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_loc'
.L177:
	.word	-1,.L178,0,.L634-.L178
	.half	2
	.byte	138,0
	.word	.L634-.L178,.L464-.L178
	.half	2
	.byte	138,24
	.word	.L464-.L178,.L464-.L178
	.half	2
	.byte	138,0
	.word	0,0
.L468:
	.word	-1,.L178,.L634-.L178,.L103-.L178
	.half	1
	.byte	90
	.word	.L174-.L178,.L342-.L178
	.half	1
	.byte	90
	.word	.L164-.L178,.L302-.L178
	.half	1
	.byte	90
	.word	.L162-.L178,.L307-.L178
	.half	1
	.byte	90
	.word	.L168-.L178,.L282-.L178
	.half	1
	.byte	90
	.word	.L166-.L178,.L287-.L178
	.half	1
	.byte	90
	.word	.L642-.L178,.L464-.L178
	.half	1
	.byte	90
	.word	0,0
.L465:
	.word	-1,.L178,0,.L635-.L178
	.half	1
	.byte	84
	.word	.L634-.L178,.L636-.L178
	.half	1
	.byte	88
	.word	.L641-.L178,.L103-.L178
	.half	1
	.byte	88
	.word	.L174-.L178,.L174-.L178
	.half	1
	.byte	88
	.word	.L644-.L178,.L645-.L178
	.half	1
	.byte	88
	.word	.L645-.L178,.L646-.L178
	.half	1
	.byte	86
	.word	.L105-.L178,.L648-.L178
	.half	1
	.byte	88
	.word	0,0
.L467:
	.word	-1,.L178,.L636-.L178,.L635-.L178
	.half	5
	.byte	144,32,157,32,0
	.word	.L637-.L178,.L103-.L178
	.half	1
	.byte	111
	.word	.L174-.L178,.L342-.L178
	.half	1
	.byte	111
	.word	.L642-.L178,.L643-.L178
	.half	1
	.byte	111
	.word	.L164-.L178,.L647-.L178
	.half	1
	.byte	111
	.word	0,0
.L469:
	.word	-1,.L178,.L635-.L178,.L638-.L178
	.half	1
	.byte	82
	.word	.L471-.L178,.L103-.L178
	.half	1
	.byte	91
	.word	.L174-.L178,.L342-.L178
	.half	1
	.byte	91
	.word	.L164-.L178,.L302-.L178
	.half	1
	.byte	91
	.word	.L162-.L178,.L307-.L178
	.half	1
	.byte	91
	.word	.L168-.L178,.L282-.L178
	.half	1
	.byte	91
	.word	.L166-.L178,.L287-.L178
	.half	1
	.byte	91
	.word	.L642-.L178,.L464-.L178
	.half	1
	.byte	91
	.word	0,0
.L466:
	.word	-1,.L178,0,.L635-.L178
	.half	1
	.byte	85
	.word	.L639-.L178,.L640-.L178
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L995:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_frame'
	.word	24
	.word	.L995,.L108,.L473-.L108
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_frame'
	.word	52
	.word	.L995,.L114,.L375-.L114
	.byte	4
	.word	(.L512-.L114)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L6-.L512)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L375-.L6)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_frame'
	.word	12
	.word	.L995,.L122,.L383-.L122
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_frame'
	.word	36
	.word	.L995,.L124,.L385-.L124
	.byte	4
	.word	(.L522-.L124)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L385-.L522)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_disableMbistShell')
	.sect	'.debug_frame'
	.word	24
	.word	.L995,.L132,.L363-.L132
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_frame'
	.word	24
	.word	.L995,.L136,.L477-.L136
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_enableMbistShell')
	.sect	'.debug_frame'
	.word	24
	.word	.L995,.L138,.L369-.L138
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L995,.L140,.L481-.L140
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_frame'
	.word	20
	.word	.L995,.L142,.L488-.L142
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_isAutoInitRunning')
	.sect	'.debug_frame'
	.word	24
	.word	.L995,.L144,.L373-.L144
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_isErrorTrackingEnabled')
	.sect	'.debug_frame'
	.word	24
	.word	.L995,.L146,.L497-.L146
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_isErrorTrackingOverflow')
	.sect	'.debug_frame'
	.word	24
	.word	.L995,.L148,.L499-.L148
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_isMbistDone')
	.sect	'.debug_frame'
	.word	24
	.word	.L995,.L150,.L407-.L150
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L995,.L152,.L411-.L152
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_runCheckerBoardTest')
	.sect	'.debug_frame'
	.word	36
	.word	.L995,.L154,.L415-.L154
	.byte	4
	.word	(.L573-.L154)/2
	.byte	19,48,22,26,3,19,138,48,4
	.word	(.L415-.L573)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_runMarchUTest')
	.sect	'.debug_frame'
	.word	36
	.word	.L995,.L170,.L436-.L170
	.byte	4
	.word	(.L597-.L170)/2
	.byte	19,56,22,26,3,19,138,56,4
	.word	(.L436-.L597)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_frame'
	.word	36
	.word	.L995,.L172,.L450-.L172
	.byte	4
	.word	(.L612-.L172)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L450-.L612)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_frame'
	.word	36
	.word	.L995,.L176,.L501-.L176
	.byte	4
	.word	(.L626-.L176)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L501-.L626)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_frame'
	.word	36
	.word	.L995,.L178,.L464-.L178
	.byte	4
	.word	(.L634-.L178)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L464-.L634)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L996:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_21')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L110,.L322-.L110
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_26')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L112,.L347-.L112
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_29')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L116,.L362-.L116
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_23')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L118,.L332-.L118
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_22')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L120,.L327-.L120
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_19')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L126,.L312-.L126
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_27')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L128,.L352-.L128
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_16')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L130,.L297-.L130
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_15')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L134,.L292-.L134
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_24')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L156,.L337-.L156
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_20')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L158,.L317-.L158
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_28')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L160,.L357-.L160
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_18')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L162,.L307-.L162
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_17')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L164,.L302-.L164
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_14')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L166,.L287-.L166
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_13')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L168,.L282-.L168
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_25')
	.sect	'.debug_frame'
	.word	24
	.word	.L996,.L174,.L342-.L174
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
