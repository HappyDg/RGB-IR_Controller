	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 07918494"
	.compiler_invocation	"ctc -f cc1828a --dep-file=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\.IfxScuWdt.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc23x -D__CPU_TC23X__ --core=tc1.6.x --fp-model=+float -DNDEBUG -D__SWPLATFORM__ -DIFX_CFG_USE_COMPILER_DEFAULT_LINKER -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05 -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\APP\\inc -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Configuration -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Scu/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Stm/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x/_Reg -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/SrvSw -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -g2 --no-warnings=542 --make-target=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.src ..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c"
	.compiler_name		"ctc"
	;source	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c'

	
$TC16X
	.sdecl	'.zrodata.IfxScuWdt..4.cnt',data,rom
	.sect	'.zrodata.IfxScuWdt..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268214032
	.sdecl	'.zrodata.IfxScuWdt..5.cnt',data,rom
	.sect	'.zrodata.IfxScuWdt..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268214028
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_changeCpuWatchdogPassword',code,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.text.IfxScuWdt.IfxScuWdt_changeCpuWatchdogPassword'
	.align	2
	
	.global	IfxScuWdt_changeCpuWatchdogPassword

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	     2   * \file IfxScuWdt.c
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	     3   * \brief SCU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	     4   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	     5   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	     7   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	     9   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    10   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    15   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    16   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    22   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    24   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    25  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    26  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    27  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    28  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    29  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    30  #include "IfxScuWdt.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    31  #include "Cpu/Std/IfxCpu.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    32  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    33  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    34  /*----------------------------------Macros------------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    35  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    36  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    37  /** \brief Reset password of watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    38   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    39  #define IFXSCUWDT_RESET_PASSWORD (0x3CU)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    40  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    41  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    42  /*-------------------------Function Implementations---------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    43  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    44  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    45  void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
; Function IfxScuWdt_changeCpuWatchdogPassword
.L37:
IfxScuWdt_changeCpuWatchdogPassword:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L370:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_7
.L315:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    46  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    47      Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    48  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    49      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    50      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    51      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    52  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    53      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    54      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    55          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    56          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    57          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    58          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    59  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    60          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    61          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    62      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    63  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    64      /* Set new Password, ENDINT and LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    65      wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    66      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    67      wdt_con0.B.PW      = newPassword;
	insert	d15,d15,d5,#2,#14
.L466:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    68      watchdog->CON0.U   = wdt_con0.U;
	fcall	.cocofun_11
.L378:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    69  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    70      /* read back ENDINIT and wait until it has been set */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    71      while (watchdog->CON0.B.ENDINIT == 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    72      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    73  }
	ret
.L309:
	
__IfxScuWdt_changeCpuWatchdogPassword_function_end:
	.size	IfxScuWdt_changeCpuWatchdogPassword,__IfxScuWdt_changeCpuWatchdogPassword_function_end-IfxScuWdt_changeCpuWatchdogPassword
.L137:
	; End of function
	
	.sdecl	'.text.IfxScuWdt..cocofun_11',code,cluster('.cocofun_11')
	.sect	'.text.IfxScuWdt..cocofun_11'
	.align	2
; Function .cocofun_11
.L39:
.cocofun_11:	.type	func
; Function body .cocofun_11, coco_iter:0
	st.w	[a15],d15
.L3:
	ld.w	d15,[a15]
.L573:
	jz.t	d15:0,.L3
.L574:
	fret
.L222:
	; End of function
	.sdecl	'.text.IfxScuWdt..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.IfxScuWdt..cocofun_7'
	.align	2
; Function .cocofun_7
.L41:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_12
.L550:
	fcall	.cocofun_13
.L551:
	fret
.L202:
	; End of function
	.sdecl	'.text.IfxScuWdt..cocofun_13',code,cluster('.cocofun_13')
	.sect	'.text.IfxScuWdt..cocofun_13'
	.align	2
; Function .cocofun_13
.L43:
.cocofun_13:	.type	func
; Function body .cocofun_13, coco_iter:1
	fcall	.cocofun_14
.L376:
	or	d15,#1
.L377:
	or	d15,#2
	fret
.L232:
	; End of function
	.sdecl	'.text.IfxScuWdt..cocofun_14',code,cluster('.cocofun_14')
	.sect	'.text.IfxScuWdt..cocofun_14'
	.align	2
; Function .cocofun_14
.L45:
.cocofun_14:	.type	func
; Function body .cocofun_14, coco_iter:2
	ld.w	d15,[a15]
.L374:
	jz.t	d15:1,.L2
.L587:
	or	d15,#1
.L375:
	insert	d15,d15,#0,#1,#1
.L380:
	insert	d15,d15,d4,#2,#14
	st.w	[a15],d15
.L2:
	fret
.L237:
	; End of function
	.sdecl	'.text.IfxScuWdt..cocofun_12',code,cluster('.cocofun_12')
	.sect	'.text.IfxScuWdt..cocofun_12'
	.align	2
; Function .cocofun_12
.L47:
.cocofun_12:	.type	func
; Function body .cocofun_12, coco_iter:1

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_15
.L372:
	lea	a15,[a3]24832
.L373:
	fret
.L227:
	; End of function
	.sdecl	'.text.IfxScuWdt..cocofun_15',code,cluster('.cocofun_15')
	.sect	'.text.IfxScuWdt..cocofun_15'
	.align	2
; Function .cocofun_15
.L49:
.cocofun_15:	.type	func
; Function body .cocofun_15, coco_iter:2

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L371:
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
.L592:
	fret
.L242:
	; End of function
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_changeCpuWatchdogReload',code,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.text.IfxScuWdt.IfxScuWdt_changeCpuWatchdogReload'
	.align	2
	
	.global	IfxScuWdt_changeCpuWatchdogReload

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    74  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    75  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    76  void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
; Function IfxScuWdt_changeCpuWatchdogReload
.L51:
IfxScuWdt_changeCpuWatchdogReload:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L379:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_7
.L325:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    77  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    78      /* Select CPU Watchdog based on Core Id */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    79      uint32              coreId = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    80      Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    81  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    82      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    83      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    84      wdt_con0.U = wdt->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    85  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    86      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    87      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    88          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    89          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    90          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    91          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    92  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    93          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    94          wdt->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    95      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    96  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    97      /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    98      wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	    99      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   100      wdt_con0.B.REL     = reload;
	insert	d15,d15,d5,#16,#16
.L381:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   101      wdt->CON0.U        = wdt_con0.U;
	fcall	.cocofun_11
.L382:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   102  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   103      /* read back ENDINIT and wait until it has been set */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   104      while (wdt->CON0.B.ENDINIT == 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   105      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   106  }
	ret
.L318:
	
__IfxScuWdt_changeCpuWatchdogReload_function_end:
	.size	IfxScuWdt_changeCpuWatchdogReload,__IfxScuWdt_changeCpuWatchdogReload_function_end-IfxScuWdt_changeCpuWatchdogReload
.L142:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_changeSafetyWatchdogPassword',code,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.text.IfxScuWdt.IfxScuWdt_changeSafetyWatchdogPassword'
	.align	2
	
	.global	IfxScuWdt_changeSafetyWatchdogPassword

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   107  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   108  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   109  void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword)
; Function IfxScuWdt_changeSafetyWatchdogPassword
.L53:
IfxScuWdt_changeSafetyWatchdogPassword:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   110  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   111      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   112  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   113      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   114      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   115      wdt_con0.U = watchdog->CON0.U;
	fcall	.cocofun_8
.L386:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   116  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   117      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   118      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   119          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   120          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   121          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   122          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   124          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   125          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   126      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   127  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   128      /* Set new Password, ENDINT and LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   129      wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   130      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   131      wdt_con0.B.PW      = newPassword;
	insert	d15,d15,d5,#2,#14
.L384:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   132      watchdog->CON0.U   = wdt_con0.U;
	fcall	.cocofun_10
.L385:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   133  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   134      /* read back ENDINIT and wait until it has been set */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   135      while (watchdog->CON0.B.ENDINIT == 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   136      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   137  }
	ret
.L327:
	
__IfxScuWdt_changeSafetyWatchdogPassword_function_end:
	.size	IfxScuWdt_changeSafetyWatchdogPassword,__IfxScuWdt_changeSafetyWatchdogPassword_function_end-IfxScuWdt_changeSafetyWatchdogPassword
.L147:
	; End of function
	
	.sdecl	'.text.IfxScuWdt..cocofun_10',code,cluster('.cocofun_10')
	.sect	'.text.IfxScuWdt..cocofun_10'
	.align	2
; Function .cocofun_10
.L55:
.cocofun_10:	.type	func
; Function body .cocofun_10, coco_iter:0
	st.w	[a15],d15
.L566:
	movh.a	a15,#61443
.L7:
	ld.w	d15,[a15]@los(0xf00360f0)
.L567:
	jz.t	d15:0,.L7
.L568:
	fret
.L217:
	; End of function
	.sdecl	'.text.IfxScuWdt..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.IfxScuWdt..cocofun_8'
	.align	2
; Function .cocofun_8
.L57:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	ld.w	d15,.4.cnt
	mov.a	a15,d15
.L556:
	fcall	.cocofun_13
.L383:
	fret
.L207:
	; End of function
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_changeSafetyWatchdogReload',code,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.text.IfxScuWdt.IfxScuWdt_changeSafetyWatchdogReload'
	.align	2
	
	.global	IfxScuWdt_changeSafetyWatchdogReload

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   138  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   139  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   140  void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload)
; Function IfxScuWdt_changeSafetyWatchdogReload
.L59:
IfxScuWdt_changeSafetyWatchdogReload:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   141  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   142      /* Initialize pointer to Safety Watchdog */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   143      Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   144  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   145      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   146      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   147      wdt_con0.U = wdt->CON0.U;
	fcall	.cocofun_8
.L389:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   148  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   149      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   150      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   151          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   152          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   153          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   154          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   155  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   156          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   157          wdt->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   158      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   159  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   160      /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   161      wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   162      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   163      wdt_con0.B.REL     = reload;
	insert	d15,d15,d5,#16,#16
.L387:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   164      wdt->CON0.U        = wdt_con0.U;
	fcall	.cocofun_10
.L388:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   165  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   166      /* read back ENDINIT and wait until it has been set */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   167      while (wdt->CON0.B.ENDINIT == 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   168      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   169  }
	ret
.L332:
	
__IfxScuWdt_changeSafetyWatchdogReload_function_end:
	.size	IfxScuWdt_changeSafetyWatchdogReload,__IfxScuWdt_changeSafetyWatchdogReload_function_end-IfxScuWdt_changeSafetyWatchdogReload
.L152:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_clearCpuEndinit',code,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.text.IfxScuWdt.IfxScuWdt_clearCpuEndinit'
	.align	2
	
	.global	IfxScuWdt_clearCpuEndinit

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   170  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   171  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   172  void IfxScuWdt_clearCpuEndinit(uint16 password)
; Function IfxScuWdt_clearCpuEndinit
.L61:
IfxScuWdt_clearCpuEndinit:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L390:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_12
.L268:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
	fcall	.cocofun_9

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L11:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d15,[a15]
.L447:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L11
.L273:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   173  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   174      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   175  }
	ret
.L264:
	
__IfxScuWdt_clearCpuEndinit_function_end:
	.size	IfxScuWdt_clearCpuEndinit,__IfxScuWdt_clearCpuEndinit_function_end-IfxScuWdt_clearCpuEndinit
.L117:
	; End of function
	
	.sdecl	'.text.IfxScuWdt..cocofun_9',code,cluster('.cocofun_9')
	.sect	'.text.IfxScuWdt..cocofun_9'
	.align	2
; Function .cocofun_9
.L63:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:0

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
	fcall	.cocofun_14
.L391:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
	insert	d15,d15,#0,#0,#1
.L561:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
	or	d15,#2
	st.w	[a15],d15
.L392:
	fret
.L212:
	; End of function
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_clearSafetyEndinit',code,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.text.IfxScuWdt.IfxScuWdt_clearSafetyEndinit'
	.align	2
	
	.global	IfxScuWdt_clearSafetyEndinit

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   176  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   177  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   178  void IfxScuWdt_clearSafetyEndinit(uint16 password)
; Function IfxScuWdt_clearSafetyEndinit
.L65:
IfxScuWdt_clearSafetyEndinit:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
	ld.w	d15,.4.cnt
	mov.a	a15,d15
	fcall	.cocofun_9
.L393:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
	movh.a	a15,#61443

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
.L13:
	ld.w	d15,[a15]@los(0xf00360f0)
.L452:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d15:0,.L13
.L284:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   179  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   180      IfxScuWdt_clearSafetyEndinitInline(password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   181  }
	ret
.L281:
	
__IfxScuWdt_clearSafetyEndinit_function_end:
	.size	IfxScuWdt_clearSafetyEndinit,__IfxScuWdt_clearSafetyEndinit_function_end-IfxScuWdt_clearSafetyEndinit
.L122:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_disableCpuWatchdog',code,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_disableCpuWatchdog'
	.align	2
	
	.global	IfxScuWdt_disableCpuWatchdog

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   182  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   183  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   184  void IfxScuWdt_disableCpuWatchdog(uint16 password)
; Function IfxScuWdt_disableCpuWatchdog
.L67:
IfxScuWdt_disableCpuWatchdog:	.type	func
	mov	d8,d4
.L340:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L394:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_12
.L341:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   185  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   186      /* Select CPU Watchdog based on Core Id */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   187      uint32          coreId = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   188      Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   189  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   190      IfxScuWdt_clearCpuEndinit(password);
	call	IfxScuWdt_clearCpuEndinit
.L395:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   191      wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   192      IfxScuWdt_setCpuEndinit(password);
	mov	d4,d8
	ld.bu	d15,[a15]4
.L396:
	or	d15,#8
	st.b	[a15]4,d15
.L483:
	j	IfxScuWdt_setCpuEndinit
.L336:
	
__IfxScuWdt_disableCpuWatchdog_function_end:
	.size	IfxScuWdt_disableCpuWatchdog,__IfxScuWdt_disableCpuWatchdog_function_end-IfxScuWdt_disableCpuWatchdog
.L157:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_disableSafetyWatchdog',code,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_disableSafetyWatchdog'
	.align	2
	
	.global	IfxScuWdt_disableSafetyWatchdog

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   193  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   194  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   195  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   196  void IfxScuWdt_disableSafetyWatchdog(uint16 password)
; Function IfxScuWdt_disableSafetyWatchdog
.L69:
IfxScuWdt_disableSafetyWatchdog:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   197  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   198      IfxScuWdt_clearSafetyEndinit(password);
	mov	d8,d4
	call	IfxScuWdt_clearSafetyEndinit
.L397:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   199      SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
	ld.w	d15,.5.cnt
.L488:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   200      IfxScuWdt_setSafetyEndinit(password);
	mov	d4,d8
.L398:
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L489:
	or	d15,#8
	st.b	[a15],d15
.L490:
	j	IfxScuWdt_setSafetyEndinit
.L343:
	
__IfxScuWdt_disableSafetyWatchdog_function_end:
	.size	IfxScuWdt_disableSafetyWatchdog,__IfxScuWdt_disableSafetyWatchdog_function_end-IfxScuWdt_disableSafetyWatchdog
.L162:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_enableCpuWatchdog',code,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_enableCpuWatchdog'
	.align	2
	
	.global	IfxScuWdt_enableCpuWatchdog

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   201  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   202  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   203  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   204  void IfxScuWdt_enableCpuWatchdog(uint16 password)
; Function IfxScuWdt_enableCpuWatchdog
.L71:
IfxScuWdt_enableCpuWatchdog:	.type	func
	mov	d8,d4
.L349:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L399:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_12
.L350:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   205  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   206      /* Select CPU Watchdog based on Core Id */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   207      uint32          coreId = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   208      Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   209  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   210      IfxScuWdt_clearCpuEndinit(password);
	call	IfxScuWdt_clearCpuEndinit
.L400:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   211      wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   212      IfxScuWdt_setCpuEndinit(password);
	mov	d4,d8
	ld.bu	d15,[a15]4
.L401:
	insert	d15,d15,#0,#3,#1
	st.b	[a15]4,d15
.L495:
	j	IfxScuWdt_setCpuEndinit
.L345:
	
__IfxScuWdt_enableCpuWatchdog_function_end:
	.size	IfxScuWdt_enableCpuWatchdog,__IfxScuWdt_enableCpuWatchdog_function_end-IfxScuWdt_enableCpuWatchdog
.L167:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_enableSafetyWatchdog',code,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_enableSafetyWatchdog'
	.align	2
	
	.global	IfxScuWdt_enableSafetyWatchdog

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   213  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   214  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   215  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   216  void IfxScuWdt_enableSafetyWatchdog(uint16 password)
; Function IfxScuWdt_enableSafetyWatchdog
.L73:
IfxScuWdt_enableSafetyWatchdog:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   217  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   218      IfxScuWdt_clearSafetyEndinit(password);
	mov	d15,d4
	call	IfxScuWdt_clearSafetyEndinit
.L402:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   219      SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
	ld.w	d0,.5.cnt
.L500:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   220      IfxScuWdt_setSafetyEndinit(password);
	mov	d4,d15
.L403:
	mov.a	a15,d0
	ld.bu	d0,[a15]
.L501:
	insert	d0,d0,#0,#3,#1
	st.b	[a15],d0
.L502:
	j	IfxScuWdt_setSafetyEndinit
.L352:
	
__IfxScuWdt_enableSafetyWatchdog_function_end:
	.size	IfxScuWdt_enableSafetyWatchdog,__IfxScuWdt_enableSafetyWatchdog_function_end-IfxScuWdt_enableSafetyWatchdog
.L172:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_getCpuWatchdogPassword',code,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.text.IfxScuWdt.IfxScuWdt_getCpuWatchdogPassword'
	.align	2
	
	.global	IfxScuWdt_getCpuWatchdogPassword

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   221  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   222  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   223  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   224  uint16 IfxScuWdt_getCpuWatchdogPassword(void)
; Function IfxScuWdt_getCpuWatchdogPassword
.L75:
IfxScuWdt_getCpuWatchdogPassword:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L404:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_15
.L355:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
	ld.w	d15,[a3]24832
	extr.u	d15,d15,#2,#14
.L507:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
	xor	d2,d15,#63

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   225  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   226      return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   227  }
	ret
.L354:
	
__IfxScuWdt_getCpuWatchdogPassword_function_end:
	.size	IfxScuWdt_getCpuWatchdogPassword,__IfxScuWdt_getCpuWatchdogPassword_function_end-IfxScuWdt_getCpuWatchdogPassword
.L177:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_getSafetyWatchdogPassword',code,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.text.IfxScuWdt.IfxScuWdt_getSafetyWatchdogPassword'
	.align	2
	
	.global	IfxScuWdt_getSafetyWatchdogPassword

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   228  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   229  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   230  uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
; Function IfxScuWdt_getSafetyWatchdogPassword
.L77:
IfxScuWdt_getSafetyWatchdogPassword:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   452  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   453      return password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   454  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   455  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   456  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   458  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   460  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   462  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   463  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   464  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   465      uint16        password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   466      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   467  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   468      /* Read Password from Safety WDT CON0 register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   469       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   470       * to toggle them before returning password */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   471      password  = watchdog->CON0.B.PW;
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
	extr.u	d15,d15,#2,#14
.L512:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   472      password ^= 0x003F;
	xor	d2,d15,#63

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   231  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   232      return IfxScuWdt_getSafetyWatchdogPasswordInline();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   233  }
	ret
.L362:
	
__IfxScuWdt_getSafetyWatchdogPassword_function_end:
	.size	IfxScuWdt_getSafetyWatchdogPassword,__IfxScuWdt_getSafetyWatchdogPassword_function_end-IfxScuWdt_getSafetyWatchdogPassword
.L182:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_initConfig',code,cluster('IfxScuWdt_initConfig')
	.sect	'.text.IfxScuWdt.IfxScuWdt_initConfig'
	.align	2
	
	.global	IfxScuWdt_initConfig

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   234  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   235  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   236  void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
; Function IfxScuWdt_initConfig
.L79:
IfxScuWdt_initConfig:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   237  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   238      config->password                      = IFXSCUWDT_RESET_PASSWORD;
	mov	d15,#60
	st.h	[a4],d15
.L423:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   239      config->reload                        = 0xFFFC;
	mov.u	d15,#65532
	st.h	[a4]2,d15
.L424:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   240      config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
	mov	d15,#0
	st.b	[a4]4,d15
.L425:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   241      config->disableWatchdog               = FALSE;
	st.b	[a4]5,d15
.L426:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   242      config->enableSmuRestriction          = FALSE;
	st.b	[a4]6,d15
.L427:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   243      config->enableAutomaticPasswordChange = FALSE;
	st.b	[a4]7,d15
.L428:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   244      config->enableTimerCheck              = FALSE;
	st.b	[a4]8,d15
.L429:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   245      config->enableTimerCheckTolerance     = FALSE;
	st.b	[a4]9,d15
.L430:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   246      config->clrInternalResetFlag          = FALSE;
	st.b	[a4]10,d15
.L431:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   247  }
	ret
.L243:
	
__IfxScuWdt_initConfig_function_end:
	.size	IfxScuWdt_initConfig,__IfxScuWdt_initConfig_function_end-IfxScuWdt_initConfig
.L102:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_initCpuWatchdog',code,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_initCpuWatchdog'
	.align	2
	
	.global	IfxScuWdt_initCpuWatchdog

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   248  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   249  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   250  void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config)
; Function IfxScuWdt_initCpuWatchdog
.L81:
IfxScuWdt_initCpuWatchdog:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   251  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   252      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   253      Ifx_SCU_WDTCPU_CON1 wdt_con1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   254  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   255      /* Read Config_0 register and clear wdt_con1 variable */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   256      wdt_con0.U = wdt->CON0.U;
	fcall	.cocofun_6
.L436:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   257      wdt_con1.U = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   258  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   259      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   260      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   261          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   262          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   263          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   264          wdt_con0.B.PW     ^= 0x003F;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   265  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   266          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   267          wdt->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   268      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   269  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   270      /* Initialize CON0 register, with modify access, with user defined parameters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   271       * Clear ENDINT bit to unprotect CON1 register for initialization
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   272       * see Table 3 (Modify Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   273      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   274      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   275      wdt_con0.B.PW      = config->password; //user defined password
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   276      wdt_con0.B.REL     = config->reload;   //user defined reload value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   277  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   278      /* Modify access ready - write WDT_CON0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   279      wdt->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   280  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   281      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   282      while (wdt->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   283      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   284  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   285      /* Initialize CON1 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   286      switch (config->inputFrequency)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   287      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   288      case IfxScu_WDTCON1_IR_divBy16384:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   289          wdt_con1.B.IR0 = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   290          wdt_con1.B.IR1 = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   291          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   292      case IfxScu_WDTCON1_IR_divBy256:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   293          wdt_con1.B.IR0 = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   294          wdt_con1.B.IR1 = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   295          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   296      case IfxScu_WDTCON1_IR_divBy64:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   297          wdt_con1.B.IR0 = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   298          wdt_con1.B.IR1 = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   299          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   300      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   301  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   302      wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   303      wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   304      wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   305      wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   306      wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   307  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   308      /* Finally write CON1 with user defined configuration */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   309      wdt->CON1.U = wdt_con1.U;
	st.w	[a4]4,d2
.L411:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   310  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   311      /* Initialization finished - set CPU ENDINIT protection */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   312      IfxScuWdt_setCpuEndinit(config->password);
	ld.hu	d4,[a5]0
	j	IfxScuWdt_setCpuEndinit
.L246:
	
__IfxScuWdt_initCpuWatchdog_function_end:
	.size	IfxScuWdt_initCpuWatchdog,__IfxScuWdt_initCpuWatchdog_function_end-IfxScuWdt_initCpuWatchdog
.L107:
	; End of function
	
	.sdecl	'.text.IfxScuWdt..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.IfxScuWdt..cocofun_6'
	.align	2
; Function .cocofun_6
.L83:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	ld.w	d15,[a4]
.L405:
	mov	d2,#0
.L407:
	jz.t	d15:1,.L16
.L525:
	or	d15,#1
.L406:
	insert	d0,d15,#0,#1,#1
.L408:
	extr.u	d1,d0,#2,#14
	xor	d1,d1,#63
.L412:
	insert	d15,d0,d1,#2,#14
	st.w	[a4],d15
.L16:
	insert	d15,d15,#0,#0,#1
	ld.hu	d0,[a5]0
.L409:
	ld.hu	d1,[a5]2
.L526:
	or	d15,#2
.L527:
	insert	d0,d15,d0,#2,#14
.L410:
	insert	d0,d0,d1,#16,#16
	st.w	[a4],d0
.L17:
	ld.w	d0,[a4]
.L528:
	jnz.t	d0:0,.L17
.L529:
	ld.bu	d15,[a5]4
.L530:
	jeq	d15,#0,.L18
.L531:
	jeq	d15,#1,.L19
.L532:
	jeq	d15,#2,.L20
.L533:
	j	.L21
.L18:
	insert	d2,d2,#0,#2,#1
	j	.L22
.L19:
	insert	d2,d2,#1,#2,#1
.L22:
	insert	d2,d2,#0,#5,#1
	j	.L23
.L20:
	extr.u	d0,d2,#0,#8
.L534:
	insert	d15,d0,#0,#2,#1
.L535:
	or	d15,#32
	insert	d2,d2,d15,#0,#8
.L23:
.L21:
	ld.bu	d15,[a5]5
.L536:
	ne	d15,d15,#0
.L537:
	insert	d2,d2,d15,#3,#1
	ld.bu	d15,[a5]6
.L538:
	ne	d15,d15,#0
.L539:
	insert	d2,d2,d15,#6,#1
	ld.bu	d15,[a5]7
.L540:
	ne	d15,d15,#0
.L541:
	insert	d2,d2,d15,#7,#1
	ld.bu	d15,[a5]8
.L542:
	ne	d15,d15,#0
.L543:
	insert	d2,d2,d15,#8,#1
	ld.bu	d15,[a5]9
.L544:
	ne	d15,d15,#0
.L545:
	insert	d2,d2,d15,#9,#7
	fret
.L197:
	; End of function
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_initSafetyWatchdog',code,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_initSafetyWatchdog'
	.align	2
	
	.global	IfxScuWdt_initSafetyWatchdog

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   313  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   314  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   315  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   316  void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config)
; Function IfxScuWdt_initSafetyWatchdog
.L85:
IfxScuWdt_initSafetyWatchdog:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   317  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   318      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   319      Ifx_SCU_WDTS_CON1 wdt_con1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   320  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   321      /* Read Config_0 register and clear wdt_con1 variable */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   322      wdt_con0.U = wdt->CON0.U;
	fcall	.cocofun_6
.L413:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   323      wdt_con1.U = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   324  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   325      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   326      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   327          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   328          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   329          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   330          wdt_con0.B.PW     ^= 0x003F;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   331  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   332          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   333          wdt->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   334      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   335  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   336      /* Initialize CON0 register, with modify access, with user defined parameters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   337       * Clear ENDINT bit to unprotect CON1 register for initialization
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   338       * see Table 3 (Modify Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   339      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   340      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   341      wdt_con0.B.PW      = config->password; //user defined password
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   342      wdt_con0.B.REL     = config->reload;   //user defined reload value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   343  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   344      /* Modify access ready - write WDT_CON0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   345      wdt->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   346  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   347      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   348      while (wdt->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   349      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   351      /* Initialize CON1 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   352      switch (config->inputFrequency)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   353      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   354      case IfxScu_WDTCON1_IR_divBy16384:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   355          wdt_con1.B.IR0 = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   356          wdt_con1.B.IR1 = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   357          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   358      case IfxScu_WDTCON1_IR_divBy256:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   359          wdt_con1.B.IR0 = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   360          wdt_con1.B.IR1 = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   361          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   362      case IfxScu_WDTCON1_IR_divBy64:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   363          wdt_con1.B.IR0 = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   364          wdt_con1.B.IR1 = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   365          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   366      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   367  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   368      wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   369      wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   370      wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   371      wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   372      wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   373      wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
	ld.bu	d15,[a5]10
	eq	d15,d15,#0
.L441:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   374  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   375      /* Finally write CON1 with user defined configuration */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   376      wdt->CON1.U = wdt_con1.U;
	insert	d2,d2,d15,#0,#1
	st.w	[a4]4,d2
.L442:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   377  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   378      /* Initialization finished - set Safety ENDINIT protection */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   379      IfxScuWdt_setSafetyEndinit(config->password);
	ld.hu	d4,[a5]0
	j	IfxScuWdt_setSafetyEndinit
.L256:
	
__IfxScuWdt_initSafetyWatchdog_function_end:
	.size	IfxScuWdt_initSafetyWatchdog,__IfxScuWdt_initSafetyWatchdog_function_end-IfxScuWdt_initSafetyWatchdog
.L112:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_serviceCpuWatchdog',code,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_serviceCpuWatchdog'
	.align	2
	
	.global	IfxScuWdt_serviceCpuWatchdog

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   380  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   381  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   382  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   383  void IfxScuWdt_serviceCpuWatchdog(uint16 password)
; Function IfxScuWdt_serviceCpuWatchdog
.L87:
IfxScuWdt_serviceCpuWatchdog:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   384  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   385      IfxScuWdt_setCpuEndinit(password);
	j	IfxScuWdt_setCpuEndinit
.L366:
	
__IfxScuWdt_serviceCpuWatchdog_function_end:
	.size	IfxScuWdt_serviceCpuWatchdog,__IfxScuWdt_serviceCpuWatchdog_function_end-IfxScuWdt_serviceCpuWatchdog
.L187:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_serviceSafetyWatchdog',code,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_serviceSafetyWatchdog'
	.align	2
	
	.global	IfxScuWdt_serviceSafetyWatchdog

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   386  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   387  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   388  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   389  void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
; Function IfxScuWdt_serviceSafetyWatchdog
.L89:
IfxScuWdt_serviceSafetyWatchdog:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   390  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   391      IfxScuWdt_setSafetyEndinit(password);
	j	IfxScuWdt_setSafetyEndinit
.L368:
	
__IfxScuWdt_serviceSafetyWatchdog_function_end:
	.size	IfxScuWdt_serviceSafetyWatchdog,__IfxScuWdt_serviceSafetyWatchdog_function_end-IfxScuWdt_serviceSafetyWatchdog
.L192:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_setCpuEndinit',code,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.text.IfxScuWdt.IfxScuWdt_setCpuEndinit'
	.align	2
	
	.global	IfxScuWdt_setCpuEndinit

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   392  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   393  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   394  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   395  void IfxScuWdt_setCpuEndinit(uint16 password)
; Function IfxScuWdt_setCpuEndinit
.L91:
IfxScuWdt_setCpuEndinit:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L414:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_7
.L291:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   452  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   453      return password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   454  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   455  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   456  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   458  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   460  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   462  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   463  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   464  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   465      uint16        password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   466      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   467  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   468      /* Read Password from Safety WDT CON0 register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   469       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   470       * to toggle them before returning password */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   471      password  = watchdog->CON0.B.PW;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   472      password ^= 0x003F;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   473  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   474      return password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   475  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   476  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   477  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   478  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   479  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   480      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   481      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   482      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   483  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   484      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   485      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   486          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   487          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   488          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   489          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   490  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   491          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   492          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   493      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   494  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   495      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   496      wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   497      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   498      watchdog->CON0.U   = wdt_con0.U;
	fcall	.cocofun_11
.L294:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   396  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   397      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   398  }
	ret
.L289:
	
__IfxScuWdt_setCpuEndinit_function_end:
	.size	IfxScuWdt_setCpuEndinit,__IfxScuWdt_setCpuEndinit_function_end-IfxScuWdt_setCpuEndinit
.L127:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_setSafetyEndinit',code,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.text.IfxScuWdt.IfxScuWdt_setSafetyEndinit'
	.align	2
	
	.global	IfxScuWdt_setSafetyEndinit

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   399  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   400  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   401  void IfxScuWdt_setSafetyEndinit(uint16 password)
; Function IfxScuWdt_setSafetyEndinit
.L93:
IfxScuWdt_setSafetyEndinit:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    25   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    26   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    27   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    28   * \ingroup IfxLld_Scu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    29   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    30   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    31   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    32   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    33   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    34   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    35   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    36   * \ingroup IfxLld_Scu_Std_Wdt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    37   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    39  #ifndef IFXSCUWDT_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    40  #define IFXSCUWDT_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    41  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    42  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    43  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    44  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    46  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    47  #include "Cpu/Std/Ifx_Types.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    48  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    49  #include "IfxScuWdt.asm.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    50  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    52  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    53  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    54  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    55  /** \brief Configuration structure for Scu Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    56   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    57   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    58   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    59  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    60  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    61      uint16            password;                          /**< \brief password for access to WDTxCON0 reg */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    62      uint16            reload;                            /**< \brief WDT reload value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    63      IfxScu_WDTCON1_IR inputFrequency;                    /**< \brief input frequency of the WDT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    64      boolean           disableWatchdog;                   /**< \brief Disable Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    65      boolean           enableSmuRestriction;              /**< \brief Unlock Restriction Request Control Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    66      boolean           enableAutomaticPasswordChange;     /**< \brief Password Auto-sequence Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    67      boolean           enableTimerCheck;                  /**< \brief Counter Check Request Bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    68      boolean           enableTimerCheckTolerance;         /**< \brief Timer Check Tolerance Request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    69      boolean           clrInternalResetFlag;              /**< \brief Clear Internal Reset Flag */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    70  } IfxScuWdt_Config;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    71  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    72  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    73   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    74  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    76  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    77  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    78  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    79  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    80   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    81   *   values are for software specific, not necessarily hardware reset values.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    82   *   User must use this API call before IfxScuWdt_Init API call
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    83   * \param config ScuWdt configuration structure to be initialized
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    84   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    85   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    86  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    88  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    89   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    90   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    91   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    92   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    93   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    94   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    95   * \param wdt reference to register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    96   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    97   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    98   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	    99  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   100  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   101  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   102   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   103   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   104   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   105   *   with this interface.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   106   *   API corresponds to one instance of the hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   107   *   User must use this API call for each instance of the WDT hardware module used.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   108   * \param wdt reference to register map of Safety WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   109   * \param config ScuWdt configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   110   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   112  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   114  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   116  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   117   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   118  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   119  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   120  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   121  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   122  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   123  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   124   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   125   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   126   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   127   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   128   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   129   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   130   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   131   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   132   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   133   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   134   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   135  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   136  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   137  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   138   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   139   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   140   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   141   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   142   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   143   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   144   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   145   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   146   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   147   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   148  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   149  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   150  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   151   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   152   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   153   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   154   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   155   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   156   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   157   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   158   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   159   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   160  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   162  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   163   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   164   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   165   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   166   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   167   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   168   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   169   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   170   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   171  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   172  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   173  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   174  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   175  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   176  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   177  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   178   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   179   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   180   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   181   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   182   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   183   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   184   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   185   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   186   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   187  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   189  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   190   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   191   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   192   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   193   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   194   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   195   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   196   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   197   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   199  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   200  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   201  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   202   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   203   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   204   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   205   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   206   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   207   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   209  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   211  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   212   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   213   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   214   * User need to use this API call after modifying any ENDINIT protected register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   215   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   216   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   217   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   218   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   219  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   221  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   222  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   223  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   224   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   226  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   227  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   228  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   229  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   230  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   231   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   232   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   233   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   234   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   235   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   236   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   237   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   238   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   239  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   240  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   242   * \return Endinit status for the Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   244  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   246  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   247   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   248   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   249   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   250   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   251   * This API is only meant to be used with startup routines where function call is not possible.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   252   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   253   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   254  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   255  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   259  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   261   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   262   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   263   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   264   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   265   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   266   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   267   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   268  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   269  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   270  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   271   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   272   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   273   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   274   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   275   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   276   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   277   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   278   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   279  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   280  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   281  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   282   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   283   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   284   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   285   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   286   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   289  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   291  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   292   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   293   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   294   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   295   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   296   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   297   * \param reload Reload value for the timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   298   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   299   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   300  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   301  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   302  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   303   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   304   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   305   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   306   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   307   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   308   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   309   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   310  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   311  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   312  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   313   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   314   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   315   * after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   316   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   317   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   318   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   320  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   321  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   322  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   323   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   324   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   325   *   periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   326   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   327   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   328   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   329   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   330  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   331  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   332  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   333   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   334   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   335   * periodically after this API call.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   336   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   337   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   338   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   339   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   340  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   341  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   342  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   343   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   344   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   345   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   346   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   347   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   349  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   351  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   352   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   353   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   354   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   355   * or store the password globally in a global variable at the application memory.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   356   * \return password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   357   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   358  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   360  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   362   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   363   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   364   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   365   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   366   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   367   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   368  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   369  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   370  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   371   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   372   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   373   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   374   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   375   * \param password Existing (Application specific) password for the Watchdog module.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   376   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   377   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   378  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   379  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   380  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   381  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   382  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   383  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   384  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   386  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   387  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   388      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   389      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   390      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   391  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   392      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   393      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   394          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   395          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   396          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   397          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   398  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   399          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   400          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   401      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   403      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   404      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   405      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   406      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   408      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   409      while (watchdog->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   410      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   411  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   412  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   413  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   414  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   415  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   416      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   417      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   418      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   419      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   420  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   421      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   422      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   423          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   424          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   425          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   426          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   427  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   428          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   429          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   430      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   431  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   432      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   433      wdt_con0.B.ENDINIT = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   434      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   435      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   437      /* read back ENDINIT and wait until it has been cleared */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   438      while (watchdog->CON0.B.ENDINIT == 1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   439      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   440  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   441  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   442  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   443  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   444  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   445      uint16 password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   446  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   447      /* Read Password from CON0 register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   448       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   449       * to toggle them before returning password */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   450      password  = watchdog->CON0.B.PW;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   451      password ^= 0x003F;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   452  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   453      return password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   454  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   455  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   456  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   457  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   458  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   459      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   460  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   462  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   463  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   464  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   465      uint16        password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   466      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   467  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   468      /* Read Password from Safety WDT CON0 register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   469       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   470       * to toggle them before returning password */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   471      password  = watchdog->CON0.B.PW;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   472      password ^= 0x003F;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   473  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   474      return password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   475  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   476  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   477  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   478  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   479  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   480      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   481      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   482      wdt_con0.U = watchdog->CON0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   483  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   484      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   485      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   486          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   487          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   488          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   489          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   490  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   491          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   492          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   493      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   494  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   495      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   496      wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   497      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   498      watchdog->CON0.U   = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   499  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   500      /* read back ENDINIT and wait until it has been set */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   501      while (watchdog->CON0.B.ENDINIT == 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   502      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   503  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   504      // FIXME: old version: removed this line after check: watchdog->CON0.U; /* read is required */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   505  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   506  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   507  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   508  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   509  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   510      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   511  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   512      /* Read Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   513      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   514      wdt_con0.U = watchdog->CON0.U;
	fcall	.cocofun_8
.L461:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   515  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   516      if (wdt_con0.B.LCK)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   517      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   518          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   519          wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   520          wdt_con0.B.LCK     = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   521          wdt_con0.B.PW      = password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   522  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   523          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   524          watchdog->CON0.U = wdt_con0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   525      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   526  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   527      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   528      wdt_con0.B.ENDINIT = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   529      wdt_con0.B.LCK     = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.h	   530      watchdog->CON0.U   = wdt_con0.U;
	fcall	.cocofun_10
.L304:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   402  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   403      IfxScuWdt_setSafetyEndinitInline(password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Scu\Std\IfxScuWdt.c	   404  }
	ret
.L301:
	
__IfxScuWdt_setSafetyEndinit_function_end:
	.size	IfxScuWdt_setSafetyEndinit,__IfxScuWdt_setSafetyEndinit_function_end-IfxScuWdt_setSafetyEndinit
.L132:
	; End of function
	
	.calls	'IfxScuWdt_disableCpuWatchdog','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxScuWdt_disableCpuWatchdog','IfxScuWdt_setCpuEndinit'
	.calls	'IfxScuWdt_disableSafetyWatchdog','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxScuWdt_disableSafetyWatchdog','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxScuWdt_enableCpuWatchdog','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxScuWdt_enableCpuWatchdog','IfxScuWdt_setCpuEndinit'
	.calls	'IfxScuWdt_enableSafetyWatchdog','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxScuWdt_enableSafetyWatchdog','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxScuWdt_initCpuWatchdog','IfxScuWdt_setCpuEndinit'
	.calls	'IfxScuWdt_initSafetyWatchdog','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxScuWdt_serviceCpuWatchdog','IfxScuWdt_setCpuEndinit'
	.calls	'IfxScuWdt_serviceSafetyWatchdog','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxScuWdt_changeCpuWatchdogPassword','.cocofun_7'
	.calls	'IfxScuWdt_changeCpuWatchdogPassword','.cocofun_11'
	.calls	'.cocofun_7','.cocofun_12'
	.calls	'.cocofun_7','.cocofun_13'
	.calls	'.cocofun_13','.cocofun_14'
	.calls	'.cocofun_12','.cocofun_15'
	.calls	'IfxScuWdt_changeCpuWatchdogReload','.cocofun_7'
	.calls	'IfxScuWdt_changeCpuWatchdogReload','.cocofun_11'
	.calls	'IfxScuWdt_changeSafetyWatchdogPassword','.cocofun_8'
	.calls	'IfxScuWdt_changeSafetyWatchdogPassword','.cocofun_10'
	.calls	'.cocofun_8','.cocofun_13'
	.calls	'IfxScuWdt_changeSafetyWatchdogReload','.cocofun_8'
	.calls	'IfxScuWdt_changeSafetyWatchdogReload','.cocofun_10'
	.calls	'IfxScuWdt_clearCpuEndinit','.cocofun_12'
	.calls	'IfxScuWdt_clearCpuEndinit','.cocofun_9'
	.calls	'.cocofun_9','.cocofun_14'
	.calls	'IfxScuWdt_clearSafetyEndinit','.cocofun_9'
	.calls	'IfxScuWdt_disableCpuWatchdog','.cocofun_12'
	.calls	'IfxScuWdt_enableCpuWatchdog','.cocofun_12'
	.calls	'IfxScuWdt_getCpuWatchdogPassword','.cocofun_15'
	.calls	'IfxScuWdt_initCpuWatchdog','.cocofun_6'
	.calls	'IfxScuWdt_initSafetyWatchdog','.cocofun_6'
	.calls	'IfxScuWdt_setCpuEndinit','.cocofun_7'
	.calls	'IfxScuWdt_setCpuEndinit','.cocofun_11'
	.calls	'IfxScuWdt_setSafetyEndinit','.cocofun_8'
	.calls	'IfxScuWdt_setSafetyEndinit','.cocofun_10'
	.calls	'IfxScuWdt_changeCpuWatchdogPassword','',0
	.calls	'.cocofun_11','',0
	.calls	'.cocofun_7','',0
	.calls	'.cocofun_13','',0
	.calls	'.cocofun_14','',0
	.calls	'.cocofun_12','',0
	.calls	'.cocofun_15','',0
	.calls	'IfxScuWdt_changeCpuWatchdogReload','',0
	.calls	'IfxScuWdt_changeSafetyWatchdogPassword','',0
	.calls	'.cocofun_10','',0
	.calls	'.cocofun_8','',0
	.calls	'IfxScuWdt_changeSafetyWatchdogReload','',0
	.calls	'IfxScuWdt_clearCpuEndinit','',0
	.calls	'.cocofun_9','',0
	.calls	'IfxScuWdt_clearSafetyEndinit','',0
	.calls	'IfxScuWdt_disableCpuWatchdog','',0
	.calls	'IfxScuWdt_disableSafetyWatchdog','',0
	.calls	'IfxScuWdt_enableCpuWatchdog','',0
	.calls	'IfxScuWdt_enableSafetyWatchdog','',0
	.calls	'IfxScuWdt_getCpuWatchdogPassword','',0
	.calls	'IfxScuWdt_getSafetyWatchdogPassword','',0
	.calls	'IfxScuWdt_initConfig','',0
	.calls	'IfxScuWdt_initCpuWatchdog','',0
	.calls	'.cocofun_6','',0
	.calls	'IfxScuWdt_initSafetyWatchdog','',0
	.calls	'IfxScuWdt_serviceCpuWatchdog','',0
	.calls	'IfxScuWdt_serviceSafetyWatchdog','',0
	.calls	'IfxScuWdt_setCpuEndinit','',0
	.calls	'IfxScuWdt_setSafetyEndinit','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L95:
	.word	43740
	.half	3
	.word	.L96
	.byte	4
.L94:
	.byte	1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L97
	.byte	2
	.byte	'unsigned int',0,4,7,2
	.byte	'int',0,4,5,2
	.byte	'unsigned int',0,4,7,3
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,2,133,8,16,4,4
	.byte	'ENDINIT',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'LCK',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'PW',0,4
	.word	210
	.byte	14,16,2,35,0,4
	.byte	'REL',0,4
	.word	210
	.byte	16,0,2,35,0,0
.L252:
	.byte	5,2,187,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	226
	.byte	4,2,35,0,0,2
	.byte	'unsigned char',0,1,8
.L265:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,2,142,8,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	2,6,2,35,0,4
	.byte	'IR0',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'DR',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'IR1',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'UR',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'PAR',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'TCR',0,1
	.word	362
	.byte	1,7,2,35,1,4
	.byte	'TCTR',0,1
	.word	362
	.byte	7,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	379
	.byte	16,0,2,35,2,0
.L254:
	.byte	5,2,195,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	401
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,2,157,8,16,4,4
	.byte	'AE',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'OE',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'IS0',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'DS',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'TO',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'IS1',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'US',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'PAS',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'TCS',0,1
	.word	362
	.byte	1,7,2,35,1,4
	.byte	'TCT',0,1
	.word	362
	.byte	7,0,2,35,1,4
	.byte	'TIM',0,2
	.word	379
	.byte	16,0,2,35,2,0,5,2,203,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	645
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTCPU',0,2,243,13,25,12,6
	.byte	'CON0',0
	.word	322
	.byte	4,2,35,0,6
	.byte	'CON1',0
	.word	605
	.byte	4,2,35,4,6
	.byte	'SR',0
	.word	836
	.byte	4,2,35,8,0,7
	.word	876
.L247:
	.byte	8
	.word	939
.L272:
	.byte	9
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,1,130,3,17,1,1
.L274:
	.byte	10
	.byte	'watchdog',0,1,130,3,65
	.word	944
.L276:
	.byte	10
	.byte	'password',0,1,130,3,82
	.word	379
.L278:
	.byte	11,0
.L283:
	.byte	9
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,1,158,3,17,1,1
.L285:
	.byte	10
	.byte	'password',0,1,158,3,59
	.word	379
.L287:
	.byte	11,0
.L293:
	.byte	9
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,1,222,3,17,1,1
.L295:
	.byte	10
	.byte	'watchdog',0,1,222,3,63
	.word	944
.L297:
	.byte	10
	.byte	'password',0,1,222,3,80
	.word	379
.L299:
	.byte	11,0
.L303:
	.byte	9
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,1,252,3,17,1,1
.L305:
	.byte	10
	.byte	'password',0,1,252,3,57
	.word	379
.L307:
	.byte	11,0
.L357:
	.byte	12
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,1,187,3,19
	.word	379
	.byte	1,1
.L358:
	.byte	10
	.byte	'watchdog',0,1,187,3,74
	.word	944
.L360:
	.byte	11,0
.L363:
	.byte	12
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,1,207,3,19
	.word	379
	.byte	1,1
.L364:
	.byte	11,0,9
	.byte	'__stopPerfCounters',0,3,3,217,1,17,1,1,11,0,2
	.byte	'unsigned long long int',0,8,7,13
	.byte	'void',0,8
	.word	1409
	.byte	12
	.byte	'__ld64',0,3,4,110,19
	.word	1383
	.byte	1,1,10
	.byte	'addr',0,4,110,32
	.word	1415
	.byte	11,0,9
	.byte	'__st64',0,3,4,118,17,1,1,10
	.byte	'addr',0,4,118,30
	.word	1415
	.byte	10
	.byte	'value',0,4,118,43
	.word	1383
	.byte	11,0,14,6,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_none',0,1,0
.L267:
	.byte	12
	.byte	'IfxCpu_getCoreIndex',0,3,5,170,5,31
	.word	1496
	.byte	1,1
.L269:
	.byte	11,0,12
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,185,4,20
	.word	362
	.byte	1,1,11,0
.L321:
	.byte	2
	.byte	'unsigned long int',0,4,7,12
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,190,5,19
	.word	1627
	.byte	1,1,10
	.byte	'address',0,5,190,5,55
	.word	1627
	.byte	11,0,12
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,198,5,20
	.word	362
	.byte	1,1,10
	.byte	'address',0,5,198,5,70
	.word	1627
	.byte	11,0,9
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,153,7,17,1,1,10
	.byte	'address',0,5,153,7,56
	.word	1627
	.byte	10
	.byte	'count',0,5,153,7,72
	.word	1627
	.byte	11,0,7
	.word	203
	.byte	16
	.byte	'__mfcr',0
	.word	1856
	.byte	1,1,1,1,17
	.word	203
	.byte	0,14,7,153,10,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,18,1,59,9,12,6
	.byte	'password',0
	.word	379
	.byte	2,2,35,0,6
	.byte	'reload',0
	.word	379
	.byte	2,2,35,2,6
	.byte	'inputFrequency',0
	.word	1883
	.byte	1,2,35,4,6
	.byte	'disableWatchdog',0
	.word	362
	.byte	1,2,35,5,6
	.byte	'enableSmuRestriction',0
	.word	362
	.byte	1,2,35,6,6
	.byte	'enableAutomaticPasswordChange',0
	.word	362
	.byte	1,2,35,7,6
	.byte	'enableTimerCheck',0
	.word	362
	.byte	1,2,35,8,6
	.byte	'enableTimerCheckTolerance',0
	.word	362
	.byte	1,2,35,9,6
	.byte	'clrInternalResetFlag',0
	.word	362
	.byte	1,2,35,10,0
.L244:
	.byte	8
	.word	1978
	.byte	19
	.word	1978
.L249:
	.byte	8
	.word	2232
	.byte	3
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,2,173,8,16,4,4
	.byte	'ENDINIT',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'LCK',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'PW',0,4
	.word	210
	.byte	14,16,2,35,0,4
	.byte	'REL',0,4
	.word	210
	.byte	16,0,2,35,0,0
.L260:
	.byte	5,2,211,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2242
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,2,182,8,16,4,4
	.byte	'CLRIRF',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'IR0',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'DR',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'IR1',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'UR',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'PAR',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'TCR',0,1
	.word	362
	.byte	1,7,2,35,1,4
	.byte	'TCTR',0,1
	.word	362
	.byte	7,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	379
	.byte	16,0,2,35,2,0
.L262:
	.byte	5,2,219,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2376
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,2,198,8,16,4,4
	.byte	'AE',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'OE',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'IS0',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'DS',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'TO',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'IS1',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'US',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'PAS',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'TCS',0,1
	.word	362
	.byte	1,7,2,35,1,4
	.byte	'TCT',0,1
	.word	362
	.byte	7,0,2,35,1,4
	.byte	'TIM',0,2
	.word	379
	.byte	16,0,2,35,2,0,5,2,227,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2636
	.byte	4,2,35,0,0,3
	.byte	'_Ifx_SCU_WDTS',0,2,251,13,25,12,6
	.byte	'CON0',0
	.word	2336
	.byte	4,2,35,0,6
	.byte	'CON1',0
	.word	2596
	.byte	4,2,35,4,6
	.byte	'SR',0
	.word	2825
	.byte	4,2,35,8,0,7
	.word	2865
.L257:
	.byte	8
	.word	2926
	.byte	20
	.word	949
	.byte	21
	.word	989
	.byte	21
	.word	1007
	.byte	11,0,20
	.word	1027
	.byte	21
	.word	1070
	.byte	11,0,20
	.word	1090
	.byte	21
	.word	1128
	.byte	21
	.word	1146
	.byte	11,0,20
	.word	1166
	.byte	21
	.word	1207
	.byte	11,0,3
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,8,92,16,4,4
	.byte	'CORE_ID',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	210
	.byte	29,0,2,35,0,0
.L270:
	.byte	5,8,223,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	2994
	.byte	4,2,35,0,0,20
	.word	1227
	.byte	21
	.word	1278
	.byte	11,0,20
	.word	1298
	.byte	11,0,20
	.word	1354
	.byte	11,0,20
	.word	1420
	.byte	21
	.word	1438
	.byte	11,0,20
	.word	1453
	.byte	21
	.word	1467
	.byte	21
	.word	1480
	.byte	11,0,20
	.word	1551
	.byte	11,0,20
	.word	1585
	.byte	11,0,20
	.word	1648
	.byte	21
	.word	1689
	.byte	11,0,20
	.word	1708
	.byte	21
	.word	1763
	.byte	11,0,20
	.word	1782
	.byte	21
	.word	1822
	.byte	21
	.word	1839
	.byte	11,0,2
	.byte	'short int',0,2,5,22
	.byte	'__wchar_t',0,9,1,1
	.word	3213
	.byte	22
	.byte	'__size_t',0,9,1,1
	.word	187
	.byte	22
	.byte	'__ptrdiff_t',0,9,1,1
	.word	203
	.byte	23,1,8
	.word	3281
	.byte	22
	.byte	'__codeptr',0,9,1,1
	.word	3283
	.byte	22
	.byte	'__intptr_t',0,9,1,1
	.word	203
	.byte	22
	.byte	'__uintptr_t',0,9,1,1
	.word	187
	.byte	22
	.byte	'_iob_flag_t',0,10,82,25
	.word	379
	.byte	22
	.byte	'IfxScu_WDTCON1_IR',0,7,158,10,3
	.word	1883
	.byte	22
	.byte	'uint8',0,11,89,24
	.word	362
	.byte	22
	.byte	'sint16',0,11,90,24
	.word	3213
	.byte	22
	.byte	'uint16',0,11,91,24
	.word	379
	.byte	2
	.byte	'long int',0,4,5,22
	.byte	'sint32',0,11,92,24
	.word	3436
	.byte	22
	.byte	'uint32',0,11,93,24
	.word	1627
	.byte	2
	.byte	'float',0,4,4,22
	.byte	'float32',0,11,94,24
	.word	3478
	.byte	22
	.byte	'boolean',0,11,104,24
	.word	362
	.byte	2
	.byte	'long long int',0,8,5,22
	.byte	'sint64',0,12,36,28
	.word	3519
	.byte	22
	.byte	'uint64',0,12,37,28
	.word	1383
	.byte	22
	.byte	'pvoid',0,12,40,28
	.word	1415
	.byte	22
	.byte	'Ifx_TickTime',0,12,43,28
	.word	3519
	.byte	3
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,2,45,16,4,4
	.byte	'EN0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'EN1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'EN2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'EN3',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'EN4',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'EN5',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'EN6',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'EN7',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'EN8',0,1
	.word	362
	.byte	1,7,2,35,1,4
	.byte	'EN9',0,1
	.word	362
	.byte	1,6,2,35,1,4
	.byte	'EN10',0,1
	.word	362
	.byte	1,5,2,35,1,4
	.byte	'EN11',0,1
	.word	362
	.byte	1,4,2,35,1,4
	.byte	'EN12',0,1
	.word	362
	.byte	1,3,2,35,1,4
	.byte	'EN13',0,1
	.word	362
	.byte	1,2,2,35,1,4
	.byte	'EN14',0,1
	.word	362
	.byte	1,1,2,35,1,4
	.byte	'EN15',0,1
	.word	362
	.byte	1,0,2,35,1,4
	.byte	'EN16',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'EN17',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'EN18',0,1
	.word	362
	.byte	1,5,2,35,2,4
	.byte	'EN19',0,1
	.word	362
	.byte	1,4,2,35,2,4
	.byte	'EN20',0,1
	.word	362
	.byte	1,3,2,35,2,4
	.byte	'EN21',0,1
	.word	362
	.byte	1,2,2,35,2,4
	.byte	'EN22',0,1
	.word	362
	.byte	1,1,2,35,2,4
	.byte	'EN23',0,1
	.word	362
	.byte	1,0,2,35,2,4
	.byte	'EN24',0,1
	.word	362
	.byte	1,7,2,35,3,4
	.byte	'EN25',0,1
	.word	362
	.byte	1,6,2,35,3,4
	.byte	'EN26',0,1
	.word	362
	.byte	1,5,2,35,3,4
	.byte	'EN27',0,1
	.word	362
	.byte	1,4,2,35,3,4
	.byte	'EN28',0,1
	.word	362
	.byte	1,3,2,35,3,4
	.byte	'EN29',0,1
	.word	362
	.byte	1,2,2,35,3,4
	.byte	'EN30',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'EN31',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_ACCEN0_Bits',0,2,79,3
	.word	3601
	.byte	3
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,2,82,16,4,4
	.byte	'reserved_0',0,4
	.word	187
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_SCU_ACCEN1_Bits',0,2,85,3
	.word	4158
	.byte	3
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,2,88,16,4,4
	.byte	'STM0DIS',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'STM1DIS',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'STM2DIS',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	187
	.byte	29,0,2,35,0,0,22
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,2,94,3
	.word	4235
	.byte	3
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,2,97,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	4,4,2,35,0,4
	.byte	'BAUD2DIV',0,1
	.word	362
	.byte	4,0,2,35,0,4
	.byte	'SRIDIV',0,1
	.word	362
	.byte	4,4,2,35,1,4
	.byte	'LPDIV',0,1
	.word	362
	.byte	4,0,2,35,1,4
	.byte	'SPBDIV',0,1
	.word	362
	.byte	4,4,2,35,2,4
	.byte	'FSI2DIV',0,1
	.word	362
	.byte	2,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	362
	.byte	2,0,2,35,2,4
	.byte	'FSIDIV',0,1
	.word	362
	.byte	2,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	362
	.byte	2,4,2,35,3,4
	.byte	'CLKSEL',0,1
	.word	362
	.byte	2,2,2,35,3,4
	.byte	'UP',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_CCUCON0_Bits',0,2,111,3
	.word	4371
	.byte	3
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,2,114,16,4,4
	.byte	'CANDIV',0,1
	.word	362
	.byte	4,4,2,35,0,4
	.byte	'ERAYDIV',0,1
	.word	362
	.byte	4,0,2,35,0,4
	.byte	'STMDIV',0,1
	.word	362
	.byte	4,4,2,35,1,4
	.byte	'GTMDIV',0,1
	.word	362
	.byte	4,0,2,35,1,4
	.byte	'ETHDIV',0,1
	.word	362
	.byte	4,4,2,35,2,4
	.byte	'ASCLINFDIV',0,1
	.word	362
	.byte	4,0,2,35,2,4
	.byte	'ASCLINSDIV',0,1
	.word	362
	.byte	4,4,2,35,3,4
	.byte	'INSEL',0,1
	.word	362
	.byte	2,2,2,35,3,4
	.byte	'UP',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_CCUCON1_Bits',0,2,126,3
	.word	4653
	.byte	3
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,2,129,1,16,4,4
	.byte	'BBBDIV',0,1
	.word	362
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	187
	.byte	26,2,2,35,0,4
	.byte	'UP',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_CCUCON2_Bits',0,2,135,1,3
	.word	4891
	.byte	3
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,2,138,1,16,4,4
	.byte	'PLLDIV',0,1
	.word	362
	.byte	6,2,2,35,0,4
	.byte	'PLLSEL',0,1
	.word	362
	.byte	2,0,2,35,0,4
	.byte	'PLLERAYDIV',0,1
	.word	362
	.byte	6,2,2,35,1,4
	.byte	'PLLERAYSEL',0,1
	.word	362
	.byte	2,0,2,35,1,4
	.byte	'SRIDIV',0,1
	.word	362
	.byte	6,2,2,35,2,4
	.byte	'SRISEL',0,1
	.word	362
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	6,2,2,35,3,4
	.byte	'UP',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_CCUCON3_Bits',0,2,149,1,3
	.word	5019
	.byte	3
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,2,152,1,16,4,4
	.byte	'SPBDIV',0,1
	.word	362
	.byte	6,2,2,35,0,4
	.byte	'SPBSEL',0,1
	.word	362
	.byte	2,0,2,35,0,4
	.byte	'GTMDIV',0,1
	.word	362
	.byte	6,2,2,35,1,4
	.byte	'GTMSEL',0,1
	.word	362
	.byte	2,0,2,35,1,4
	.byte	'STMDIV',0,1
	.word	362
	.byte	6,2,2,35,2,4
	.byte	'STMSEL',0,1
	.word	362
	.byte	2,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	6,2,2,35,3,4
	.byte	'UP',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_CCUCON4_Bits',0,2,163,1,3
	.word	5246
	.byte	3
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,2,166,1,16,4,4
	.byte	'MAXDIV',0,1
	.word	362
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	187
	.byte	26,2,2,35,0,4
	.byte	'UP',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_CCUCON5_Bits',0,2,172,1,3
	.word	5465
	.byte	3
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,2,175,1,16,4,4
	.byte	'CPU0DIV',0,1
	.word	362
	.byte	6,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	187
	.byte	26,0,2,35,0,0,22
	.byte	'Ifx_SCU_CCUCON6_Bits',0,2,179,1,3
	.word	5593
	.byte	3
	.byte	'_Ifx_SCU_CHIPID_Bits',0,2,182,1,16,4,4
	.byte	'CHREV',0,1
	.word	362
	.byte	6,2,2,35,0,4
	.byte	'CHTEC',0,1
	.word	362
	.byte	2,0,2,35,0,4
	.byte	'CHID',0,1
	.word	362
	.byte	8,0,2,35,1,4
	.byte	'EEA',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'UCODE',0,1
	.word	362
	.byte	7,0,2,35,2,4
	.byte	'FSIZE',0,1
	.word	362
	.byte	4,4,2,35,3,4
	.byte	'SP',0,1
	.word	362
	.byte	2,2,2,35,3,4
	.byte	'SEC',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_CHIPID_Bits',0,2,193,1,3
	.word	5693
	.byte	3
	.byte	'_Ifx_SCU_DTSCON_Bits',0,2,196,1,16,4,4
	.byte	'PWD',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'START',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	362
	.byte	2,4,2,35,0,4
	.byte	'CAL',0,4
	.word	187
	.byte	22,6,2,35,0,4
	.byte	'reserved_26',0,1
	.word	362
	.byte	5,1,2,35,3,4
	.byte	'SLCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_DTSCON_Bits',0,2,204,1,3
	.word	5901
	.byte	3
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,2,207,1,16,4,4
	.byte	'LOWER',0,2
	.word	379
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	362
	.byte	5,1,2,35,1,4
	.byte	'LLU',0,1
	.word	362
	.byte	1,0,2,35,1,4
	.byte	'UPPER',0,2
	.word	379
	.byte	10,6,2,35,2,4
	.byte	'reserved_26',0,1
	.word	362
	.byte	4,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'UOF',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_DTSLIM_Bits',0,2,216,1,3
	.word	6066
	.byte	3
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,2,219,1,16,4,4
	.byte	'RESULT',0,2
	.word	379
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	362
	.byte	4,2,2,35,1,4
	.byte	'RDY',0,1
	.word	362
	.byte	1,1,2,35,1,4
	.byte	'BUSY',0,1
	.word	362
	.byte	1,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	379
	.byte	16,0,2,35,2,0,22
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,2,226,1,3
	.word	6249
	.byte	3
	.byte	'_Ifx_SCU_EICR_Bits',0,2,229,1,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	4,4,2,35,0,4
	.byte	'EXIS0',0,1
	.word	362
	.byte	3,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'FEN0',0,1
	.word	362
	.byte	1,7,2,35,1,4
	.byte	'REN0',0,1
	.word	362
	.byte	1,6,2,35,1,4
	.byte	'LDEN0',0,1
	.word	362
	.byte	1,5,2,35,1,4
	.byte	'EIEN0',0,1
	.word	362
	.byte	1,4,2,35,1,4
	.byte	'INP0',0,1
	.word	362
	.byte	3,1,2,35,1,4
	.byte	'reserved_15',0,4
	.word	187
	.byte	5,12,2,35,0,4
	.byte	'EXIS1',0,1
	.word	362
	.byte	3,1,2,35,2,4
	.byte	'reserved_23',0,1
	.word	362
	.byte	1,0,2,35,2,4
	.byte	'FEN1',0,1
	.word	362
	.byte	1,7,2,35,3,4
	.byte	'REN1',0,1
	.word	362
	.byte	1,6,2,35,3,4
	.byte	'LDEN1',0,1
	.word	362
	.byte	1,5,2,35,3,4
	.byte	'EIEN1',0,1
	.word	362
	.byte	1,4,2,35,3,4
	.byte	'INP1',0,1
	.word	362
	.byte	3,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EICR_Bits',0,2,248,1,3
	.word	6403
	.byte	3
	.byte	'_Ifx_SCU_EIFR_Bits',0,2,251,1,16,4,4
	.byte	'INTF0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'INTF1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'INTF2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'INTF3',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'INTF4',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'INTF5',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'INTF6',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'INTF7',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	187
	.byte	24,0,2,35,0,0,22
	.byte	'Ifx_SCU_EIFR_Bits',0,2,134,2,3
	.word	6767
	.byte	3
	.byte	'_Ifx_SCU_EMSR_Bits',0,2,137,2,16,4,4
	.byte	'POL',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'MODE',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'ENON',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'PSEL',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,2
	.word	379
	.byte	12,0,2,35,0,4
	.byte	'EMSF',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'SEMSF',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	362
	.byte	6,0,2,35,2,4
	.byte	'EMSFM',0,1
	.word	362
	.byte	2,6,2,35,3,4
	.byte	'SEMSFM',0,1
	.word	362
	.byte	2,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	362
	.byte	4,0,2,35,3,0,22
	.byte	'Ifx_SCU_EMSR_Bits',0,2,150,2,3
	.word	6978
	.byte	3
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,2,153,2,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	7,1,2,35,0,4
	.byte	'EDCON',0,2
	.word	379
	.byte	2,7,2,35,0,4
	.byte	'reserved_9',0,4
	.word	187
	.byte	23,0,2,35,0,0,22
	.byte	'Ifx_SCU_ESRCFG_Bits',0,2,158,2,3
	.word	7230
	.byte	3
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,2,161,2,16,4,4
	.byte	'ARI',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'ARC',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	187
	.byte	30,0,2,35,0,0,22
	.byte	'Ifx_SCU_ESROCFG_Bits',0,2,166,2,3
	.word	7348
	.byte	3
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,2,169,2,16,4,4
	.byte	'reserved_0',0,4
	.word	187
	.byte	28,4,2,35,0,4
	.byte	'EVR13OFF',0,1
	.word	362
	.byte	1,3,2,35,3,4
	.byte	'BPEVR13OFF',0,1
	.word	362
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVR13CON_Bits',0,2,176,2,3
	.word	7459
	.byte	3
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,2,179,2,16,4,4
	.byte	'ADC13V',0,1
	.word	362
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	8,0,2,35,1,4
	.byte	'ADCSWDV',0,1
	.word	362
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	7,1,2,35,3,4
	.byte	'VAL',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,2,186,2,3
	.word	7622
	.byte	3
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,2,189,2,16,4,4
	.byte	'EVR13OVMOD',0,1
	.word	362
	.byte	2,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	362
	.byte	2,4,2,35,0,4
	.byte	'EVR13UVMOD',0,1
	.word	362
	.byte	2,2,2,35,0,4
	.byte	'reserved_6',0,2
	.word	379
	.byte	10,0,2,35,0,4
	.byte	'SWDOVMOD',0,1
	.word	362
	.byte	2,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	362
	.byte	2,4,2,35,2,4
	.byte	'SWDUVMOD',0,1
	.word	362
	.byte	2,2,2,35,2,4
	.byte	'reserved_22',0,2
	.word	379
	.byte	8,2,2,35,2,4
	.byte	'SLCK',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,2,201,2,3
	.word	7784
	.byte	3
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,2,204,2,16,4,4
	.byte	'EVR13OVVAL',0,1
	.word	362
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	8,0,2,35,1,4
	.byte	'SWDOVVAL',0,1
	.word	362
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	6,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVROVMON_Bits',0,2,212,2,3
	.word	8062
	.byte	3
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,2,215,2,16,4,4
	.byte	'reserved_0',0,4
	.word	187
	.byte	28,4,2,35,0,4
	.byte	'RSTSWDOFF',0,1
	.word	362
	.byte	1,3,2,35,3,4
	.byte	'BPRSTSWDOFF',0,1
	.word	362
	.byte	1,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,2,222,2,3
	.word	8241
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,2,225,2,16,4,4
	.byte	'SD33P',0,1
	.word	362
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	362
	.byte	4,0,2,35,0,4
	.byte	'SD33I',0,1
	.word	362
	.byte	4,4,2,35,1,4
	.byte	'reserved_12',0,4
	.word	187
	.byte	19,1,2,35,0,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,2,232,2,3
	.word	8401
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,2,235,2,16,4,4
	.byte	'SDFREQSPRD',0,1
	.word	362
	.byte	4,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	362
	.byte	4,0,2,35,0,4
	.byte	'TON',0,1
	.word	362
	.byte	8,0,2,35,1,4
	.byte	'TOFF',0,1
	.word	362
	.byte	8,0,2,35,2,4
	.byte	'SDSTEP',0,1
	.word	362
	.byte	4,4,2,35,3,4
	.byte	'SYNCDIV',0,1
	.word	362
	.byte	3,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,2,244,2,3
	.word	8562
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,2,247,2,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	8,0,2,35,0,4
	.byte	'STBS',0,1
	.word	362
	.byte	2,6,2,35,1,4
	.byte	'STSP',0,1
	.word	362
	.byte	2,4,2,35,1,4
	.byte	'NS',0,1
	.word	362
	.byte	2,2,2,35,1,4
	.byte	'OL',0,1
	.word	362
	.byte	1,1,2,35,1,4
	.byte	'PIAD',0,1
	.word	362
	.byte	1,0,2,35,1,4
	.byte	'ADCMODE',0,1
	.word	362
	.byte	4,4,2,35,2,4
	.byte	'ADCLPF',0,1
	.word	362
	.byte	2,2,2,35,2,4
	.byte	'ADCLSB',0,1
	.word	362
	.byte	1,1,2,35,2,4
	.byte	'reserved_23',0,1
	.word	362
	.byte	1,0,2,35,2,4
	.byte	'SDLUT',0,1
	.word	362
	.byte	6,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,2,134,3,3
	.word	8754
	.byte	3
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,2,137,3,16,4,4
	.byte	'SDOLCON',0,1
	.word	362
	.byte	7,1,2,35,0,4
	.byte	'MODSEL',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'MODLOW',0,1
	.word	362
	.byte	7,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	362
	.byte	1,0,2,35,1,4
	.byte	'SDVOKLVL',0,1
	.word	362
	.byte	6,2,2,35,2,4
	.byte	'MODMAN',0,1
	.word	362
	.byte	2,0,2,35,2,4
	.byte	'MODHIGH',0,1
	.word	362
	.byte	7,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,2,147,3,3
	.word	9050
	.byte	3
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,2,150,3,16,4,4
	.byte	'EVR13',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'OV13',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	362
	.byte	2,4,2,35,0,4
	.byte	'OVSWD',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'UV13',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'UVSWD',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	2,6,2,35,1,4
	.byte	'BGPROK',0,1
	.word	362
	.byte	1,5,2,35,1,4
	.byte	'reserved_11',0,1
	.word	362
	.byte	1,4,2,35,1,4
	.byte	'SCMOD',0,1
	.word	362
	.byte	2,2,2,35,1,4
	.byte	'reserved_14',0,4
	.word	187
	.byte	18,0,2,35,0,0,22
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,2,164,3,3
	.word	9265
	.byte	3
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,2,167,3,16,4,4
	.byte	'EVR13UVVAL',0,1
	.word	362
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	8,0,2,35,1,4
	.byte	'SWDUVVAL',0,1
	.word	362
	.byte	8,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	6,2,2,35,3,4
	.byte	'SLCK',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,2,175,3,3
	.word	9554
	.byte	3
	.byte	'_Ifx_SCU_EXTCON_Bits',0,2,178,3,16,4,4
	.byte	'EN0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'SEL0',0,1
	.word	362
	.byte	4,2,2,35,0,4
	.byte	'reserved_6',0,2
	.word	379
	.byte	10,0,2,35,0,4
	.byte	'EN1',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'NSEL',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'SEL1',0,1
	.word	362
	.byte	4,2,2,35,2,4
	.byte	'reserved_22',0,1
	.word	362
	.byte	2,0,2,35,2,4
	.byte	'DIV1',0,1
	.word	362
	.byte	8,0,2,35,3,0,22
	.byte	'Ifx_SCU_EXTCON_Bits',0,2,189,3,3
	.word	9733
	.byte	3
	.byte	'_Ifx_SCU_FDR_Bits',0,2,192,3,16,4,4
	.byte	'STEP',0,2
	.word	379
	.byte	10,6,2,35,0,4
	.byte	'reserved_10',0,1
	.word	362
	.byte	4,2,2,35,1,4
	.byte	'DM',0,1
	.word	362
	.byte	2,0,2,35,1,4
	.byte	'RESULT',0,2
	.word	379
	.byte	10,6,2,35,2,4
	.byte	'reserved_26',0,1
	.word	362
	.byte	5,1,2,35,3,4
	.byte	'DISCLK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_FDR_Bits',0,2,200,3,3
	.word	9951
	.byte	3
	.byte	'_Ifx_SCU_FMR_Bits',0,2,203,3,16,4,4
	.byte	'FS0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'FS1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'FS2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'FS3',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'FS4',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'FS5',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'FS6',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'FS7',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	8,0,2,35,1,4
	.byte	'FC0',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'FC1',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'FC2',0,1
	.word	362
	.byte	1,5,2,35,2,4
	.byte	'FC3',0,1
	.word	362
	.byte	1,4,2,35,2,4
	.byte	'FC4',0,1
	.word	362
	.byte	1,3,2,35,2,4
	.byte	'FC5',0,1
	.word	362
	.byte	1,2,2,35,2,4
	.byte	'FC6',0,1
	.word	362
	.byte	1,1,2,35,2,4
	.byte	'FC7',0,1
	.word	362
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	8,0,2,35,3,0,22
	.byte	'Ifx_SCU_FMR_Bits',0,2,223,3,3
	.word	10114
	.byte	3
	.byte	'_Ifx_SCU_ID_Bits',0,2,226,3,16,4,4
	.byte	'MODREV',0,1
	.word	362
	.byte	8,0,2,35,0,4
	.byte	'MODTYPE',0,1
	.word	362
	.byte	8,0,2,35,1,4
	.byte	'MODNUMBER',0,2
	.word	379
	.byte	16,0,2,35,2,0,22
	.byte	'Ifx_SCU_ID_Bits',0,2,231,3,3
	.word	10450
	.byte	3
	.byte	'_Ifx_SCU_IGCR_Bits',0,2,234,3,16,4,4
	.byte	'IPEN00',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'IPEN01',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'IPEN02',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'IPEN03',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'IPEN04',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'IPEN05',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'IPEN06',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'IPEN07',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	5,3,2,35,1,4
	.byte	'GEEN0',0,1
	.word	362
	.byte	1,2,2,35,1,4
	.byte	'IGP0',0,1
	.word	362
	.byte	2,0,2,35,1,4
	.byte	'IPEN10',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'IPEN11',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'IPEN12',0,1
	.word	362
	.byte	1,5,2,35,2,4
	.byte	'IPEN13',0,1
	.word	362
	.byte	1,4,2,35,2,4
	.byte	'IPEN14',0,1
	.word	362
	.byte	1,3,2,35,2,4
	.byte	'IPEN15',0,1
	.word	362
	.byte	1,2,2,35,2,4
	.byte	'IPEN16',0,1
	.word	362
	.byte	1,1,2,35,2,4
	.byte	'IPEN17',0,1
	.word	362
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	5,3,2,35,3,4
	.byte	'GEEN1',0,1
	.word	362
	.byte	1,2,2,35,3,4
	.byte	'IGP1',0,1
	.word	362
	.byte	2,0,2,35,3,0,22
	.byte	'Ifx_SCU_IGCR_Bits',0,2,130,4,3
	.word	10557
	.byte	3
	.byte	'_Ifx_SCU_IN_Bits',0,2,133,4,16,4,4
	.byte	'P0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	187
	.byte	30,0,2,35,0,0,22
	.byte	'Ifx_SCU_IN_Bits',0,2,138,4,3
	.word	11009
	.byte	3
	.byte	'_Ifx_SCU_IOCR_Bits',0,2,141,4,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	4,4,2,35,0,4
	.byte	'PC0',0,1
	.word	362
	.byte	4,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	4,4,2,35,1,4
	.byte	'PC1',0,1
	.word	362
	.byte	4,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	379
	.byte	16,0,2,35,2,0,22
	.byte	'Ifx_SCU_IOCR_Bits',0,2,148,4,3
	.word	11108
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,2,151,4,16,4,4
	.byte	'LBISTREQ',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'LBISTREQP',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'PATTERNS',0,2
	.word	379
	.byte	14,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	379
	.byte	16,0,2,35,2,0,22
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,2,157,4,3
	.word	11258
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,2,160,4,16,4,4
	.byte	'SEED',0,4
	.word	187
	.byte	23,9,2,35,0,4
	.byte	'reserved_23',0,1
	.word	362
	.byte	1,0,2,35,2,4
	.byte	'SPLITSH',0,1
	.word	362
	.byte	3,5,2,35,3,4
	.byte	'BODY',0,1
	.word	362
	.byte	1,4,2,35,3,4
	.byte	'LBISTFREQU',0,1
	.word	362
	.byte	4,0,2,35,3,0,22
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,2,167,4,3
	.word	11407
	.byte	3
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,2,170,4,16,4,4
	.byte	'SIGNATURE',0,4
	.word	187
	.byte	24,8,2,35,0,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	7,1,2,35,3,4
	.byte	'LBISTDONE',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,2,175,4,3
	.word	11568
	.byte	3
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,2,178,4,16,4,4
	.byte	'reserved_0',0,2
	.word	379
	.byte	16,0,2,35,0,4
	.byte	'LS',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,2
	.word	379
	.byte	14,1,2,35,2,4
	.byte	'LSEN',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_LCLCON0_Bits',0,2,184,4,3
	.word	11698
	.byte	3
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,2,187,4,16,4,4
	.byte	'LCLT0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'LCLT1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	187
	.byte	30,0,2,35,0,0,22
	.byte	'Ifx_SCU_LCLTEST_Bits',0,2,192,4,3
	.word	11832
	.byte	3
	.byte	'_Ifx_SCU_MANID_Bits',0,2,195,4,16,4,4
	.byte	'DEPT',0,1
	.word	362
	.byte	5,3,2,35,0,4
	.byte	'MANUF',0,2
	.word	379
	.byte	11,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	379
	.byte	16,0,2,35,2,0,22
	.byte	'Ifx_SCU_MANID_Bits',0,2,200,4,3
	.word	11947
	.byte	3
	.byte	'_Ifx_SCU_OMR_Bits',0,2,203,4,16,4,4
	.byte	'PS0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'PS1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,2
	.word	379
	.byte	14,0,2,35,0,4
	.byte	'PCL0',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'PCL1',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	379
	.byte	14,0,2,35,2,0,22
	.byte	'Ifx_SCU_OMR_Bits',0,2,211,4,3
	.word	12058
	.byte	3
	.byte	'_Ifx_SCU_OSCCON_Bits',0,2,214,4,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'PLLLV',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'OSCRES',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'GAINSEL',0,1
	.word	362
	.byte	2,3,2,35,0,4
	.byte	'MODE',0,1
	.word	362
	.byte	2,1,2,35,0,4
	.byte	'SHBY',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'PLLHV',0,1
	.word	362
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,1
	.word	362
	.byte	1,6,2,35,1,4
	.byte	'X1D',0,1
	.word	362
	.byte	1,5,2,35,1,4
	.byte	'X1DEN',0,1
	.word	362
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	362
	.byte	4,0,2,35,1,4
	.byte	'OSCVAL',0,1
	.word	362
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	362
	.byte	2,1,2,35,2,4
	.byte	'APREN',0,1
	.word	362
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	8,0,2,35,3,0,22
	.byte	'Ifx_SCU_OSCCON_Bits',0,2,231,4,3
	.word	12216
	.byte	3
	.byte	'_Ifx_SCU_OUT_Bits',0,2,234,4,16,4,4
	.byte	'P0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'P1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	187
	.byte	30,0,2,35,0,0,22
	.byte	'Ifx_SCU_OUT_Bits',0,2,239,4,3
	.word	12556
	.byte	3
	.byte	'_Ifx_SCU_OVCCON_Bits',0,2,242,4,16,4,4
	.byte	'CSEL0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'CSEL1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'CSEL2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,2
	.word	379
	.byte	13,0,2,35,0,4
	.byte	'OVSTRT',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'OVSTP',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'DCINVAL',0,1
	.word	362
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	362
	.byte	5,0,2,35,2,4
	.byte	'OVCONF',0,1
	.word	362
	.byte	1,7,2,35,3,4
	.byte	'POVCONF',0,1
	.word	362
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	362
	.byte	6,0,2,35,3,0,22
	.byte	'Ifx_SCU_OVCCON_Bits',0,2,255,4,3
	.word	12657
	.byte	3
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,2,130,5,16,4,4
	.byte	'OVEN0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'OVEN1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'OVEN2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,4
	.word	187
	.byte	29,0,2,35,0,0,22
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,2,136,5,3
	.word	12924
	.byte	3
	.byte	'_Ifx_SCU_PDISC_Bits',0,2,139,5,16,4,4
	.byte	'PDIS0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'PDIS1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	187
	.byte	30,0,2,35,0,0,22
	.byte	'Ifx_SCU_PDISC_Bits',0,2,144,5,3
	.word	13060
	.byte	3
	.byte	'_Ifx_SCU_PDR_Bits',0,2,147,5,16,4,4
	.byte	'PD0',0,1
	.word	362
	.byte	3,5,2,35,0,4
	.byte	'PL0',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'PD1',0,1
	.word	362
	.byte	3,1,2,35,0,4
	.byte	'PL1',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	187
	.byte	24,0,2,35,0,0,22
	.byte	'Ifx_SCU_PDR_Bits',0,2,154,5,3
	.word	13171
	.byte	3
	.byte	'_Ifx_SCU_PDRR_Bits',0,2,157,5,16,4,4
	.byte	'PDR0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'PDR1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'PDR2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'PDR3',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'PDR4',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'PDR5',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'PDR6',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'PDR7',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	187
	.byte	24,0,2,35,0,0,22
	.byte	'Ifx_SCU_PDRR_Bits',0,2,168,5,3
	.word	13304
	.byte	3
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,2,171,5,16,4,4
	.byte	'VCOBYP',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'VCOPWD',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'MODEN',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'SETFINDIS',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'CLRFINDIS',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'OSCDISCDIS',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	379
	.byte	2,7,2,35,0,4
	.byte	'NDIV',0,1
	.word	362
	.byte	7,0,2,35,1,4
	.byte	'PLLPWD',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'RESLD',0,1
	.word	362
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	362
	.byte	5,0,2,35,2,4
	.byte	'PDIV',0,1
	.word	362
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	362
	.byte	4,0,2,35,3,0,22
	.byte	'Ifx_SCU_PLLCON0_Bits',0,2,188,5,3
	.word	13507
	.byte	3
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,2,191,5,16,4,4
	.byte	'K2DIV',0,1
	.word	362
	.byte	7,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'K3DIV',0,1
	.word	362
	.byte	7,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	362
	.byte	1,0,2,35,1,4
	.byte	'K1DIV',0,1
	.word	362
	.byte	7,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	379
	.byte	9,0,2,35,2,0,22
	.byte	'Ifx_SCU_PLLCON1_Bits',0,2,199,5,3
	.word	13863
	.byte	3
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,2,202,5,16,4,4
	.byte	'MODCFG',0,2
	.word	379
	.byte	16,0,2,35,0,4
	.byte	'reserved_16',0,2
	.word	379
	.byte	16,0,2,35,2,0,22
	.byte	'Ifx_SCU_PLLCON2_Bits',0,2,206,5,3
	.word	14041
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,2,209,5,16,4,4
	.byte	'VCOBYP',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'VCOPWD',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	362
	.byte	2,4,2,35,0,4
	.byte	'SETFINDIS',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'CLRFINDIS',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'OSCDISCDIS',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'reserved_7',0,2
	.word	379
	.byte	2,7,2,35,0,4
	.byte	'NDIV',0,1
	.word	362
	.byte	5,2,2,35,1,4
	.byte	'reserved_14',0,1
	.word	362
	.byte	2,0,2,35,1,4
	.byte	'PLLPWD',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'RESLD',0,1
	.word	362
	.byte	1,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	362
	.byte	5,0,2,35,2,4
	.byte	'PDIV',0,1
	.word	362
	.byte	4,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	362
	.byte	4,0,2,35,3,0,22
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,2,226,5,3
	.word	14141
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,2,229,5,16,4,4
	.byte	'K2DIV',0,1
	.word	362
	.byte	7,1,2,35,0,4
	.byte	'reserved_7',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'K3DIV',0,1
	.word	362
	.byte	4,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	362
	.byte	4,0,2,35,1,4
	.byte	'K1DIV',0,1
	.word	362
	.byte	7,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	379
	.byte	9,0,2,35,2,0,22
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,2,237,5,3
	.word	14511
	.byte	3
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,2,240,5,16,4,4
	.byte	'VCOBYST',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'PWDSTAT',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'VCOLOCK',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'FINDIS',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'K1RDY',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'K2RDY',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,4
	.word	187
	.byte	26,0,2,35,0,0,22
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,2,249,5,3
	.word	14697
	.byte	3
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,2,252,5,16,4,4
	.byte	'VCOBYST',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'VCOLOCK',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'FINDIS',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'K1RDY',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'K2RDY',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'reserved_6',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'MODRUN',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,4
	.word	187
	.byte	24,0,2,35,0,0,22
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,2,135,6,3
	.word	14895
	.byte	3
	.byte	'_Ifx_SCU_PMCSR_Bits',0,2,138,6,16,4,4
	.byte	'REQSLP',0,1
	.word	362
	.byte	2,6,2,35,0,4
	.byte	'SMUSLP',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'reserved_3',0,1
	.word	362
	.byte	5,0,2,35,0,4
	.byte	'PMST',0,1
	.word	362
	.byte	3,5,2,35,1,4
	.byte	'reserved_11',0,4
	.word	187
	.byte	21,0,2,35,0,0,22
	.byte	'Ifx_SCU_PMCSR_Bits',0,2,145,6,3
	.word	15128
	.byte	3
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,2,148,6,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'ESR1WKEN',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'PINAWKEN',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'PINBWKEN',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'ESR0DFEN',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'ESR0EDCON',0,1
	.word	362
	.byte	2,1,2,35,0,4
	.byte	'ESR1DFEN',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'ESR1EDCON',0,1
	.word	362
	.byte	2,6,2,35,1,4
	.byte	'PINADFEN',0,1
	.word	362
	.byte	1,5,2,35,1,4
	.byte	'PINAEDCON',0,1
	.word	362
	.byte	2,3,2,35,1,4
	.byte	'PINBDFEN',0,1
	.word	362
	.byte	1,2,2,35,1,4
	.byte	'PINBEDCON',0,1
	.word	362
	.byte	2,0,2,35,1,4
	.byte	'reserved_16',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'STBYRAMSEL',0,1
	.word	362
	.byte	2,5,2,35,2,4
	.byte	'reserved_19',0,1
	.word	362
	.byte	1,4,2,35,2,4
	.byte	'WUTWKEN',0,1
	.word	362
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	362
	.byte	2,1,2,35,2,4
	.byte	'PORSTDF',0,1
	.word	362
	.byte	1,0,2,35,2,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	1,7,2,35,3,4
	.byte	'DCDCSYNC',0,1
	.word	362
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	362
	.byte	3,3,2,35,3,4
	.byte	'ESR0TRIST',0,1
	.word	362
	.byte	1,2,2,35,3,4
	.byte	'reserved_30',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,2,174,6,3
	.word	15280
	.byte	3
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,2,177,6,16,4,4
	.byte	'reserved_0',0,2
	.word	379
	.byte	12,4,2,35,0,4
	.byte	'IRADIS',0,1
	.word	362
	.byte	1,3,2,35,1,4
	.byte	'reserved_13',0,4
	.word	187
	.byte	14,5,2,35,0,4
	.byte	'STBYEVEN',0,1
	.word	362
	.byte	1,4,2,35,3,4
	.byte	'STBYEV',0,1
	.word	362
	.byte	3,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,2,185,6,3
	.word	15839
	.byte	3
	.byte	'_Ifx_SCU_PMSWCR3_Bits',0,2,188,6,16,4,4
	.byte	'WUTREL',0,4
	.word	187
	.byte	24,8,2,35,0,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	4,4,2,35,3,4
	.byte	'WUTDIV',0,1
	.word	362
	.byte	1,3,2,35,3,4
	.byte	'WUTEN',0,1
	.word	362
	.byte	1,2,2,35,3,4
	.byte	'WUTMODE',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'LCK',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_PMSWCR3_Bits',0,2,196,6,3
	.word	16022
	.byte	3
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,2,199,6,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	2,6,2,35,0,4
	.byte	'ESR1WKP',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'ESR1OVRUN',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'PINAWKP',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'PINAOVRUN',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'PINBWKP',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'PINBOVRUN',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	1,7,2,35,1,4
	.byte	'PORSTDF',0,1
	.word	362
	.byte	1,6,2,35,1,4
	.byte	'HWCFGEVR',0,1
	.word	362
	.byte	3,3,2,35,1,4
	.byte	'STBYRAM',0,1
	.word	362
	.byte	2,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	362
	.byte	1,0,2,35,1,4
	.byte	'WUTWKP',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'WUTOVRUN',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	362
	.byte	1,5,2,35,2,4
	.byte	'WUTWKEN',0,1
	.word	362
	.byte	1,4,2,35,2,4
	.byte	'ESR1WKEN',0,1
	.word	362
	.byte	1,3,2,35,2,4
	.byte	'PINAWKEN',0,1
	.word	362
	.byte	1,2,2,35,2,4
	.byte	'PINBWKEN',0,1
	.word	362
	.byte	1,1,2,35,2,4
	.byte	'reserved_23',0,2
	.word	379
	.byte	4,5,2,35,2,4
	.byte	'ESR0TRIST',0,1
	.word	362
	.byte	1,4,2,35,3,4
	.byte	'reserved_28',0,1
	.word	362
	.byte	1,3,2,35,3,4
	.byte	'WUTEN',0,1
	.word	362
	.byte	1,2,2,35,3,4
	.byte	'WUTMODE',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'WUTRUN',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,2,226,6,3
	.word	16191
	.byte	3
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,2,229,6,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	2,6,2,35,0,4
	.byte	'ESR1WKPCLR',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'ESR1OVRUNCLR',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'PINAWKPCLR',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'PINAOVRUNCLR',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'PINBWKPCLR',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'PINBOVRUNCLR',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	8,0,2,35,1,4
	.byte	'WUTWKPCLR',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'WUTOVRUNCLR',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,2
	.word	379
	.byte	14,0,2,35,2,0,22
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,2,242,6,3
	.word	16758
	.byte	3
	.byte	'_Ifx_SCU_PMSWUTCNT_Bits',0,2,245,6,16,4,4
	.byte	'WUTCNT',0,4
	.word	187
	.byte	24,8,2,35,0,4
	.byte	'reserved_24',0,1
	.word	362
	.byte	7,1,2,35,3,4
	.byte	'VAL',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SCU_PMSWUTCNT_Bits',0,2,250,6,3
	.word	17074
	.byte	3
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,2,253,6,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'CLRC',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,2
	.word	379
	.byte	10,4,2,35,0,4
	.byte	'CSS0',0,1
	.word	362
	.byte	1,3,2,35,1,4
	.byte	'CSS1',0,1
	.word	362
	.byte	1,2,2,35,1,4
	.byte	'CSS2',0,1
	.word	362
	.byte	1,1,2,35,1,4
	.byte	'reserved_15',0,1
	.word	362
	.byte	1,0,2,35,1,4
	.byte	'USRINFO',0,2
	.word	379
	.byte	16,0,2,35,2,0,22
	.byte	'Ifx_SCU_RSTCON2_Bits',0,2,135,7,3
	.word	17193
	.byte	3
	.byte	'_Ifx_SCU_RSTCON_Bits',0,2,138,7,16,4,4
	.byte	'ESR0',0,1
	.word	362
	.byte	2,6,2,35,0,4
	.byte	'ESR1',0,1
	.word	362
	.byte	2,4,2,35,0,4
	.byte	'reserved_4',0,1
	.word	362
	.byte	2,2,2,35,0,4
	.byte	'SMU',0,1
	.word	362
	.byte	2,0,2,35,0,4
	.byte	'SW',0,1
	.word	362
	.byte	2,6,2,35,1,4
	.byte	'STM0',0,1
	.word	362
	.byte	2,4,2,35,1,4
	.byte	'STM1',0,1
	.word	362
	.byte	2,2,2,35,1,4
	.byte	'STM2',0,1
	.word	362
	.byte	2,0,2,35,1,4
	.byte	'reserved_16',0,2
	.word	379
	.byte	16,0,2,35,2,0,22
	.byte	'Ifx_SCU_RSTCON_Bits',0,2,149,7,3
	.word	17402
	.byte	3
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,2,152,7,16,4,4
	.byte	'ESR0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'ESR1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'SMU',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'SW',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'STM0',0,1
	.word	362
	.byte	1,2,2,35,0,4
	.byte	'STM1',0,1
	.word	362
	.byte	1,1,2,35,0,4
	.byte	'STM2',0,1
	.word	362
	.byte	1,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	8,0,2,35,1,4
	.byte	'PORST',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'reserved_17',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'CB0',0,1
	.word	362
	.byte	1,5,2,35,2,4
	.byte	'CB1',0,1
	.word	362
	.byte	1,4,2,35,2,4
	.byte	'CB3',0,1
	.word	362
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	362
	.byte	2,1,2,35,2,4
	.byte	'EVR13',0,1
	.word	362
	.byte	1,0,2,35,2,4
	.byte	'EVR33',0,1
	.word	362
	.byte	1,7,2,35,3,4
	.byte	'SWD',0,1
	.word	362
	.byte	1,6,2,35,3,4
	.byte	'reserved_26',0,1
	.word	362
	.byte	2,4,2,35,3,4
	.byte	'STBYR',0,1
	.word	362
	.byte	1,3,2,35,3,4
	.byte	'reserved_29',0,1
	.word	362
	.byte	3,0,2,35,3,0,22
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,2,175,7,3
	.word	17613
	.byte	3
	.byte	'_Ifx_SCU_SAFECON_Bits',0,2,178,7,16,4,4
	.byte	'HBT',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,4
	.word	187
	.byte	31,0,2,35,0,0,22
	.byte	'Ifx_SCU_SAFECON_Bits',0,2,182,7,3
	.word	18045
	.byte	3
	.byte	'_Ifx_SCU_STSTAT_Bits',0,2,185,7,16,4,4
	.byte	'HWCFG',0,1
	.word	362
	.byte	8,0,2,35,0,4
	.byte	'FTM',0,1
	.word	362
	.byte	7,1,2,35,1,4
	.byte	'MODE',0,1
	.word	362
	.byte	1,0,2,35,1,4
	.byte	'FCBAE',0,1
	.word	362
	.byte	1,7,2,35,2,4
	.byte	'LUDIS',0,1
	.word	362
	.byte	1,6,2,35,2,4
	.byte	'reserved_18',0,1
	.word	362
	.byte	1,5,2,35,2,4
	.byte	'TRSTL',0,1
	.word	362
	.byte	1,4,2,35,2,4
	.byte	'SPDEN',0,1
	.word	362
	.byte	1,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	362
	.byte	3,0,2,35,2,4
	.byte	'RAMINT',0,1
	.word	362
	.byte	1,7,2,35,3,4
	.byte	'reserved_25',0,1
	.word	362
	.byte	7,0,2,35,3,0,22
	.byte	'Ifx_SCU_STSTAT_Bits',0,2,198,7,3
	.word	18141
	.byte	3
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,2,201,7,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'SWRSTREQ',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,4
	.word	187
	.byte	30,0,2,35,0,0,22
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,2,206,7,3
	.word	18401
	.byte	3
	.byte	'_Ifx_SCU_SYSCON_Bits',0,2,209,7,16,4,4
	.byte	'CCTRIG0',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'reserved_1',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'RAMINTM',0,1
	.word	362
	.byte	2,4,2,35,0,4
	.byte	'SETLUDIS',0,1
	.word	362
	.byte	1,3,2,35,0,4
	.byte	'reserved_5',0,1
	.word	362
	.byte	3,0,2,35,0,4
	.byte	'DATM',0,1
	.word	362
	.byte	1,7,2,35,1,4
	.byte	'reserved_9',0,4
	.word	187
	.byte	23,0,2,35,0,0,22
	.byte	'Ifx_SCU_SYSCON_Bits',0,2,218,7,3
	.word	18526
	.byte	3
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,2,221,7,16,4,4
	.byte	'ESR0T',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	187
	.byte	28,0,2,35,0,0,22
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,2,228,7,3
	.word	18723
	.byte	3
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,2,231,7,16,4,4
	.byte	'ESR0T',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	187
	.byte	28,0,2,35,0,0,22
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,2,238,7,3
	.word	18876
	.byte	3
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,2,241,7,16,4,4
	.byte	'ESR0T',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	187
	.byte	28,0,2,35,0,0,22
	.byte	'Ifx_SCU_TRAPSET_Bits',0,2,248,7,3
	.word	19029
	.byte	3
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,2,251,7,16,4,4
	.byte	'ESR0T',0,1
	.word	362
	.byte	1,7,2,35,0,4
	.byte	'ESR1T',0,1
	.word	362
	.byte	1,6,2,35,0,4
	.byte	'reserved_2',0,1
	.word	362
	.byte	1,5,2,35,0,4
	.byte	'SMUT',0,1
	.word	362
	.byte	1,4,2,35,0,4
	.byte	'reserved_4',0,4
	.word	187
	.byte	28,0,2,35,0,0,22
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,2,130,8,3
	.word	19182
	.byte	22
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,2,139,8,3
	.word	226
	.byte	22
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,2,154,8,3
	.word	401
	.byte	22
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,2,170,8,3
	.word	645
	.byte	22
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,2,179,8,3
	.word	2242
	.byte	22
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,2,195,8,3
	.word	2376
	.byte	22
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,2,211,8,3
	.word	2636
	.byte	5,2,219,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	3601
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_ACCEN0',0,2,224,8,3
	.word	19531
	.byte	5,2,227,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4158
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_ACCEN1',0,2,232,8,3
	.word	19595
	.byte	5,2,235,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4235
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_ARSTDIS',0,2,240,8,3
	.word	19659
	.byte	5,2,243,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4371
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_CCUCON0',0,2,248,8,3
	.word	19724
	.byte	5,2,251,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4653
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_CCUCON1',0,2,128,9,3
	.word	19789
	.byte	5,2,131,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	4891
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_CCUCON2',0,2,136,9,3
	.word	19854
	.byte	5,2,139,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5019
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_CCUCON3',0,2,144,9,3
	.word	19919
	.byte	5,2,147,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5246
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_CCUCON4',0,2,152,9,3
	.word	19984
	.byte	5,2,155,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5465
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_CCUCON5',0,2,160,9,3
	.word	20049
	.byte	5,2,163,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5593
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_CCUCON6',0,2,168,9,3
	.word	20114
	.byte	5,2,171,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5693
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_CHIPID',0,2,176,9,3
	.word	20179
	.byte	5,2,179,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	5901
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_DTSCON',0,2,184,9,3
	.word	20243
	.byte	5,2,187,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6066
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_DTSLIM',0,2,192,9,3
	.word	20307
	.byte	5,2,195,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6249
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_DTSSTAT',0,2,200,9,3
	.word	20371
	.byte	5,2,203,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6403
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EICR',0,2,208,9,3
	.word	20436
	.byte	5,2,211,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6767
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EIFR',0,2,216,9,3
	.word	20498
	.byte	5,2,219,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	6978
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EMSR',0,2,224,9,3
	.word	20560
	.byte	5,2,227,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7230
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_ESRCFG',0,2,232,9,3
	.word	20622
	.byte	5,2,235,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7348
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_ESROCFG',0,2,240,9,3
	.word	20686
	.byte	5,2,243,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7459
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVR13CON',0,2,248,9,3
	.word	20751
	.byte	5,2,251,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7622
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVRADCSTAT',0,2,128,10,3
	.word	20817
	.byte	5,2,131,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	7784
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVRMONCTRL',0,2,136,10,3
	.word	20885
	.byte	5,2,139,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8062
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVROVMON',0,2,144,10,3
	.word	20953
	.byte	5,2,147,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8241
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVRRSTCON',0,2,152,10,3
	.word	21019
	.byte	5,2,155,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8401
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,2,160,10,3
	.word	21086
	.byte	5,2,163,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8562
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVRSDCTRL1',0,2,168,10,3
	.word	21155
	.byte	5,2,171,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	8754
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVRSDCTRL2',0,2,176,10,3
	.word	21223
	.byte	5,2,179,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	9050
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVRSDCTRL3',0,2,184,10,3
	.word	21291
	.byte	5,2,187,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	9265
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVRSTAT',0,2,192,10,3
	.word	21359
	.byte	5,2,195,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	9554
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EVRUVMON',0,2,200,10,3
	.word	21424
	.byte	5,2,203,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	9733
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_EXTCON',0,2,208,10,3
	.word	21490
	.byte	5,2,211,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	9951
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_FDR',0,2,216,10,3
	.word	21554
	.byte	5,2,219,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10114
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_FMR',0,2,224,10,3
	.word	21615
	.byte	5,2,227,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10450
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_ID',0,2,232,10,3
	.word	21676
	.byte	5,2,235,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	10557
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_IGCR',0,2,240,10,3
	.word	21736
	.byte	5,2,243,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11009
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_IN',0,2,248,10,3
	.word	21798
	.byte	5,2,251,10,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11108
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_IOCR',0,2,128,11,3
	.word	21858
	.byte	5,2,131,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11258
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_LBISTCTRL0',0,2,136,11,3
	.word	21920
	.byte	5,2,139,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11407
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_LBISTCTRL1',0,2,144,11,3
	.word	21988
	.byte	5,2,147,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11568
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_LBISTCTRL2',0,2,152,11,3
	.word	22056
	.byte	5,2,155,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11698
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_LCLCON0',0,2,160,11,3
	.word	22124
	.byte	5,2,163,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11832
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_LCLTEST',0,2,168,11,3
	.word	22189
	.byte	5,2,171,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	11947
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_MANID',0,2,176,11,3
	.word	22254
	.byte	5,2,179,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12058
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_OMR',0,2,184,11,3
	.word	22317
	.byte	5,2,187,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12216
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_OSCCON',0,2,192,11,3
	.word	22378
	.byte	5,2,195,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12556
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_OUT',0,2,200,11,3
	.word	22442
	.byte	5,2,203,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12657
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_OVCCON',0,2,208,11,3
	.word	22503
	.byte	5,2,211,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	12924
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_OVCENABLE',0,2,216,11,3
	.word	22567
	.byte	5,2,219,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13060
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PDISC',0,2,224,11,3
	.word	22634
	.byte	5,2,227,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13171
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PDR',0,2,232,11,3
	.word	22697
	.byte	5,2,235,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13304
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PDRR',0,2,240,11,3
	.word	22758
	.byte	5,2,243,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13507
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PLLCON0',0,2,248,11,3
	.word	22820
	.byte	5,2,251,11,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	13863
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PLLCON1',0,2,128,12,3
	.word	22885
	.byte	5,2,131,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14041
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PLLCON2',0,2,136,12,3
	.word	22950
	.byte	5,2,139,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14141
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PLLERAYCON0',0,2,144,12,3
	.word	23015
	.byte	5,2,147,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14511
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PLLERAYCON1',0,2,152,12,3
	.word	23084
	.byte	5,2,155,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14697
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PLLERAYSTAT',0,2,160,12,3
	.word	23153
	.byte	5,2,163,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	14895
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PLLSTAT',0,2,168,12,3
	.word	23222
	.byte	5,2,171,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15128
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PMCSR',0,2,176,12,3
	.word	23287
	.byte	5,2,179,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15280
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PMSWCR0',0,2,184,12,3
	.word	23350
	.byte	5,2,187,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	15839
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PMSWCR1',0,2,192,12,3
	.word	23415
	.byte	5,2,195,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16022
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PMSWCR3',0,2,200,12,3
	.word	23480
	.byte	5,2,203,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16191
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PMSWSTAT',0,2,208,12,3
	.word	23545
	.byte	5,2,211,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	16758
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PMSWSTATCLR',0,2,216,12,3
	.word	23611
	.byte	5,2,219,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17074
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_PMSWUTCNT',0,2,224,12,3
	.word	23680
	.byte	5,2,227,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17402
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_RSTCON',0,2,232,12,3
	.word	23747
	.byte	5,2,235,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17193
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_RSTCON2',0,2,240,12,3
	.word	23811
	.byte	5,2,243,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	17613
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_RSTSTAT',0,2,248,12,3
	.word	23876
	.byte	5,2,251,12,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18045
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_SAFECON',0,2,128,13,3
	.word	23941
	.byte	5,2,131,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18141
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_STSTAT',0,2,136,13,3
	.word	24006
	.byte	5,2,139,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18401
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_SWRSTCON',0,2,144,13,3
	.word	24070
	.byte	5,2,147,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18526
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_SYSCON',0,2,152,13,3
	.word	24136
	.byte	5,2,155,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18723
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_TRAPCLR',0,2,160,13,3
	.word	24200
	.byte	5,2,163,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	18876
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_TRAPDIS',0,2,168,13,3
	.word	24265
	.byte	5,2,171,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19029
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_TRAPSET',0,2,176,13,3
	.word	24330
	.byte	5,2,179,13,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	19182
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SCU_TRAPSTAT',0,2,184,13,3
	.word	24395
	.byte	22
	.byte	'Ifx_SCU_WDTCPU_CON0',0,2,192,13,3
	.word	322
	.byte	22
	.byte	'Ifx_SCU_WDTCPU_CON1',0,2,200,13,3
	.word	605
	.byte	22
	.byte	'Ifx_SCU_WDTCPU_SR',0,2,208,13,3
	.word	836
	.byte	22
	.byte	'Ifx_SCU_WDTS_CON0',0,2,216,13,3
	.word	2336
	.byte	22
	.byte	'Ifx_SCU_WDTS_CON1',0,2,224,13,3
	.word	2596
	.byte	22
	.byte	'Ifx_SCU_WDTS_SR',0,2,232,13,3
	.word	2825
	.byte	7
	.word	876
	.byte	22
	.byte	'Ifx_SCU_WDTCPU',0,2,248,13,3
	.word	24625
	.byte	7
	.word	2865
	.byte	22
	.byte	'Ifx_SCU_WDTS',0,2,128,14,3
	.word	24654
	.byte	22
	.byte	'IfxScuWdt_Config',0,1,70,3
	.word	1978
	.byte	3
	.byte	'_Ifx_CPU_A_Bits',0,8,45,16,4,4
	.byte	'ADDR',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_A_Bits',0,8,48,3
	.word	24706
	.byte	3
	.byte	'_Ifx_CPU_BIV_Bits',0,8,51,16,4,4
	.byte	'VSS',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'BIV',0,4
	.word	210
	.byte	31,0,2,35,0,0,22
	.byte	'Ifx_CPU_BIV_Bits',0,8,55,3
	.word	24767
	.byte	3
	.byte	'_Ifx_CPU_BTV_Bits',0,8,58,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'BTV',0,4
	.word	210
	.byte	31,0,2,35,0,0,22
	.byte	'Ifx_CPU_BTV_Bits',0,8,62,3
	.word	24846
	.byte	3
	.byte	'_Ifx_CPU_CCNT_Bits',0,8,65,16,4,4
	.byte	'CountValue',0,4
	.word	210
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	210
	.byte	1,0,2,35,0,0,22
	.byte	'Ifx_CPU_CCNT_Bits',0,8,69,3
	.word	24932
	.byte	3
	.byte	'_Ifx_CPU_CCTRL_Bits',0,8,72,16,4,4
	.byte	'CM',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'CE',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'M1',0,4
	.word	210
	.byte	3,27,2,35,0,4
	.byte	'M2',0,4
	.word	210
	.byte	3,24,2,35,0,4
	.byte	'M3',0,4
	.word	210
	.byte	3,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	210
	.byte	21,0,2,35,0,0,22
	.byte	'Ifx_CPU_CCTRL_Bits',0,8,80,3
	.word	25021
	.byte	3
	.byte	'_Ifx_CPU_COMPAT_Bits',0,8,83,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'RM',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'SP',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	210
	.byte	27,0,2,35,0,0,22
	.byte	'Ifx_CPU_COMPAT_Bits',0,8,89,3
	.word	25167
	.byte	22
	.byte	'Ifx_CPU_CORE_ID_Bits',0,8,96,3
	.word	2994
	.byte	3
	.byte	'_Ifx_CPU_CPR_L_Bits',0,8,99,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'LOWBND',0,4
	.word	210
	.byte	29,0,2,35,0,0,22
	.byte	'Ifx_CPU_CPR_L_Bits',0,8,103,3
	.word	25323
	.byte	3
	.byte	'_Ifx_CPU_CPR_U_Bits',0,8,106,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'UPPBND',0,4
	.word	210
	.byte	29,0,2,35,0,0,22
	.byte	'Ifx_CPU_CPR_U_Bits',0,8,110,3
	.word	25416
	.byte	3
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,8,113,16,4,4
	.byte	'MODREV',0,4
	.word	210
	.byte	8,24,2,35,0,4
	.byte	'MOD_32B',0,4
	.word	210
	.byte	8,16,2,35,0,4
	.byte	'MOD',0,4
	.word	210
	.byte	16,0,2,35,0,0,22
	.byte	'Ifx_CPU_CPU_ID_Bits',0,8,118,3
	.word	25509
	.byte	3
	.byte	'_Ifx_CPU_CPXE_Bits',0,8,121,16,4,4
	.byte	'XE',0,4
	.word	210
	.byte	8,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	210
	.byte	24,0,2,35,0,0,22
	.byte	'Ifx_CPU_CPXE_Bits',0,8,125,3
	.word	25616
	.byte	3
	.byte	'_Ifx_CPU_CREVT_Bits',0,8,128,1,16,4,4
	.byte	'EVTA',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	210
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	210
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	210
	.byte	24,0,2,35,0,0,22
	.byte	'Ifx_CPU_CREVT_Bits',0,8,136,1,3
	.word	25703
	.byte	3
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,8,139,1,16,4,4
	.byte	'CID',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	210
	.byte	29,0,2,35,0,0,22
	.byte	'Ifx_CPU_CUS_ID_Bits',0,8,143,1,3
	.word	25857
	.byte	3
	.byte	'_Ifx_CPU_D_Bits',0,8,146,1,16,4,4
	.byte	'DATA',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_D_Bits',0,8,149,1,3
	.word	25951
	.byte	3
	.byte	'_Ifx_CPU_DATR_Bits',0,8,152,1,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'SBE',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'reserved_4',0,4
	.word	210
	.byte	5,23,2,35,0,4
	.byte	'CWE',0,4
	.word	210
	.byte	1,22,2,35,0,4
	.byte	'CFE',0,4
	.word	210
	.byte	1,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	210
	.byte	3,18,2,35,0,4
	.byte	'SOE',0,4
	.word	210
	.byte	1,17,2,35,0,4
	.byte	'SME',0,4
	.word	210
	.byte	1,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	210
	.byte	16,0,2,35,0,0,22
	.byte	'Ifx_CPU_DATR_Bits',0,8,163,1,3
	.word	26014
	.byte	3
	.byte	'_Ifx_CPU_DBGSR_Bits',0,8,166,1,16,4,4
	.byte	'DE',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'HALT',0,4
	.word	210
	.byte	2,29,2,35,0,4
	.byte	'SIH',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'SUSP',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	210
	.byte	1,26,2,35,0,4
	.byte	'PREVSUSP',0,4
	.word	210
	.byte	1,25,2,35,0,4
	.byte	'PEVT',0,4
	.word	210
	.byte	1,24,2,35,0,4
	.byte	'EVTSRC',0,4
	.word	210
	.byte	5,19,2,35,0,4
	.byte	'reserved_13',0,4
	.word	210
	.byte	19,0,2,35,0,0,22
	.byte	'Ifx_CPU_DBGSR_Bits',0,8,177,1,3
	.word	26232
	.byte	3
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,8,180,1,16,4,4
	.byte	'DTA',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	210
	.byte	31,0,2,35,0,0,22
	.byte	'Ifx_CPU_DBGTCR_Bits',0,8,184,1,3
	.word	26447
	.byte	3
	.byte	'_Ifx_CPU_DCON0_Bits',0,8,187,1,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'DCBYP',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	210
	.byte	30,0,2,35,0,0,22
	.byte	'Ifx_CPU_DCON0_Bits',0,8,192,1,3
	.word	26541
	.byte	3
	.byte	'_Ifx_CPU_DCON2_Bits',0,8,195,1,16,4,4
	.byte	'DCACHE_SZE',0,4
	.word	210
	.byte	16,16,2,35,0,4
	.byte	'DSCRATCH_SZE',0,4
	.word	210
	.byte	16,0,2,35,0,0,22
	.byte	'Ifx_CPU_DCON2_Bits',0,8,199,1,3
	.word	26657
	.byte	3
	.byte	'_Ifx_CPU_DCX_Bits',0,8,202,1,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	6,26,2,35,0,4
	.byte	'DCXValue',0,4
	.word	210
	.byte	26,0,2,35,0,0,22
	.byte	'Ifx_CPU_DCX_Bits',0,8,206,1,3
	.word	26758
	.byte	3
	.byte	'_Ifx_CPU_DEADD_Bits',0,8,209,1,16,4,4
	.byte	'ERROR_ADDRESS',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_DEADD_Bits',0,8,212,1,3
	.word	26851
	.byte	3
	.byte	'_Ifx_CPU_DIEAR_Bits',0,8,215,1,16,4,4
	.byte	'TA',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_DIEAR_Bits',0,8,218,1,3
	.word	26931
	.byte	3
	.byte	'_Ifx_CPU_DIETR_Bits',0,8,221,1,16,4,4
	.byte	'IED',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'IE_T',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'IE_C',0,4
	.word	210
	.byte	1,29,2,35,0,4
	.byte	'IE_S',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'IE_BI',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'E_INFO',0,4
	.word	210
	.byte	6,21,2,35,0,4
	.byte	'IE_DUAL',0,4
	.word	210
	.byte	1,20,2,35,0,4
	.byte	'IE_SP',0,4
	.word	210
	.byte	1,19,2,35,0,4
	.byte	'IE_BS',0,4
	.word	210
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	210
	.byte	18,0,2,35,0,0,22
	.byte	'Ifx_CPU_DIETR_Bits',0,8,233,1,3
	.word	27000
	.byte	3
	.byte	'_Ifx_CPU_DMS_Bits',0,8,236,1,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'DMSValue',0,4
	.word	210
	.byte	31,0,2,35,0,0,22
	.byte	'Ifx_CPU_DMS_Bits',0,8,240,1,3
	.word	27229
	.byte	3
	.byte	'_Ifx_CPU_DPR_L_Bits',0,8,243,1,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'LOWBND',0,4
	.word	210
	.byte	29,0,2,35,0,0,22
	.byte	'Ifx_CPU_DPR_L_Bits',0,8,247,1,3
	.word	27322
	.byte	3
	.byte	'_Ifx_CPU_DPR_U_Bits',0,8,250,1,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'UPPBND',0,4
	.word	210
	.byte	29,0,2,35,0,0,22
	.byte	'Ifx_CPU_DPR_U_Bits',0,8,254,1,3
	.word	27417
	.byte	3
	.byte	'_Ifx_CPU_DPRE_Bits',0,8,129,2,16,4,4
	.byte	'RE',0,4
	.word	210
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	210
	.byte	16,0,2,35,0,0,22
	.byte	'Ifx_CPU_DPRE_Bits',0,8,133,2,3
	.word	27512
	.byte	3
	.byte	'_Ifx_CPU_DPWE_Bits',0,8,136,2,16,4,4
	.byte	'WE',0,4
	.word	210
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	210
	.byte	16,0,2,35,0,0,22
	.byte	'Ifx_CPU_DPWE_Bits',0,8,140,2,3
	.word	27602
	.byte	3
	.byte	'_Ifx_CPU_DSTR_Bits',0,8,143,2,16,4,4
	.byte	'SRE',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'GAE',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'LBE',0,4
	.word	210
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	210
	.byte	3,26,2,35,0,4
	.byte	'CRE',0,4
	.word	210
	.byte	1,25,2,35,0,4
	.byte	'reserved_7',0,4
	.word	210
	.byte	7,18,2,35,0,4
	.byte	'DTME',0,4
	.word	210
	.byte	1,17,2,35,0,4
	.byte	'LOE',0,4
	.word	210
	.byte	1,16,2,35,0,4
	.byte	'SDE',0,4
	.word	210
	.byte	1,15,2,35,0,4
	.byte	'SCE',0,4
	.word	210
	.byte	1,14,2,35,0,4
	.byte	'CAC',0,4
	.word	210
	.byte	1,13,2,35,0,4
	.byte	'MPE',0,4
	.word	210
	.byte	1,12,2,35,0,4
	.byte	'CLE',0,4
	.word	210
	.byte	1,11,2,35,0,4
	.byte	'reserved_21',0,4
	.word	210
	.byte	3,8,2,35,0,4
	.byte	'ALN',0,4
	.word	210
	.byte	1,7,2,35,0,4
	.byte	'reserved_25',0,4
	.word	210
	.byte	7,0,2,35,0,0,22
	.byte	'Ifx_CPU_DSTR_Bits',0,8,161,2,3
	.word	27692
	.byte	3
	.byte	'_Ifx_CPU_EXEVT_Bits',0,8,164,2,16,4,4
	.byte	'EVTA',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	210
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	210
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	210
	.byte	24,0,2,35,0,0,22
	.byte	'Ifx_CPU_EXEVT_Bits',0,8,172,2,3
	.word	28016
	.byte	3
	.byte	'_Ifx_CPU_FCX_Bits',0,8,175,2,16,4,4
	.byte	'FCXO',0,4
	.word	210
	.byte	16,16,2,35,0,4
	.byte	'FCXS',0,4
	.word	210
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	210
	.byte	12,0,2,35,0,0,22
	.byte	'Ifx_CPU_FCX_Bits',0,8,180,2,3
	.word	28170
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,8,183,2,16,4,4
	.byte	'TST',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'TCL',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	210
	.byte	6,24,2,35,0,4
	.byte	'RM',0,4
	.word	210
	.byte	2,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	210
	.byte	8,14,2,35,0,4
	.byte	'FXE',0,4
	.word	210
	.byte	1,13,2,35,0,4
	.byte	'FUE',0,4
	.word	210
	.byte	1,12,2,35,0,4
	.byte	'FZE',0,4
	.word	210
	.byte	1,11,2,35,0,4
	.byte	'FVE',0,4
	.word	210
	.byte	1,10,2,35,0,4
	.byte	'FIE',0,4
	.word	210
	.byte	1,9,2,35,0,4
	.byte	'reserved_23',0,4
	.word	210
	.byte	3,6,2,35,0,4
	.byte	'FX',0,4
	.word	210
	.byte	1,5,2,35,0,4
	.byte	'FU',0,4
	.word	210
	.byte	1,4,2,35,0,4
	.byte	'FZ',0,4
	.word	210
	.byte	1,3,2,35,0,4
	.byte	'FV',0,4
	.word	210
	.byte	1,2,2,35,0,4
	.byte	'FI',0,4
	.word	210
	.byte	1,1,2,35,0,4
	.byte	'reserved_31',0,4
	.word	210
	.byte	1,0,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,8,202,2,3
	.word	28276
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,8,205,2,16,4,4
	.byte	'OPC',0,4
	.word	210
	.byte	8,24,2,35,0,4
	.byte	'FMT',0,4
	.word	210
	.byte	1,23,2,35,0,4
	.byte	'reserved_9',0,4
	.word	210
	.byte	7,16,2,35,0,4
	.byte	'DREG',0,4
	.word	210
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	210
	.byte	12,0,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,8,212,2,3
	.word	28625
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,8,215,2,16,4,4
	.byte	'PC',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,8,218,2,3
	.word	28785
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,8,221,2,16,4,4
	.byte	'SRC1',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,8,224,2,3
	.word	28866
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,8,227,2,16,4,4
	.byte	'SRC2',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,8,230,2,3
	.word	28953
	.byte	3
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,8,233,2,16,4,4
	.byte	'SRC3',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,8,236,2,3
	.word	29040
	.byte	3
	.byte	'_Ifx_CPU_ICNT_Bits',0,8,239,2,16,4,4
	.byte	'CountValue',0,4
	.word	210
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	210
	.byte	1,0,2,35,0,0,22
	.byte	'Ifx_CPU_ICNT_Bits',0,8,243,2,3
	.word	29127
	.byte	3
	.byte	'_Ifx_CPU_ICR_Bits',0,8,246,2,16,4,4
	.byte	'CCPN',0,4
	.word	210
	.byte	10,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	210
	.byte	5,17,2,35,0,4
	.byte	'IE',0,4
	.word	210
	.byte	1,16,2,35,0,4
	.byte	'PIPN',0,4
	.word	210
	.byte	10,6,2,35,0,4
	.byte	'reserved_26',0,4
	.word	210
	.byte	6,0,2,35,0,0,22
	.byte	'Ifx_CPU_ICR_Bits',0,8,253,2,3
	.word	29218
	.byte	3
	.byte	'_Ifx_CPU_ISP_Bits',0,8,128,3,16,4,4
	.byte	'ISP',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_ISP_Bits',0,8,131,3,3
	.word	29361
	.byte	3
	.byte	'_Ifx_CPU_LCX_Bits',0,8,134,3,16,4,4
	.byte	'LCXO',0,4
	.word	210
	.byte	16,16,2,35,0,4
	.byte	'LCXS',0,4
	.word	210
	.byte	4,12,2,35,0,4
	.byte	'reserved_20',0,4
	.word	210
	.byte	12,0,2,35,0,0,22
	.byte	'Ifx_CPU_LCX_Bits',0,8,139,3,3
	.word	29427
	.byte	3
	.byte	'_Ifx_CPU_M1CNT_Bits',0,8,142,3,16,4,4
	.byte	'CountValue',0,4
	.word	210
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	210
	.byte	1,0,2,35,0,0,22
	.byte	'Ifx_CPU_M1CNT_Bits',0,8,146,3,3
	.word	29533
	.byte	3
	.byte	'_Ifx_CPU_M2CNT_Bits',0,8,149,3,16,4,4
	.byte	'CountValue',0,4
	.word	210
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	210
	.byte	1,0,2,35,0,0,22
	.byte	'Ifx_CPU_M2CNT_Bits',0,8,153,3,3
	.word	29626
	.byte	3
	.byte	'_Ifx_CPU_M3CNT_Bits',0,8,156,3,16,4,4
	.byte	'CountValue',0,4
	.word	210
	.byte	31,1,2,35,0,4
	.byte	'SOvf',0,4
	.word	210
	.byte	1,0,2,35,0,0,22
	.byte	'Ifx_CPU_M3CNT_Bits',0,8,160,3,3
	.word	29719
	.byte	3
	.byte	'_Ifx_CPU_PC_Bits',0,8,163,3,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'PC',0,4
	.word	210
	.byte	31,0,2,35,0,0,22
	.byte	'Ifx_CPU_PC_Bits',0,8,167,3,3
	.word	29812
	.byte	3
	.byte	'_Ifx_CPU_PCON0_Bits',0,8,170,3,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'PCBYP',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	210
	.byte	30,0,2,35,0,0,22
	.byte	'Ifx_CPU_PCON0_Bits',0,8,175,3,3
	.word	29897
	.byte	3
	.byte	'_Ifx_CPU_PCON1_Bits',0,8,178,3,16,4,4
	.byte	'PCINV',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'PBINV',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'reserved_2',0,4
	.word	210
	.byte	30,0,2,35,0,0,22
	.byte	'Ifx_CPU_PCON1_Bits',0,8,183,3,3
	.word	30013
	.byte	3
	.byte	'_Ifx_CPU_PCON2_Bits',0,8,186,3,16,4,4
	.byte	'PCACHE_SZE',0,4
	.word	210
	.byte	16,16,2,35,0,4
	.byte	'PSCRATCH_SZE',0,4
	.word	210
	.byte	16,0,2,35,0,0,22
	.byte	'Ifx_CPU_PCON2_Bits',0,8,190,3,3
	.word	30124
	.byte	3
	.byte	'_Ifx_CPU_PCXI_Bits',0,8,193,3,16,4,4
	.byte	'PCXO',0,4
	.word	210
	.byte	16,16,2,35,0,4
	.byte	'PCXS',0,4
	.word	210
	.byte	4,12,2,35,0,4
	.byte	'UL',0,4
	.word	210
	.byte	1,11,2,35,0,4
	.byte	'PIE',0,4
	.word	210
	.byte	1,10,2,35,0,4
	.byte	'PCPN',0,4
	.word	210
	.byte	10,0,2,35,0,0,22
	.byte	'Ifx_CPU_PCXI_Bits',0,8,200,3,3
	.word	30225
	.byte	3
	.byte	'_Ifx_CPU_PIEAR_Bits',0,8,203,3,16,4,4
	.byte	'TA',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_PIEAR_Bits',0,8,206,3,3
	.word	30355
	.byte	3
	.byte	'_Ifx_CPU_PIETR_Bits',0,8,209,3,16,4,4
	.byte	'IED',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'IE_T',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'IE_C',0,4
	.word	210
	.byte	1,29,2,35,0,4
	.byte	'IE_S',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'IE_BI',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'E_INFO',0,4
	.word	210
	.byte	6,21,2,35,0,4
	.byte	'IE_DUAL',0,4
	.word	210
	.byte	1,20,2,35,0,4
	.byte	'IE_SP',0,4
	.word	210
	.byte	1,19,2,35,0,4
	.byte	'IE_BS',0,4
	.word	210
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	210
	.byte	18,0,2,35,0,0,22
	.byte	'Ifx_CPU_PIETR_Bits',0,8,221,3,3
	.word	30424
	.byte	3
	.byte	'_Ifx_CPU_PMA0_Bits',0,8,224,3,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	13,19,2,35,0,4
	.byte	'DAC',0,4
	.word	210
	.byte	3,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	210
	.byte	16,0,2,35,0,0,22
	.byte	'Ifx_CPU_PMA0_Bits',0,8,229,3,3
	.word	30653
	.byte	3
	.byte	'_Ifx_CPU_PMA1_Bits',0,8,232,3,16,4,4
	.byte	'reserved_0',0,4
	.word	210
	.byte	14,18,2,35,0,4
	.byte	'CAC',0,4
	.word	210
	.byte	2,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	210
	.byte	16,0,2,35,0,0,22
	.byte	'Ifx_CPU_PMA1_Bits',0,8,237,3,3
	.word	30766
	.byte	3
	.byte	'_Ifx_CPU_PMA2_Bits',0,8,240,3,16,4,4
	.byte	'PSI',0,4
	.word	210
	.byte	16,16,2,35,0,4
	.byte	'reserved_16',0,4
	.word	210
	.byte	16,0,2,35,0,0,22
	.byte	'Ifx_CPU_PMA2_Bits',0,8,244,3,3
	.word	30879
	.byte	3
	.byte	'_Ifx_CPU_PSTR_Bits',0,8,247,3,16,4,4
	.byte	'FRE',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'FBE',0,4
	.word	210
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	210
	.byte	9,20,2,35,0,4
	.byte	'FPE',0,4
	.word	210
	.byte	1,19,2,35,0,4
	.byte	'reserved_13',0,4
	.word	210
	.byte	1,18,2,35,0,4
	.byte	'FME',0,4
	.word	210
	.byte	1,17,2,35,0,4
	.byte	'reserved_15',0,4
	.word	210
	.byte	17,0,2,35,0,0,22
	.byte	'Ifx_CPU_PSTR_Bits',0,8,129,4,3
	.word	30970
	.byte	3
	.byte	'_Ifx_CPU_PSW_Bits',0,8,132,4,16,4,4
	.byte	'CDC',0,4
	.word	210
	.byte	7,25,2,35,0,4
	.byte	'CDE',0,4
	.word	210
	.byte	1,24,2,35,0,4
	.byte	'GW',0,4
	.word	210
	.byte	1,23,2,35,0,4
	.byte	'IS',0,4
	.word	210
	.byte	1,22,2,35,0,4
	.byte	'IO',0,4
	.word	210
	.byte	2,20,2,35,0,4
	.byte	'PRS',0,4
	.word	210
	.byte	2,18,2,35,0,4
	.byte	'S',0,4
	.word	210
	.byte	1,17,2,35,0,4
	.byte	'reserved_15',0,4
	.word	210
	.byte	12,5,2,35,0,4
	.byte	'SAV',0,4
	.word	210
	.byte	1,4,2,35,0,4
	.byte	'AV',0,4
	.word	210
	.byte	1,3,2,35,0,4
	.byte	'SV',0,4
	.word	210
	.byte	1,2,2,35,0,4
	.byte	'V',0,4
	.word	210
	.byte	1,1,2,35,0,4
	.byte	'C',0,4
	.word	210
	.byte	1,0,2,35,0,0,22
	.byte	'Ifx_CPU_PSW_Bits',0,8,147,4,3
	.word	31173
	.byte	3
	.byte	'_Ifx_CPU_SEGEN_Bits',0,8,150,4,16,4,4
	.byte	'ADFLIP',0,4
	.word	210
	.byte	8,24,2,35,0,4
	.byte	'ADTYPE',0,4
	.word	210
	.byte	2,22,2,35,0,4
	.byte	'reserved_10',0,4
	.word	210
	.byte	21,1,2,35,0,4
	.byte	'AE',0,4
	.word	210
	.byte	1,0,2,35,0,0,22
	.byte	'Ifx_CPU_SEGEN_Bits',0,8,156,4,3
	.word	31416
	.byte	3
	.byte	'_Ifx_CPU_SMACON_Bits',0,8,159,4,16,4,4
	.byte	'PC',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'reserved_1',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'PT',0,4
	.word	210
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	210
	.byte	5,24,2,35,0,4
	.byte	'DC',0,4
	.word	210
	.byte	1,23,2,35,0,4
	.byte	'reserved_9',0,4
	.word	210
	.byte	1,22,2,35,0,4
	.byte	'DT',0,4
	.word	210
	.byte	1,21,2,35,0,4
	.byte	'reserved_11',0,4
	.word	210
	.byte	13,8,2,35,0,4
	.byte	'IODT',0,4
	.word	210
	.byte	1,7,2,35,0,4
	.byte	'reserved_25',0,4
	.word	210
	.byte	7,0,2,35,0,0,22
	.byte	'Ifx_CPU_SMACON_Bits',0,8,171,4,3
	.word	31544
	.byte	3
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,8,174,4,16,4,4
	.byte	'EN',0,4
	.word	187
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,8,177,4,3
	.word	31785
	.byte	3
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,8,180,4,16,4,4
	.byte	'reserved_0',0,4
	.word	187
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,8,183,4,3
	.word	31868
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,8,186,4,16,4,4
	.byte	'EN',0,4
	.word	187
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,8,189,4,3
	.word	31959
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,8,192,4,16,4,4
	.byte	'reserved_0',0,4
	.word	187
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,8,195,4,3
	.word	32050
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,8,198,4,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	187
	.byte	27,0,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,8,202,4,3
	.word	32149
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,8,205,4,16,4,4
	.byte	'reserved_0',0,1
	.word	362
	.byte	5,3,2,35,0,4
	.byte	'ADDR',0,4
	.word	187
	.byte	27,0,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,8,209,4,3
	.word	32256
	.byte	3
	.byte	'_Ifx_CPU_SWEVT_Bits',0,8,212,4,16,4,4
	.byte	'EVTA',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	210
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	210
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	210
	.byte	24,0,2,35,0,0,22
	.byte	'Ifx_CPU_SWEVT_Bits',0,8,220,4,3
	.word	32363
	.byte	3
	.byte	'_Ifx_CPU_SYSCON_Bits',0,8,223,4,16,4,4
	.byte	'FCDSF',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'PROTEN',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'TPROTEN',0,4
	.word	210
	.byte	1,29,2,35,0,4
	.byte	'IS',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'IT',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	210
	.byte	27,0,2,35,0,0,22
	.byte	'Ifx_CPU_SYSCON_Bits',0,8,231,4,3
	.word	32517
	.byte	3
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,8,234,4,16,4,4
	.byte	'ASI',0,4
	.word	210
	.byte	5,27,2,35,0,4
	.byte	'reserved_5',0,4
	.word	210
	.byte	27,0,2,35,0,0,22
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,8,238,4,3
	.word	32678
	.byte	3
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,8,241,4,16,4,4
	.byte	'TEXP0',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'TEXP1',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'TEXP2',0,4
	.word	210
	.byte	1,29,2,35,0,4
	.byte	'reserved_3',0,4
	.word	210
	.byte	13,16,2,35,0,4
	.byte	'TTRAP',0,4
	.word	210
	.byte	1,15,2,35,0,4
	.byte	'reserved_17',0,4
	.word	210
	.byte	15,0,2,35,0,0,22
	.byte	'Ifx_CPU_TPS_CON_Bits',0,8,249,4,3
	.word	32776
	.byte	3
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,8,252,4,16,4,4
	.byte	'Timer',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,8,255,4,3
	.word	32948
	.byte	3
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,8,130,5,16,4,4
	.byte	'ADDR',0,4
	.word	210
	.byte	32,0,2,35,0,0,22
	.byte	'Ifx_CPU_TR_ADR_Bits',0,8,133,5,3
	.word	33028
	.byte	3
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,8,136,5,16,4,4
	.byte	'EVTA',0,4
	.word	210
	.byte	3,29,2,35,0,4
	.byte	'BBM',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'BOD',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'SUSP',0,4
	.word	210
	.byte	1,26,2,35,0,4
	.byte	'CNT',0,4
	.word	210
	.byte	2,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	210
	.byte	4,20,2,35,0,4
	.byte	'TYP',0,4
	.word	210
	.byte	1,19,2,35,0,4
	.byte	'RNG',0,4
	.word	210
	.byte	1,18,2,35,0,4
	.byte	'reserved_14',0,4
	.word	210
	.byte	1,17,2,35,0,4
	.byte	'ASI_EN',0,4
	.word	210
	.byte	1,16,2,35,0,4
	.byte	'ASI',0,4
	.word	210
	.byte	5,11,2,35,0,4
	.byte	'reserved_21',0,4
	.word	210
	.byte	6,5,2,35,0,4
	.byte	'AST',0,4
	.word	210
	.byte	1,4,2,35,0,4
	.byte	'ALD',0,4
	.word	210
	.byte	1,3,2,35,0,4
	.byte	'reserved_29',0,4
	.word	210
	.byte	3,0,2,35,0,0,22
	.byte	'Ifx_CPU_TR_EVT_Bits',0,8,153,5,3
	.word	33101
	.byte	3
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,8,156,5,16,4,4
	.byte	'T0',0,4
	.word	210
	.byte	1,31,2,35,0,4
	.byte	'T1',0,4
	.word	210
	.byte	1,30,2,35,0,4
	.byte	'T2',0,4
	.word	210
	.byte	1,29,2,35,0,4
	.byte	'T3',0,4
	.word	210
	.byte	1,28,2,35,0,4
	.byte	'T4',0,4
	.word	210
	.byte	1,27,2,35,0,4
	.byte	'T5',0,4
	.word	210
	.byte	1,26,2,35,0,4
	.byte	'T6',0,4
	.word	210
	.byte	1,25,2,35,0,4
	.byte	'T7',0,4
	.word	210
	.byte	1,24,2,35,0,4
	.byte	'reserved_8',0,4
	.word	210
	.byte	24,0,2,35,0,0,22
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,8,167,5,3
	.word	33419
	.byte	5,8,175,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24706
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_A',0,8,180,5,3
	.word	33614
	.byte	5,8,183,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24767
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_BIV',0,8,188,5,3
	.word	33673
	.byte	5,8,191,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24846
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_BTV',0,8,196,5,3
	.word	33734
	.byte	5,8,199,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	24932
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_CCNT',0,8,204,5,3
	.word	33795
	.byte	5,8,207,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25021
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_CCTRL',0,8,212,5,3
	.word	33857
	.byte	5,8,215,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25167
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_COMPAT',0,8,220,5,3
	.word	33920
	.byte	22
	.byte	'Ifx_CPU_CORE_ID',0,8,228,5,3
	.word	3063
	.byte	5,8,231,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25323
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_CPR_L',0,8,236,5,3
	.word	34009
	.byte	5,8,239,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25416
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_CPR_U',0,8,244,5,3
	.word	34072
	.byte	5,8,247,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25509
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_CPU_ID',0,8,252,5,3
	.word	34135
	.byte	5,8,255,5,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25616
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_CPXE',0,8,132,6,3
	.word	34199
	.byte	5,8,135,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25703
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_CREVT',0,8,140,6,3
	.word	34261
	.byte	5,8,143,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25857
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_CUS_ID',0,8,148,6,3
	.word	34324
	.byte	5,8,151,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	25951
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_D',0,8,156,6,3
	.word	34388
	.byte	5,8,159,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26014
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DATR',0,8,164,6,3
	.word	34447
	.byte	5,8,167,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26232
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DBGSR',0,8,172,6,3
	.word	34509
	.byte	5,8,175,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26447
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DBGTCR',0,8,180,6,3
	.word	34572
	.byte	5,8,183,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26541
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DCON0',0,8,188,6,3
	.word	34636
	.byte	5,8,191,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26657
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DCON2',0,8,196,6,3
	.word	34699
	.byte	5,8,199,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26758
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DCX',0,8,204,6,3
	.word	34762
	.byte	5,8,207,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26851
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DEADD',0,8,212,6,3
	.word	34823
	.byte	5,8,215,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	26931
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DIEAR',0,8,220,6,3
	.word	34886
	.byte	5,8,223,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27000
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DIETR',0,8,228,6,3
	.word	34949
	.byte	5,8,231,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27229
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DMS',0,8,236,6,3
	.word	35012
	.byte	5,8,239,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27322
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DPR_L',0,8,244,6,3
	.word	35073
	.byte	5,8,247,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27417
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DPR_U',0,8,252,6,3
	.word	35136
	.byte	5,8,255,6,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27512
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DPRE',0,8,132,7,3
	.word	35199
	.byte	5,8,135,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27602
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DPWE',0,8,140,7,3
	.word	35261
	.byte	5,8,143,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	27692
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_DSTR',0,8,148,7,3
	.word	35323
	.byte	5,8,151,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28016
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_EXEVT',0,8,156,7,3
	.word	35385
	.byte	5,8,159,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28170
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_FCX',0,8,164,7,3
	.word	35448
	.byte	5,8,167,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28276
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,8,172,7,3
	.word	35509
	.byte	5,8,175,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28625
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,8,180,7,3
	.word	35579
	.byte	5,8,183,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28785
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,8,188,7,3
	.word	35649
	.byte	5,8,191,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28866
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,8,196,7,3
	.word	35718
	.byte	5,8,199,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	28953
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,8,204,7,3
	.word	35789
	.byte	5,8,207,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29040
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,8,212,7,3
	.word	35860
	.byte	5,8,215,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29127
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_ICNT',0,8,220,7,3
	.word	35931
	.byte	5,8,223,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29218
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_ICR',0,8,228,7,3
	.word	35993
	.byte	5,8,231,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29361
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_ISP',0,8,236,7,3
	.word	36054
	.byte	5,8,239,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29427
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_LCX',0,8,244,7,3
	.word	36115
	.byte	5,8,247,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29533
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_M1CNT',0,8,252,7,3
	.word	36176
	.byte	5,8,255,7,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29626
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_M2CNT',0,8,132,8,3
	.word	36239
	.byte	5,8,135,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29719
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_M3CNT',0,8,140,8,3
	.word	36302
	.byte	5,8,143,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29812
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PC',0,8,148,8,3
	.word	36365
	.byte	5,8,151,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	29897
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PCON0',0,8,156,8,3
	.word	36425
	.byte	5,8,159,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30013
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PCON1',0,8,164,8,3
	.word	36488
	.byte	5,8,167,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30124
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PCON2',0,8,172,8,3
	.word	36551
	.byte	5,8,175,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30225
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PCXI',0,8,180,8,3
	.word	36614
	.byte	5,8,183,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30355
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PIEAR',0,8,188,8,3
	.word	36676
	.byte	5,8,191,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30424
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PIETR',0,8,196,8,3
	.word	36739
	.byte	5,8,199,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30653
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PMA0',0,8,204,8,3
	.word	36802
	.byte	5,8,207,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30766
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PMA1',0,8,212,8,3
	.word	36864
	.byte	5,8,215,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30879
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PMA2',0,8,220,8,3
	.word	36926
	.byte	5,8,223,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	30970
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PSTR',0,8,228,8,3
	.word	36988
	.byte	5,8,231,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31173
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_PSW',0,8,236,8,3
	.word	37050
	.byte	5,8,239,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31416
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SEGEN',0,8,244,8,3
	.word	37111
	.byte	5,8,247,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31544
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SMACON',0,8,252,8,3
	.word	37174
	.byte	5,8,255,8,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31785
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_ACCENA',0,8,132,9,3
	.word	37238
	.byte	5,8,135,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31868
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_ACCENB',0,8,140,9,3
	.word	37308
	.byte	5,8,143,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	31959
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,8,148,9,3
	.word	37378
	.byte	5,8,151,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32050
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,8,156,9,3
	.word	37452
	.byte	5,8,159,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32149
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,8,164,9,3
	.word	37526
	.byte	5,8,167,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32256
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,8,172,9,3
	.word	37596
	.byte	5,8,175,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32363
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SWEVT',0,8,180,9,3
	.word	37666
	.byte	5,8,183,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32517
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_SYSCON',0,8,188,9,3
	.word	37729
	.byte	5,8,191,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32678
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_TASK_ASI',0,8,196,9,3
	.word	37793
	.byte	5,8,199,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32776
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_TPS_CON',0,8,204,9,3
	.word	37859
	.byte	5,8,207,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	32948
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_TPS_TIMER',0,8,212,9,3
	.word	37924
	.byte	5,8,215,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33028
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_TR_ADR',0,8,220,9,3
	.word	37991
	.byte	5,8,223,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33101
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_TR_EVT',0,8,228,9,3
	.word	38055
	.byte	5,8,231,9,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	33419
	.byte	4,2,35,0,0,22
	.byte	'Ifx_CPU_TRIG_ACC',0,8,236,9,3
	.word	38119
	.byte	3
	.byte	'_Ifx_CPU_CPR',0,8,247,9,25,8,6
	.byte	'L',0
	.word	34009
	.byte	4,2,35,0,6
	.byte	'U',0
	.word	34072
	.byte	4,2,35,4,0,7
	.word	38185
	.byte	22
	.byte	'Ifx_CPU_CPR',0,8,251,9,3
	.word	38227
	.byte	3
	.byte	'_Ifx_CPU_DPR',0,8,254,9,25,8,6
	.byte	'L',0
	.word	35073
	.byte	4,2,35,0,6
	.byte	'U',0
	.word	35136
	.byte	4,2,35,4,0,7
	.word	38253
	.byte	22
	.byte	'Ifx_CPU_DPR',0,8,130,10,3
	.word	38295
	.byte	3
	.byte	'_Ifx_CPU_SPROT_RGN',0,8,133,10,25,16,6
	.byte	'LA',0
	.word	37526
	.byte	4,2,35,0,6
	.byte	'UA',0
	.word	37596
	.byte	4,2,35,4,6
	.byte	'ACCENA',0
	.word	37378
	.byte	4,2,35,8,6
	.byte	'ACCENB',0
	.word	37452
	.byte	4,2,35,12,0,7
	.word	38321
	.byte	22
	.byte	'Ifx_CPU_SPROT_RGN',0,8,139,10,3
	.word	38403
	.byte	24,12
	.word	37924
	.byte	25,2,0,3
	.byte	'_Ifx_CPU_TPS',0,8,142,10,25,16,6
	.byte	'CON',0
	.word	37859
	.byte	4,2,35,0,6
	.byte	'TIMER',0
	.word	38435
	.byte	12,2,35,4,0,7
	.word	38444
	.byte	22
	.byte	'Ifx_CPU_TPS',0,8,146,10,3
	.word	38492
	.byte	3
	.byte	'_Ifx_CPU_TR',0,8,149,10,25,8,6
	.byte	'EVT',0
	.word	38055
	.byte	4,2,35,0,6
	.byte	'ADR',0
	.word	37991
	.byte	4,2,35,4,0,7
	.word	38518
	.byte	22
	.byte	'Ifx_CPU_TR',0,8,153,10,3
	.word	38563
	.byte	22
	.byte	'IfxCpu_ResourceCpu',0,6,87,3
	.word	1496
	.byte	3
	.byte	'_Ifx_SRC_SRCR_Bits',0,13,45,16,4,4
	.byte	'SRPN',0,1
	.word	362
	.byte	8,0,2,35,0,4
	.byte	'reserved_8',0,1
	.word	362
	.byte	2,6,2,35,1,4
	.byte	'SRE',0,1
	.word	362
	.byte	1,5,2,35,1,4
	.byte	'TOS',0,1
	.word	362
	.byte	1,4,2,35,1,4
	.byte	'reserved_12',0,1
	.word	362
	.byte	4,0,2,35,1,4
	.byte	'ECC',0,1
	.word	362
	.byte	5,3,2,35,2,4
	.byte	'reserved_21',0,1
	.word	362
	.byte	3,0,2,35,2,4
	.byte	'SRR',0,1
	.word	362
	.byte	1,7,2,35,3,4
	.byte	'CLRR',0,1
	.word	362
	.byte	1,6,2,35,3,4
	.byte	'SETR',0,1
	.word	362
	.byte	1,5,2,35,3,4
	.byte	'IOV',0,1
	.word	362
	.byte	1,4,2,35,3,4
	.byte	'IOVCLR',0,1
	.word	362
	.byte	1,3,2,35,3,4
	.byte	'SWS',0,1
	.word	362
	.byte	1,2,2,35,3,4
	.byte	'SWSCLR',0,1
	.word	362
	.byte	1,1,2,35,3,4
	.byte	'reserved_31',0,1
	.word	362
	.byte	1,0,2,35,3,0,22
	.byte	'Ifx_SRC_SRCR_Bits',0,13,62,3
	.word	38615
	.byte	5,13,70,9,4,6
	.byte	'U',0
	.word	187
	.byte	4,2,35,0,6
	.byte	'I',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	38615
	.byte	4,2,35,0,0,22
	.byte	'Ifx_SRC_SRCR',0,13,75,3
	.word	38931
	.byte	3
	.byte	'_Ifx_SRC_ASCLIN',0,13,86,25,12,6
	.byte	'TX',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'RX',0
	.word	38931
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	38931
	.byte	4,2,35,8,0,7
	.word	38991
	.byte	22
	.byte	'Ifx_SRC_ASCLIN',0,13,91,3
	.word	39050
	.byte	3
	.byte	'_Ifx_SRC_BCUSPB',0,13,94,25,4,6
	.byte	'SBSRC',0
	.word	38931
	.byte	4,2,35,0,0,7
	.word	39078
	.byte	22
	.byte	'Ifx_SRC_BCUSPB',0,13,97,3
	.word	39115
	.byte	24,64
	.word	38931
	.byte	25,15,0,3
	.byte	'_Ifx_SRC_CAN',0,13,100,25,64,6
	.byte	'INT',0
	.word	39143
	.byte	64,2,35,0,0,7
	.word	39152
	.byte	22
	.byte	'Ifx_SRC_CAN',0,13,103,3
	.word	39184
	.byte	24,32
	.word	38931
	.byte	25,7,0,3
	.byte	'_Ifx_SRC_CAN1',0,13,106,25,32,6
	.byte	'INT',0
	.word	39209
	.byte	32,2,35,0,0,7
	.word	39218
	.byte	22
	.byte	'Ifx_SRC_CAN1',0,13,109,3
	.word	39251
	.byte	3
	.byte	'_Ifx_SRC_CCU6',0,13,112,25,16,6
	.byte	'SR0',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	38931
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	38931
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	38931
	.byte	4,2,35,12,0,7
	.word	39277
	.byte	22
	.byte	'Ifx_SRC_CCU6',0,13,118,3
	.word	39349
	.byte	24,8
	.word	38931
	.byte	25,1,0,3
	.byte	'_Ifx_SRC_CERBERUS',0,13,121,25,8,6
	.byte	'SR',0
	.word	39375
	.byte	8,2,35,0,0,7
	.word	39384
	.byte	22
	.byte	'Ifx_SRC_CERBERUS',0,13,124,3
	.word	39420
	.byte	24,28
	.word	362
	.byte	25,27,0,3
	.byte	'_Ifx_SRC_CPU',0,13,127,25,32,6
	.byte	'SBSRC',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'reserved_4',0
	.word	39450
	.byte	28,2,35,4,0,7
	.word	39459
	.byte	22
	.byte	'Ifx_SRC_CPU',0,13,131,1,3
	.word	39513
	.byte	24,12
	.word	362
	.byte	25,11,0,3
	.byte	'_Ifx_SRC_DMA',0,13,134,1,25,80,6
	.byte	'ERR',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'reserved_4',0
	.word	39539
	.byte	12,2,35,4,6
	.byte	'CH',0
	.word	39143
	.byte	64,2,35,16,0,7
	.word	39548
	.byte	22
	.byte	'Ifx_SRC_DMA',0,13,139,1,3
	.word	39613
	.byte	3
	.byte	'_Ifx_SRC_EMEM',0,13,142,1,25,4,6
	.byte	'SR',0
	.word	38931
	.byte	4,2,35,0,0,7
	.word	39639
	.byte	22
	.byte	'Ifx_SRC_EMEM',0,13,145,1,3
	.word	39672
	.byte	24,40
	.word	362
	.byte	25,39,0,3
	.byte	'_Ifx_SRC_ERAY',0,13,148,1,25,80,6
	.byte	'INT',0
	.word	39375
	.byte	8,2,35,0,6
	.byte	'TINT',0
	.word	39375
	.byte	8,2,35,8,6
	.byte	'NDAT',0
	.word	39375
	.byte	8,2,35,16,6
	.byte	'MBSC',0
	.word	39375
	.byte	8,2,35,24,6
	.byte	'OBUSY',0
	.word	38931
	.byte	4,2,35,32,6
	.byte	'IBUSY',0
	.word	38931
	.byte	4,2,35,36,6
	.byte	'reserved_28',0
	.word	39699
	.byte	40,2,35,40,0,7
	.word	39708
	.byte	22
	.byte	'Ifx_SRC_ERAY',0,13,157,1,3
	.word	39835
	.byte	3
	.byte	'_Ifx_SRC_ETH',0,13,160,1,25,4,6
	.byte	'SR',0
	.word	38931
	.byte	4,2,35,0,0,7
	.word	39862
	.byte	22
	.byte	'Ifx_SRC_ETH',0,13,163,1,3
	.word	39894
	.byte	3
	.byte	'_Ifx_SRC_EVR',0,13,166,1,25,8,6
	.byte	'WUT',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'SCDC',0
	.word	38931
	.byte	4,2,35,4,0,7
	.word	39920
	.byte	22
	.byte	'Ifx_SRC_EVR',0,13,170,1,3
	.word	39967
	.byte	3
	.byte	'_Ifx_SRC_FFT',0,13,173,1,25,12,6
	.byte	'DONE',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'ERR',0
	.word	38931
	.byte	4,2,35,4,6
	.byte	'RFS',0
	.word	38931
	.byte	4,2,35,8,0,7
	.word	39993
	.byte	22
	.byte	'Ifx_SRC_FFT',0,13,178,1,3
	.word	40053
	.byte	24,240,11
	.word	362
	.byte	25,239,11,0,3
	.byte	'_Ifx_SRC_GPSR',0,13,181,1,25,128,12,6
	.byte	'SR0',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	38931
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	38931
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	38931
	.byte	4,2,35,12,6
	.byte	'reserved_10',0
	.word	40079
	.byte	240,11,2,35,16,0,7
	.word	40090
	.byte	22
	.byte	'Ifx_SRC_GPSR',0,13,188,1,3
	.word	40186
	.byte	24,24
	.word	362
	.byte	25,23,0,3
	.byte	'_Ifx_SRC_GPT12',0,13,191,1,25,48,6
	.byte	'CIRQ',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'T2',0
	.word	38931
	.byte	4,2,35,4,6
	.byte	'T3',0
	.word	38931
	.byte	4,2,35,8,6
	.byte	'T4',0
	.word	38931
	.byte	4,2,35,12,6
	.byte	'T5',0
	.word	38931
	.byte	4,2,35,16,6
	.byte	'T6',0
	.word	38931
	.byte	4,2,35,20,6
	.byte	'reserved_18',0
	.word	40213
	.byte	24,2,35,24,0,7
	.word	40222
	.byte	22
	.byte	'Ifx_SRC_GPT12',0,13,200,1,3
	.word	40339
	.byte	24,236,2
	.word	362
	.byte	25,235,2,0,24,32
	.word	39209
	.byte	25,0,0,24,224,7
	.word	362
	.byte	25,223,7,0,24,64
	.word	39209
	.byte	25,1,0,3
	.byte	'_Ifx_SRC_GTM',0,13,203,1,25,192,11,6
	.byte	'AEIIRQ',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'reserved_4',0
	.word	40367
	.byte	236,2,2,35,4,6
	.byte	'ERR',0
	.word	38931
	.byte	4,3,35,240,2,6
	.byte	'reserved_174',0
	.word	39539
	.byte	12,3,35,244,2,6
	.byte	'TIM',0
	.word	40378
	.byte	32,3,35,128,3,6
	.byte	'reserved_1A0',0
	.word	40387
	.byte	224,7,3,35,160,3,6
	.byte	'TOM',0
	.word	40398
	.byte	64,3,35,128,11,0,7
	.word	40407
	.byte	22
	.byte	'Ifx_SRC_GTM',0,13,212,1,3
	.word	40554
	.byte	3
	.byte	'_Ifx_SRC_HSM',0,13,215,1,25,8,6
	.byte	'HSM',0
	.word	39375
	.byte	8,2,35,0,0,7
	.word	40580
	.byte	22
	.byte	'Ifx_SRC_HSM',0,13,218,1,3
	.word	40613
	.byte	3
	.byte	'_Ifx_SRC_LMU',0,13,221,1,25,4,6
	.byte	'SR',0
	.word	38931
	.byte	4,2,35,0,0,7
	.word	40639
	.byte	22
	.byte	'Ifx_SRC_LMU',0,13,224,1,3
	.word	40671
	.byte	3
	.byte	'_Ifx_SRC_PMU',0,13,227,1,25,4,6
	.byte	'SR',0
	.word	38931
	.byte	4,2,35,0,0,7
	.word	40697
	.byte	22
	.byte	'Ifx_SRC_PMU',0,13,230,1,3
	.word	40729
	.byte	3
	.byte	'_Ifx_SRC_QSPI',0,13,233,1,25,24,6
	.byte	'TX',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'RX',0
	.word	38931
	.byte	4,2,35,4,6
	.byte	'ERR',0
	.word	38931
	.byte	4,2,35,8,6
	.byte	'PT',0
	.word	38931
	.byte	4,2,35,12,6
	.byte	'HC',0
	.word	38931
	.byte	4,2,35,16,6
	.byte	'U',0
	.word	38931
	.byte	4,2,35,20,0,7
	.word	40755
	.byte	22
	.byte	'Ifx_SRC_QSPI',0,13,241,1,3
	.word	40848
	.byte	24,16
	.word	38931
	.byte	25,3,0,3
	.byte	'_Ifx_SRC_SCU',0,13,244,1,25,20,6
	.byte	'DTS',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'ERU',0
	.word	40875
	.byte	16,2,35,4,0,7
	.word	40884
	.byte	22
	.byte	'Ifx_SRC_SCU',0,13,248,1,3
	.word	40930
	.byte	3
	.byte	'_Ifx_SRC_SENT',0,13,251,1,25,16,6
	.byte	'SR',0
	.word	40875
	.byte	16,2,35,0,0,7
	.word	40956
	.byte	22
	.byte	'Ifx_SRC_SENT',0,13,254,1,3
	.word	40989
	.byte	24,12
	.word	38931
	.byte	25,2,0,3
	.byte	'_Ifx_SRC_SMU',0,13,129,2,25,12,6
	.byte	'SR',0
	.word	41016
	.byte	12,2,35,0,0,7
	.word	41025
	.byte	22
	.byte	'Ifx_SRC_SMU',0,13,132,2,3
	.word	41057
	.byte	24,88
	.word	362
	.byte	25,87,0,3
	.byte	'_Ifx_SRC_STM',0,13,135,2,25,96,6
	.byte	'SR0',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	38931
	.byte	4,2,35,4,6
	.byte	'reserved_8',0
	.word	41083
	.byte	88,2,35,8,0,7
	.word	41092
	.byte	22
	.byte	'Ifx_SRC_STM',0,13,140,2,3
	.word	41158
	.byte	24,176,2
	.word	362
	.byte	25,175,2,0,3
	.byte	'_Ifx_SRC_VADCCG',0,13,143,2,25,192,2,6
	.byte	'SR0',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	38931
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	38931
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	38931
	.byte	4,2,35,12,6
	.byte	'reserved_10',0
	.word	41184
	.byte	176,2,2,35,16,0,7
	.word	41195
	.byte	22
	.byte	'Ifx_SRC_VADCCG',0,13,150,2,3
	.word	41293
	.byte	3
	.byte	'_Ifx_SRC_VADCG',0,13,153,2,25,16,6
	.byte	'SR0',0
	.word	38931
	.byte	4,2,35,0,6
	.byte	'SR1',0
	.word	38931
	.byte	4,2,35,4,6
	.byte	'SR2',0
	.word	38931
	.byte	4,2,35,8,6
	.byte	'SR3',0
	.word	38931
	.byte	4,2,35,12,0,7
	.word	41322
	.byte	22
	.byte	'Ifx_SRC_VADCG',0,13,159,2,3
	.word	41396
	.byte	3
	.byte	'_Ifx_SRC_XBAR',0,13,162,2,25,4,6
	.byte	'SRC',0
	.word	38931
	.byte	4,2,35,0,0,7
	.word	41424
	.byte	22
	.byte	'Ifx_SRC_XBAR',0,13,165,2,3
	.word	41458
	.byte	24,24
	.word	38991
	.byte	25,1,0,7
	.word	41485
	.byte	3
	.byte	'_Ifx_SRC_GASCLIN',0,13,178,2,25,24,6
	.byte	'ASCLIN',0
	.word	41494
	.byte	24,2,35,0,0,7
	.word	41499
	.byte	22
	.byte	'Ifx_SRC_GASCLIN',0,13,181,2,3
	.word	41539
	.byte	7
	.word	39078
	.byte	3
	.byte	'_Ifx_SRC_GBCU',0,13,184,2,25,4,6
	.byte	'SPB',0
	.word	41569
	.byte	4,2,35,0,0,7
	.word	41574
	.byte	22
	.byte	'Ifx_SRC_GBCU',0,13,187,2,3
	.word	41608
	.byte	24,64
	.word	39152
	.byte	25,0,0,7
	.word	41635
	.byte	24,32
	.word	39218
	.byte	25,0,0,7
	.word	41649
	.byte	3
	.byte	'_Ifx_SRC_GCAN',0,13,190,2,25,96,6
	.byte	'CAN',0
	.word	41644
	.byte	64,2,35,0,6
	.byte	'CAN1',0
	.word	41658
	.byte	32,2,35,64,0,7
	.word	41663
	.byte	22
	.byte	'Ifx_SRC_GCAN',0,13,194,2,3
	.word	41711
	.byte	24,32
	.word	39277
	.byte	25,1,0,7
	.word	41738
	.byte	3
	.byte	'_Ifx_SRC_GCCU6',0,13,197,2,25,32,6
	.byte	'CCU6',0
	.word	41747
	.byte	32,2,35,0,0,7
	.word	41752
	.byte	22
	.byte	'Ifx_SRC_GCCU6',0,13,200,2,3
	.word	41788
	.byte	7
	.word	39384
	.byte	3
	.byte	'_Ifx_SRC_GCERBERUS',0,13,203,2,25,8,6
	.byte	'CERBERUS',0
	.word	41816
	.byte	8,2,35,0,0,7
	.word	41821
	.byte	22
	.byte	'Ifx_SRC_GCERBERUS',0,13,206,2,3
	.word	41865
	.byte	24,32
	.word	39459
	.byte	25,0,0,7
	.word	41897
	.byte	3
	.byte	'_Ifx_SRC_GCPU',0,13,209,2,25,32,6
	.byte	'CPU',0
	.word	41906
	.byte	32,2,35,0,0,7
	.word	41911
	.byte	22
	.byte	'Ifx_SRC_GCPU',0,13,212,2,3
	.word	41945
	.byte	24,80
	.word	39548
	.byte	25,0,0,7
	.word	41972
	.byte	3
	.byte	'_Ifx_SRC_GDMA',0,13,215,2,25,80,6
	.byte	'DMA',0
	.word	41981
	.byte	80,2,35,0,0,7
	.word	41986
	.byte	22
	.byte	'Ifx_SRC_GDMA',0,13,218,2,3
	.word	42020
	.byte	24,4
	.word	39639
	.byte	25,0,0,7
	.word	42047
	.byte	3
	.byte	'_Ifx_SRC_GEMEM',0,13,221,2,25,4,6
	.byte	'EMEM',0
	.word	42056
	.byte	4,2,35,0,0,7
	.word	42061
	.byte	22
	.byte	'Ifx_SRC_GEMEM',0,13,224,2,3
	.word	42097
	.byte	24,80
	.word	39708
	.byte	25,0,0,7
	.word	42125
	.byte	3
	.byte	'_Ifx_SRC_GERAY',0,13,227,2,25,80,6
	.byte	'ERAY',0
	.word	42134
	.byte	80,2,35,0,0,7
	.word	42139
	.byte	22
	.byte	'Ifx_SRC_GERAY',0,13,230,2,3
	.word	42175
	.byte	24,4
	.word	39862
	.byte	25,0,0,7
	.word	42203
	.byte	3
	.byte	'_Ifx_SRC_GETH',0,13,233,2,25,4,6
	.byte	'ETH',0
	.word	42212
	.byte	4,2,35,0,0,7
	.word	42217
	.byte	22
	.byte	'Ifx_SRC_GETH',0,13,236,2,3
	.word	42251
	.byte	24,8
	.word	39920
	.byte	25,0,0,7
	.word	42278
	.byte	3
	.byte	'_Ifx_SRC_GEVR',0,13,239,2,25,8,6
	.byte	'EVR',0
	.word	42287
	.byte	8,2,35,0,0,7
	.word	42292
	.byte	22
	.byte	'Ifx_SRC_GEVR',0,13,242,2,3
	.word	42326
	.byte	24,12
	.word	39993
	.byte	25,0,0,7
	.word	42353
	.byte	3
	.byte	'_Ifx_SRC_GFFT',0,13,245,2,25,12,6
	.byte	'FFT',0
	.word	42362
	.byte	12,2,35,0,0,7
	.word	42367
	.byte	22
	.byte	'Ifx_SRC_GFFT',0,13,248,2,3
	.word	42401
	.byte	24,128,12
	.word	40090
	.byte	25,0,0,7
	.word	42428
	.byte	3
	.byte	'_Ifx_SRC_GGPSR',0,13,251,2,25,128,12,6
	.byte	'GPSR',0
	.word	42438
	.byte	128,12,2,35,0,0,7
	.word	42443
	.byte	22
	.byte	'Ifx_SRC_GGPSR',0,13,254,2,3
	.word	42481
	.byte	24,48
	.word	40222
	.byte	25,0,0,7
	.word	42509
	.byte	3
	.byte	'_Ifx_SRC_GGPT12',0,13,129,3,25,48,6
	.byte	'GPT12',0
	.word	42518
	.byte	48,2,35,0,0,7
	.word	42523
	.byte	22
	.byte	'Ifx_SRC_GGPT12',0,13,132,3,3
	.word	42561
	.byte	24,192,11
	.word	40407
	.byte	25,0,0,7
	.word	42590
	.byte	3
	.byte	'_Ifx_SRC_GGTM',0,13,135,3,25,192,11,6
	.byte	'GTM',0
	.word	42600
	.byte	192,11,2,35,0,0,7
	.word	42605
	.byte	22
	.byte	'Ifx_SRC_GGTM',0,13,138,3,3
	.word	42641
	.byte	24,8
	.word	40580
	.byte	25,0,0,7
	.word	42668
	.byte	3
	.byte	'_Ifx_SRC_GHSM',0,13,141,3,25,8,6
	.byte	'HSM',0
	.word	42677
	.byte	8,2,35,0,0,7
	.word	42682
	.byte	22
	.byte	'Ifx_SRC_GHSM',0,13,144,3,3
	.word	42716
	.byte	24,4
	.word	40639
	.byte	25,0,0,7
	.word	42743
	.byte	3
	.byte	'_Ifx_SRC_GLMU',0,13,147,3,25,4,6
	.byte	'LMU',0
	.word	42752
	.byte	4,2,35,0,0,7
	.word	42757
	.byte	22
	.byte	'Ifx_SRC_GLMU',0,13,150,3,3
	.word	42791
	.byte	24,8
	.word	40697
	.byte	25,1,0,7
	.word	42818
	.byte	3
	.byte	'_Ifx_SRC_GPMU',0,13,153,3,25,8,6
	.byte	'PMU',0
	.word	42827
	.byte	8,2,35,0,0,7
	.word	42832
	.byte	22
	.byte	'Ifx_SRC_GPMU',0,13,156,3,3
	.word	42866
	.byte	24,96
	.word	40755
	.byte	25,3,0,7
	.word	42893
	.byte	3
	.byte	'_Ifx_SRC_GQSPI',0,13,159,3,25,96,6
	.byte	'QSPI',0
	.word	42902
	.byte	96,2,35,0,0,7
	.word	42907
	.byte	22
	.byte	'Ifx_SRC_GQSPI',0,13,162,3,3
	.word	42943
	.byte	7
	.word	40884
	.byte	3
	.byte	'_Ifx_SRC_GSCU',0,13,165,3,25,20,6
	.byte	'SCU',0
	.word	42971
	.byte	20,2,35,0,0,7
	.word	42976
	.byte	22
	.byte	'Ifx_SRC_GSCU',0,13,168,3,3
	.word	43010
	.byte	24,16
	.word	40956
	.byte	25,0,0,7
	.word	43037
	.byte	3
	.byte	'_Ifx_SRC_GSENT',0,13,171,3,25,16,6
	.byte	'SENT',0
	.word	43046
	.byte	16,2,35,0,0,7
	.word	43051
	.byte	22
	.byte	'Ifx_SRC_GSENT',0,13,174,3,3
	.word	43087
	.byte	24,12
	.word	41025
	.byte	25,0,0,7
	.word	43115
	.byte	3
	.byte	'_Ifx_SRC_GSMU',0,13,177,3,25,12,6
	.byte	'SMU',0
	.word	43124
	.byte	12,2,35,0,0,7
	.word	43129
	.byte	22
	.byte	'Ifx_SRC_GSMU',0,13,180,3,3
	.word	43163
	.byte	24,96
	.word	41092
	.byte	25,0,0,7
	.word	43190
	.byte	3
	.byte	'_Ifx_SRC_GSTM',0,13,183,3,25,96,6
	.byte	'STM',0
	.word	43199
	.byte	96,2,35,0,0,7
	.word	43204
	.byte	22
	.byte	'Ifx_SRC_GSTM',0,13,186,3,3
	.word	43238
	.byte	24,64
	.word	41322
	.byte	25,3,0,7
	.word	43265
	.byte	24,224,1
	.word	362
	.byte	25,223,1,0,24,192,2
	.word	41195
	.byte	25,0,0,7
	.word	43290
	.byte	3
	.byte	'_Ifx_SRC_GVADC',0,13,189,3,25,224,4,6
	.byte	'G',0
	.word	43274
	.byte	64,2,35,0,6
	.byte	'reserved_40',0
	.word	43279
	.byte	224,1,2,35,64,6
	.byte	'CG',0
	.word	43300
	.byte	192,2,3,35,160,2,0,7
	.word	43305
	.byte	22
	.byte	'Ifx_SRC_GVADC',0,13,194,3,3
	.word	43375
	.byte	7
	.word	41424
	.byte	3
	.byte	'_Ifx_SRC_GXBAR',0,13,197,3,25,4,6
	.byte	'XBAR',0
	.word	43403
	.byte	4,2,35,0,0,7
	.word	43408
	.byte	22
	.byte	'Ifx_SRC_GXBAR',0,13,200,3,3
	.word	43444
	.byte	14,5,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,22
	.byte	'IfxCpu_CounterMode',0,5,122,3
	.word	43472
	.byte	18,5,132,1,9,6,6
	.byte	'counter',0
	.word	1627
	.byte	4,2,35,0,6
	.byte	'overlfow',0
	.word	362
	.byte	1,2,35,4,0,22
	.byte	'IfxCpu_Counter',0,5,136,1,3
	.word	43559
	.byte	18,5,144,1,9,32,6
	.byte	'instruction',0
	.word	43559
	.byte	6,2,35,0,6
	.byte	'clock',0
	.word	43559
	.byte	6,2,35,6,6
	.byte	'counter1',0
	.word	43559
	.byte	6,2,35,12,6
	.byte	'counter2',0
	.word	43559
	.byte	6,2,35,18,6
	.byte	'counter3',0
	.word	43559
	.byte	6,2,35,24,0,22
	.byte	'IfxCpu_Perf',0,5,151,1,3
	.word	43625
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L96:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,19,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,4,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,5,23,1,58,15,59,15,57,15,11,15,0,0,6,13,0,3,8,73
	.byte	19,11,15,56,9,0,0,7,53,0,73,19,0,0,8,15,0,73,19,0,0,9,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0
	.byte	10,5,0,3,8,58,15,59,15,57,15,73,19,0,0,11,11,0,0,0,12,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39
	.byte	12,0,0,13,59,0,3,8,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,46,1,3,8,73,19,54,15
	.byte	39,12,63,12,60,12,0,0,17,5,0,73,19,0,0,18,19,1,58,15,59,15,57,15,11,15,0,0,19,38,0,73,19,0,0,20,46,1,49
	.byte	19,0,0,21,5,0,49,19,0,0,22,22,0,3,8,58,15,59,15,57,15,73,19,0,0,23,21,0,54,15,0,0,24,1,1,11,15,73,19,0
	.byte	0,25,33,0,47,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L97:
	.word	.L416-.L415
.L415:
	.half	3
	.word	.L418-.L417
.L417:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Reg',0
	.byte	'C:\\TASKING\\TriCore v6.2r2\\ctc\\include\\',0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxCpu_cfg.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxScu_cfg.h',0
	.byte	0,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'stdio.h',0,2,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Platform_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Ifx_Types.h',0
	.byte	0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0,0
.L418:
.L416:
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_info'
.L98:
	.word	264
	.half	3
	.word	.L99
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L101,.L100
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_initConfig',0,1,236,1,6,1,1,1
	.word	.L79,.L243,.L78
	.byte	4
	.byte	'config',0,1,236,1,45
	.word	.L244,.L245
	.byte	5
	.word	.L79,.L243
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_abbrev'
.L99:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_line'
.L100:
	.word	.L420-.L419
.L419:
	.half	3
	.word	.L422-.L421
.L421:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L422:
	.byte	5,45,7,0,5,2
	.word	.L79
	.byte	3,237,1,1,5,43,1,5,45,9
	.half	.L423-.L79
	.byte	3,1,1,5,43,1,5,45,9
	.half	.L424-.L423
	.byte	3,1,1,5,43,1,9
	.half	.L425-.L424
	.byte	3,1,1,9
	.half	.L426-.L425
	.byte	3,1,1,9
	.half	.L427-.L426
	.byte	3,1,1,9
	.half	.L428-.L427
	.byte	3,1,1,9
	.half	.L429-.L428
	.byte	3,1,1,9
	.half	.L430-.L429
	.byte	3,1,1,5,1,9
	.half	.L431-.L430
	.byte	3,1,1,7,9
	.half	.L102-.L431
	.byte	0,1,1
.L420:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_ranges'
.L101:
	.word	-1,.L79,0,.L102-.L79,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_info'
.L103:
	.word	327
	.half	3
	.word	.L104
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L106,.L105
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_initCpuWatchdog',0,1,250,1,6,1,1,1
	.word	.L81,.L246,.L80
	.byte	4
	.byte	'wdt',0,1,250,1,48
	.word	.L247,.L248
	.byte	4
	.byte	'config',0,1,250,1,77
	.word	.L249,.L250
	.byte	5
	.word	.L251
	.byte	6
	.byte	'wdt_con0',0,1,252,1,25
	.word	.L252,.L253
	.byte	6
	.byte	'wdt_con1',0,1,253,1,25
	.word	.L254,.L255
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_abbrev'
.L104:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_line'
.L105:
	.word	.L433-.L432
.L432:
	.half	3
	.word	.L435-.L434
.L434:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L435:
	.byte	5,27,7,0,5,2
	.word	.L81
	.byte	3,255,1,1,5,17,9
	.half	.L436-.L81
	.byte	3,53,1,5,35,9
	.half	.L411-.L436
	.byte	3,3,1,5,1,9
	.half	.L107-.L411
	.byte	3,1,0,1,1
.L433:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_ranges'
.L106:
	.word	-1,.L81,0,.L107-.L81,0,0
.L251:
	.word	-1,.L81,0,.L246-.L81,-1,.L83,0,.L197-.L83,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_info'
.L108:
	.word	334
	.half	3
	.word	.L109
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L111,.L110
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_initSafetyWatchdog',0,1,188,2,6,1,1,1
	.word	.L85,.L256,.L84
	.byte	4
	.byte	'wdt',0,1,188,2,49
	.word	.L257,.L258
	.byte	4
	.byte	'config',0,1,188,2,78
	.word	.L249,.L259
	.byte	5
	.word	.L85,.L256
	.byte	6
	.byte	'wdt_con0',0,1,190,2,23
	.word	.L260,.L261
	.byte	6
	.byte	'wdt_con1',0,1,191,2,23
	.word	.L262,.L263
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_abbrev'
.L109:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_line'
.L110:
	.word	.L438-.L437
.L437:
	.half	3
	.word	.L440-.L439
.L439:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L440:
	.byte	5,27,7,0,5,2
	.word	.L85
	.byte	3,193,2,1,5,31,9
	.half	.L413-.L85
	.byte	3,51,1,5,23,9
	.half	.L441-.L413
	.byte	1,5,17,3,3,1,5,38,9
	.half	.L442-.L441
	.byte	3,3,1,5,1,9
	.half	.L112-.L442
	.byte	3,1,0,1,1
.L438:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_ranges'
.L111:
	.word	-1,.L85,0,.L112-.L85,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_info'
.L113:
	.word	381
	.half	3
	.word	.L114
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L116,.L115
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_clearCpuEndinit',0,1,172,1,6,1,1,1
	.word	.L61,.L264,.L60
	.byte	4
	.byte	'password',0,1,172,1,39
	.word	.L265,.L266
	.byte	5
	.word	.L61,.L264
	.byte	6
	.word	.L267,.L61,.L268
	.byte	7
	.word	.L269,.L61,.L268
	.byte	8
	.byte	'reg',0,2,172,5,21
	.word	.L270,.L271
	.byte	0,0,6
	.word	.L272,.L268,.L273
	.byte	9
	.word	.L274,.L275
	.byte	9
	.word	.L276,.L277
	.byte	10
	.word	.L278,.L279
	.byte	8
	.byte	'wdt_con0',0,3,133,3,25
	.word	.L252,.L280
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_abbrev'
.L114:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,5,0,49,16,2,6
	.byte	0,0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_line'
.L115:
	.word	.L444-.L443
.L443:
	.half	3
	.word	.L446-.L445
.L445:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L446:
	.byte	4,2,5,19,7,0,5,2
	.word	.L61
	.byte	3,172,5,1,5,37,9
	.half	.L390-.L61
	.byte	3,1,1,4,3,5,32,9
	.half	.L268-.L390
	.byte	3,216,125,1,5,28,9
	.half	.L11-.L268
	.byte	3,19,1,5,41,9
	.half	.L447-.L11
	.byte	1,4,1,5,1,7,9
	.half	.L273-.L447
	.byte	3,150,126,1,7,9
	.half	.L117-.L273
	.byte	0,1,1
.L444:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_ranges'
.L116:
	.word	-1,.L61,0,.L117-.L61,0,0
.L279:
	.word	-1,.L61,.L268-.L61,.L273-.L61,-1,.L63,0,.L212-.L63,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_info'
.L118:
	.word	334
	.half	3
	.word	.L119
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L121,.L120
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_clearSafetyEndinit',0,1,178,1,6,1,1,1
	.word	.L65,.L281,.L64
	.byte	4
	.byte	'password',0,1,178,1,42
	.word	.L265,.L282
	.byte	5
	.word	.L65,.L281
	.byte	6
	.word	.L283,.L65,.L284
	.byte	7
	.word	.L285,.L286
	.byte	8
	.word	.L287,.L65,.L284
	.byte	9
	.byte	'wdt_con0',0,2,162,3,23
	.word	.L260,.L288
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_abbrev'
.L119:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_line'
.L120:
	.word	.L449-.L448
.L448:
	.half	3
	.word	.L451-.L450
.L450:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L451:
	.byte	4,2,5,32,7,0,5,2
	.word	.L65
	.byte	3,162,3,1,5,28,9
	.half	.L393-.L65
	.byte	3,19,1,5,41,9
	.half	.L452-.L393
	.byte	1,4,1,5,1,7,9
	.half	.L284-.L452
	.byte	3,255,125,1,7,9
	.half	.L122-.L284
	.byte	0,1,1
.L449:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_ranges'
.L121:
	.word	-1,.L65,0,.L122-.L65,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_info'
.L123:
	.word	383
	.half	3
	.word	.L124
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L126,.L125
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_setCpuEndinit',0,1,139,3,6,1,1,1
	.word	.L91,.L289,.L90
	.byte	4
	.byte	'password',0,1,139,3,37
	.word	.L265,.L290
	.byte	5
	.word	.L91,.L289
	.byte	6
	.word	.L267,.L91,.L291
	.byte	7
	.word	.L269,.L91,.L291
	.byte	8
	.byte	'reg',0,2,172,5,21
	.word	.L270,.L292
	.byte	0,0,6
	.word	.L293,.L291,.L294
	.byte	9
	.word	.L295,.L296
	.byte	9
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L291,.L294
	.byte	8
	.byte	'wdt_con0',0,3,225,3,25
	.word	.L252,.L300
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_abbrev'
.L124:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,5,0,49,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_line'
.L125:
	.word	.L454-.L453
.L453:
	.half	3
	.word	.L456-.L455
.L455:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L456:
	.byte	4,2,5,19,7,0,5,2
	.word	.L91
	.byte	3,172,5,1,5,37,9
	.half	.L414-.L91
	.byte	3,1,1,4,3,5,24,9
	.half	.L291-.L414
	.byte	3,196,126,1,4,1,5,1,9
	.half	.L294-.L291
	.byte	3,156,127,1,7,9
	.half	.L127-.L294
	.byte	0,1,1
.L454:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_ranges'
.L126:
	.word	-1,.L91,0,.L127-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_info'
.L128:
	.word	332
	.half	3
	.word	.L129
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L131,.L130
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_setSafetyEndinit',0,1,145,3,6,1,1,1
	.word	.L93,.L301,.L92
	.byte	4
	.byte	'password',0,1,145,3,40
	.word	.L265,.L302
	.byte	5
	.word	.L93,.L301
	.byte	6
	.word	.L303,.L93,.L304
	.byte	7
	.word	.L305,.L306
	.byte	8
	.word	.L307,.L93,.L304
	.byte	9
	.byte	'wdt_con0',0,2,129,4,23
	.word	.L260,.L308
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_abbrev'
.L129:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_line'
.L130:
	.word	.L458-.L457
.L457:
	.half	3
	.word	.L460-.L459
.L459:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L460:
	.byte	4,2,5,32,7,0,5,2
	.word	.L93
	.byte	3,129,4,1,5,24,9
	.half	.L461-.L93
	.byte	3,16,1,4,1,5,1,9
	.half	.L304-.L461
	.byte	3,130,127,1,7,9
	.half	.L132-.L304
	.byte	0,1,1
.L458:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_ranges'
.L131:
	.word	-1,.L93,0,.L132-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_info'
.L133:
	.word	383
	.half	3
	.word	.L134
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L136,.L135
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_changeCpuWatchdogPassword',0,1,45,6,1,1,1
	.word	.L37,.L309,.L36
	.byte	4
	.byte	'password',0,1,45,49
	.word	.L265,.L310
	.byte	4
	.byte	'newPassword',0,1,45,66
	.word	.L265,.L311
	.byte	5
	.word	.L312
	.byte	6
	.byte	'watchdog',0,1,47,25
	.word	.L247,.L313
	.byte	6
	.byte	'wdt_con0',0,1,50,25
	.word	.L252,.L314
	.byte	7
	.word	.L267,.L37,.L315
	.byte	8
	.word	.L269,.L316
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L270,.L317
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_abbrev'
.L134:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_line'
.L135:
	.word	.L463-.L462
.L462:
	.half	3
	.word	.L465-.L464
.L464:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L465:
	.byte	4,2,5,19,7,0,5,2
	.word	.L37
	.byte	3,172,5,1,5,37,9
	.half	.L370-.L37
	.byte	3,1,1,4,1,5,24,9
	.half	.L315-.L370
	.byte	3,149,123,1,9
	.half	.L466-.L315
	.byte	3,1,1,5,1,9
	.half	.L378-.L466
	.byte	3,5,1,7,9
	.half	.L137-.L378
	.byte	0,1,1
.L463:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_ranges'
.L136:
	.word	-1,.L37,0,.L137-.L37,0,0
.L312:
	.word	-1,.L37,0,.L309-.L37,-1,.L39,0,.L222-.L39,-1,.L43,0,.L232-.L43,-1,.L45,0,.L237-.L45,0,0
.L316:
	.word	-1,.L37,0,.L315-.L37,-1,.L41,0,.L202-.L41,-1,.L47,0,.L227-.L47,-1,.L49,0,.L242-.L49,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_info'
.L138:
	.word	398
	.half	3
	.word	.L139
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L141,.L140
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_changeCpuWatchdogReload',0,1,76,6,1,1,1
	.word	.L51,.L318,.L50
	.byte	4
	.byte	'password',0,1,76,47
	.word	.L265,.L319
	.byte	4
	.byte	'reload',0,1,76,64
	.word	.L265,.L320
	.byte	5
	.word	.L51,.L318
	.byte	6
	.byte	'coreId',0,1,79,25
	.word	.L321,.L322
	.byte	6
	.byte	'wdt',0,1,80,25
	.word	.L247,.L323
	.byte	6
	.byte	'wdt_con0',0,1,83,25
	.word	.L252,.L324
	.byte	7
	.word	.L267,.L51,.L325
	.byte	8
	.word	.L269,.L51,.L325
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L270,.L326
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_abbrev'
.L139:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_line'
.L140:
	.word	.L468-.L467
.L467:
	.half	3
	.word	.L470-.L469
.L469:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L470:
	.byte	4,2,5,19,7,0,5,2
	.word	.L51
	.byte	3,172,5,1,5,37,9
	.half	.L379-.L51
	.byte	3,1,1,4,1,5,24,9
	.half	.L325-.L379
	.byte	3,182,123,1,9
	.half	.L381-.L325
	.byte	3,1,1,5,1,9
	.half	.L382-.L381
	.byte	3,5,1,7,9
	.half	.L142-.L382
	.byte	0,1,1
.L468:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_ranges'
.L141:
	.word	-1,.L51,0,.L142-.L51,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_info'
.L143:
	.word	324
	.half	3
	.word	.L144
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L146,.L145
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_changeSafetyWatchdogPassword',0,1,109,6,1,1,1
	.word	.L53,.L327,.L52
	.byte	4
	.byte	'password',0,1,109,52
	.word	.L265,.L328
	.byte	4
	.byte	'newPassword',0,1,109,69
	.word	.L265,.L329
	.byte	5
	.word	.L330
	.byte	6
	.byte	'wdt_con0',0,1,114,23
	.word	.L260,.L331
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_abbrev'
.L144:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_line'
.L145:
	.word	.L472-.L471
.L471:
	.half	3
	.word	.L474-.L473
.L473:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L474:
	.byte	5,32,7,0,5,2
	.word	.L53
	.byte	3,242,0,1,5,24,9
	.half	.L386-.L53
	.byte	3,16,1,9
	.half	.L384-.L386
	.byte	3,1,1,5,1,9
	.half	.L385-.L384
	.byte	3,5,1,7,9
	.half	.L147-.L385
	.byte	0,1,1
.L472:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_ranges'
.L146:
	.word	-1,.L53,0,.L147-.L53,0,0
.L330:
	.word	-1,.L53,0,.L327-.L53,-1,.L55,0,.L217-.L55,-1,.L57,0,.L207-.L57,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_info'
.L148:
	.word	325
	.half	3
	.word	.L149
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L151,.L150
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_changeSafetyWatchdogReload',0,1,140,1,6,1,1,1
	.word	.L59,.L332,.L58
	.byte	4
	.byte	'password',0,1,140,1,50
	.word	.L265,.L333
	.byte	4
	.byte	'reload',0,1,140,1,67
	.word	.L265,.L334
	.byte	5
	.word	.L59,.L332
	.byte	6
	.byte	'wdt_con0',0,1,146,1,23
	.word	.L260,.L335
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_abbrev'
.L149:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_line'
.L150:
	.word	.L476-.L475
.L475:
	.half	3
	.word	.L478-.L477
.L477:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L478:
	.byte	5,27,7,0,5,2
	.word	.L59
	.byte	3,146,1,1,5,24,9
	.half	.L389-.L59
	.byte	3,16,1,9
	.half	.L387-.L389
	.byte	3,1,1,5,1,9
	.half	.L388-.L387
	.byte	3,5,1,7,9
	.half	.L152-.L388
	.byte	0,1,1
.L476:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_ranges'
.L151:
	.word	-1,.L59,0,.L152-.L59,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_info'
.L153:
	.word	357
	.half	3
	.word	.L154
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L156,.L155
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_disableCpuWatchdog',0,1,184,1,6,1,1,1
	.word	.L67,.L336,.L66
	.byte	4
	.byte	'password',0,1,184,1,42
	.word	.L265,.L337
	.byte	5
	.word	.L67,.L336
	.byte	6
	.byte	'coreId',0,1,187,1,21
	.word	.L321,.L338
	.byte	6
	.byte	'wdt',0,1,188,1,21
	.word	.L247,.L339
	.byte	7
	.word	.L267,.L340,.L341
	.byte	8
	.word	.L269,.L340,.L341
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L270,.L342
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_abbrev'
.L154:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_line'
.L155:
	.word	.L480-.L479
.L479:
	.half	3
	.word	.L482-.L481
.L481:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L482:
	.byte	5,6,7,0,5,2
	.word	.L67
	.byte	3,183,1,1,4,2,5,19,9
	.half	.L340-.L67
	.byte	3,245,3,1,5,37,9
	.half	.L394-.L340
	.byte	3,1,1,4,1,5,31,9
	.half	.L341-.L394
	.byte	3,144,124,1,5,29,9
	.half	.L395-.L341
	.byte	3,2,1,5,16,3,127,1,5,20,9
	.half	.L396-.L395
	.byte	1,5,29,9
	.half	.L483-.L396
	.byte	3,1,1,5,1,7,9
	.half	.L157-.L483
	.byte	3,1,0,1,1
.L480:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_ranges'
.L156:
	.word	-1,.L67,0,.L157-.L67,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_info'
.L158:
	.word	277
	.half	3
	.word	.L159
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L161,.L160
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_disableSafetyWatchdog',0,1,196,1,6,1,1,1
	.word	.L69,.L343,.L68
	.byte	4
	.byte	'password',0,1,196,1,45
	.word	.L265,.L344
	.byte	5
	.word	.L69,.L343
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_abbrev'
.L159:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_line'
.L160:
	.word	.L485-.L484
.L484:
	.half	3
	.word	.L487-.L486
.L486:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L487:
	.byte	5,6,7,0,5,2
	.word	.L69
	.byte	3,195,1,1,5,34,3,2,1,5,20,9
	.half	.L397-.L69
	.byte	3,1,1,5,32,9
	.half	.L488-.L397
	.byte	3,1,1,5,20,9
	.half	.L398-.L488
	.byte	3,127,1,5,24,9
	.half	.L489-.L398
	.byte	1,5,32,9
	.half	.L490-.L489
	.byte	3,1,1,5,1,7,9
	.half	.L162-.L490
	.byte	3,1,0,1,1
.L485:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_ranges'
.L161:
	.word	-1,.L69,0,.L162-.L69,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_info'
.L163:
	.word	356
	.half	3
	.word	.L164
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L166,.L165
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_enableCpuWatchdog',0,1,204,1,6,1,1,1
	.word	.L71,.L345,.L70
	.byte	4
	.byte	'password',0,1,204,1,41
	.word	.L265,.L346
	.byte	5
	.word	.L71,.L345
	.byte	6
	.byte	'coreId',0,1,207,1,21
	.word	.L321,.L347
	.byte	6
	.byte	'wdt',0,1,208,1,21
	.word	.L247,.L348
	.byte	7
	.word	.L267,.L349,.L350
	.byte	8
	.word	.L269,.L349,.L350
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L270,.L351
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_abbrev'
.L164:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_line'
.L165:
	.word	.L492-.L491
.L491:
	.half	3
	.word	.L494-.L493
.L493:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L494:
	.byte	5,6,7,0,5,2
	.word	.L71
	.byte	3,203,1,1,4,2,5,19,9
	.half	.L349-.L71
	.byte	3,225,3,1,5,37,9
	.half	.L399-.L349
	.byte	3,1,1,4,1,5,31,9
	.half	.L350-.L399
	.byte	3,164,124,1,5,29,9
	.half	.L400-.L350
	.byte	3,2,1,5,16,3,127,1,5,20,9
	.half	.L401-.L400
	.byte	1,5,29,9
	.half	.L495-.L401
	.byte	3,1,1,5,1,7,9
	.half	.L167-.L495
	.byte	3,1,0,1,1
.L492:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_ranges'
.L166:
	.word	-1,.L71,0,.L167-.L71,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_info'
.L168:
	.word	276
	.half	3
	.word	.L169
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L171,.L170
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_enableSafetyWatchdog',0,1,216,1,6,1,1,1
	.word	.L73,.L352,.L72
	.byte	4
	.byte	'password',0,1,216,1,44
	.word	.L265,.L353
	.byte	5
	.word	.L73,.L352
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_abbrev'
.L169:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_line'
.L170:
	.word	.L497-.L496
.L496:
	.half	3
	.word	.L499-.L498
.L498:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L499:
	.byte	5,6,7,0,5,2
	.word	.L73
	.byte	3,215,1,1,5,34,3,2,1,5,20,9
	.half	.L402-.L73
	.byte	3,1,1,5,32,9
	.half	.L500-.L402
	.byte	3,1,1,5,20,9
	.half	.L403-.L500
	.byte	3,127,1,5,24,9
	.half	.L501-.L403
	.byte	1,5,32,9
	.half	.L502-.L501
	.byte	3,1,1,5,1,7,9
	.half	.L172-.L502
	.byte	3,1,0,1,1
.L497:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_ranges'
.L171:
	.word	-1,.L73,0,.L172-.L73,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_info'
.L173:
	.word	365
	.half	3
	.word	.L174
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L176,.L175
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,1,224,1,8
	.word	.L265
	.byte	1,1,1
	.word	.L75,.L354,.L74
	.byte	4
	.word	.L75,.L354
	.byte	5
	.word	.L267,.L75,.L355
	.byte	6
	.word	.L269,.L75,.L355
	.byte	7
	.byte	'reg',0,2,172,5,21
	.word	.L270,.L356
	.byte	0,0,5
	.word	.L357,.L355,.L354
	.byte	8
	.word	.L358,.L359
	.byte	6
	.word	.L360,.L355,.L354
	.byte	7
	.byte	'password',0,3,189,3,12
	.word	.L265,.L361
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_abbrev'
.L174:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1
	.byte	18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,5,0,49,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_line'
.L175:
	.word	.L504-.L503
.L503:
	.half	3
	.word	.L506-.L505
.L505:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L506:
	.byte	4,2,5,19,7,0,5,2
	.word	.L75
	.byte	3,172,5,1,5,37,9
	.half	.L404-.L75
	.byte	3,1,1,4,3,5,33,9
	.half	.L355-.L404
	.byte	3,148,126,1,5,14,9
	.half	.L507-.L355
	.byte	3,1,1,4,1,5,1,3,160,126,1,7,9
	.half	.L177-.L507
	.byte	0,1,1
.L504:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_ranges'
.L176:
	.word	-1,.L75,0,.L177-.L75,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_info'
.L178:
	.word	314
	.half	3
	.word	.L179
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L181,.L180
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,1,230,1,8
	.word	.L265
	.byte	1,1,1
	.word	.L77,.L362,.L76
	.byte	4
	.word	.L77,.L362
	.byte	5
	.word	.L363,.L77,.L362
	.byte	6
	.word	.L364,.L77,.L362
	.byte	7
	.byte	'password',0,2,209,3,19
	.word	.L265,.L365
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_abbrev'
.L179:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1
	.byte	18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_line'
.L180:
	.word	.L509-.L508
.L508:
	.half	3
	.word	.L511-.L510
.L510:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L511:
	.byte	4,2,5,33,7,0,5,2
	.word	.L77
	.byte	3,214,3,1,5,14,9
	.half	.L512-.L77
	.byte	3,1,1,4,1,5,1,3,145,126,1,7,9
	.half	.L182-.L512
	.byte	0,1,1
.L509:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_ranges'
.L181:
	.word	-1,.L77,0,.L182-.L77,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_info'
.L183:
	.word	274
	.half	3
	.word	.L184
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L186,.L185
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_serviceCpuWatchdog',0,1,255,2,6,1,1,1
	.word	.L87,.L366,.L86
	.byte	4
	.byte	'password',0,1,255,2,42
	.word	.L265,.L367
	.byte	5
	.word	.L87,.L366
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_abbrev'
.L184:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_line'
.L185:
	.word	.L514-.L513
.L513:
	.half	3
	.word	.L516-.L515
.L515:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L516:
	.byte	5,29,7,0,5,2
	.word	.L87
	.byte	3,128,3,1,5,1,7,9
	.half	.L187-.L87
	.byte	3,1,0,1,1
.L514:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_ranges'
.L186:
	.word	-1,.L87,0,.L187-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_info'
.L188:
	.word	277
	.half	3
	.word	.L189
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L191,.L190
	.byte	2
	.word	.L94
	.byte	3
	.byte	'IfxScuWdt_serviceSafetyWatchdog',0,1,133,3,6,1,1,1
	.word	.L89,.L368,.L88
	.byte	4
	.byte	'password',0,1,133,3,45
	.word	.L265,.L369
	.byte	5
	.word	.L89,.L368
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_abbrev'
.L189:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_line'
.L190:
	.word	.L518-.L517
.L517:
	.half	3
	.word	.L520-.L519
.L519:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L520:
	.byte	5,32,7,0,5,2
	.word	.L89
	.byte	3,134,3,1,5,1,7,9
	.half	.L192-.L89
	.byte	3,1,0,1,1
.L518:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_ranges'
.L191:
	.word	-1,.L89,0,.L192-.L89,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L193:
	.word	222
	.half	3
	.word	.L194
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L196,.L195
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_6',0,1,250,1,6,1
	.word	.L83,.L197,.L82
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L194:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L195:
	.word	.L522-.L521
.L521:
	.half	3
	.word	.L524-.L523
.L523:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L524:
	.byte	5,27,7,0,5,2
	.word	.L83
	.byte	3,255,1,1,5,16,9
	.half	.L405-.L83
	.byte	3,1,1,5,5,9
	.half	.L407-.L405
	.byte	3,2,1,5,28,7,9
	.half	.L525-.L407
	.byte	3,3,1,9
	.half	.L406-.L525
	.byte	3,1,1,5,27,9
	.half	.L408-.L406
	.byte	3,1,1,5,21,9
	.half	.L412-.L408
	.byte	3,3,1,5,24,9
	.half	.L16-.L412
	.byte	3,6,1,5,32,3,2,1,9
	.half	.L409-.L16
	.byte	3,1,1,5,24,9
	.half	.L526-.L409
	.byte	3,126,1,9
	.half	.L527-.L526
	.byte	3,1,1,9
	.half	.L410-.L527
	.byte	3,1,1,5,17,3,3,1,5,23,9
	.half	.L17-.L410
	.byte	3,3,1,5,36,9
	.half	.L528-.L17
	.byte	1,5,19,7,9
	.half	.L529-.L528
	.byte	3,4,1,5,10,9
	.half	.L530-.L529
	.byte	3,2,1,7,9
	.half	.L531-.L530
	.byte	3,4,1,7,9
	.half	.L532-.L531
	.byte	3,4,1,7,9
	.half	.L533-.L532
	.byte	1,5,24,9
	.half	.L18-.L533
	.byte	3,121,1,5,9,3,2,1,5,24,9
	.half	.L19-.L18
	.byte	3,2,1,9
	.half	.L22-.L19
	.byte	3,1,1,5,9,3,1,1,5,19,9
	.half	.L20-.L22
	.byte	3,2,1,5,24,9
	.half	.L534-.L20
	.byte	1,9
	.half	.L535-.L534
	.byte	3,1,1,5,29,9
	.half	.L21-.L535
	.byte	3,4,1,5,23,9
	.half	.L536-.L21
	.byte	1,5,21,9
	.half	.L537-.L536
	.byte	1,5,29,3,1,1,5,23,9
	.half	.L538-.L537
	.byte	1,5,21,9
	.half	.L539-.L538
	.byte	1,5,29,3,1,1,5,23,9
	.half	.L540-.L539
	.byte	1,5,21,9
	.half	.L541-.L540
	.byte	1,5,29,3,1,1,5,23,9
	.half	.L542-.L541
	.byte	1,5,21,9
	.half	.L543-.L542
	.byte	1,5,29,3,1,1,5,23,9
	.half	.L544-.L543
	.byte	1,5,21,9
	.half	.L545-.L544
	.byte	1,9
	.half	.L197-.L545
	.byte	0,1,1,5,27,0,5,2
	.word	.L83
	.byte	3,193,2,1,5,16,9
	.half	.L405-.L83
	.byte	3,1,1,5,5,9
	.half	.L407-.L405
	.byte	3,2,1,5,28,7,9
	.half	.L525-.L407
	.byte	3,3,1,9
	.half	.L406-.L525
	.byte	3,1,1,5,27,9
	.half	.L408-.L406
	.byte	3,1,1,5,21,9
	.half	.L412-.L408
	.byte	3,3,1,5,24,9
	.half	.L16-.L412
	.byte	3,6,1,5,32,3,2,1,9
	.half	.L409-.L16
	.byte	3,1,1,5,24,9
	.half	.L526-.L409
	.byte	3,126,1,9
	.half	.L527-.L526
	.byte	3,1,1,9
	.half	.L410-.L527
	.byte	3,1,1,5,17,3,3,1,5,23,9
	.half	.L17-.L410
	.byte	3,3,1,5,36,9
	.half	.L528-.L17
	.byte	1,5,19,7,9
	.half	.L529-.L528
	.byte	3,4,1,5,10,9
	.half	.L530-.L529
	.byte	3,2,1,7,9
	.half	.L531-.L530
	.byte	3,4,1,7,9
	.half	.L532-.L531
	.byte	3,4,1,7,9
	.half	.L533-.L532
	.byte	1,5,24,9
	.half	.L18-.L533
	.byte	3,121,1,5,9,3,2,1,5,24,9
	.half	.L19-.L18
	.byte	3,2,1,9
	.half	.L22-.L19
	.byte	3,1,1,5,9,3,1,1,5,19,9
	.half	.L20-.L22
	.byte	3,2,1,5,24,9
	.half	.L534-.L20
	.byte	1,9
	.half	.L535-.L534
	.byte	3,1,1,5,31,9
	.half	.L21-.L535
	.byte	3,4,1,5,25,9
	.half	.L536-.L21
	.byte	1,5,23,9
	.half	.L537-.L536
	.byte	1,5,31,3,1,1,5,25,9
	.half	.L538-.L537
	.byte	1,5,23,9
	.half	.L539-.L538
	.byte	1,5,31,3,1,1,5,25,9
	.half	.L540-.L539
	.byte	1,5,23,9
	.half	.L541-.L540
	.byte	1,5,31,3,1,1,5,25,9
	.half	.L542-.L541
	.byte	1,5,23,9
	.half	.L543-.L542
	.byte	1,5,31,3,1,1,5,25,9
	.half	.L544-.L543
	.byte	1,5,23,9
	.half	.L545-.L544
	.byte	1,5,21,3,190,127,1,7,9
	.half	.L197-.L545
	.byte	0,1,1
.L522:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L196:
	.word	-1,.L83,0,.L197-.L83,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L198:
	.word	221
	.half	3
	.word	.L199
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L201,.L200
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_7',0,1,45,6,1
	.word	.L41,.L202,.L40
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L199:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L200:
	.word	.L547-.L546
.L546:
	.half	3
	.word	.L549-.L548
.L548:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L549:
	.byte	4,2,5,37,7,0,5,2
	.word	.L41
	.byte	3,173,5,1,4,1,5,32,9
	.half	.L550-.L41
	.byte	3,133,123,1,5,24,9
	.half	.L551-.L550
	.byte	3,15,1,7,9
	.half	.L202-.L551
	.byte	0,1,1
.L547:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L201:
	.word	-1,.L41,0,.L202-.L41,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L203:
	.word	221
	.half	3
	.word	.L204
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L206,.L205
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_8',0,1,109,6,1
	.word	.L57,.L207,.L56
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L204:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L205:
	.word	.L553-.L552
.L552:
	.half	3
	.word	.L555-.L554
.L554:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L555:
	.byte	5,32,7,0,5,2
	.word	.L57
	.byte	3,242,0,1,5,24,9
	.half	.L383-.L57
	.byte	3,15,1,7,9
	.half	.L207-.L383
	.byte	0,1,1,5,27,0,5,2
	.word	.L57
	.byte	3,146,1,1,5,32,9
	.half	.L556-.L57
	.byte	3,96,1,5,24,9
	.half	.L383-.L556
	.byte	3,15,1,7,9
	.half	.L207-.L383
	.byte	0,1,1,4,2,5,32,0,5,2
	.word	.L57
	.byte	3,129,4,1,4,1,9
	.half	.L556-.L57
	.byte	3,241,124,1,5,24,9
	.half	.L383-.L556
	.byte	3,15,1,7,9
	.half	.L207-.L383
	.byte	0,1,1
.L553:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L206:
	.word	-1,.L57,0,.L207-.L57,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L208:
	.word	222
	.half	3
	.word	.L209
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L211,.L210
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_9',0,1,172,1,6,1
	.word	.L63,.L212,.L62
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L209:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L210:
	.word	.L558-.L557
.L557:
	.half	3
	.word	.L560-.L559
.L559:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L560:
	.byte	4,2,5,32,7,0,5,2
	.word	.L63
	.byte	3,133,3,1,5,24,9
	.half	.L391-.L63
	.byte	3,14,1,9
	.half	.L561-.L391
	.byte	3,1,1,3,1,1,9
	.half	.L212-.L561
	.byte	0,1,1,4,2,5,32,0,5,2
	.word	.L63
	.byte	3,133,3,1,5,24,9
	.half	.L391-.L63
	.byte	3,43,1,9
	.half	.L561-.L391
	.byte	3,1,1,3,1,1,9
	.half	.L392-.L561
	.byte	3,99,1,7,9
	.half	.L212-.L392
	.byte	0,1,1
.L558:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L211:
	.word	-1,.L63,0,.L212-.L63,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_10')
	.sect	'.debug_info'
.L213:
	.word	222
	.half	3
	.word	.L214
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L216,.L215
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_10',0,1,109,6,1
	.word	.L55,.L217,.L54
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_10')
	.sect	'.debug_abbrev'
.L214:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_10')
	.sect	'.debug_line'
.L215:
	.word	.L563-.L562
.L562:
	.half	3
	.word	.L565-.L564
.L564:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L565:
	.byte	5,24,7,0,5,2
	.word	.L55
	.byte	3,131,1,1,5,28,9
	.half	.L566-.L55
	.byte	3,3,1,5,41,9
	.half	.L567-.L566
	.byte	1,7,9
	.half	.L568-.L567
	.byte	1,7,9
	.half	.L217-.L568
	.byte	0,1,1,5,24,0,5,2
	.word	.L55
	.byte	3,163,1,1,5,23,9
	.half	.L566-.L55
	.byte	3,3,1,5,36,9
	.half	.L567-.L566
	.byte	1,5,41,7,9
	.half	.L568-.L567
	.byte	3,96,1,7,9
	.half	.L217-.L568
	.byte	0,1,1,4,2,5,24,0,5,2
	.word	.L55
	.byte	3,145,4,1,5,28,9
	.half	.L566-.L55
	.byte	3,3,1,5,41,9
	.half	.L567-.L566
	.byte	1,4,1,7,9
	.half	.L568-.L567
	.byte	3,242,124,1,7,9
	.half	.L217-.L568
	.byte	0,1,1
.L563:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_10')
	.sect	'.debug_ranges'
.L216:
	.word	-1,.L55,0,.L217-.L55,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_11')
	.sect	'.debug_info'
.L218:
	.word	222
	.half	3
	.word	.L219
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L221,.L220
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_11',0,1,45,6,1
	.word	.L39,.L222,.L38
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_11')
	.sect	'.debug_abbrev'
.L219:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_11')
	.sect	'.debug_line'
.L220:
	.word	.L570-.L569
.L569:
	.half	3
	.word	.L572-.L571
.L571:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L572:
	.byte	5,24,7,0,5,2
	.word	.L39
	.byte	3,195,0,1,5,28,9
	.half	.L3-.L39
	.byte	3,3,1,5,41,9
	.half	.L573-.L3
	.byte	1,7,9
	.half	.L574-.L573
	.byte	1,7,9
	.half	.L222-.L574
	.byte	0,1,1,5,24,0,5,2
	.word	.L39
	.byte	3,228,0,1,5,23,9
	.half	.L3-.L39
	.byte	3,3,1,5,36,9
	.half	.L573-.L3
	.byte	1,5,41,7,9
	.half	.L574-.L573
	.byte	3,95,1,7,9
	.half	.L222-.L574
	.byte	0,1,1,4,2,5,24,0,5,2
	.word	.L39
	.byte	3,241,3,1,5,28,9
	.half	.L3-.L39
	.byte	3,3,1,5,41,9
	.half	.L573-.L3
	.byte	1,4,1,7,9
	.half	.L574-.L573
	.byte	3,210,124,1,7,9
	.half	.L222-.L574
	.byte	0,1,1
.L570:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_11')
	.sect	'.debug_ranges'
.L221:
	.word	-1,.L39,0,.L222-.L39,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_12')
	.sect	'.debug_info'
.L223:
	.word	222
	.half	3
	.word	.L224
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L226,.L225
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_12',0,1,45,6,1
	.word	.L47,.L227,.L46
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_12')
	.sect	'.debug_abbrev'
.L224:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_12')
	.sect	'.debug_line'
.L225:
	.word	.L576-.L575
.L575:
	.half	3
	.word	.L578-.L577
.L577:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L578:
	.byte	4,2,5,37,7,0,5,2
	.word	.L47
	.byte	3,173,5,1,4,1,5,54,9
	.half	.L372-.L47
	.byte	3,129,123,1,9
	.half	.L227-.L372
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L47
	.byte	3,173,5,1,4,1,5,52,9
	.half	.L372-.L47
	.byte	3,162,123,1,5,54,9
	.half	.L373-.L372
	.byte	3,95,1,7,9
	.half	.L227-.L373
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L47
	.byte	3,173,5,1,4,1,5,53,9
	.half	.L372-.L47
	.byte	3,223,125,1,5,54,9
	.half	.L373-.L372
	.byte	3,162,125,1,7,9
	.half	.L227-.L373
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L47
	.byte	3,173,5,1,4,1,5,55,9
	.half	.L372-.L47
	.byte	3,128,124,1,5,54,9
	.half	.L373-.L372
	.byte	3,129,127,1,7,9
	.half	.L227-.L373
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L47
	.byte	3,173,5,1,4,1,5,48,9
	.half	.L372-.L47
	.byte	3,142,124,1,5,54,9
	.half	.L373-.L372
	.byte	3,243,126,1,7,9
	.half	.L227-.L373
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L47
	.byte	3,173,5,1,4,1,5,48,9
	.half	.L372-.L47
	.byte	3,162,124,1,5,54,9
	.half	.L373-.L372
	.byte	3,223,126,1,7,9
	.half	.L227-.L373
	.byte	0,1,1
.L576:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_12')
	.sect	'.debug_ranges'
.L226:
	.word	-1,.L47,0,.L227-.L47,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_13')
	.sect	'.debug_info'
.L228:
	.word	222
	.half	3
	.word	.L229
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L231,.L230
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_13',0,1,45,6,1
	.word	.L43,.L232,.L42
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_13')
	.sect	'.debug_abbrev'
.L229:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_13')
	.sect	'.debug_line'
.L230:
	.word	.L580-.L579
.L579:
	.half	3
	.word	.L582-.L581
.L581:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L582:
	.byte	5,32,7,0,5,2
	.word	.L43
	.byte	3,50,1,5,24,9
	.half	.L376-.L43
	.byte	3,14,1,9
	.half	.L377-.L376
	.byte	3,1,1,9
	.half	.L232-.L377
	.byte	0,1,1,5,32,0,5,2
	.word	.L43
	.byte	3,50,1,5,24,9
	.half	.L376-.L43
	.byte	3,47,1,9
	.half	.L377-.L376
	.byte	3,1,1,3,95,1,7,9
	.half	.L232-.L377
	.byte	0,1,1,5,32,0,5,2
	.word	.L43
	.byte	3,50,1,4,2,5,24,9
	.half	.L376-.L43
	.byte	3,189,3,1,9
	.half	.L377-.L376
	.byte	3,1,1,4,1,3,209,124,1,7,9
	.half	.L232-.L377
	.byte	0,1,1,5,32,0,5,2
	.word	.L43
	.byte	3,50,1,5,24,9
	.half	.L376-.L43
	.byte	3,206,0,1,9
	.half	.L377-.L376
	.byte	3,1,1,3,64,1,7,9
	.half	.L232-.L377
	.byte	0,1,1,5,32,0,5,2
	.word	.L43
	.byte	3,50,1,5,24,9
	.half	.L376-.L43
	.byte	3,238,0,1,9
	.half	.L377-.L376
	.byte	3,1,1,3,160,127,1,7,9
	.half	.L232-.L377
	.byte	0,1,1,5,32,0,5,2
	.word	.L43
	.byte	3,50,1,4,2,5,24,9
	.half	.L376-.L43
	.byte	3,221,3,1,9
	.half	.L377-.L376
	.byte	3,1,1,4,1,3,177,124,1,7,9
	.half	.L232-.L377
	.byte	0,1,1
.L580:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_13')
	.sect	'.debug_ranges'
.L231:
	.word	-1,.L43,0,.L232-.L43,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_14')
	.sect	'.debug_info'
.L233:
	.word	222
	.half	3
	.word	.L234
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L236,.L235
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_14',0,1,45,6,1
	.word	.L45,.L237,.L44
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_14')
	.sect	'.debug_abbrev'
.L234:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_14')
	.sect	'.debug_line'
.L235:
	.word	.L584-.L583
.L583:
	.half	3
	.word	.L586-.L585
.L585:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L586:
	.byte	5,32,7,0,5,2
	.word	.L45
	.byte	3,50,1,5,5,9
	.half	.L374-.L45
	.byte	3,2,1,5,28,7,9
	.half	.L587-.L374
	.byte	3,3,1,9
	.half	.L375-.L587
	.byte	3,1,1,9
	.half	.L380-.L375
	.byte	3,1,1,5,26,3,3,1,5,5,9
	.half	.L2-.L380
	.byte	3,120,1,7,9
	.half	.L237-.L2
	.byte	0,1,1,5,27,0,5,2
	.word	.L45
	.byte	3,211,0,1,5,5,9
	.half	.L374-.L45
	.byte	3,2,1,5,28,7,9
	.half	.L587-.L374
	.byte	3,3,1,9
	.half	.L375-.L587
	.byte	3,1,1,9
	.half	.L380-.L375
	.byte	3,1,1,5,21,3,3,1,5,5,9
	.half	.L2-.L380
	.byte	3,87,1,7,9
	.half	.L237-.L2
	.byte	0,1,1,4,2,5,32,0,5,2
	.word	.L45
	.byte	3,225,3,1,5,5,9
	.half	.L374-.L45
	.byte	3,2,1,5,28,7,9
	.half	.L587-.L374
	.byte	3,3,1,9
	.half	.L375-.L587
	.byte	3,1,1,9
	.half	.L380-.L375
	.byte	3,1,1,5,26,3,3,1,4,1,5,5,9
	.half	.L2-.L380
	.byte	3,201,124,1,7,9
	.half	.L237-.L2
	.byte	0,1,1,5,32,0,5,2
	.word	.L45
	.byte	3,242,0,1,5,5,9
	.half	.L374-.L45
	.byte	3,2,1,5,28,7,9
	.half	.L587-.L374
	.byte	3,3,1,9
	.half	.L375-.L587
	.byte	3,1,1,9
	.half	.L380-.L375
	.byte	3,1,1,5,26,3,3,1,5,5,9
	.half	.L2-.L380
	.byte	3,184,127,1,7,9
	.half	.L237-.L2
	.byte	0,1,1,5,27,0,5,2
	.word	.L45
	.byte	3,146,1,1,5,5,9
	.half	.L374-.L45
	.byte	3,2,1,5,28,7,9
	.half	.L587-.L374
	.byte	3,3,1,9
	.half	.L375-.L587
	.byte	3,1,1,9
	.half	.L380-.L375
	.byte	3,1,1,5,21,3,3,1,5,5,9
	.half	.L2-.L380
	.byte	3,152,127,1,7,9
	.half	.L237-.L2
	.byte	0,1,1,4,2,5,32,0,5,2
	.word	.L45
	.byte	3,129,4,1,5,5,9
	.half	.L374-.L45
	.byte	3,2,1,5,28,7,9
	.half	.L587-.L374
	.byte	3,3,1,9
	.half	.L375-.L587
	.byte	3,1,1,9
	.half	.L380-.L375
	.byte	3,1,1,5,26,3,3,1,4,1,5,5,9
	.half	.L2-.L380
	.byte	3,169,124,1,7,9
	.half	.L237-.L2
	.byte	0,1,1,4,2,5,32,0,5,2
	.word	.L45
	.byte	3,133,3,1,5,5,9
	.half	.L374-.L45
	.byte	3,2,1,5,28,7,9
	.half	.L587-.L374
	.byte	3,3,1,9
	.half	.L375-.L587
	.byte	3,1,1,9
	.half	.L380-.L375
	.byte	3,1,1,5,26,3,3,1,4,1,5,5,9
	.half	.L2-.L380
	.byte	3,165,125,1,7,9
	.half	.L237-.L2
	.byte	0,1,1,4,2,5,32,0,5,2
	.word	.L45
	.byte	3,162,3,1,5,5,9
	.half	.L374-.L45
	.byte	3,2,1,5,28,7,9
	.half	.L587-.L374
	.byte	3,3,1,9
	.half	.L375-.L587
	.byte	3,1,1,9
	.half	.L380-.L375
	.byte	3,1,1,5,26,3,3,1,4,1,5,5,9
	.half	.L2-.L380
	.byte	3,136,125,1,7,9
	.half	.L237-.L2
	.byte	0,1,1
.L584:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_14')
	.sect	'.debug_ranges'
.L236:
	.word	-1,.L45,0,.L237-.L45,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_15')
	.sect	'.debug_info'
.L238:
	.word	222
	.half	3
	.word	.L239
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L241,.L240
	.byte	2
	.word	.L94
	.byte	3
	.byte	'.cocofun_15',0,1,45,6,1
	.word	.L49,.L242,.L48
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_15')
	.sect	'.debug_abbrev'
.L239:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_15')
	.sect	'.debug_line'
.L240:
	.word	.L589-.L588
.L588:
	.half	3
	.word	.L591-.L590
.L590:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L591:
	.byte	4,2,5,37,7,0,5,2
	.word	.L49
	.byte	3,173,5,1,4,1,5,54,9
	.half	.L371-.L49
	.byte	3,129,123,1,9
	.half	.L242-.L371
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L49
	.byte	3,173,5,1,4,1,5,52,9
	.half	.L371-.L49
	.byte	3,162,123,1,5,54,9
	.half	.L592-.L371
	.byte	3,95,1,7,9
	.half	.L242-.L592
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L49
	.byte	3,173,5,1,4,1,5,53,9
	.half	.L371-.L49
	.byte	3,223,125,1,5,54,9
	.half	.L592-.L371
	.byte	3,162,125,1,7,9
	.half	.L242-.L592
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L49
	.byte	3,173,5,1,4,1,5,55,9
	.half	.L371-.L49
	.byte	3,128,124,1,5,54,9
	.half	.L592-.L371
	.byte	3,129,127,1,7,9
	.half	.L242-.L592
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L49
	.byte	3,173,5,1,4,1,5,48,9
	.half	.L371-.L49
	.byte	3,142,124,1,5,54,9
	.half	.L592-.L371
	.byte	3,243,126,1,7,9
	.half	.L242-.L592
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L49
	.byte	3,173,5,1,4,1,5,48,9
	.half	.L371-.L49
	.byte	3,162,124,1,5,54,9
	.half	.L592-.L371
	.byte	3,223,126,1,7,9
	.half	.L242-.L592
	.byte	0,1,1,4,2,5,37,0,5,2
	.word	.L49
	.byte	3,173,5,1,4,1,5,69,9
	.half	.L371-.L49
	.byte	3,180,124,1,5,54,9
	.half	.L592-.L371
	.byte	3,205,126,1,7,9
	.half	.L242-.L592
	.byte	0,1,1
.L589:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_15')
	.sect	'.debug_ranges'
.L241:
	.word	-1,.L49,0,.L242-.L49,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_10')
	.sect	'.debug_loc'
.L54:
	.word	-1,.L55,0,.L217-.L55
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_11')
	.sect	'.debug_loc'
.L38:
	.word	-1,.L39,0,.L222-.L39
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_12')
	.sect	'.debug_loc'
.L46:
	.word	-1,.L47,0,.L227-.L47
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_13')
	.sect	'.debug_loc'
.L42:
	.word	-1,.L43,0,.L232-.L43
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_14')
	.sect	'.debug_loc'
.L44:
	.word	-1,.L45,0,.L237-.L45
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_15')
	.sect	'.debug_loc'
.L48:
	.word	-1,.L49,0,.L242-.L49
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L82:
	.word	-1,.L83,0,.L197-.L83
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L40:
	.word	-1,.L41,0,.L202-.L41
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L56:
	.word	-1,.L57,0,.L207-.L57
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L62:
	.word	-1,.L63,0,.L212-.L63
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_loc'
.L36:
	.word	-1,.L37,0,.L309-.L37
	.half	2
	.byte	138,0
	.word	0,0
.L311:
	.word	-1,.L37,0,.L315-.L37
	.half	1
	.byte	85
	.word	.L49-.L37,.L242-.L37
	.half	1
	.byte	85
	.word	.L372-.L37,.L227-.L37
	.half	1
	.byte	85
	.word	.L45-.L37,.L2-.L37
	.half	1
	.byte	85
	.word	.L376-.L37,.L232-.L37
	.half	1
	.byte	85
	.word	.L39-.L37,.L222-.L37
	.half	1
	.byte	85
	.word	.L378-.L37,.L309-.L37
	.half	1
	.byte	85
	.word	0,0
.L310:
	.word	-1,.L37,0,.L315-.L37
	.half	1
	.byte	84
	.word	.L49-.L37,.L242-.L37
	.half	1
	.byte	84
	.word	.L372-.L37,.L227-.L37
	.half	1
	.byte	84
	.word	.L45-.L37,.L2-.L37
	.half	1
	.byte	84
	.word	.L376-.L37,.L232-.L37
	.half	1
	.byte	84
	.word	.L39-.L37,.L222-.L37
	.half	1
	.byte	84
	.word	.L378-.L37,.L309-.L37
	.half	1
	.byte	84
	.word	0,0
.L317:
	.word	-1,.L37,.L370-.L37,.L315-.L37
	.half	1
	.byte	95
	.word	.L49-.L37,.L371-.L37
	.half	1
	.byte	95
	.word	0,0
.L313:
	.word	-1,.L37,.L373-.L37,.L227-.L37
	.half	1
	.byte	111
	.word	.L45-.L37,.L2-.L37
	.half	1
	.byte	111
	.word	.L376-.L37,.L232-.L37
	.half	1
	.byte	111
	.word	.L39-.L37,.L222-.L37
	.half	1
	.byte	111
	.word	.L378-.L37,.L309-.L37
	.half	1
	.byte	111
	.word	0,0
.L314:
	.word	-1,.L37,.L374-.L37,.L375-.L37
	.half	1
	.byte	95
	.word	.L376-.L37,.L377-.L37
	.half	1
	.byte	95
	.word	.L377-.L37,.L232-.L37
	.half	1
	.byte	95
	.word	.L39-.L37,.L3-.L37
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_loc'
.L50:
	.word	-1,.L51,0,.L318-.L51
	.half	2
	.byte	138,0
	.word	0,0
.L322:
	.word	0,0
.L319:
	.word	-1,.L51,.L49-.L51,.L242-.L51
	.half	1
	.byte	84
	.word	.L372-.L51,.L227-.L51
	.half	1
	.byte	84
	.word	.L45-.L51,.L237-.L51
	.half	1
	.byte	84
	.word	.L376-.L51,.L232-.L51
	.half	1
	.byte	84
	.word	.L39-.L51,.L222-.L51
	.half	1
	.byte	84
	.word	0,.L318-.L51
	.half	1
	.byte	84
	.word	0,0
.L326:
	.word	-1,.L51,.L379-.L51,.L325-.L51
	.half	1
	.byte	95
	.word	.L49-.L51,.L371-.L51
	.half	1
	.byte	95
	.word	0,0
.L320:
	.word	-1,.L51,.L49-.L51,.L242-.L51
	.half	1
	.byte	85
	.word	.L372-.L51,.L227-.L51
	.half	1
	.byte	85
	.word	.L45-.L51,.L237-.L51
	.half	1
	.byte	85
	.word	.L376-.L51,.L232-.L51
	.half	1
	.byte	85
	.word	.L39-.L51,.L222-.L51
	.half	1
	.byte	85
	.word	0,.L318-.L51
	.half	1
	.byte	85
	.word	0,0
.L323:
	.word	-1,.L51,.L373-.L51,.L227-.L51
	.half	1
	.byte	111
	.word	.L45-.L51,.L237-.L51
	.half	1
	.byte	111
	.word	.L376-.L51,.L232-.L51
	.half	1
	.byte	111
	.word	.L39-.L51,.L222-.L51
	.half	1
	.byte	111
	.word	.L325-.L51,.L318-.L51
	.half	1
	.byte	111
	.word	0,0
.L324:
	.word	-1,.L51,.L374-.L51,.L375-.L51
	.half	1
	.byte	95
	.word	.L380-.L51,.L237-.L51
	.half	1
	.byte	95
	.word	.L376-.L51,.L377-.L51
	.half	1
	.byte	95
	.word	.L381-.L51,.L382-.L51
	.half	1
	.byte	95
	.word	.L39-.L51,.L3-.L51
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_loc'
.L52:
	.word	-1,.L53,0,.L327-.L53
	.half	2
	.byte	138,0
	.word	0,0
.L329:
	.word	-1,.L53,.L57-.L53,.L383-.L53
	.half	1
	.byte	85
	.word	.L45-.L53,.L237-.L53
	.half	1
	.byte	85
	.word	.L376-.L53,.L232-.L53
	.half	1
	.byte	85
	.word	.L55-.L53,.L217-.L53
	.half	1
	.byte	85
	.word	.L386-.L53,.L327-.L53
	.half	1
	.byte	85
	.word	0,0
.L328:
	.word	-1,.L53,.L57-.L53,.L383-.L53
	.half	1
	.byte	84
	.word	.L45-.L53,.L237-.L53
	.half	1
	.byte	84
	.word	.L376-.L53,.L232-.L53
	.half	1
	.byte	84
	.word	.L55-.L53,.L217-.L53
	.half	1
	.byte	84
	.word	.L386-.L53,.L327-.L53
	.half	1
	.byte	84
	.word	0,0
.L331:
	.word	-1,.L53,.L374-.L53,.L375-.L53
	.half	1
	.byte	95
	.word	.L380-.L53,.L237-.L53
	.half	1
	.byte	95
	.word	.L376-.L53,.L377-.L53
	.half	1
	.byte	95
	.word	.L384-.L53,.L385-.L53
	.half	1
	.byte	95
	.word	.L55-.L53,.L7-.L53
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_loc'
.L58:
	.word	-1,.L59,0,.L332-.L59
	.half	2
	.byte	138,0
	.word	0,0
.L333:
	.word	-1,.L59,.L57-.L59,.L383-.L59
	.half	1
	.byte	84
	.word	.L45-.L59,.L237-.L59
	.half	1
	.byte	84
	.word	.L376-.L59,.L232-.L59
	.half	1
	.byte	84
	.word	.L55-.L59,.L217-.L59
	.half	1
	.byte	84
	.word	.L389-.L59,.L332-.L59
	.half	1
	.byte	84
	.word	0,0
.L334:
	.word	-1,.L59,.L57-.L59,.L383-.L59
	.half	1
	.byte	85
	.word	.L45-.L59,.L237-.L59
	.half	1
	.byte	85
	.word	.L376-.L59,.L232-.L59
	.half	1
	.byte	85
	.word	.L55-.L59,.L217-.L59
	.half	1
	.byte	85
	.word	.L389-.L59,.L332-.L59
	.half	1
	.byte	85
	.word	0,0
.L335:
	.word	-1,.L59,.L374-.L59,.L375-.L59
	.half	1
	.byte	95
	.word	.L380-.L59,.L237-.L59
	.half	1
	.byte	95
	.word	.L376-.L59,.L377-.L59
	.half	1
	.byte	95
	.word	.L387-.L59,.L388-.L59
	.half	1
	.byte	95
	.word	.L55-.L59,.L7-.L59
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_loc'
.L60:
	.word	-1,.L61,0,.L264-.L61
	.half	2
	.byte	138,0
	.word	0,0
.L266:
	.word	-1,.L61,0,.L268-.L61
	.half	1
	.byte	84
	.word	.L49-.L61,.L242-.L61
	.half	1
	.byte	84
	.word	.L372-.L61,.L227-.L61
	.half	1
	.byte	84
	.word	.L45-.L61,.L237-.L61
	.half	1
	.byte	84
	.word	.L391-.L61,.L392-.L61
	.half	1
	.byte	84
	.word	.L11-.L61,.L264-.L61
	.half	1
	.byte	84
	.word	0,0
.L277:
	.word	0,0
.L271:
	.word	-1,.L61,.L390-.L61,.L268-.L61
	.half	1
	.byte	95
	.word	.L49-.L61,.L371-.L61
	.half	1
	.byte	95
	.word	0,0
.L275:
	.word	0,0
.L280:
	.word	-1,.L61,.L374-.L61,.L375-.L61
	.half	1
	.byte	95
	.word	.L380-.L61,.L237-.L61
	.half	1
	.byte	95
	.word	.L391-.L61,.L392-.L61
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_loc'
.L64:
	.word	-1,.L65,0,.L281-.L65
	.half	2
	.byte	138,0
	.word	0,0
.L282:
	.word	-1,.L65,.L45-.L65,.L237-.L65
	.half	1
	.byte	84
	.word	.L391-.L65,.L212-.L65
	.half	1
	.byte	84
	.word	0,.L281-.L65
	.half	1
	.byte	84
	.word	0,0
.L286:
	.word	0,0
.L288:
	.word	-1,.L65,.L374-.L65,.L375-.L65
	.half	1
	.byte	95
	.word	.L380-.L65,.L237-.L65
	.half	1
	.byte	95
	.word	.L391-.L65,.L212-.L65
	.half	1
	.byte	95
	.word	.L393-.L65,.L13-.L65
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_loc'
.L66:
	.word	-1,.L67,0,.L336-.L67
	.half	2
	.byte	138,0
	.word	0,0
.L338:
	.word	0,0
.L337:
	.word	-1,.L67,.L49-.L67,.L242-.L67
	.half	1
	.byte	88
	.word	.L49-.L67,.L242-.L67
	.half	1
	.byte	84
	.word	.L372-.L67,.L227-.L67
	.half	1
	.byte	88
	.word	.L372-.L67,.L227-.L67
	.half	1
	.byte	84
	.word	.L340-.L67,.L336-.L67
	.half	1
	.byte	88
	.word	0,.L395-.L67
	.half	1
	.byte	84
	.word	.L396-.L67,.L336-.L67
	.half	1
	.byte	84
	.word	0,0
.L342:
	.word	-1,.L67,.L394-.L67,.L341-.L67
	.half	1
	.byte	95
	.word	.L49-.L67,.L371-.L67
	.half	1
	.byte	95
	.word	0,0
.L339:
	.word	-1,.L67,.L373-.L67,.L227-.L67
	.half	1
	.byte	111
	.word	.L341-.L67,.L336-.L67
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_loc'
.L68:
	.word	-1,.L69,0,.L343-.L69
	.half	2
	.byte	138,0
	.word	0,0
.L344:
	.word	-1,.L69,0,.L397-.L69
	.half	1
	.byte	84
	.word	.L397-.L69,.L343-.L69
	.half	1
	.byte	88
	.word	.L398-.L69,.L343-.L69
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_loc'
.L70:
	.word	-1,.L71,0,.L345-.L71
	.half	2
	.byte	138,0
	.word	0,0
.L347:
	.word	0,0
.L346:
	.word	-1,.L71,.L49-.L71,.L242-.L71
	.half	1
	.byte	88
	.word	.L49-.L71,.L242-.L71
	.half	1
	.byte	84
	.word	.L372-.L71,.L227-.L71
	.half	1
	.byte	88
	.word	.L372-.L71,.L227-.L71
	.half	1
	.byte	84
	.word	.L349-.L71,.L345-.L71
	.half	1
	.byte	88
	.word	0,.L400-.L71
	.half	1
	.byte	84
	.word	.L401-.L71,.L345-.L71
	.half	1
	.byte	84
	.word	0,0
.L351:
	.word	-1,.L71,.L399-.L71,.L350-.L71
	.half	1
	.byte	95
	.word	.L49-.L71,.L371-.L71
	.half	1
	.byte	95
	.word	0,0
.L348:
	.word	-1,.L71,.L373-.L71,.L227-.L71
	.half	1
	.byte	111
	.word	.L350-.L71,.L345-.L71
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_loc'
.L72:
	.word	-1,.L73,0,.L352-.L73
	.half	2
	.byte	138,0
	.word	0,0
.L353:
	.word	-1,.L73,0,.L402-.L73
	.half	1
	.byte	84
	.word	.L402-.L73,.L352-.L73
	.half	1
	.byte	95
	.word	.L403-.L73,.L352-.L73
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_loc'
.L74:
	.word	-1,.L75,0,.L354-.L75
	.half	2
	.byte	138,0
	.word	0,0
.L361:
	.word	0,0
.L356:
	.word	-1,.L75,.L404-.L75,.L355-.L75
	.half	1
	.byte	95
	.word	.L49-.L75,.L371-.L75
	.half	1
	.byte	95
	.word	0,0
.L359:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_loc'
.L76:
	.word	-1,.L77,0,.L362-.L77
	.half	2
	.byte	138,0
	.word	0,0
.L365:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_loc'
.L78:
	.word	-1,.L79,0,.L243-.L79
	.half	2
	.byte	138,0
	.word	0,0
.L245:
	.word	-1,.L79,0,.L243-.L79
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_loc'
.L80:
	.word	-1,.L81,0,.L246-.L81
	.half	2
	.byte	138,0
	.word	0,0
.L250:
	.word	-1,.L81,.L83-.L81,.L197-.L81
	.half	1
	.byte	101
	.word	.L411-.L81,.L246-.L81
	.half	1
	.byte	101
	.word	0,0
.L248:
	.word	-1,.L81,.L83-.L81,.L197-.L81
	.half	1
	.byte	100
	.word	.L411-.L81,.L246-.L81
	.half	1
	.byte	100
	.word	0,0
.L253:
	.word	-1,.L81,.L405-.L81,.L406-.L81
	.half	1
	.byte	95
	.word	.L408-.L81,.L16-.L81
	.half	5
	.byte	144,32,157,32,0
	.word	.L16-.L81,.L409-.L81
	.half	1
	.byte	95
	.word	.L410-.L81,.L17-.L81
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L255:
	.word	-1,.L81,.L407-.L81,.L197-.L81
	.half	1
	.byte	82
	.word	.L411-.L81,.L246-.L81
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_loc'
.L84:
	.word	-1,.L85,0,.L256-.L85
	.half	2
	.byte	138,0
	.word	0,0
.L259:
	.word	-1,.L85,.L83-.L85,.L197-.L85
	.half	1
	.byte	101
	.word	.L413-.L85,.L256-.L85
	.half	1
	.byte	101
	.word	0,0
.L258:
	.word	-1,.L85,.L83-.L85,.L197-.L85
	.half	1
	.byte	100
	.word	.L413-.L85,.L256-.L85
	.half	1
	.byte	100
	.word	0,0
.L261:
	.word	-1,.L85,.L405-.L85,.L406-.L85
	.half	1
	.byte	95
	.word	.L408-.L85,.L412-.L85
	.half	5
	.byte	144,32,157,32,0
	.word	.L412-.L85,.L16-.L85
	.half	1
	.byte	95
	.word	.L410-.L85,.L17-.L85
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L263:
	.word	-1,.L85,.L407-.L85,.L197-.L85
	.half	1
	.byte	82
	.word	.L413-.L85,.L256-.L85
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_loc'
.L86:
	.word	-1,.L87,0,.L366-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L367:
	.word	-1,.L87,0,.L366-.L87
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_loc'
.L88:
	.word	-1,.L89,0,.L368-.L89
	.half	2
	.byte	138,0
	.word	0,0
.L369:
	.word	-1,.L89,0,.L368-.L89
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_loc'
.L90:
	.word	-1,.L91,0,.L289-.L91
	.half	2
	.byte	138,0
	.word	0,0
.L290:
	.word	-1,.L91,0,.L291-.L91
	.half	1
	.byte	84
	.word	.L49-.L91,.L242-.L91
	.half	1
	.byte	84
	.word	.L372-.L91,.L227-.L91
	.half	1
	.byte	84
	.word	.L45-.L91,.L237-.L91
	.half	1
	.byte	84
	.word	.L376-.L91,.L232-.L91
	.half	1
	.byte	84
	.word	.L39-.L91,.L222-.L91
	.half	1
	.byte	84
	.word	.L294-.L91,.L289-.L91
	.half	1
	.byte	84
	.word	0,0
.L298:
	.word	0,0
.L292:
	.word	-1,.L91,.L414-.L91,.L291-.L91
	.half	1
	.byte	95
	.word	.L49-.L91,.L371-.L91
	.half	1
	.byte	95
	.word	0,0
.L296:
	.word	0,0
.L300:
	.word	-1,.L91,.L374-.L91,.L375-.L91
	.half	1
	.byte	95
	.word	.L380-.L91,.L237-.L91
	.half	1
	.byte	95
	.word	.L376-.L91,.L232-.L91
	.half	1
	.byte	95
	.word	.L39-.L91,.L3-.L91
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_loc'
.L92:
	.word	-1,.L93,0,.L301-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L302:
	.word	-1,.L93,.L57-.L93,.L383-.L93
	.half	1
	.byte	84
	.word	.L45-.L93,.L237-.L93
	.half	1
	.byte	84
	.word	.L376-.L93,.L232-.L93
	.half	1
	.byte	84
	.word	.L55-.L93,.L217-.L93
	.half	1
	.byte	84
	.word	.L304-.L93,.L301-.L93
	.half	1
	.byte	84
	.word	0,0
.L306:
	.word	0,0
.L308:
	.word	-1,.L93,.L374-.L93,.L375-.L93
	.half	1
	.byte	95
	.word	.L380-.L93,.L237-.L93
	.half	1
	.byte	95
	.word	.L376-.L93,.L232-.L93
	.half	1
	.byte	95
	.word	.L55-.L93,.L7-.L93
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L593:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L37,.L309-.L37
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L51,.L318-.L51
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L53,.L327-.L53
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L59,.L332-.L59
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L61,.L264-.L61
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L65,.L281-.L65
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L593,.L67,.L336-.L67
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L593,.L69,.L343-.L69
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L593,.L71,.L345-.L71
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L593,.L73,.L352-.L73
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L75,.L354-.L75
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L77,.L362-.L77
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L79,.L243-.L79
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L593,.L81,.L246-.L81
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L593,.L85,.L256-.L85
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L593,.L87,.L366-.L87
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L593,.L89,.L368-.L89
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L91,.L289-.L91
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L593,.L93,.L301-.L93
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L594:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_11')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L39,.L222-.L39
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L41,.L202-.L41
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_13')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L43,.L232-.L43
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_14')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L45,.L237-.L45
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_12')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L47,.L227-.L47
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_15')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L49,.L242-.L49
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_10')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L55,.L217-.L55
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L57,.L207-.L57
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L63,.L212-.L63
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L594,.L83,.L197-.L83
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
