	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 07918494"
	.compiler_invocation	"ctc -f cc8600a --dep-file=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\.IfxVadc.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc23x -D__CPU_TC23X__ --core=tc1.6.x --fp-model=+float -DNDEBUG -D__SWPLATFORM__ -DIFX_CFG_USE_COMPILER_DEFAULT_LINKER -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05 -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\APP\\inc -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Configuration -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Scu/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Stm/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x/_Reg -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/SrvSw -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -g2 --no-warnings=542 --make-target=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.src ..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c"
	.compiler_name		"ctc"
	;source	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c'

	
$TC16X
	.sdecl	'.zrodata.IfxVadc..4.cnt',data,rom
	.sect	'.zrodata.IfxVadc..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	20000000
	.sdecl	'.zrodata.IfxVadc..5.cnt',data,rom
	.sect	'.zrodata.IfxVadc..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	500000
	.sdecl	'.zrodata.IfxVadc..6.cnt',data,rom
	.sect	'.zrodata.IfxVadc..6.cnt'
	.align	2
.6.cnt:	.type	object
	.size	.6.cnt,4
	.word	19500000
	
	.sdecl	'.text.IfxVadc.IfxVadc_configExternalMultiplexerMode',code,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.text.IfxVadc.IfxVadc_configExternalMultiplexerMode'
	.align	2
	
	.global	IfxVadc_configExternalMultiplexerMode

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	     2   * \file IfxVadc.c
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	     3   * \brief VADC  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	     4   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	     5   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	     7   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	     9   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    10   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    15   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    16   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    22   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    23   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    24  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    25  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    26  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    27  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    28  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    29  #include "IfxVadc.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    30  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    31  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    32  /*-------------------------Function Implementations---------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    33  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    34  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    35  void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
; Function IfxVadc_configExternalMultiplexerMode
.L71:
IfxVadc_configExternalMultiplexerMode:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    36  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    37      Ifx_VADC_G_EMUXCTR emuxctr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    39      emuxctr.B.EMXWC    = 1;
	extr.u	d15,d15,#24,#8
	ld.bu	d1,[a10]4
.L415:
	ld.bu	d0,[a10]
.L418:
	mov.aa	a15,a4
.L420:
	or	d15,#128
	mov.aa	a12,a5
.L421:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    40      emuxctr.B.EMUXMODE = mode;
	insert	d15,d15,d4,#2,#2
.L771:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    41      emuxctr.B.EMXCSS   = channelSelectionStyle;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    42      emuxctr.B.EMUXCH   = channels;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    43      emuxctr.B.EMUXSET  = startChannel;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    44      emuxctr.B.EMXCOD   = code;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    45      emuxctr.B.EMXST    = sampleTimeControl;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    46      IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
	mov	d4,#15
.L416:
	insert	d15,d15,d1,#6,#1
.L422:
	insert	d15,d15,d15,#24,#8
.L772:
	insert	d15,d15,d5,#16,#10
.L773:
	insert	d15,d15,d6,#0,#3
.L774:
	extr.u	d1,d15,#24,#8
.L417:
	insert	d1,d1,d7,#4,#1
.L775:
	insert	d0,d1,d0,#5,#1
.L419:
	insert	d15,d15,d0,#24,#8
	call	IfxVadc_enableAccess
.L414:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    47      vadcG->EMUXCTR.U   = emuxctr.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    48      emuxctr.B.EMXWC    = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    49      vadcG->EMUXCTR.U   = emuxctr.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    50      IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
	mov	d4,#15
	st.w	[a12]368,d15
.L776:
	insert	d15,d15,#0,#31,#1
	mov.aa	a4,a15
.L423:
	st.w	[a12]368,d15
.L777:
	j	IfxVadc_disableAccess
.L398:
	
__IfxVadc_configExternalMultiplexerMode_function_end:
	.size	IfxVadc_configExternalMultiplexerMode,__IfxVadc_configExternalMultiplexerMode_function_end-IfxVadc_configExternalMultiplexerMode
.L245:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_disableAccess',code,cluster('IfxVadc_disableAccess')
	.sect	'.text.IfxVadc.IfxVadc_disableAccess'
	.align	2
	
	.global	IfxVadc_disableAccess

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    51  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    52  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    53  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    54  void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
; Function IfxVadc_disableAccess
.L73:
IfxVadc_disableAccess:	.type	func
	mov.aa	a15,a4
.L425:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    55  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    56      uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d8,d4
	call	IfxScuWdt_getSafetyWatchdogPassword
.L424:
	mov	d9,d2
.L428:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    57      IfxScuWdt_clearSafetyEndinit(passwd);
	mov	d4,d9
	call	IfxScuWdt_clearSafetyEndinit
.L427:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    58  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    59      if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
	mov	d15,#32
.L619:
	jge.u	d8,d15,.L2
.L620:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    60      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    61          vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
	mov	d0,#1
	ld.w	d15,[a15]136
.L621:
	sha	d0,d0,d8
.L622:
	or	d15,d0
	st.w	[a15]136,d15
.L623:
	j	.L3
.L2:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    62      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    63      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    64      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    65          vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
	fcall	.cocofun_8
.L426:
	or	d0,d1
	st.w	[a15]140,d0
.L3:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    66      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    67  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    68      IfxScuWdt_setSafetyEndinit(passwd);
	mov	d4,d9
.L429:
	j	IfxScuWdt_setSafetyEndinit
.L296:
	
__IfxVadc_disableAccess_function_end:
	.size	IfxVadc_disableAccess,__IfxVadc_disableAccess_function_end-IfxVadc_disableAccess
.L170:
	; End of function
	
	.sdecl	'.text.IfxVadc..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.IfxVadc..cocofun_8'
	.align	2
; Function .cocofun_8
.L75:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	and	d15,d8,#31
	ld.w	d0,[a15]140
.L786:
	mov	d1,#1
.L787:
	sha	d1,d1,d15
	fret
.L255:
	; End of function
	.sdecl	'.text.IfxVadc.IfxVadc_disablePostCalibration',code,cluster('IfxVadc_disablePostCalibration')
	.sect	'.text.IfxVadc.IfxVadc_disablePostCalibration'
	.align	2
	
	.global	IfxVadc_disablePostCalibration

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    69  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    70  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    71  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    72  void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
; Function IfxVadc_disablePostCalibration
.L77:
IfxVadc_disablePostCalibration:	.type	func
	mov	d8,d4
	mov.aa	a15,a4
.L436:
	mov	d15,d5
.L430:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    73  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    74      if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
	jge.u	d8,#2,.L4
.L628:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    75      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    76          IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
	call	IfxVadc_enableAccess
.L309:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    77  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    78          uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
	mov	d0,#1
.L629:
	add	d1,d8,#16
.L630:
	sha	d0,d0,d1
.L432:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    79  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    80          if (disable == TRUE)
	jne	d15,#1,.L5
.L631:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    81          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    82              vadc->GLOBCFG.U |= mask;
	ld.w	d15,[a15]128
.L431:
	or	d15,d0
	j	.L6
.L4:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    83          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    84          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    85          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    86              vadc->GLOBCFG.U &= ~mask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    87          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    88  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    89          IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    90      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    91  }
	ret
.L5:
	mov	d1,#-1
	ld.w	d15,[a15]128
.L433:
	xor	d0,d1
.L434:
	and	d15,d0
.L6:
	st.w	[a15]128,d15
.L632:
	fcall	.cocofun_7
.L437:
	j	IfxVadc_disableAccess
.L303:
	
__IfxVadc_disablePostCalibration_function_end:
	.size	IfxVadc_disablePostCalibration,__IfxVadc_disablePostCalibration_function_end-IfxVadc_disablePostCalibration
.L175:
	; End of function
	
	.sdecl	'.text.IfxVadc..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.IfxVadc..cocofun_7'
	.align	2
; Function .cocofun_7
.L79:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	mov	d4,#31
	mov.aa	a4,a15
.L435:
	fret
.L250:
	; End of function
	.sdecl	'.text.IfxVadc.IfxVadc_enableAccess',code,cluster('IfxVadc_enableAccess')
	.sect	'.text.IfxVadc.IfxVadc_enableAccess'
	.align	2
	
	.global	IfxVadc_enableAccess

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    92  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    93  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    94  void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
; Function IfxVadc_enableAccess
.L81:
IfxVadc_enableAccess:	.type	func
	mov.aa	a15,a4
.L441:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    95  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    96      uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d8,d4
	call	IfxScuWdt_getSafetyWatchdogPassword
.L438:
	mov	d9,d2
.L440:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    97      IfxScuWdt_clearSafetyEndinit(passwd);
	mov	d4,d9
	call	IfxScuWdt_clearSafetyEndinit
.L439:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    98  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	    99      if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
	mov	d15,#32
.L637:
	jge.u	d8,d15,.L7
.L638:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   100      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   101          vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
	mov	d0,#1
	ld.w	d15,[a15]136
.L639:
	sha	d0,d0,d8
.L640:
	mov	d1,#-1
	xor	d0,d1
.L641:
	and	d15,d0
	st.w	[a15]136,d15
.L642:
	j	.L8
.L7:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   102      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   103      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   104      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   105          vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
	fcall	.cocofun_8
.L643:
	mov	d15,#-1
	xor	d1,d15
.L644:
	and	d0,d1
	st.w	[a15]140,d0
.L8:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   106      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   107  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   108      IfxScuWdt_setSafetyEndinit(passwd);
	mov	d4,d9
.L442:
	j	IfxScuWdt_setSafetyEndinit
.L311:
	
__IfxVadc_enableAccess_function_end:
	.size	IfxVadc_enableAccess,__IfxVadc_enableAccess_function_end-IfxVadc_enableAccess
.L180:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_enableGroupSync',code,cluster('IfxVadc_enableGroupSync')
	.sect	'.text.IfxVadc.IfxVadc_enableGroupSync'
	.align	2
	
	.global	IfxVadc_enableGroupSync

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   109  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   110  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   111  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   112  void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
; Function IfxVadc_enableGroupSync
.L83:
IfxVadc_enableGroupSync:	.type	func
	mov.aa	a15,a4
.L448:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   113  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   114      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	mov	d15,d4
	call	IfxScuWdt_getCpuWatchdogPassword
.L443:
	mov	d9,d2
.L447:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   115      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d9
	call	IfxScuWdt_clearCpuEndinit
.L319:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   116  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   117      // VADC Config: enable ADC group sync
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   118      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   119          Ifx_VADC_GLOBCFG vadcGlobCfg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   120          vadcGlobCfg.U       = vadc->GLOBCFG.U;
	ld.w	d8,[a15]128
.L450:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   121          vadcGlobCfg.B.DIVWC = 1;
	insert	d8,d8,#1,#15,#1
.L649:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   122          vadcGlobCfg.B.DCMSB = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   124          IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	insert	d8,d8,#1,#7,#1
	fcall	.cocofun_7
.L444:
	call	IfxVadc_enableAccess
.L445:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   125          vadc->GLOBCFG.U = vadcGlobCfg.U;
	st.w	[a15]128,d8
.L650:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   126          IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_7
.L449:
	call	IfxVadc_disableAccess
.L320:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   127      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   128  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   129      if (ccu6Num == 0)
	jne	d15,#0,.L9
.L651:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   130      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   131          // CCU60 Config
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   132          CCU60_CLC.U = 0;
	st.w	0xf0002a00,d15
.L652:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   133  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   134          if (CCU60_CLC.U)
	ld.w	d15,0xf0002a00
.L446:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   135          {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   136  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   137          CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
	mov	d15,#4
.L653:
	st.w	0xf0002a54,d15
.L654:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   138          CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
	st.w	0xf0002a5c,d15
.L655:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   139          CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
	ld.bu	d15,0xf0002a81
.L656:
	st.t	0xf0002a81:7,#1
.L657:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   140          CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
	mov	d15,#16896
	st.w	0xf0002a78,d15
.L658:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   141          CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
	ld.bu	d15,0xf0002a0c
.L659:
	insert	d15,d15,#0,#3,#3
	j	.L10
.L9:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   142      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   143      else if (ccu6Num == 1)
	jne	d15,#1,.L11
.L660:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   144      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   145          // CCU60 + CCU61 Config
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   146          CCU60_CLC.U = 0;
	mov	d15,#0
	st.w	0xf0002a00,d15
.L451:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   147          CCU61_CLC.U = 0;
	st.w	0xf0002b00,d15
.L661:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   148  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   149          if (CCU61_CLC.U)
	ld.w	d15,0xf0002b00
.L662:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   150          {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   151  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   152          CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
	mov	d15,#4
.L663:
	st.w	0xf0002b54,d15
.L664:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   153          CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
	st.w	0xf0002b5c,d15
.L665:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   154          CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
	ld.bu	d15,0xf0002b81
.L666:
	st.t	0xf0002b81:7,#1
.L667:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   155          CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
	mov	d15,#16896
	st.w	0xf0002b78,d15
.L668:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   156          CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
	ld.bu	d15,0xf0002a0c
.L669:
	insert	d15,d15,#1,#3,#3
.L10:
	st.b	0xf0002a0c,d15
.L11:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   157      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   158  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   159      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d9
.L452:
	j	IfxScuWdt_setCpuEndinit
.L315:
	
__IfxVadc_enableGroupSync_function_end:
	.size	IfxVadc_enableGroupSync,__IfxVadc_enableGroupSync_function_end-IfxVadc_enableGroupSync
.L185:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getAdcAnalogFrequency',code,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.text.IfxVadc.IfxVadc_getAdcAnalogFrequency'
	.align	2
	
	.global	IfxVadc_getAdcAnalogFrequency

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   160  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   162  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   163  float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
; Function IfxVadc_getAdcAnalogFrequency
.L85:
IfxVadc_getAdcAnalogFrequency:	.type	func
	mov.aa	a15,a4
.L454:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   164  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   165      return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
	call	IfxScuCcu_getSpbFrequency
.L453:
	ld.bu	d15,[a15]128
	and	d15,#31
.L582:
	add	d15,#1
	utof	d15,d15
.L583:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   166  }
	div.f	d2,d2,d15
	ret
.L284:
	
__IfxVadc_getAdcAnalogFrequency_function_end:
	.size	IfxVadc_getAdcAnalogFrequency,__IfxVadc_getAdcAnalogFrequency_function_end-IfxVadc_getAdcAnalogFrequency
.L155:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getAdcDigitalFrequency',code,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.text.IfxVadc.IfxVadc_getAdcDigitalFrequency'
	.align	2
	
	.global	IfxVadc_getAdcDigitalFrequency

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   167  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   168  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   169  float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
; Function IfxVadc_getAdcDigitalFrequency
.L87:
IfxVadc_getAdcDigitalFrequency:	.type	func
	mov.aa	a15,a4
.L456:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   170  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   171      return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
	call	IfxScuCcu_getSpbFrequency
.L455:
	ld.bu	d15,[a15]129
	and	d15,#3
.L588:
	add	d15,#1
	utof	d15,d15
.L589:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   172  }
	div.f	d2,d2,d15
	ret
.L286:
	
__IfxVadc_getAdcDigitalFrequency_function_end:
	.size	IfxVadc_getAdcDigitalFrequency,__IfxVadc_getAdcDigitalFrequency_function_end-IfxVadc_getAdcDigitalFrequency
.L160:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getAdcModuleFrequency',code,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.text.IfxVadc.IfxVadc_getAdcModuleFrequency'
	.align	2
	
	.global	IfxVadc_getAdcModuleFrequency

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   173  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   174  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   175  float32 IfxVadc_getAdcModuleFrequency(void)
; Function IfxVadc_getAdcModuleFrequency
.L89:
IfxVadc_getAdcModuleFrequency:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   176  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   177      return IfxScuCcu_getSpbFrequency();
	j	IfxScuCcu_getSpbFrequency
.L323:
	
__IfxVadc_getAdcModuleFrequency_function_end:
	.size	IfxVadc_getAdcModuleFrequency,__IfxVadc_getAdcModuleFrequency_function_end-IfxVadc_getAdcModuleFrequency
.L190:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getBackgroundScanStatus',code,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.text.IfxVadc.IfxVadc_getBackgroundScanStatus'
	.align	2
	
	.global	IfxVadc_getBackgroundScanStatus

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   178  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   179  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   180  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   181  IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
; Function IfxVadc_getBackgroundScanStatus
.L91:
IfxVadc_getBackgroundScanStatus:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   182  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   183      IfxVadc_Status status = IfxVadc_Status_noError;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   184      uint8          i;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   185  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   186      for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   187      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   188          if (vadc->BRSPND[i].U)
	lea	a15,[a4]448
.L535:
	mov.a	a2,#1
.L15:
	ld.w	d15,[a15]
.L536:
	jeq	d15,#0,.L16
.L537:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   189          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   190              return IfxVadc_Status_channelsStillPending;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   191          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   192          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   193          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   194              continue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   195          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   196      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   197  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   198      return status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   199  }
	mov	d2,#6
	ret
.L16:
	add.a	a15,#4
	loop	a2,.L15
.L538:
	mov	d2,#0
	ret
.L257:
	
__IfxVadc_getBackgroundScanStatus_function_end:
	.size	IfxVadc_getBackgroundScanStatus,__IfxVadc_getBackgroundScanStatus_function_end-IfxVadc_getBackgroundScanStatus
.L130:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getChannelConversionTime',code,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.text.IfxVadc.IfxVadc_getChannelConversionTime'
	.align	2
	
	.global	IfxVadc_getChannelConversionTime

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   200  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   201  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   202  float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
; Function IfxVadc_getChannelConversionTime
.L93:
IfxVadc_getChannelConversionTime:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   203  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   204      float32                   conversionTime = 0.0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   205      Ifx_VADC_G               *vadcG          = &vadc->G[group];
	sha	d15,d4,#10
	ld.bu	d0,[a10]
.L458:
	addsc.a	a15,a4,d15,#0
.L756:
	mov	d8,d6
.L460:
	lea	a15,[a15]1152
.L461:
	mov	d2,#0
.L463:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   206      uint32                    stc;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   207      IfxVadc_ChannelResolution resolution;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   208      uint32                    n;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   209  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   210      uint32                    inputClassNum;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   211  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   212      if (inputClass <= IfxVadc_InputClasses_group1)
	jge.u	d5,#2,.L19
.L757:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   213      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   214          inputClassNum = inputClass;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   215          stc           = vadcG->ICLASS[inputClassNum].B.STCS;
	addsc.a	a15,a15,d5,#2
.L462:
	ld.bu	d15,[a15]32
.L758:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   216          resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
	and	d10,d15,#31
	ld.bu	d15,[a15]33
.L464:
	j	.L20
.L19:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   217      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   218      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   219      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   220          inputClassNum = inputClass - IfxVadc_InputClasses_global0;
	add	d15,d5,#-2
.L466:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   221          stc           = vadc->GLOBICLASS[inputClassNum].B.STCS;
	addsc.a	a15,a4,d15,#2
.L465:
	ld.bu	d15,[a15]160
.L467:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   222          resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
	and	d10,d15,#31
	ld.bu	d15,[a15]161
.L20:
	and	d15,#7
.L759:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   223      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   224  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   225      switch (resolution)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   226      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   227      case IfxVadc_ChannelResolution_12bit: n     = 12;
	jeq	d15,#0,.L21
.L760:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   228          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   229      case IfxVadc_ChannelResolution_10bit: n     = 10;
	jeq	d15,#1,.L22
.L761:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   230          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   231      case IfxVadc_ChannelResolution_8bit: n      = 8;
	jeq	d15,#2,.L23
.L762:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   232          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   233      case IfxVadc_ChannelResolution_10bitFast: n = 10;
	jeq	d15,#5,.L24
.L763:
	j	.L25
.L21:
	mov	d9,#12
	j	.L26
.L23:
	mov	d9,#8
	j	.L27
.L24:
.L22:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   234          break;
	mov	d9,#10
	j	.L28

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   235      default: n                                  = 0;
.L25:
	mov	d9,d2

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   236          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   237      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   238  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   239      if (conversionMode == IfxVadc_ConversionType_Compatible)
.L28:
.L27:
.L26:
	jne	d0,#0,.L29
.L395:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   240      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   241          if (resolution != IfxVadc_ChannelResolution_10bitFast)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   242          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   243              /* Standard conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   244              uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   245              conversionTime = (float32)(2 + stc + n + pc) / analogFrequency + 2.0 / moduleFrequency;
	movh	d0,#16384
.L459:
	div.f	d11,d0,d7
.L396:
	jeq	d15,#5,.L30
.L397:
	call	IfxVadc_isPostCalibration
.L457:
	add	d9,d10
.L469:
	cadd	d9,d2,d9,#2
.L764:
	add	d9,#2
.L765:
	utof	d15,d9
	j	.L31
.L30:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   246          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   247          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   248          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   249              /* Fast compare mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   250              conversionTime = (float32)(2 + stc + 2) / analogFrequency + 2.0 / moduleFrequency;
	add	d10,#4
.L468:
	utof	d15,d10
.L31:
	div.f	d15,d15,d8
.L766:
	add.f	d2,d15,d11
.L29:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   251          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   252      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   253      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   254      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   255          // do nothing
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   256      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   257  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   258      return conversionTime;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   259  }
	ret
.L378:
	
__IfxVadc_getChannelConversionTime_function_end:
	.size	IfxVadc_getChannelConversionTime,__IfxVadc_getChannelConversionTime_function_end-IfxVadc_getChannelConversionTime
.L240:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getQueueStatus',code,cluster('IfxVadc_getQueueStatus')
	.sect	'.text.IfxVadc.IfxVadc_getQueueStatus'
	.align	2
	
	.global	IfxVadc_getQueueStatus

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   260  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   261  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   262  IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
; Function IfxVadc_getQueueStatus
.L95:
IfxVadc_getQueueStatus:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   263  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   264      IfxVadc_Status status = IfxVadc_Status_noError;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   265  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   266      /* just fill level is checked */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   267      if (0x7 == group->QSR0.B.FILL)
	ld.bu	d15,[a4]136
	and	d15,#15
.L576:
	eq	d15,d15,#7
.L577:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   268      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   269          status = IfxVadc_Status_queueFull;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   270      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   271      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   272      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   273          status = IfxVadc_Status_noError;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   274      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   275  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   276      return status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   277  }
	sha	d2,d15,#2
	ret
.L281:
	
__IfxVadc_getQueueStatus_function_end:
	.size	IfxVadc_getQueueStatus,__IfxVadc_getQueueStatus_function_end-IfxVadc_getQueueStatus
.L150:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getResultBasedOnRequestSource',code,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.text.IfxVadc.IfxVadc_getResultBasedOnRequestSource'
	.align	2
	
	.global	IfxVadc_getResultBasedOnRequestSource

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   278  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   279  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   280  Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
; Function IfxVadc_getResultBasedOnRequestSource
.L97:
IfxVadc_getResultBasedOnRequestSource:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   281  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   282      sint32       sourceResultRegister = -1;
	mov	d15,#-1
.L470:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   283      Ifx_VADC_RES tmpResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   284  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   285      switch (sourceType)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   286      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   287      case IfxVadc_RequestSource_queue:
	jeq	d5,#0,.L34
.L543:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   288          sourceResultRegister = group->QCTRL0.B.SRCRESREG;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   289          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   291      case IfxVadc_RequestSource_scan:
	jeq	d5,#1,.L35
.L544:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   292          sourceResultRegister = group->ASCTRL.B.SRCRESREG;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   293          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   294  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   295      case IfxVadc_RequestSource_background:
	jeq	d5,#2,.L36
.L545:
	j	.L37
.L34:
	ld.bu	d15,[a5]128
.L471:
	j	.L38
.L35:
	ld.bu	d15,[a5]160
.L472:
	j	.L39
.L36:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   296          sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
	ld.bu	d15,[a4]512

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   297          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   298      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   299  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   300      if (sourceResultRegister > 0)
.L38:
.L39:
	and	d15,#15
.L37:
	jge	d15,#1,.L41
.L546:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   301      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   302          tmpResult.U = group->RES[sourceResultRegister].U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   303  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   304          return tmpResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   305      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   306      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   307      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   308          if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
	jne	d5,#2,.L42
.L547:
	addsc.a	a15,a5,d4,#2
.L548:
	ld.bu	d15,[a15]386
.L473:
	jz.t	d15:4,.L43
.L549:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   309          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   310              tmpResult.B.VF     = vadc->GLOBRES.B.VF;
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#7,#1
.L474:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   311              tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
	insert	d2,d2,d15,#31,#1
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#6,#1
.L550:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   312              tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
	insert	d2,d2,d15,#30,#1
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#4,#2
.L551:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   313              tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
	insert	d2,d2,d15,#28,#2
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#1,#3
.L552:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   314              tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
	insert	d2,d2,d15,#25,#3
	ld.hu	d15,[a4]770
	extr.u	d15,d15,#4,#5
.L553:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   315              tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
	insert	d2,d2,d15,#20,#5
	ld.bu	d15,[a4]770
	and	d15,#15
.L554:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   316              tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
	insert	d2,d2,d15,#16,#4
	ld.hu	d15,[a4]768
.L555:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   318              return tmpResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   319          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   320          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   321          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   322              tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   323  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   324              return tmpResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   325          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   326      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   327  }
	insert	d2,d2,d15,#0,#16
	ret
.L43:
.L42:
	addsc.a	a15,a5,d4,#2
.L556:
	ld.bu	d15,[a15]386
	and	d15,#15
.L41:
	addsc.a	a15,a5,d15,#2
.L557:
	ld.w	d2,[a15]640
.L475:
	ret
.L263:
	
__IfxVadc_getResultBasedOnRequestSource_function_end:
	.size	IfxVadc_getResultBasedOnRequestSource,__IfxVadc_getResultBasedOnRequestSource_function_end-IfxVadc_getResultBasedOnRequestSource
.L135:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getScanStatus',code,cluster('IfxVadc_getScanStatus')
	.sect	'.text.IfxVadc.IfxVadc_getScanStatus'
	.align	2
	
	.global	IfxVadc_getScanStatus

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   328  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   329  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   330  IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
; Function IfxVadc_getScanStatus
.L99:
IfxVadc_getScanStatus:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   331  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   332      IfxVadc_Status status = IfxVadc_Status_noError;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   333  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   334      if (group->ASPND.U)
	ld.w	d15,[a4]172
.L562:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   335      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   336          return IfxVadc_Status_channelsStillPending;
	mov	d2,#6
.L563:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   337      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   338      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   339      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   340          return status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   341      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   342  }
	cmovn	d2,d15,#0
	ret
.L274:
	
__IfxVadc_getScanStatus_function_end:
	.size	IfxVadc_getScanStatus,__IfxVadc_getScanStatus_function_end-IfxVadc_getScanStatus
.L140:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getSrcAddress',code,cluster('IfxVadc_getSrcAddress')
	.sect	'.text.IfxVadc.IfxVadc_getSrcAddress'
	.align	2
	
	.global	IfxVadc_getSrcAddress

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   343  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   344  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   345  volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
; Function IfxVadc_getSrcAddress
.L101:
IfxVadc_getSrcAddress:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   346  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   347      Ifx_SRC_SRCR *base;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   348  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   349      if (IfxVadc_SrcNr_shared0 <= index)
	jlt.u	d5,#4,.L49
.L678:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   350      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   351          index -= 4;
	add	d5,#-4
.L679:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   352  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   353          if ((group & 0x1) != 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   354          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   355              group = IfxVadc_GroupId_global0; /* FIXME */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   356          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   357          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   358          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   359              group = IfxVadc_GroupId_global0;    /* Shared interrupt common 0 is used */
	mov	d4,#2
.L49:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   360          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   361      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   362      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   363      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   364          /* do nothing */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   365      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   366  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   367      base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
	sha	d4,#2
	movh.a	a15,#@his(IfxVadc_cfg_srcAddresses)
.L476:
	add	d5,d4
	lea	a15,[a15]@los(IfxVadc_cfg_srcAddresses)
.L477:
	addsc.a	a15,a15,d5,#2
	ld.w	d15,[a15]
.L680:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   368  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   369      return &(base[0]);
	mov.a	a2,d15
.L681:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   370  }
	ret
.L325:
	
__IfxVadc_getSrcAddress_function_end:
	.size	IfxVadc_getSrcAddress,__IfxVadc_getSrcAddress_function_end-IfxVadc_getSrcAddress
.L195:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initialiseAdcArbiterClock',code,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.text.IfxVadc.IfxVadc_initialiseAdcArbiterClock'
	.align	2
	
	.global	IfxVadc_initialiseAdcArbiterClock

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   371  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   372  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   373  void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
; Function IfxVadc_initialiseAdcArbiterClock
.L103:
IfxVadc_initialiseAdcArbiterClock:	.type	func
	mov.aa	a15,a4
.L481:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   374  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   375      Ifx_VADC_GLOBCFG tempGLOBCFG;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   376      tempGLOBCFG.U       = vadc->GLOBCFG.U;
	ld.w	d8,[a15]128
.L480:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   377      tempGLOBCFG.B.DIVD  = arbiterClockDivider;
	extr.u	d15,d8,#8,#8
.L686:
	insert	d15,d15,d4,#0,#2
.L687:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   378      tempGLOBCFG.B.DIVWC = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   379      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
.L478:
	or	d15,#128
.L688:
	insert	d8,d8,d15,#8,#8
	call	IfxVadc_enableAccess
.L479:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   380      vadc->GLOBCFG.U     = tempGLOBCFG.U;
	st.w	[a15]128,d8
.L689:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   381      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_7
.L482:
	j	IfxVadc_disableAccess
.L329:
	
__IfxVadc_initialiseAdcArbiterClock_function_end:
	.size	IfxVadc_initialiseAdcArbiterClock,__IfxVadc_initialiseAdcArbiterClock_function_end-IfxVadc_initialiseAdcArbiterClock
.L200:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initialiseAdcConverterClock',code,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.text.IfxVadc.IfxVadc_initialiseAdcConverterClock'
	.align	2
	
	.global	IfxVadc_initialiseAdcConverterClock

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   382  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   383  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   384  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   385  void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
; Function IfxVadc_initialiseAdcConverterClock
.L105:
IfxVadc_initialiseAdcConverterClock:	.type	func
	mov.aa	a15,a4
.L486:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   386  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   387      Ifx_VADC_GLOBCFG tempGLOBCFG;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   388      tempGLOBCFG.U       = vadc->GLOBCFG.U;
	ld.w	d15,[a15]128
.L485:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   389      tempGLOBCFG.B.DIVA  = converterClockDivider;
	insert	d15,d15,d4,#0,#5
.L694:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   390      tempGLOBCFG.B.DIVWC = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   391      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
.L483:
	insert	d15,d15,#1,#15,#1
	call	IfxVadc_enableAccess
.L484:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   392      vadc->GLOBCFG.U     = tempGLOBCFG.U;
	st.w	[a15]128,d15
.L695:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   393      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_7
.L487:
	j	IfxVadc_disableAccess
.L333:
	
__IfxVadc_initialiseAdcConverterClock_function_end:
	.size	IfxVadc_initialiseAdcConverterClock,__IfxVadc_initialiseAdcConverterClock_function_end-IfxVadc_initialiseAdcConverterClock
.L205:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initializeFAdcD',code,cluster('IfxVadc_initializeFAdcD')
	.sect	'.text.IfxVadc.IfxVadc_initializeFAdcD'
	.align	2
	
	.global	IfxVadc_initializeFAdcD

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   394  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   395  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   396  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   397  uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
; Function IfxVadc_initializeFAdcD
.L107:
IfxVadc_initializeFAdcD:	.type	func
	mov.aa	a15,a4
.L489:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   398  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   399      uint32 divD;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   400      uint32 result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   401      uint32 fadc = IfxScuCcu_getSpbFrequency();
	mov	d15,d4
	call	IfxScuCcu_getSpbFrequency
.L488:
	ftouz	d8,d2
.L491:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   403      divD   = (fadc / fAdcD - 1);
	div.u	e0,d8,d15
.L700:
	add	d15,d0,#-1
.L490:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   404  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   405      divD   = __minu(divD, 0x3u);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   406  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   407      result = fadc / (divD + 1);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   408      IfxVadc_initialiseAdcArbiterClock(vadc, divD);
	min.u	d15,d15,#3
	mov.aa	a4,a15
.L492:
	mov	d4,d15
	call	IfxVadc_initialiseAdcArbiterClock
.L494:
	add	d15,#1
.L493:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   409      return result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   410  }
	div.u	e2,d8,d15
	ret
.L337:
	
__IfxVadc_initializeFAdcD_function_end:
	.size	IfxVadc_initializeFAdcD,__IfxVadc_initializeFAdcD_function_end-IfxVadc_initializeFAdcD
.L210:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initializeFAdcI',code,cluster('IfxVadc_initializeFAdcI')
	.sect	'.text.IfxVadc.IfxVadc_initializeFAdcI'
	.align	2
	
	.global	IfxVadc_initializeFAdcI

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   411  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   412  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   413  uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
; Function IfxVadc_initializeFAdcI
.L109:
IfxVadc_initializeFAdcI:	.type	func
	mov.aa	a15,a4
.L496:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   414  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   415      uint32 divA;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   416      uint32 result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   417      uint32 fadc = IfxScuCcu_getSpbFrequency();
	mov	d15,d4
	call	IfxScuCcu_getSpbFrequency
.L495:
	ftouz	d0,d2
.L498:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   418  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   419      /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   420      divA   = (fadc << 2) / fAdcI;
	sh	d1,d0,#2
.L705:
	div.u	e2,d1,d15
.L706:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   421  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   422      divA   = (divA + 2) >> 2; /* Round to nearest integer */
	add	d15,d2,#2
.L497:
	sh	d15,#-2
.L707:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   423      divA   = __minu(divA - 1, 0x1Fu);
	add	d15,#-1
.L708:
	min.u	d4,d15,#31
.L500:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   424      result = fadc / (divA + 1);
	add	d15,d4,#1
.L709:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   425  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   426      if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
	div.u	e8,d0,d15
	ld.w	d1,.4.cnt
.L501:
	jge.u	d1,d8,.L52
.L710:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   427      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   428          divA   = __minu(divA + 1, 0x1Fu);
	min.u	d4,d15,#31
.L711:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   429  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   430          result = fadc / (divA + 1);
	add	d15,d4,#1
.L712:
	div.u	e0,d0,d15
.L499:
	mov	d8,d0
.L52:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   431      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   432      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   433      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   434          /* do nothing */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   435      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   437      if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
	ld.w	d15,.5.cnt
.L713:
	ld.w	d0,.6.cnt
.L714:
	sub	d15,d8,d15
.L715:
	jge.u	d0,d15,.L53
.L716:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   438      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   439          result = 0;             /* Min / Max FAdcI frequency */
	mov	d8,#0
	j	.L54
.L53:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   440      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   441      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   442      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   443          IfxVadc_initialiseAdcConverterClock(vadc, divA);
	mov.aa	a4,a15
.L502:
	call	IfxVadc_initialiseAdcConverterClock
.L54:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   444      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   445  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   446      return result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   447  }
	mov	d2,d8
	ret
.L342:
	
__IfxVadc_initializeFAdcI_function_end:
	.size	IfxVadc_initializeFAdcI,__IfxVadc_initializeFAdcI_function_end-IfxVadc_initializeFAdcI
.L215:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_isPostCalibration',code,cluster('IfxVadc_isPostCalibration')
	.sect	'.text.IfxVadc.IfxVadc_isPostCalibration'
	.align	2
	
	.global	IfxVadc_isPostCalibration

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   448  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   449  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   450  boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
; Function IfxVadc_isPostCalibration
.L111:
IfxVadc_isPostCalibration:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   451  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   452      boolean pcEnabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   453  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   454      switch (group)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   455      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   456      case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
	jeq	d4,#0,.L56
.L721:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   457          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   458      case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
	jeq	d4,#1,.L57
.L722:
	j	.L58
.L56:
	ld.bu	d15,[a4]130
.L723:
	and	d15,#1
	j	.L59
.L57:
	ld.bu	d15,[a4]130
	extr.u	d15,d15,#1,#1

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   459          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   460      default: pcEnabled                = FALSE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   461          break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   462      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   463  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   464      return pcEnabled;
.L59:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   465  }
	eq	d2,d15,#0
	ret
.L58:
	mov	d2,#0
	ret
.L348:
	
__IfxVadc_isPostCalibration_function_end:
	.size	IfxVadc_isPostCalibration,__IfxVadc_isPostCalibration_function_end-IfxVadc_isPostCalibration
.L220:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_resetKernel',code,cluster('IfxVadc_resetKernel')
	.sect	'.text.IfxVadc.IfxVadc_resetKernel'
	.align	2
	
	.global	IfxVadc_resetKernel

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   466  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   467  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   468  void IfxVadc_resetKernel(Ifx_VADC *vadc)
; Function IfxVadc_resetKernel
.L113:
IfxVadc_resetKernel:	.type	func
	mov.aa	a15,a4
.L504:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   469  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   470      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L503:
	mov	d8,d2
.L506:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   471  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   472      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L505:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   473      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_7
.L507:
	call	IfxVadc_enableAccess
.L509:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   474      vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
	ld.bu	d15,[a15]48
.L728:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   475      vadc->KRST0.B.RST = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   476      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L510:
	or	d15,#1
	st.b	[a15]48,d15
.L729:
	ld.bu	d15,[a15]52
.L730:
	or	d15,#1
	st.b	[a15]52,d15
.L731:
	call	IfxScuWdt_setCpuEndinit

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   477  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   478      while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
.L62:
	ld.bu	d15,[a15]52
.L732:
	jz.t	d15:1,.L62
.L733:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   479  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   480      {}
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   481  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   482      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L734:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   483      vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
	ld.bu	d15,[a15]44
.L735:
	or	d15,#1
	st.b	[a15]44,d15
.L508:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   484      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_7
.L511:
	call	IfxVadc_disableAccess
.L512:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   485      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L513:
	j	IfxScuWdt_setCpuEndinit
.L352:
	
__IfxVadc_resetKernel_function_end:
	.size	IfxVadc_resetKernel,__IfxVadc_resetKernel_function_end-IfxVadc_resetKernel
.L225:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_selectPowerSupplyVoltage',code,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.text.IfxVadc.IfxVadc_selectPowerSupplyVoltage'
	.align	2
	
	.global	IfxVadc_selectPowerSupplyVoltage

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   486  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   487  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   488  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   489  void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
; Function IfxVadc_selectPowerSupplyVoltage
.L115:
IfxVadc_selectPowerSupplyVoltage:	.type	func
	mov.aa	a15,a4
.L517:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   490  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   491      Ifx_VADC_GLOBCFG tempGLOBCFG;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   492      tempGLOBCFG.U       = vadc->GLOBCFG.U;
	ld.w	d8,[a15]128
.L516:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   493      tempGLOBCFG.B.LOSUP = supplyVoltage;
	extr.u	d15,d8,#8,#8
.L740:
	insert	d15,d15,d4,#6,#1
.L741:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   494      tempGLOBCFG.B.DIVWC = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   495      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
.L514:
	or	d15,#128
.L742:
	insert	d8,d8,d15,#8,#8
	call	IfxVadc_enableAccess
.L515:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   496      vadc->GLOBCFG.U     = tempGLOBCFG.U;
	st.w	[a15]128,d8
.L743:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   497      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_7
.L518:
	j	IfxVadc_disableAccess
.L355:
	
__IfxVadc_selectPowerSupplyVoltage_function_end:
	.size	IfxVadc_selectPowerSupplyVoltage,__IfxVadc_selectPowerSupplyVoltage_function_end-IfxVadc_selectPowerSupplyVoltage
.L230:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_setArbiterPriority',code,cluster('IfxVadc_setArbiterPriority')
	.sect	'.text.IfxVadc.IfxVadc_setArbiterPriority'
	.align	2
	
	.global	IfxVadc_setArbiterPriority

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   498  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   499  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   500  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   501  void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
; Function IfxVadc_setArbiterPriority
.L117:
IfxVadc_setArbiterPriority:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   502  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   503      if (slotEnable != FALSE)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   504      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   505          vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
	add	d0,d7,#24
.L594:
	jeq	d4,#0,.L63
.L595:
	sha	d4,d4,d0
	ld.w	d15,[a4]4
.L521:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   506          vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
	sh	d7,#2
.L520:
	or	d15,d4
	st.w	[a4]4,d15
.L596:
	mov	d0,#3
.L597:
	ld.w	d15,[a4]4
.L598:
	sh	d0,d0,d7
.L599:
	mov	d1,#-1
	xor	d0,d1
.L600:
	and	d15,d0
	st.w	[a4]4,d15
.L601:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   507          vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   508  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   509          if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   510          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   511              vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
	mov	d0,#1
.L602:
	ld.w	d15,[a4]4
.L603:
	sha	d5,d5,d7
.L519:
	add	d7,#3
.L604:
	or	d15,d5
	st.w	[a4]4,d15
.L605:
	sh	d0,d0,d7
.L606:
	jeq	d6,#0,.L64
.L607:
	ld.w	d15,[a4]4
.L608:
	or	d15,d0
	j	.L65
.L64:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   512          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   513          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   514          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   515              vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
	ld.w	d15,[a4]4
.L609:
	xor	d0,d1
.L610:
	and	d15,d0
	j	.L66
.L63:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   516          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   517      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   518      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   519      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   520          vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
	mov	d1,#1
	ld.w	d15,[a4]4
.L611:
	sh	d1,d1,d0
.L612:
	mov	d0,#-1
	xor	d1,d0
.L613:
	and	d15,d1
.L65:
.L66:
	st.w	[a4]4,d15
.L614:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   521      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   522  }
	ret
.L288:
	
__IfxVadc_setArbiterPriority_function_end:
	.size	IfxVadc_setArbiterPriority,__IfxVadc_setArbiterPriority_function_end-IfxVadc_setArbiterPriority
.L165:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_setScan',code,cluster('IfxVadc_setScan')
	.sect	'.text.IfxVadc.IfxVadc_setScan'
	.align	2
	
	.global	IfxVadc_setScan

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   523  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   524  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   525  void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
; Function IfxVadc_setScan
.L119:
IfxVadc_setScan:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   526  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   527      /* select channels which should take part in the scan sequence */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   528      /* the mask allows to specify the channels which should be enabled/disabled */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   529      group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
	mov	d0,#-1
	ld.w	d15,[a4]168
.L568:
	xor	d0,d5
.L569:
	and	d15,d0
.L570:
	and	d4,d5
.L522:
	or	d15,d4
	st.w	[a4]168,d15
.L571:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   530  }
	ret
.L276:
	
__IfxVadc_setScan_function_end:
	.size	IfxVadc_setScan,__IfxVadc_setScan_function_end-IfxVadc_setScan
.L145:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_startupCalibration',code,cluster('IfxVadc_startupCalibration')
	.sect	'.text.IfxVadc.IfxVadc_startupCalibration'
	.align	2
	
	.global	IfxVadc_startupCalibration

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   531  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   532  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   533  void IfxVadc_startupCalibration(Ifx_VADC *vadc)
; Function IfxVadc_startupCalibration
.L121:
IfxVadc_startupCalibration:	.type	func
	mov.aa	a15,a4
.L523:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   534  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   535      boolean calibrationRunning;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   536      uint8   adcCalGroupNum;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   537  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   538      /* Start calibration */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   539      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
	call	IfxVadc_enableAccess
.L365:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    24   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    25   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    26   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    27   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    28   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    29   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    30   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    31   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    32   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    33   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    34   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    35   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    36   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    37   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    38   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    39   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    40   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    41   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    42   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    43   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    44   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    46  #ifndef IFXVADC_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    47  #define IFXVADC_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    48  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    49  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    50  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    52  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    53  #include "_Impl/IfxVadc_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    54  #include "_PinMap/IfxVadc_PinMap.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    55  #include "IfxVadc_bf.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    56  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    57  #include "Scu/Std/IfxScuCcu.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    58  #include "Scu/Std/IfxScuWdt.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    59  #include "IfxCcu6_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    60  #include "IfxCcu6_bf.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    61  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    62  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    63  /*--------------------------------Enumerations--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    64  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    65  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    66  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    67   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    68  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    69   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    70  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    71  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    72      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    73      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    74      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    75      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    76  } IfxVadc_AnalogConverterMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    77  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    78  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    79   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    80  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    81  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    82      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    83      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    84      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    85      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    86  } IfxVadc_ArbitrationRounds;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    88  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    89   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    91  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    92      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    93      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    94      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    95      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    96      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    97      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    98      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    99      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   100      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   101      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   102      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   103      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   104      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   105      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   106      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   107      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   108  } IfxVadc_BoundaryExtension;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   109  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   110  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   112  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   113  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   118  } IfxVadc_BoundarySelection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   119  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   120  /** \brief VADC Channels
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   121   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   122  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   123  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   124      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   125      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   126      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   127      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   128      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   129      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   130      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   131      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   132      IfxVadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   133      IfxVadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   134      IfxVadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   135      IfxVadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   136      IfxVadc_ChannelId_11   = 11   /**< \brief Channel 11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   137  } IfxVadc_ChannelId;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   138  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   139  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   140   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   141  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   142  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   143      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   144      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   145  } IfxVadc_ChannelReference;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   146  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   147  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   148   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   149  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   150  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   151      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   152      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   153      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   154      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   155  } IfxVadc_ChannelResolution;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   156  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   157  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   158   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   159  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   160  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   161      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   162      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   163      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   164      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   165      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   166      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   169      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   170      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   171      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   172      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   173      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   174      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   175      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   176      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   177  } IfxVadc_ChannelResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   178  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   179  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   180   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   181   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   182  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   183  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   184      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   185      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   186                                                         * associated channel for EMUX control */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   187  } IfxVadc_ChannelSelectionStyle;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   189  /** \brief type of conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   190   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   191  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   192  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   193      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   194  } IfxVadc_ConversionType;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   195  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   196  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   197   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   199  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   200  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   201      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   202      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   203  } IfxVadc_EmuxCodingScheme;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   204  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   205  /** \brief Specifies the Emux interface
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   206   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   207  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   208  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   209      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   210      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   211  } IfxVadc_EmuxInterface;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   212  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   213  /** \brief External Multiplexer sample time control
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   214   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   215   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   216  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   217  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   218      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   219      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   220  } IfxVadc_EmuxSampleTimeControl;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   221  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   222  /** \brief specifies the External Channel Start select value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   223   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   224   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   225  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   226  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   227      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   228      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   229      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   230      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   231      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   232      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   233      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   234      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   235  } IfxVadc_EmuxSelectValue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   236  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   237  /** \brief Specifies External Multiplexer Mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   238   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   239   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   240  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   241  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   242      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   243      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   244      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   245      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   246  } IfxVadc_ExternalMultiplexerMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   247  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   248  /** \brief FIFO mode enable
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   249   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   250  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   251  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   252      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   253      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   254      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   255      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   256  } IfxVadc_FifoMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   257  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   258  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   259   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   260  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   261  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   262      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   263      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   264      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   265      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   266  } IfxVadc_GatingMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   267  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   268  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   269   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   270  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   271  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   272      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   273      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   274      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   275      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   276      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   277      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   278      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   279      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   280      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   281      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   282      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   283      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   284      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   285      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   286      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   287      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   288  } IfxVadc_GatingSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   289  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   290  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   291   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   292  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   293  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   294      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   295      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   296      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   297      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   298  } IfxVadc_InputClasses;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   299  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   300  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   301   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   302  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   303  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   304      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   305      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   306      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   307      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   308  } IfxVadc_LimitCheck;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   309  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   310  /** \brief Low Power Supply Voltage Select
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   311   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   312  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   313  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   314      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   315      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   316  } IfxVadc_LowSupplyVoltageSelect;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   318  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   320  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   321  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   322      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   323      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   324      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   325      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   326      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   327      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   328      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   329      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   330      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   331      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   332      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   333      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   334      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   335      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   336      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   337      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   338      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   339      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   340      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   341      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   342      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   343      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   344      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   345      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   381      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   382      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   383      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   384      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   385  } IfxVadc_Protection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   386  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   387  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   388   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   389  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   390  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   391      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   392      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   393      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   394      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   395  } IfxVadc_RequestSlotPriority;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   396  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   397  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   398   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   399  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   400  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   401      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   402      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   403  } IfxVadc_RequestSlotStartMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   404  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   405  /** \brief Request sources
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   406   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   407  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   408  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   409      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   410      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   411      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   412  } IfxVadc_RequestSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   413  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   414  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   415   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   416   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   417  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   418  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   419      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   420      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   421  } IfxVadc_SleepMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   422  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   423  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   424   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   425  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   426  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   427      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   428      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   429      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   430      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   431      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   432      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   433      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   434      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   435  } IfxVadc_SrcNr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   437  /** \brief API return values defined in
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   438   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   439   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   440   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   441  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   442  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   443      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   444      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   445      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   446      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   447      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   448      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   449      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   450  } IfxVadc_Status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   451  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   452  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   453   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   454  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   455  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   456      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   457      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   458      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   459      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   460  } IfxVadc_TriggerMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   462  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   463   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   464  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   465  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   466      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   467      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   468      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   469      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   470      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   471      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   472      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   473      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   474      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   475      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   476      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   477      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   478      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   479      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   480      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   481      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   482  } IfxVadc_TriggerSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   483  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   484  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   485  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   486  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   487   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   488  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   489  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   490  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   491  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   492  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   493  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   494   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   495   * \param resultIdx result register index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   496   * \param waitForRead wait for read mode enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   497   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   498   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   499  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   500  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   501  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   502   * \param vadc pointer to the VADC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   503   * \param waitForRead wait for read mode enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   504   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   505   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   506  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   507  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   508  /** \brief Enables the background sacn external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   509   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   510   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   511   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   512  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   513  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   514  /** \brief Gets the background scan gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   515   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   516   * \return background scan gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   517   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   518  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   519  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   520  /** \brief Gets the gating input selection.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   521   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   522   * \return background scan gating input selection.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   523   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   524  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   525  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   526  /** \brief Gets the requested background scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   527   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   528   * \return requested background scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   529   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   530  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   531  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   532  /** \brief Gets the requested background scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   533   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   534   * \return requested background scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   535   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   536  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   537  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   538  /** \brief Gets the background scan trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   539   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   540   * \return Gets the background scan external trigger source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   541   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   542  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   543  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   544  /** \brief Gets the background scan external trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   545   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   546   * \return background scan external trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   547   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   548  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   549  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   550  /** \brief get global input class resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   551   * \param vadc Pointer to the VADC Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   552   * \param inputClassNum global input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   553   * \return ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   554   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   555  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   556  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   557  /** \brief return conversion result stored in the Global result Register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   558   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   559   * \return global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   560   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   561   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   562   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   563   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   564   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   565   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   566   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   567   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   568   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   569   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   570   * // configure background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   571   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   572   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   573   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   574   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   575   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   576   * // start the background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   577   * IfxVadc_startBackgroundScan(vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   578   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   579   * Ifx_VADC_GLOBRES result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   580   * result = IfxVadc_getGlobalResult (vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   581   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   582   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   583   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   584   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   585  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   586  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   587  /** \brief get global input class sample time in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   588   * \param vadc Pointer to the VADC Group Register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   589   * \param inputClassNum ADC input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   590   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   591   * \return ADC input class channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   592   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   593  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   594  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   595  /** \brief Get conversion result for the group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   596   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   597   * \param results pointer to scaled conversion results
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   598   * \param resultOffset offset for the first result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   599   * \param numResults number of results
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   600   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   601   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   602   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   603   * Ifx_VADC* vadc = &MODULE_VADC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   604   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   605   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   606   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   607   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   608   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   609   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   610   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   611   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   612   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   613   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   614   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   615   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   616   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   617   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   618   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   619   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   620   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   621   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   622   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   623   * // fetch the 2 results of conversion for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   624   * Ifx_VADC_RES results[10];
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   625   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   626   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   627   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   628   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   629  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   630  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   631  /** \brief Get conversion result (Function does not care about the alignment)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   632   * value = raw * gain + offset.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   633   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   634   * \param resultIdx result register index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   635   * \return scaled Conversion result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   636   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   637   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   638   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   639   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   640   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   641   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   642   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   643   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   644   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   645   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   646   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   647   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   648   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   649   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   650   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   651   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   652   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   653   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   654   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   655   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   656   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   657   * // fetch the result of conversion from result register 0 for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   658   * Ifx_VADC_RES result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   659   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   660   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   661   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   662   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   663  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   664  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   665  /** \brief Returns the auto background scan status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   666   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   667   * \return TRUE if enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   668   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   669  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   670  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   671  /** \brief Returns the background scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   672   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   673   * \return background scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   674   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   675  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   676  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   677  /** \brief Enables/Disables continuous background auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   678   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   679   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   680   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   681   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   682  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   683  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   684  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   685   * \param vadc pointer to the VADC module registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   686   * \param groupId group index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   687   * \param channels specifies the channels which should be enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   688   * \param mask specifies the channels which should be modified
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   689   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   690   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   691   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   692   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   693   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   694   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   695   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   696   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   697   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   698   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   699   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   700   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   701   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   702   * // configure background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   703   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   704   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   705   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   706   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   707   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   708   * // start the background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   709   * IfxVadc_startBackgroundScan(vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   710   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   711   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   712   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   713  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   714  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   715  /** \brief Sets the background scan slot gating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   716   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   717   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   718   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   719   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   720   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   721  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   722  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   723  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   724   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   725   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   726   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   727   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   728   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   729  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   730  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   731  /** \brief Starts a background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   732   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   733   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   734   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   735   * \see IfxVadc_setBackgroundScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   736   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   737   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   738  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   739  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   740  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   741  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   742  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   743  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   744  /** \brief Gives the background scan status for a group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   745   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   746   * \return IfxVadc_Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   747   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   748  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   749  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   750  /** \brief Get conversion result (Function does not care about the alignment)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   751   * value = raw * gain + offset.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   752   * \param vadc VADC module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   753   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   754   * \param channel channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   755   * \param sourceType type of request source
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   756   * \return scaled Conversion result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   757   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   758   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   759   * Ifx_VADC vadc;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   760   * vadc.vadc = &MODULE_VADC;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   761   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   762   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   763   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   764   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   765   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   766   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   767   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   768   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   769   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   770   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   771   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   772   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   773   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   774   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   775   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   776   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   777   * // fetch the result of conversion for channel 2 of group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   778   * Ifx_VADC_RESresult2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   779   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   780   * Ifx_VADC_RESresult5;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   781   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   782   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   783   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   784   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   785  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   786  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   787  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   788  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   789  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   790   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   791  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   792  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   794  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   795  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   796  /** \brief Disables the scan slot external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   797   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   798   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   799   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   800  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   801  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   802  /** \brief Enables the scan slot external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   803   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   804   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   805   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   806  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   807  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   808  /** \brief Gets the request scan slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   809   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   810   * \return requested scan slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   811   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   812  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   813  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   814  /** \brief Gets the request scan slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   815   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   816   * \return request scan slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   817   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   818  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   819  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   820  /** \brief Gets the request scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   821   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   822   * \return request scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   823   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   824  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   825  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   826  /** \brief Gets the request scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   827   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   828   * \return request scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   829   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   830  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   831  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   832  /** \brief Gets the requested scan slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   833   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   834   * \return requested scan slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   835   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   836  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   837  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   838  /** \brief Gets the requested scan slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   839   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   840   * \return requested scan slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   841   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   842  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   843  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   844  /** \brief Gets the auto scan enable status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   845   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   846   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   847   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   848  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   849  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   850  /** \brief Returns the scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   851   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   852   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   853   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   854  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   855  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   856  /** \brief Enables/Disables continuous auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   857   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   858   * \param autoscanEnable whether autoscan is enabled or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   859   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   860   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   861  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   862  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   863  /** \brief Sets the scan slot gating configuration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   864   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   865   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   866   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   867   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   868   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   869  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   870  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   871  /** \brief Sets the scan slot trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   872   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   873   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   874   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   875   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   876   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   877  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   878  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   879  /** \brief Starts an autoscan on the specified group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   880   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   881   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   882   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   883   * See \ref IfxVadc_setScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   884   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   885   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   886  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   887  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   888  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   889  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   890  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   891  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   892  /** \brief Gives the scan status for a group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   893   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   894   * \return IfxVadc_Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   895   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   896  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   897  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   898  /** \brief Configures an (auto-)scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   899   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   900   * \param channels specifies the channels which should be enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   901   * \param mask specifies the channels which should be modified
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   902   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   903   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   904   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   905   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   906   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   907   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   908   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   909   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   910   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   911   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   912   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   913   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   914   * // enable Auto-Scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   915   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   916   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   917   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   918   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   919   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   920   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   921   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   922  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   923  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   924  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   925  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   926  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   927   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   928  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   929  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   930  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   931  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   932  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   933  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   934   * refill incase of aborted conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   935   * source interrupt enable/disable
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   936   * external trigger control of the aborted conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   937   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   938   * \param channel specifies channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   939   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   940   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   941   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   942   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   943   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   944   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   945   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   946   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   947   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   948   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   949   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   950   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   951  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   952  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   953  /** \brief Clears all the queue entries including backup stage.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   954   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   955   * \param flushQueue Whether queue is cleared or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   956   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   957   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   958  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   959  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   960  /** \brief Disables the external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   961   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   962   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   963   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   964  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   965  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   966  /** \brief Enables the external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   967   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   968   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   969   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   970  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   971  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   972  /** \brief Gets the requested queue slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   973   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   974   * \return requested queue slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   975   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   976  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   977  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   978  /** \brief Gets the requested queue slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   979   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   980   * \return requested queue slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   981   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   982  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   983  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   984  /** \brief Gets the request queue slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   985   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   986   * \return requested queue slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   987   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   988  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   989  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   990  /** \brief Gets the requested queue slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   991   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   992   * \return requested queue slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   993   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   994  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   995  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   996  /** \brief Gets the requested queue slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   997   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   998   * \return requested queue slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   999   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1000  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1001  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1002  /** \brief Gets the requested queue slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1003   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1004   * \return requested queue slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1005   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1006  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1007  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1008  /** \brief Returns the queue slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1009   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1010   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1011   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1012  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1013  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1014  /** \brief Sets the gating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1015   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1016   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1017   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1018   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1019   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1020  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1021  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1022  /** \brief Sets the trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1023   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1024   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1025   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1026   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1027   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1028  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1029  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1030  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1031   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1032   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1033   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1034  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1035  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1036  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1037  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1038  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1039  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1040  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1041   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1042   * \return status of the Queue
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1043   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1044   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1045   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1046   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1047   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1048   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1049   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1050  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1051  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1052  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1053  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1054  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1055   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1056  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1057  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1058  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1059  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1060  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1061  /** \brief Initializes a EMUX output
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1062   * \param emux the Emux Pin which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1063   * \param outputMode the pin output mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1064   * \param padDriver the pad driver mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1065   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1066   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1067  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1068  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1069  /** \brief Initializes a GxBFL output
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1070   * \param gxBfl the GxBFL Pin which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1071   * \param outputMode the pin output mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1072   * \param padDriver the pad driver mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1073   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1074   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1075  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1076  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1077  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1078  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1079  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1080   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1081  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1082  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1083  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1084  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1085  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1086  /** \brief Calculate the time using analog frequency.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1087   * \param analogFrequency analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1088   * \param sampleTime sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1089   * \return sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1090   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1091  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1092  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1093  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1094  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1095  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1096  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1097  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1098   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1099   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1100   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1101  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1102  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1103  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1104   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1105   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1106   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1107  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1108  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1109  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1110  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1111  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1112   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1114  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1115  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1116  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1117  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1118  /** \brief Clears the all group requests.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1119   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1120   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1121   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1122  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1124  /** \brief Gets the ADC group arbitration round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1125   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1126   * \return ADC group arbitration round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1127   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1128  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1129  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1130  /** \brief Gets the channel esult service request node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1131   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1132   * \return channel result service request node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1133   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1134  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1135  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1136  /** \brief Gets the channel esult service request node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1137   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1138   * \return channel result service request node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1139   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1140  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1141  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1142  /** \brief Gets the channel service request node pointer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1143   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1144   * \return channel service request node pointer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1145   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1146  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1147  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1148  /** \brief Gets the configured master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1149   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1150   * \return configured master kernel index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1151   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1152  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1153  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1154  /** \brief Resets the ADC group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1155   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1156   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1157   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1158  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1159  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1160  /** \brief Sets analog converter group number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1161   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1162   * \param analogConverterMode group analog converter mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1163   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1164   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1165  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1166  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1167  /** \brief Sets the arbiter round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1168   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1169   * \param arbiterRoundLength arbiter round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1170   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1171   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1172  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1173  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1174  /** \brief Sets the ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1175   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1176   * \param inputClassNum input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1177   * \param resolution ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1178   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1179   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1180  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1181  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1182  /** \brief Sets the ADC input class sample time.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1183   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1184   * \param inputClassNum input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1185   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1186   * \param sampleTime request sample time in sec for input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1187   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1188   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1189  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1190  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1191  /** \brief Sets the master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1192   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1193   * \param masterIndex master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1194   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1195   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1196  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1197  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1198  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1199  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1200  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1201  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1202  /** \brief Sets the Arbiter slot configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1203   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1204   * \param slotEnable enable/disable of slot.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1205   * \param prio channel request priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1206   * \param mode Channel Slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1207   * \param slot channel slot Request source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1208   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1209   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1210  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1211  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1212  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1213  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1214  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1215   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1216  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1217  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1218  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1219  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1221  /** \brief Disable VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1222   * \param vadc Pointer to VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1223   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1224   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1225  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1226  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1227  /** \brief Enable VADC kernel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1228   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1229   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1230   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1231  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1232  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1233  /** \brief gets ADC Calibration Flag CAL status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1234   * \param vadc pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1235   * \param adcCalGroupNum ADC CAL group number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1236   * \return CAL group status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1237   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1238  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1239  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1240  /** \brief Gets the global control configuration value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1241   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1242   * \return global control configuration value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1244  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1246  /** \brief get SUCAL bit field status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1247   * \param vadc Pointer to VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1248   * \return Indicate the start-up calibration phase
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1249   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1250  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1251  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1252  /** \brief initiates the calibration pulse phase.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1253   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1254   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1255   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1256  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1257  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1258  /** \brief Sets the channel conversion mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1259   * \param vadc pointer to VADC module registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1260   * \param inputClassNum global input class  number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1261   * \param resolution ADC channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1262   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1263   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1264  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1265  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1266  /** \brief Sets the sample time of ADC global class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1267   * \param vadc pointer to VADC module registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1268   * \param inputClassNum global input class  number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1269   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1270   * \param sampleTime the requested sample time for input class in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1271   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1272   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1273  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1274  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1275  /** \brief Sets the sensitivity of the module to sleep signal
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1276   * \param vadc pointer to VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1277   * \param mode mode selection (enable/disable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1278   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1279   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1280  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1281  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1282  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1283  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1284  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1285  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1286  /** \brief Disable write access to the VADC config/control registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1287   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1288   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1289   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1290   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1291  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1292  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1293  /** \brief Disables the post calibration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1294   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1295   * \param group Index of the group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1296   * \param disable disable or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1297   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1298   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1299  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1300  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1301  /** \brief Enable write access to the VADC config/control registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1302   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1303   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1304   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1305   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1306  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1307  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1308  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1309   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1310   * \param ccu6Num selects CCU60 or CCU61
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1311   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1312   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1313  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1314  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1315  /** \brief Module Frequency in Hz
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1316   * \return Module Frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1317   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1318  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1319  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1320  /** \brief Gives the SRC source address.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1321   * \param group Index of the group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1322   * \param index SRC number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1323   * \return SRC source address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1324   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1325  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1326  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1327  /** \brief Initialises ADC arbiter clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1328   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1329   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1330   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1331   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1332  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1333  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1334  /** \brief Initialises the ADC Converter clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1335   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1336   * \param converterClockDivider ADC converter clock divider.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1337   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1338   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1339  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1340  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1341  /** \brief Configure the FadcD vadc digital clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1342   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1343   * \param fAdcD ADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1344   * \return calculated ADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1345   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1346  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1347  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1348  /** \brief Configure the ADC analog clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1349   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1350   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1351   * \return ADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1352   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1353  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1354  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1355  /** \brief Return the post calibration status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1356   * \param vadc Pointer to VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1357   * \param group specifies Group ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1358   * \return TRUE if the post calibration is enabled for the group else false
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1359   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1360  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1361  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1362  /** \brief Resets the kernel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1363   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1364   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1365   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1366  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1367  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1368  /** \brief Select Low Power Supply Voltage
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1369   * \param vadc Pointer to Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1370   * \param supplyVoltage Select Supply Voltage
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1371   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1372   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1373  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1374  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1375  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1376   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1377   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1378   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1379  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1380  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1381  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1382  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1383  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1384   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1386  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1387  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1388  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1389  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1390  /** \brief Clears the channel request.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1391   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1392   * \param channelId channel id whose request to be cleared.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1393   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1394   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1395  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1396  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1397  /** \brief Enables the FIFO mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1398   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1399   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1400   * \param fifoMode FIFO mode .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1401   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1402   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1403  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1404  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1405  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1406   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1407   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1408   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1409   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1410  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1411  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1412  /** \brief Gets the group's assigned channels.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1413   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1414   * \return group's assigned channels.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1415   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1416  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1417  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1418  /** \brief Gets the current ADC channel control configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1419   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1420   * \param channelIndex ADC channel number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1421   * \return current ADC channel control configuration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1422   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1423  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1424  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1425  /** \brief Gets the channel input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1426   * \param vadcG pointer to VADC Group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1427   * \param channelIndex specifies channel ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1428   * \return Input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1429   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1430  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1431  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1432  /** \brief Gets the ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1433   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1434   * \param inputClassNum ADC input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1435   * \return ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1436   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1437  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1438  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1439  /** \brief Gets the ADC input class channel sample time.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1440   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1441   * \param inputClassNum ADC input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1442   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1443   * \return ADC input class channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1444   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1445  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1446  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1447  /** \brief Sets the channels with low priority as background channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1448   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1449   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1450   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1451   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1452  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1453  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1454  /** \brief Sets the target for result background source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1455   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1456   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1457   * \param globalResultUsage whether storage in global result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1458   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1459   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1460  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1462  /** \brief Selects boundary extension.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1463   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1464   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1465   * \param boundaryMode boundary extension mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1466   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1467   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1468  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1469  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1470  /** \brief Sets the channel event service request line.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1471   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1472   * \param channelSrcNr channel event Service Node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1473   * \param channel channel number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1474   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1475   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1476  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1477  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1478  /** \brief Sets the channel input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1479   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1480   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1481   * \param inputClass group input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1482   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1483   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1484  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1485  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1486  /** \brief Sets the channel event mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1487   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1488   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1489   * \param limitCheck channel event mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1490   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1491   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1492  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1493  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1494  /** \brief Sets channel as priority channel with in the group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1495   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1496   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1497   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1498   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1499  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1500  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1501  /** \brief Sets group's lower boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1502   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1503   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1504   * \param lowerBoundary group lower boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1505   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1506   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1507  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1508  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1509  /** \brief Selects the refernce input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1510   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1511   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1512   * \param reference reference input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1513   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1514   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1515  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1516  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1517  /** \brief Sets result event node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1518   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1519   * \param resultSrcNr channel result event service node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1520   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1521   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1522   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1523  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1524  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1525  /** \brief Sets result event node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1526   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1527   * \param resultSrcNr channel result event service node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1528   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1529   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1530   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1531  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1532  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1533  /** \brief Sets result store position.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1534   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1535   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1536   * \param rightAlignedStorage result store position.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1537   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1538   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1539  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1540  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1541  /** \brief Sets channel synchronization request.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1542   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1543   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1544   * \param synchonize whether channel synchronize or stand alone operation.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1545   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1546   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1547  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1548  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1549  /** \brief Sets group's upper boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1550   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1551   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1552   * \param upperBoundary group upper boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1553   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1554   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1555  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1556  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1557  /** \brief Sets the group result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1558   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1559   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1560   * \param resultRegister result register for group result storage.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1561   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1562   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1563  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1564  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1565  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1566  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1567  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1568  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1569  /** \brief get channel conversion timing
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1570   * \param vadc Pointer to VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1571   * \param group specifies the Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1572   * \param inputClass Input class used
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1573   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1574   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1575   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1576   * \return Channel conversion Time in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1577   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1578  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1579  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1580  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1581  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1582  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1583   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1584  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1585  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1586  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1587  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1588  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1589  /** \brief get global input class resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1590   * \param vadc Pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1591   * \param inputClassNum global input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1592   * \return External channel resolution for global input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1593   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1594  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1595  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1596  /** \brief Get the sample time of ADC global class for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1597   * \param vadc pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1598   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1599   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1600   * \return ADC input class external channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1601   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1602  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1603  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1604  /** \brief get the external channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1605   * \param vadcG Pointer to VADC group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1606   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1607   * \return Adc input class External channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1608   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1609  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1610  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1611  /** \brief Gets the ADC input class sample time of external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1612   * \param vadcG Pointer to Register Group space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1613   * \param inputClassNum ADC input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1614   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1615   * \return ADC input class external channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1616   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1617  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1618  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1619  /** \brief set the external channel resolution of Global class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1620   * \param vadc pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1621   * \param inputClassNum Global Input Class Number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1622   * \param resolution External Channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1623   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1624   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1625  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1626  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1627  /** \brief Sets the sample time of ADC global class for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1628   * \param vadc Pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1629   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1630   * \param analogFrequency ADC analog Frequency in HZ
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1631   * \param sampleTime the requested sample time for input class in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1632   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1633   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1634  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1635  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1636  /** \brief set the external channel resolution of ADC input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1637   * \param vadcG pointer to VADC Group Register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1638   * \param inputClassNum input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1639   * \param resolution input class external channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1640   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1641   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1642  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1643  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1644  /** \brief Sets the ADC input class sample time for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1645   * \param vadcG Pointer to VADC Group Register Space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1646   * \param inputClassNum input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1647   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1648   * \param sampleTime request sample time in sec for input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1649   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1650   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1651  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1652  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1653  /** \brief Sets the Emux Interface for a particular group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1654   * \param vadc Pointer to VADC Module Space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1655   * \param emuxInterface specifies the EmuxInterface
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1656   * \param group specifies the group ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1657   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1658   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1659  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1660  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1661  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1662  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1663  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1664  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1665  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1666   * \param vadc pointer to Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1667   * \param vadcG Pointer to VADC group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1668   * \param mode External Multiplexer mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1669   * \param channels Specifies channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1670   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1671   * \param code Output the channel number in binary code/gray code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1672   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1673   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1674   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1675   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1676  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1677  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1678  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1679  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1680  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1681  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1682  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1683  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1684  /** \brief get channel service request node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1685   * \param vadcG Pointer to VADC Group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1686   * \return channel service request node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1687   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1688  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1689  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1690  /** \brief set channel event node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1691   * \param vadcG Pointer to the Vadc group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1692   * \param channelSrcNr Service request
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1693   * \param channel specifies channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1694   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1695   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1696  IFX_INLINE void IfxVadc_setChannelEventNodePointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1697  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1698  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1699  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1700  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1701  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1702  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1703  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1704      group->QINR0.U = channel | options;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1705  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1706  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1707  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1708  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1709  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1710      uint32 ticks;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1711  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1712      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1713  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1714      if (ticks > 31)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1715      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1716          ticks = (ticks / 16) + 15;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1717      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1718  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1719      ticks = __minu(ticks, 0xFFu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1720  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1721      return ticks;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1722  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1723  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1724  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1725  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1726  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1727      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1728  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1729  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1730  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1731  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1732  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1733      vadcG->CEFCLR.U = 1 << channelId;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1734  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1735  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1736  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1737  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1738  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1739      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1740  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1741  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1742  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1743  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1744  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1745      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1746  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1747  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1748  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1749  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1750  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1751      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1752  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1753  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1754  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1755  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1756  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1757      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1758      IfxScuWdt_clearCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1759      vadc->CLC.B.DISR = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1760      IfxScuWdt_setCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1761  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1762  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1763  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1764  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1765  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1766      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1767  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1768  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1769  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1770  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1771  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1772      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1773  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1774  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1775  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1776  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1777  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1778      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1779  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1780  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1781  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1782  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1783  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1784      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1785  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1786  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1787  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1788  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1789  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1790      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1791  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1792      IfxScuWdt_clearCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1793      vadc->CLC.U = 0x00000000;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1794      IfxScuWdt_setCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1795  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1796  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1797  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1798  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1799  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1800      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1801  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1802  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1803  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1804  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1805  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1806      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1807  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1808  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1809  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1810  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1811  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1812      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1813  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1814  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1815  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1816  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1817  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1818      uint8 status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1819      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1820      return status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1821  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1822  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1823  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1824  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1825  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1826      return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1827  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1828  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1829  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1830  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1831  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1832      Ifx_VADC_G_CHASS assignChannels;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1833      assignChannels.U = vadcG->CHASS.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1834      return assignChannels;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1835  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1836  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1837  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1838  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1839  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1840      return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1841  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1842  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1843  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1844  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1845  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1846      return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1847  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1848  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1849  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1850  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1851  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1852      return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1853  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1854  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1855  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1856  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1857  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1858      return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1859  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1860  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1861  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1862  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1863  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1864      return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1865  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1866  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1867  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1868  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1869  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1870      return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1871  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1872  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1873  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1874  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1875  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1876      Ifx_VADC_CHCTR tempChctr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1877      tempChctr.U = vadcG->CHCTR[channelIndex].U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1878      return tempChctr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1879  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1880  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1881  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1882  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1883  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1884      return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1885  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1886  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1887  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1888  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1889  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1890      Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1891      resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1892      return resultServiceRequestNodePtr0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1893  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1894  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1895  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1896  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1897  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1898      Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1899      resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1900      return resultServiceRequestNodePtr1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1901  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1902  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1903  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1904  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1905  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1906      Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1907      serviceRequestNodePtr.U = vadcG->CEVNP0.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1908      return serviceRequestNodePtr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1909  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1910  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1911  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1912  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1913  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1914      Ifx_VADC_G_CEVNP1 serviceRequestNodePtr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1915      serviceRequestNodePtr.U = vadcG->CEVNP1.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1916      return serviceRequestNodePtr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1917  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1918  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1919  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1920  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1921  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1922      return (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CME;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1923  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1924  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1925  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1926  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1927  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1928      return (float32)(IFXVADC_SAMPLETIME_MIN + vadc->GLOBICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1929  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1930  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1931  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1932  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1933  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1934      return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CME;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1935  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1936  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1937  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1938  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1939  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1940      return (float32)(IFXVADC_SAMPLETIME_MIN + vadcG->ICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1941  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1942  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1943  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1944  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1945  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1946      Ifx_VADC_GLOBCFG globCfg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1947      globCfg.U = vadc->GLOBCFG.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1948      return globCfg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1949  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1950  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1951  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1952  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1953  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1954      return (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1955  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1956  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1957  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1958  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1959  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1960      Ifx_VADC_GLOBRES tmpGlobalResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1961  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1962      tmpGlobalResult.U = vadc->GLOBRES.U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1963  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1964      return tmpGlobalResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1965  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1966  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1967  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1968  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1969  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1970      uint32 sampleTime = vadc->GLOBICLASS[inputClassNum].B.STCS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1971  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1972      if (sampleTime > 16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1973      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1974          sampleTime = (sampleTime - 15) * 16;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1975      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1976  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1977      return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1978  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1979  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1980  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1981  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1982  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1983      return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1984  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1985  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1986  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1987  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1988  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1989      uint32 idx;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1990  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1991      for (idx = 0; idx < numResults; idx++)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1992      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1993          results[idx].U = group->RES[resultOffset + idx].U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1994      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1995  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1996  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1997  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1998  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1999  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2000      uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2001  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2002      if (sampleTime > 16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2003      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2004          sampleTime = (sampleTime - 15) * 16;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2005      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2006  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2007      return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2008  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2009  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2010  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2011  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2012  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2013      uint8 masterIndex = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2014      masterIndex = vadcG->SYNCTR.B.STSEL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2015      return masterIndex;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2016  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2017  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2018  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2019  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2020  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2021      return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2022  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2023  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2024  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2025  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2026  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2027      return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2028  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2029  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2030  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2031  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2032  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2033      return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2034  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2035  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2036  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2037  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2038  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2039      return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2040  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2041  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2042  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2043  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2044  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2045      return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2046  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2047  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2048  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2049  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2050  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2051      return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2052  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2053  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2054  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2055  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2056  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2057      Ifx_VADC_RES tmpResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2058  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2059      tmpResult.U = group->RES[resultIdx].U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2060  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2061      return tmpResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2062  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2063  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2064  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2065  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2066  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2067      return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2068  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2069  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2070  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2071  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2072  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2073      return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2074  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2075  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2076  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2077  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2078  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2079      return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2080  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2081  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2082  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2083  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2084  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2085      return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2086  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2087  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2088  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2089  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2090  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2091      return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2092  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2093  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2094  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2095  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2096  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2097      return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2098  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2099  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2100  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2101  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2102  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2103      return (boolean)vadc->GLOBCFG.B.SUCAL;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2104  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2105  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2106  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2107  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2108  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2109      IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2110      IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2111  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2112  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2114  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2115  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2116      IfxPort_setPinModeOutput(gxBfl->pin.port, gxBfl->pin.pinIndex, outputMode, gxBfl->select);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2117      IfxPort_setPinPadDriver(gxBfl->pin.port, gxBfl->pin.pinIndex, padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2118  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2119  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2120  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2121  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2122  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  2123      vadc->GLOBCFG.B.SUCAL = 1;
	ld.bu	d15,[a15]131
.L748:
	or	d15,#128
	st.b	[a15]131,d15
.L366:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   540      /* Set SUCAL bit */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   541      IfxVadc_initiateStartupCalibration(vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   542      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_7
.L524:
	call	IfxVadc_disableAccess

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   543  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   544      /* Wait for hardware self-test and calibration to complete */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   545      /* Wait until Calibration is done */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   546      do
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   547      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   548          calibrationRunning = FALSE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   549  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   550          for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   551          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   552              if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   553              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   554                  calibrationRunning = TRUE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   555              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   556              else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   557              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   558                  /* do nothing */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   559              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   560          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   561      } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
.L67:
	mov	d0,#0

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    24   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    25   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    26   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    27   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    28   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    29   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    30   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    31   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    32   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    33   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    34   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    35   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    36   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    37   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    38   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    39   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    40   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    41   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    42   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    43   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    44   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    46  #ifndef IFXVADC_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    47  #define IFXVADC_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    48  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    49  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    50  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    52  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    53  #include "_Impl/IfxVadc_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    54  #include "_PinMap/IfxVadc_PinMap.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    55  #include "IfxVadc_bf.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    56  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    57  #include "Scu/Std/IfxScuCcu.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    58  #include "Scu/Std/IfxScuWdt.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    59  #include "IfxCcu6_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    60  #include "IfxCcu6_bf.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    61  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    62  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    63  /*--------------------------------Enumerations--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    64  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    65  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    66  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    67   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    68  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    69   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    70  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    71  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    72      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    73      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    74      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    75      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    76  } IfxVadc_AnalogConverterMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    77  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    78  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    79   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    80  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    81  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    82      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    83      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    84      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    85      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    86  } IfxVadc_ArbitrationRounds;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    88  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    89   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    91  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    92      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    93      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    94      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    95      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    96      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    97      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    98      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    99      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   100      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   101      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   102      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   103      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   104      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   105      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   106      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   107      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   108  } IfxVadc_BoundaryExtension;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   109  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   110  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   112  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   113  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   118  } IfxVadc_BoundarySelection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   119  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   120  /** \brief VADC Channels
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   121   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   122  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   123  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   124      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   125      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   126      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   127      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   128      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   129      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   130      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   131      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   132      IfxVadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   133      IfxVadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   134      IfxVadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   135      IfxVadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   136      IfxVadc_ChannelId_11   = 11   /**< \brief Channel 11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   137  } IfxVadc_ChannelId;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   138  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   139  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   140   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   141  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   142  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   143      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   144      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   145  } IfxVadc_ChannelReference;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   146  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   147  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   148   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   149  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   150  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   151      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   152      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   153      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   154      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   155  } IfxVadc_ChannelResolution;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   156  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   157  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   158   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   159  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   160  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   161      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   162      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   163      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   164      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   165      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   166      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   169      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   170      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   171      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   172      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   173      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   174      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   175      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   176      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   177  } IfxVadc_ChannelResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   178  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   179  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   180   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   181   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   182  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   183  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   184      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   185      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   186                                                         * associated channel for EMUX control */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   187  } IfxVadc_ChannelSelectionStyle;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   189  /** \brief type of conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   190   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   191  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   192  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   193      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   194  } IfxVadc_ConversionType;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   195  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   196  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   197   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   199  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   200  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   201      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   202      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   203  } IfxVadc_EmuxCodingScheme;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   204  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   205  /** \brief Specifies the Emux interface
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   206   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   207  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   208  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   209      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   210      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   211  } IfxVadc_EmuxInterface;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   212  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   213  /** \brief External Multiplexer sample time control
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   214   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   215   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   216  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   217  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   218      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   219      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   220  } IfxVadc_EmuxSampleTimeControl;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   221  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   222  /** \brief specifies the External Channel Start select value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   223   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   224   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   225  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   226  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   227      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   228      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   229      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   230      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   231      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   232      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   233      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   234      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   235  } IfxVadc_EmuxSelectValue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   236  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   237  /** \brief Specifies External Multiplexer Mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   238   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   239   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   240  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   241  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   242      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   243      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   244      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   245      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   246  } IfxVadc_ExternalMultiplexerMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   247  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   248  /** \brief FIFO mode enable
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   249   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   250  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   251  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   252      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   253      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   254      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   255      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   256  } IfxVadc_FifoMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   257  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   258  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   259   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   260  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   261  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   262      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   263      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   264      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   265      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   266  } IfxVadc_GatingMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   267  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   268  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   269   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   270  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   271  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   272      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   273      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   274      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   275      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   276      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   277      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   278      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   279      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   280      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   281      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   282      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   283      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   284      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   285      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   286      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   287      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   288  } IfxVadc_GatingSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   289  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   290  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   291   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   292  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   293  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   294      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   295      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   296      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   297      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   298  } IfxVadc_InputClasses;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   299  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   300  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   301   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   302  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   303  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   304      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   305      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   306      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   307      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   308  } IfxVadc_LimitCheck;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   309  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   310  /** \brief Low Power Supply Voltage Select
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   311   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   312  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   313  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   314      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   315      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   316  } IfxVadc_LowSupplyVoltageSelect;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   318  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   320  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   321  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   322      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   323      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   324      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   325      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   326      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   327      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   328      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   329      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   330      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   331      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   332      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   333      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   334      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   335      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   336      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   337      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   338      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   339      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   340      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   341      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   342      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   343      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   344      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   345      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   381      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   382      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   383      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   384      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   385  } IfxVadc_Protection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   386  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   387  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   388   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   389  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   390  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   391      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   392      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   393      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   394      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   395  } IfxVadc_RequestSlotPriority;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   396  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   397  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   398   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   399  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   400  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   401      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   402      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   403  } IfxVadc_RequestSlotStartMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   404  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   405  /** \brief Request sources
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   406   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   407  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   408  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   409      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   410      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   411      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   412  } IfxVadc_RequestSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   413  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   414  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   415   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   416   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   417  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   418  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   419      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   420      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   421  } IfxVadc_SleepMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   422  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   423  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   424   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   425  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   426  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   427      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   428      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   429      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   430      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   431      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   432      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   433      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   434      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   435  } IfxVadc_SrcNr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   437  /** \brief API return values defined in
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   438   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   439   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   440   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   441  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   442  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   443      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   444      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   445      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   446      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   447      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   448      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   449      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   450  } IfxVadc_Status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   451  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   452  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   453   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   454  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   455  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   456      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   457      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   458      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   459      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   460  } IfxVadc_TriggerMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   462  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   463   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   464  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   465  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   466      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   467      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   468      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   469      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   470      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   471      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   472      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   473      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   474      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   475      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   476      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   477      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   478      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   479      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   480      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   481      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   482  } IfxVadc_TriggerSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   483  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   484  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   485  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   486  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   487   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   488  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   489  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   490  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   491  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   492  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   493  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   494   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   495   * \param resultIdx result register index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   496   * \param waitForRead wait for read mode enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   497   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   498   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   499  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   500  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   501  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   502   * \param vadc pointer to the VADC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   503   * \param waitForRead wait for read mode enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   504   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   505   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   506  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   507  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   508  /** \brief Enables the background sacn external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   509   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   510   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   511   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   512  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   513  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   514  /** \brief Gets the background scan gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   515   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   516   * \return background scan gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   517   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   518  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   519  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   520  /** \brief Gets the gating input selection.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   521   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   522   * \return background scan gating input selection.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   523   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   524  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   525  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   526  /** \brief Gets the requested background scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   527   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   528   * \return requested background scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   529   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   530  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   531  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   532  /** \brief Gets the requested background scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   533   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   534   * \return requested background scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   535   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   536  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   537  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   538  /** \brief Gets the background scan trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   539   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   540   * \return Gets the background scan external trigger source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   541   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   542  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   543  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   544  /** \brief Gets the background scan external trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   545   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   546   * \return background scan external trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   547   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   548  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   549  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   550  /** \brief get global input class resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   551   * \param vadc Pointer to the VADC Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   552   * \param inputClassNum global input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   553   * \return ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   554   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   555  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   556  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   557  /** \brief return conversion result stored in the Global result Register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   558   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   559   * \return global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   560   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   561   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   562   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   563   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   564   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   565   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   566   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   567   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   568   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   569   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   570   * // configure background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   571   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   572   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   573   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   574   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   575   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   576   * // start the background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   577   * IfxVadc_startBackgroundScan(vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   578   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   579   * Ifx_VADC_GLOBRES result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   580   * result = IfxVadc_getGlobalResult (vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   581   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   582   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   583   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   584   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   585  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   586  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   587  /** \brief get global input class sample time in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   588   * \param vadc Pointer to the VADC Group Register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   589   * \param inputClassNum ADC input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   590   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   591   * \return ADC input class channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   592   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   593  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   594  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   595  /** \brief Get conversion result for the group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   596   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   597   * \param results pointer to scaled conversion results
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   598   * \param resultOffset offset for the first result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   599   * \param numResults number of results
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   600   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   601   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   602   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   603   * Ifx_VADC* vadc = &MODULE_VADC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   604   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   605   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   606   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   607   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   608   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   609   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   610   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   611   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   612   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   613   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   614   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   615   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   616   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   617   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   618   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   619   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   620   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   621   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   622   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   623   * // fetch the 2 results of conversion for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   624   * Ifx_VADC_RES results[10];
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   625   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   626   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   627   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   628   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   629  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   630  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   631  /** \brief Get conversion result (Function does not care about the alignment)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   632   * value = raw * gain + offset.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   633   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   634   * \param resultIdx result register index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   635   * \return scaled Conversion result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   636   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   637   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   638   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   639   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   640   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   641   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   642   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   643   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   644   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   645   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   646   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   647   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   648   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   649   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   650   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   651   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   652   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   653   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   654   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   655   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   656   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   657   * // fetch the result of conversion from result register 0 for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   658   * Ifx_VADC_RES result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   659   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   660   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   661   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   662   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   663  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   664  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   665  /** \brief Returns the auto background scan status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   666   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   667   * \return TRUE if enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   668   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   669  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   670  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   671  /** \brief Returns the background scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   672   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   673   * \return background scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   674   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   675  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   676  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   677  /** \brief Enables/Disables continuous background auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   678   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   679   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   680   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   681   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   682  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   683  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   684  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   685   * \param vadc pointer to the VADC module registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   686   * \param groupId group index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   687   * \param channels specifies the channels which should be enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   688   * \param mask specifies the channels which should be modified
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   689   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   690   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   691   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   692   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   693   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   694   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   695   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   696   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   697   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   698   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   699   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   700   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   701   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   702   * // configure background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   703   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   704   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   705   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   706   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   707   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   708   * // start the background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   709   * IfxVadc_startBackgroundScan(vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   710   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   711   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   712   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   713  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   714  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   715  /** \brief Sets the background scan slot gating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   716   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   717   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   718   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   719   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   720   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   721  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   722  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   723  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   724   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   725   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   726   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   727   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   728   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   729  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   730  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   731  /** \brief Starts a background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   732   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   733   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   734   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   735   * \see IfxVadc_setBackgroundScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   736   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   737   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   738  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   739  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   740  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   741  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   742  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   743  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   744  /** \brief Gives the background scan status for a group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   745   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   746   * \return IfxVadc_Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   747   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   748  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   749  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   750  /** \brief Get conversion result (Function does not care about the alignment)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   751   * value = raw * gain + offset.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   752   * \param vadc VADC module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   753   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   754   * \param channel channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   755   * \param sourceType type of request source
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   756   * \return scaled Conversion result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   757   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   758   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   759   * Ifx_VADC vadc;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   760   * vadc.vadc = &MODULE_VADC;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   761   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   762   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   763   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   764   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   765   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   766   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   767   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   768   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   769   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   770   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   771   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   772   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   773   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   774   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   775   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   776   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   777   * // fetch the result of conversion for channel 2 of group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   778   * Ifx_VADC_RESresult2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   779   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   780   * Ifx_VADC_RESresult5;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   781   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   782   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   783   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   784   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   785  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   786  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   787  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   788  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   789  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   790   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   791  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   792  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   794  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   795  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   796  /** \brief Disables the scan slot external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   797   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   798   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   799   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   800  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   801  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   802  /** \brief Enables the scan slot external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   803   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   804   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   805   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   806  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   807  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   808  /** \brief Gets the request scan slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   809   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   810   * \return requested scan slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   811   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   812  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   813  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   814  /** \brief Gets the request scan slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   815   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   816   * \return request scan slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   817   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   818  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   819  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   820  /** \brief Gets the request scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   821   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   822   * \return request scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   823   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   824  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   825  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   826  /** \brief Gets the request scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   827   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   828   * \return request scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   829   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   830  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   831  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   832  /** \brief Gets the requested scan slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   833   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   834   * \return requested scan slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   835   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   836  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   837  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   838  /** \brief Gets the requested scan slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   839   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   840   * \return requested scan slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   841   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   842  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   843  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   844  /** \brief Gets the auto scan enable status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   845   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   846   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   847   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   848  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   849  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   850  /** \brief Returns the scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   851   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   852   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   853   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   854  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   855  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   856  /** \brief Enables/Disables continuous auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   857   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   858   * \param autoscanEnable whether autoscan is enabled or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   859   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   860   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   861  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   862  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   863  /** \brief Sets the scan slot gating configuration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   864   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   865   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   866   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   867   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   868   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   869  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   870  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   871  /** \brief Sets the scan slot trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   872   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   873   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   874   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   875   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   876   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   877  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   878  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   879  /** \brief Starts an autoscan on the specified group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   880   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   881   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   882   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   883   * See \ref IfxVadc_setScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   884   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   885   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   886  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   887  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   888  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   889  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   890  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   891  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   892  /** \brief Gives the scan status for a group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   893   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   894   * \return IfxVadc_Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   895   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   896  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   897  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   898  /** \brief Configures an (auto-)scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   899   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   900   * \param channels specifies the channels which should be enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   901   * \param mask specifies the channels which should be modified
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   902   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   903   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   904   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   905   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   906   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   907   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   908   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   909   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   910   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   911   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   912   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   913   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   914   * // enable Auto-Scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   915   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   916   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   917   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   918   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   919   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   920   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   921   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   922  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   923  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   924  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   925  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   926  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   927   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   928  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   929  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   930  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   931  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   932  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   933  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   934   * refill incase of aborted conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   935   * source interrupt enable/disable
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   936   * external trigger control of the aborted conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   937   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   938   * \param channel specifies channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   939   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   940   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   941   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   942   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   943   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   944   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   945   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   946   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   947   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   948   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   949   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   950   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   951  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   952  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   953  /** \brief Clears all the queue entries including backup stage.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   954   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   955   * \param flushQueue Whether queue is cleared or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   956   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   957   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   958  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   959  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   960  /** \brief Disables the external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   961   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   962   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   963   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   964  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   965  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   966  /** \brief Enables the external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   967   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   968   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   969   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   970  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   971  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   972  /** \brief Gets the requested queue slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   973   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   974   * \return requested queue slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   975   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   976  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   977  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   978  /** \brief Gets the requested queue slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   979   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   980   * \return requested queue slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   981   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   982  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   983  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   984  /** \brief Gets the request queue slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   985   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   986   * \return requested queue slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   987   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   988  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   989  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   990  /** \brief Gets the requested queue slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   991   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   992   * \return requested queue slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   993   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   994  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   995  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   996  /** \brief Gets the requested queue slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   997   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   998   * \return requested queue slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   999   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1000  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1001  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1002  /** \brief Gets the requested queue slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1003   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1004   * \return requested queue slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1005   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1006  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1007  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1008  /** \brief Returns the queue slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1009   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1010   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1011   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1012  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1013  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1014  /** \brief Sets the gating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1015   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1016   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1017   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1018   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1019   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1020  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1021  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1022  /** \brief Sets the trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1023   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1024   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1025   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1026   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1027   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1028  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1029  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1030  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1031   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1032   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1033   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1034  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1035  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1036  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1037  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1038  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1039  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1040  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1041   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1042   * \return status of the Queue
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1043   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1044   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1045   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1046   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1047   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1048   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1049   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1050  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1051  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1052  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1053  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1054  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1055   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1056  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1057  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1058  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1059  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1060  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1061  /** \brief Initializes a EMUX output
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1062   * \param emux the Emux Pin which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1063   * \param outputMode the pin output mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1064   * \param padDriver the pad driver mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1065   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1066   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1067  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1068  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1069  /** \brief Initializes a GxBFL output
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1070   * \param gxBfl the GxBFL Pin which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1071   * \param outputMode the pin output mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1072   * \param padDriver the pad driver mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1073   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1074   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1075  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1076  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1077  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1078  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1079  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1080   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1081  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1082  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1083  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1084  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1085  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1086  /** \brief Calculate the time using analog frequency.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1087   * \param analogFrequency analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1088   * \param sampleTime sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1089   * \return sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1090   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1091  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1092  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1093  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1094  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1095  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1096  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1097  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1098   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1099   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1100   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1101  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1102  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1103  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1104   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1105   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1106   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1107  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1108  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1109  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1110  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1111  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1112   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1114  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1115  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1116  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1117  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1118  /** \brief Clears the all group requests.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1119   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1120   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1121   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1122  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1124  /** \brief Gets the ADC group arbitration round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1125   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1126   * \return ADC group arbitration round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1127   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1128  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1129  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1130  /** \brief Gets the channel esult service request node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1131   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1132   * \return channel result service request node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1133   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1134  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1135  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1136  /** \brief Gets the channel esult service request node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1137   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1138   * \return channel result service request node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1139   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1140  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1141  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1142  /** \brief Gets the channel service request node pointer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1143   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1144   * \return channel service request node pointer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1145   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1146  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1147  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1148  /** \brief Gets the configured master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1149   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1150   * \return configured master kernel index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1151   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1152  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1153  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1154  /** \brief Resets the ADC group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1155   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1156   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1157   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1158  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1159  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1160  /** \brief Sets analog converter group number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1161   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1162   * \param analogConverterMode group analog converter mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1163   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1164   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1165  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1166  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1167  /** \brief Sets the arbiter round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1168   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1169   * \param arbiterRoundLength arbiter round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1170   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1171   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1172  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1173  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1174  /** \brief Sets the ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1175   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1176   * \param inputClassNum input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1177   * \param resolution ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1178   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1179   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1180  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1181  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1182  /** \brief Sets the ADC input class sample time.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1183   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1184   * \param inputClassNum input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1185   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1186   * \param sampleTime request sample time in sec for input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1187   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1188   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1189  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1190  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1191  /** \brief Sets the master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1192   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1193   * \param masterIndex master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1194   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1195   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1196  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1197  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1198  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1199  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1200  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1201  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1202  /** \brief Sets the Arbiter slot configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1203   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1204   * \param slotEnable enable/disable of slot.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1205   * \param prio channel request priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1206   * \param mode Channel Slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1207   * \param slot channel slot Request source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1208   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1209   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1210  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1211  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1212  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1213  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1214  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1215   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1216  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1217  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1218  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1219  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1221  /** \brief Disable VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1222   * \param vadc Pointer to VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1223   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1224   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1225  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1226  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1227  /** \brief Enable VADC kernel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1228   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1229   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1230   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1231  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1232  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1233  /** \brief gets ADC Calibration Flag CAL status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1234   * \param vadc pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1235   * \param adcCalGroupNum ADC CAL group number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1236   * \return CAL group status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1237   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1238  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1239  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1240  /** \brief Gets the global control configuration value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1241   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1242   * \return global control configuration value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1244  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1246  /** \brief get SUCAL bit field status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1247   * \param vadc Pointer to VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1248   * \return Indicate the start-up calibration phase
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1249   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1250  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1251  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1252  /** \brief initiates the calibration pulse phase.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1253   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1254   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1255   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1256  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1257  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1258  /** \brief Sets the channel conversion mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1259   * \param vadc pointer to VADC module registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1260   * \param inputClassNum global input class  number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1261   * \param resolution ADC channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1262   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1263   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1264  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1265  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1266  /** \brief Sets the sample time of ADC global class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1267   * \param vadc pointer to VADC module registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1268   * \param inputClassNum global input class  number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1269   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1270   * \param sampleTime the requested sample time for input class in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1271   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1272   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1273  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1274  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1275  /** \brief Sets the sensitivity of the module to sleep signal
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1276   * \param vadc pointer to VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1277   * \param mode mode selection (enable/disable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1278   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1279   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1280  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1281  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1282  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1283  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1284  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1285  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1286  /** \brief Disable write access to the VADC config/control registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1287   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1288   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1289   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1290   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1291  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1292  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1293  /** \brief Disables the post calibration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1294   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1295   * \param group Index of the group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1296   * \param disable disable or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1297   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1298   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1299  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1300  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1301  /** \brief Enable write access to the VADC config/control registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1302   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1303   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1304   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1305   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1306  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1307  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1308  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1309   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1310   * \param ccu6Num selects CCU60 or CCU61
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1311   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1312   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1313  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1314  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1315  /** \brief Module Frequency in Hz
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1316   * \return Module Frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1317   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1318  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1319  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1320  /** \brief Gives the SRC source address.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1321   * \param group Index of the group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1322   * \param index SRC number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1323   * \return SRC source address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1324   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1325  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1326  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1327  /** \brief Initialises ADC arbiter clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1328   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1329   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1330   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1331   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1332  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1333  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1334  /** \brief Initialises the ADC Converter clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1335   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1336   * \param converterClockDivider ADC converter clock divider.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1337   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1338   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1339  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1340  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1341  /** \brief Configure the FadcD vadc digital clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1342   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1343   * \param fAdcD ADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1344   * \return calculated ADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1345   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1346  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1347  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1348  /** \brief Configure the ADC analog clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1349   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1350   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1351   * \return ADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1352   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1353  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1354  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1355  /** \brief Return the post calibration status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1356   * \param vadc Pointer to VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1357   * \param group specifies Group ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1358   * \return TRUE if the post calibration is enabled for the group else false
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1359   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1360  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1361  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1362  /** \brief Resets the kernel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1363   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1364   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1365   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1366  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1367  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1368  /** \brief Select Low Power Supply Voltage
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1369   * \param vadc Pointer to Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1370   * \param supplyVoltage Select Supply Voltage
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1371   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1372   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1373  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1374  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1375  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1376   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1377   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1378   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1379  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1380  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1381  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1382  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1383  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1384   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1386  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1387  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1388  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1389  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1390  /** \brief Clears the channel request.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1391   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1392   * \param channelId channel id whose request to be cleared.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1393   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1394   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1395  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1396  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1397  /** \brief Enables the FIFO mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1398   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1399   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1400   * \param fifoMode FIFO mode .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1401   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1402   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1403  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1404  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1405  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1406   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1407   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1408   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1409   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1410  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1411  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1412  /** \brief Gets the group's assigned channels.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1413   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1414   * \return group's assigned channels.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1415   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1416  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1417  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1418  /** \brief Gets the current ADC channel control configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1419   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1420   * \param channelIndex ADC channel number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1421   * \return current ADC channel control configuration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1422   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1423  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1424  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1425  /** \brief Gets the channel input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1426   * \param vadcG pointer to VADC Group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1427   * \param channelIndex specifies channel ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1428   * \return Input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1429   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1430  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1431  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1432  /** \brief Gets the ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1433   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1434   * \param inputClassNum ADC input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1435   * \return ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1436   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1437  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1438  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1439  /** \brief Gets the ADC input class channel sample time.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1440   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1441   * \param inputClassNum ADC input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1442   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1443   * \return ADC input class channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1444   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1445  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1446  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1447  /** \brief Sets the channels with low priority as background channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1448   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1449   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1450   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1451   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1452  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1453  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1454  /** \brief Sets the target for result background source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1455   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1456   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1457   * \param globalResultUsage whether storage in global result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1458   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1459   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1460  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1462  /** \brief Selects boundary extension.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1463   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1464   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1465   * \param boundaryMode boundary extension mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1466   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1467   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1468  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1469  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1470  /** \brief Sets the channel event service request line.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1471   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1472   * \param channelSrcNr channel event Service Node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1473   * \param channel channel number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1474   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1475   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1476  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1477  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1478  /** \brief Sets the channel input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1479   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1480   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1481   * \param inputClass group input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1482   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1483   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1484  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1485  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1486  /** \brief Sets the channel event mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1487   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1488   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1489   * \param limitCheck channel event mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1490   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1491   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1492  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1493  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1494  /** \brief Sets channel as priority channel with in the group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1495   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1496   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1497   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1498   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1499  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1500  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1501  /** \brief Sets group's lower boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1502   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1503   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1504   * \param lowerBoundary group lower boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1505   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1506   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1507  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1508  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1509  /** \brief Selects the refernce input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1510   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1511   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1512   * \param reference reference input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1513   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1514   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1515  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1516  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1517  /** \brief Sets result event node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1518   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1519   * \param resultSrcNr channel result event service node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1520   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1521   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1522   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1523  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1524  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1525  /** \brief Sets result event node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1526   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1527   * \param resultSrcNr channel result event service node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1528   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1529   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1530   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1531  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1532  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1533  /** \brief Sets result store position.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1534   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1535   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1536   * \param rightAlignedStorage result store position.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1537   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1538   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1539  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1540  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1541  /** \brief Sets channel synchronization request.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1542   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1543   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1544   * \param synchonize whether channel synchronize or stand alone operation.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1545   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1546   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1547  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1548  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1549  /** \brief Sets group's upper boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1550   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1551   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1552   * \param upperBoundary group upper boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1553   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1554   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1555  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1556  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1557  /** \brief Sets the group result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1558   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1559   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1560   * \param resultRegister result register for group result storage.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1561   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1562   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1563  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1564  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1565  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1566  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1567  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1568  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1569  /** \brief get channel conversion timing
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1570   * \param vadc Pointer to VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1571   * \param group specifies the Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1572   * \param inputClass Input class used
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1573   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1574   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1575   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1576   * \return Channel conversion Time in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1577   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1578  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1579  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1580  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1581  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1582  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1583   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1584  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1585  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1586  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1587  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1588  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1589  /** \brief get global input class resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1590   * \param vadc Pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1591   * \param inputClassNum global input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1592   * \return External channel resolution for global input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1593   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1594  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1595  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1596  /** \brief Get the sample time of ADC global class for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1597   * \param vadc pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1598   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1599   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1600   * \return ADC input class external channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1601   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1602  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1603  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1604  /** \brief get the external channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1605   * \param vadcG Pointer to VADC group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1606   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1607   * \return Adc input class External channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1608   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1609  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1610  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1611  /** \brief Gets the ADC input class sample time of external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1612   * \param vadcG Pointer to Register Group space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1613   * \param inputClassNum ADC input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1614   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1615   * \return ADC input class external channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1616   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1617  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1618  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1619  /** \brief set the external channel resolution of Global class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1620   * \param vadc pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1621   * \param inputClassNum Global Input Class Number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1622   * \param resolution External Channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1623   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1624   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1625  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1626  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1627  /** \brief Sets the sample time of ADC global class for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1628   * \param vadc Pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1629   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1630   * \param analogFrequency ADC analog Frequency in HZ
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1631   * \param sampleTime the requested sample time for input class in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1632   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1633   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1634  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1635  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1636  /** \brief set the external channel resolution of ADC input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1637   * \param vadcG pointer to VADC Group Register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1638   * \param inputClassNum input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1639   * \param resolution input class external channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1640   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1641   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1642  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1643  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1644  /** \brief Sets the ADC input class sample time for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1645   * \param vadcG Pointer to VADC Group Register Space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1646   * \param inputClassNum input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1647   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1648   * \param sampleTime request sample time in sec for input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1649   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1650   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1651  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1652  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1653  /** \brief Sets the Emux Interface for a particular group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1654   * \param vadc Pointer to VADC Module Space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1655   * \param emuxInterface specifies the EmuxInterface
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1656   * \param group specifies the group ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1657   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1658   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1659  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1660  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1661  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1662  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1663  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1664  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1665  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1666   * \param vadc pointer to Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1667   * \param vadcG Pointer to VADC group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1668   * \param mode External Multiplexer mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1669   * \param channels Specifies channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1670   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1671   * \param code Output the channel number in binary code/gray code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1672   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1673   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1674   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1675   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1676  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1677  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1678  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1679  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1680  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1681  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1682  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1683  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1684  /** \brief get channel service request node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1685   * \param vadcG Pointer to VADC Group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1686   * \return channel service request node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1687   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1688  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1689  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1690  /** \brief set channel event node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1691   * \param vadcG Pointer to the Vadc group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1692   * \param channelSrcNr Service request
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1693   * \param channel specifies channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1694   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1695   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1696  IFX_INLINE void IfxVadc_setChannelEventNodePointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1697  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1698  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1699  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1700  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1701  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1702  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1703  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1704      group->QINR0.U = channel | options;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1705  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1706  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1707  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1708  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1709  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1710      uint32 ticks;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1711  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1712      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1713  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1714      if (ticks > 31)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1715      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1716          ticks = (ticks / 16) + 15;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1717      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1718  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1719      ticks = __minu(ticks, 0xFFu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1720  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1721      return ticks;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1722  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1723  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1724  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1725  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1726  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1727      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1728  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1729  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1730  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1731  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1732  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1733      vadcG->CEFCLR.U = 1 << channelId;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1734  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1735  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1736  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1737  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1738  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1739      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1740  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1741  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1742  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1743  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1744  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1745      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1746  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1747  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1748  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1749  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1750  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1751      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1752  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1753  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1754  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1755  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1756  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1757      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1758      IfxScuWdt_clearCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1759      vadc->CLC.B.DISR = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1760      IfxScuWdt_setCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1761  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1762  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1763  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1764  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1765  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1766      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1767  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1768  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1769  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1770  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1771  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1772      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1773  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1774  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1775  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1776  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1777  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1778      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1779  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1780  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1781  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1782  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1783  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1784      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1785  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1786  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1787  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1788  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1789  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1790      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1791  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1792      IfxScuWdt_clearCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1793      vadc->CLC.U = 0x00000000;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1794      IfxScuWdt_setCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1795  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1796  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1797  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1798  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1799  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1800      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1801  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1802  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1803  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1804  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1805  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1806      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1807  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1808  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1809  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1810  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1811  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1812      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1813  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1814  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1815  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1816  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1817  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1818      uint8 status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1819      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	lea	a2,[a15]1155
.L525:
	mov.a	a4,#1
.L68:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    24   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    25   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    26   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    27   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    28   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    29   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    30   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    31   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    32   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    33   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    34   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    35   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    36   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    37   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    38   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    39   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    40   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    41   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    42   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    43   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    44   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    46  #ifndef IFXVADC_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    47  #define IFXVADC_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    48  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    49  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    50  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    52  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    53  #include "_Impl/IfxVadc_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    54  #include "_PinMap/IfxVadc_PinMap.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    55  #include "IfxVadc_bf.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    56  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    57  #include "Scu/Std/IfxScuCcu.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    58  #include "Scu/Std/IfxScuWdt.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    59  #include "IfxCcu6_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    60  #include "IfxCcu6_bf.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    61  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    62  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    63  /*--------------------------------Enumerations--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    64  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    65  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    66  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    67   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    68  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    69   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    70  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    71  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    72      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    73      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    74      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    75      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    76  } IfxVadc_AnalogConverterMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    77  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    78  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    79   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    80  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    81  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    82      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    83      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    84      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    85      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    86  } IfxVadc_ArbitrationRounds;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    88  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    89   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    91  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    92      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    93      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    94      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    95      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    96      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    97      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    98      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    99      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   100      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   101      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   102      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   103      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   104      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   105      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   106      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   107      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   108  } IfxVadc_BoundaryExtension;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   109  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   110  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   112  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   113  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   118  } IfxVadc_BoundarySelection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   119  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   120  /** \brief VADC Channels
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   121   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   122  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   123  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   124      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   125      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   126      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   127      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   128      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   129      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   130      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   131      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   132      IfxVadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   133      IfxVadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   134      IfxVadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   135      IfxVadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   136      IfxVadc_ChannelId_11   = 11   /**< \brief Channel 11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   137  } IfxVadc_ChannelId;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   138  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   139  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   140   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   141  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   142  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   143      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   144      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   145  } IfxVadc_ChannelReference;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   146  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   147  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   148   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   149  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   150  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   151      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   152      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   153      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   154      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   155  } IfxVadc_ChannelResolution;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   156  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   157  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   158   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   159  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   160  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   161      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   162      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   163      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   164      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   165      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   166      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   169      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   170      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   171      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   172      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   173      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   174      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   175      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   176      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   177  } IfxVadc_ChannelResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   178  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   179  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   180   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   181   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   182  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   183  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   184      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   185      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   186                                                         * associated channel for EMUX control */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   187  } IfxVadc_ChannelSelectionStyle;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   189  /** \brief type of conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   190   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   191  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   192  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   193      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   194  } IfxVadc_ConversionType;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   195  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   196  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   197   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   199  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   200  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   201      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   202      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   203  } IfxVadc_EmuxCodingScheme;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   204  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   205  /** \brief Specifies the Emux interface
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   206   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   207  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   208  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   209      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   210      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   211  } IfxVadc_EmuxInterface;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   212  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   213  /** \brief External Multiplexer sample time control
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   214   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   215   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   216  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   217  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   218      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   219      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   220  } IfxVadc_EmuxSampleTimeControl;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   221  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   222  /** \brief specifies the External Channel Start select value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   223   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   224   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   225  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   226  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   227      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   228      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   229      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   230      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   231      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   232      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   233      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   234      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   235  } IfxVadc_EmuxSelectValue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   236  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   237  /** \brief Specifies External Multiplexer Mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   238   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   239   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   240  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   241  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   242      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   243      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   244      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   245      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   246  } IfxVadc_ExternalMultiplexerMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   247  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   248  /** \brief FIFO mode enable
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   249   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   250  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   251  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   252      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   253      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   254      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   255      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   256  } IfxVadc_FifoMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   257  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   258  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   259   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   260  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   261  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   262      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   263      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   264      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   265      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   266  } IfxVadc_GatingMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   267  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   268  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   269   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   270  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   271  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   272      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   273      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   274      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   275      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   276      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   277      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   278      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   279      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   280      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   281      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   282      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   283      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   284      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   285      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   286      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   287      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   288  } IfxVadc_GatingSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   289  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   290  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   291   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   292  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   293  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   294      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   295      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   296      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   297      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   298  } IfxVadc_InputClasses;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   299  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   300  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   301   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   302  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   303  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   304      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   305      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   306      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   307      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   308  } IfxVadc_LimitCheck;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   309  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   310  /** \brief Low Power Supply Voltage Select
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   311   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   312  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   313  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   314      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   315      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   316  } IfxVadc_LowSupplyVoltageSelect;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   318  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   320  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   321  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   322      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   323      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   324      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   325      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   326      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   327      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   328      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   329      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   330      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   331      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   332      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   333      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   334      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   335      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   336      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   337      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   338      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   339      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   340      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   341      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   342      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   343      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   344      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   345      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   381      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   382      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   383      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   384      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   385  } IfxVadc_Protection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   386  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   387  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   388   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   389  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   390  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   391      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   392      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   393      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   394      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   395  } IfxVadc_RequestSlotPriority;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   396  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   397  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   398   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   399  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   400  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   401      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   402      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   403  } IfxVadc_RequestSlotStartMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   404  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   405  /** \brief Request sources
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   406   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   407  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   408  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   409      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   410      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   411      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   412  } IfxVadc_RequestSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   413  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   414  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   415   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   416   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   417  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   418  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   419      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   420      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   421  } IfxVadc_SleepMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   422  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   423  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   424   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   425  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   426  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   427      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   428      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   429      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   430      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   431      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   432      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   433      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   434      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   435  } IfxVadc_SrcNr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   437  /** \brief API return values defined in
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   438   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   439   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   440   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   441  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   442  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   443      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   444      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   445      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   446      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   447      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   448      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   449      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   450  } IfxVadc_Status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   451  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   452  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   453   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   454  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   455  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   456      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   457      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   458      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   459      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   460  } IfxVadc_TriggerMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   462  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   463   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   464  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   465  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   466      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   467      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   468      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   469      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   470      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   471      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   472      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   473      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   474      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   475      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   476      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   477      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   478      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   479      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   480      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   481      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   482  } IfxVadc_TriggerSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   483  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   484  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   485  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   486  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   487   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   488  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   489  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   490  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   491  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   492  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   493  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   494   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   495   * \param resultIdx result register index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   496   * \param waitForRead wait for read mode enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   497   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   498   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   499  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   500  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   501  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   502   * \param vadc pointer to the VADC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   503   * \param waitForRead wait for read mode enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   504   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   505   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   506  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   507  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   508  /** \brief Enables the background sacn external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   509   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   510   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   511   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   512  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   513  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   514  /** \brief Gets the background scan gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   515   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   516   * \return background scan gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   517   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   518  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   519  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   520  /** \brief Gets the gating input selection.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   521   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   522   * \return background scan gating input selection.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   523   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   524  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   525  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   526  /** \brief Gets the requested background scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   527   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   528   * \return requested background scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   529   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   530  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   531  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   532  /** \brief Gets the requested background scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   533   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   534   * \return requested background scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   535   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   536  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   537  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   538  /** \brief Gets the background scan trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   539   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   540   * \return Gets the background scan external trigger source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   541   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   542  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   543  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   544  /** \brief Gets the background scan external trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   545   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   546   * \return background scan external trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   547   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   548  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   549  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   550  /** \brief get global input class resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   551   * \param vadc Pointer to the VADC Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   552   * \param inputClassNum global input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   553   * \return ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   554   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   555  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   556  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   557  /** \brief return conversion result stored in the Global result Register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   558   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   559   * \return global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   560   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   561   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   562   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   563   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   564   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   565   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   566   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   567   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   568   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   569   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   570   * // configure background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   571   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   572   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   573   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   574   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   575   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   576   * // start the background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   577   * IfxVadc_startBackgroundScan(vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   578   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   579   * Ifx_VADC_GLOBRES result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   580   * result = IfxVadc_getGlobalResult (vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   581   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   582   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   583   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   584   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   585  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   586  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   587  /** \brief get global input class sample time in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   588   * \param vadc Pointer to the VADC Group Register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   589   * \param inputClassNum ADC input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   590   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   591   * \return ADC input class channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   592   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   593  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   594  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   595  /** \brief Get conversion result for the group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   596   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   597   * \param results pointer to scaled conversion results
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   598   * \param resultOffset offset for the first result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   599   * \param numResults number of results
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   600   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   601   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   602   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   603   * Ifx_VADC* vadc = &MODULE_VADC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   604   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   605   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   606   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   607   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   608   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   609   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   610   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   611   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   612   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   613   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   614   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   615   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   616   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   617   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   618   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   619   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   620   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   621   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   622   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   623   * // fetch the 2 results of conversion for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   624   * Ifx_VADC_RES results[10];
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   625   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   626   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   627   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   628   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   629  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   630  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   631  /** \brief Get conversion result (Function does not care about the alignment)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   632   * value = raw * gain + offset.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   633   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   634   * \param resultIdx result register index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   635   * \return scaled Conversion result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   636   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   637   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   638   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   639   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   640   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   641   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   642   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   643   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   644   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   645   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   646   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   647   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   648   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   649   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   650   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   651   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   652   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   653   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   654   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   655   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   656   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   657   * // fetch the result of conversion from result register 0 for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   658   * Ifx_VADC_RES result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   659   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   660   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   661   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   662   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   663  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   664  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   665  /** \brief Returns the auto background scan status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   666   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   667   * \return TRUE if enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   668   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   669  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   670  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   671  /** \brief Returns the background scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   672   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   673   * \return background scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   674   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   675  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   676  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   677  /** \brief Enables/Disables continuous background auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   678   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   679   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   680   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   681   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   682  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   683  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   684  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   685   * \param vadc pointer to the VADC module registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   686   * \param groupId group index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   687   * \param channels specifies the channels which should be enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   688   * \param mask specifies the channels which should be modified
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   689   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   690   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   691   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   692   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   693   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   694   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   695   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   696   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   697   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   698   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   699   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   700   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   701   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   702   * // configure background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   703   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   704   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   705   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   706   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   707   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   708   * // start the background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   709   * IfxVadc_startBackgroundScan(vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   710   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   711   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   712   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   713  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   714  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   715  /** \brief Sets the background scan slot gating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   716   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   717   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   718   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   719   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   720   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   721  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   722  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   723  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   724   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   725   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   726   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   727   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   728   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   729  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   730  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   731  /** \brief Starts a background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   732   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   733   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   734   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   735   * \see IfxVadc_setBackgroundScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   736   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   737   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   738  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   739  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   740  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   741  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   742  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   743  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   744  /** \brief Gives the background scan status for a group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   745   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   746   * \return IfxVadc_Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   747   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   748  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   749  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   750  /** \brief Get conversion result (Function does not care about the alignment)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   751   * value = raw * gain + offset.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   752   * \param vadc VADC module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   753   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   754   * \param channel channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   755   * \param sourceType type of request source
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   756   * \return scaled Conversion result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   757   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   758   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   759   * Ifx_VADC vadc;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   760   * vadc.vadc = &MODULE_VADC;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   761   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   762   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   763   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   764   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   765   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   766   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   767   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   768   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   769   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   770   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   771   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   772   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   773   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   774   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   775   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   776   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   777   * // fetch the result of conversion for channel 2 of group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   778   * Ifx_VADC_RESresult2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   779   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   780   * Ifx_VADC_RESresult5;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   781   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   782   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   783   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   784   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   785  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   786  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   787  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   788  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   789  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   790   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   791  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   792  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   794  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   795  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   796  /** \brief Disables the scan slot external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   797   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   798   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   799   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   800  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   801  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   802  /** \brief Enables the scan slot external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   803   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   804   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   805   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   806  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   807  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   808  /** \brief Gets the request scan slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   809   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   810   * \return requested scan slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   811   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   812  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   813  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   814  /** \brief Gets the request scan slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   815   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   816   * \return request scan slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   817   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   818  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   819  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   820  /** \brief Gets the request scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   821   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   822   * \return request scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   823   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   824  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   825  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   826  /** \brief Gets the request scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   827   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   828   * \return request scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   829   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   830  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   831  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   832  /** \brief Gets the requested scan slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   833   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   834   * \return requested scan slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   835   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   836  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   837  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   838  /** \brief Gets the requested scan slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   839   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   840   * \return requested scan slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   841   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   842  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   843  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   844  /** \brief Gets the auto scan enable status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   845   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   846   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   847   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   848  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   849  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   850  /** \brief Returns the scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   851   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   852   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   853   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   854  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   855  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   856  /** \brief Enables/Disables continuous auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   857   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   858   * \param autoscanEnable whether autoscan is enabled or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   859   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   860   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   861  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   862  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   863  /** \brief Sets the scan slot gating configuration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   864   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   865   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   866   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   867   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   868   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   869  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   870  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   871  /** \brief Sets the scan slot trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   872   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   873   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   874   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   875   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   876   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   877  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   878  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   879  /** \brief Starts an autoscan on the specified group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   880   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   881   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   882   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   883   * See \ref IfxVadc_setScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   884   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   885   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   886  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   887  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   888  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   889  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   890  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   891  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   892  /** \brief Gives the scan status for a group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   893   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   894   * \return IfxVadc_Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   895   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   896  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   897  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   898  /** \brief Configures an (auto-)scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   899   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   900   * \param channels specifies the channels which should be enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   901   * \param mask specifies the channels which should be modified
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   902   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   903   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   904   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   905   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   906   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   907   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   908   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   909   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   910   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   911   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   912   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   913   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   914   * // enable Auto-Scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   915   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   916   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   917   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   918   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   919   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   920   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   921   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   922  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   923  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   924  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   925  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   926  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   927   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   928  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   929  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   930  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   931  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   932  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   933  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   934   * refill incase of aborted conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   935   * source interrupt enable/disable
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   936   * external trigger control of the aborted conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   937   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   938   * \param channel specifies channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   939   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   940   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   941   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   942   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   943   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   944   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   945   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   946   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   947   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   948   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   949   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   950   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   951  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   952  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   953  /** \brief Clears all the queue entries including backup stage.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   954   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   955   * \param flushQueue Whether queue is cleared or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   956   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   957   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   958  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   959  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   960  /** \brief Disables the external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   961   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   962   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   963   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   964  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   965  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   966  /** \brief Enables the external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   967   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   968   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   969   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   970  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   971  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   972  /** \brief Gets the requested queue slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   973   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   974   * \return requested queue slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   975   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   976  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   977  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   978  /** \brief Gets the requested queue slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   979   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   980   * \return requested queue slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   981   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   982  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   983  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   984  /** \brief Gets the request queue slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   985   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   986   * \return requested queue slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   987   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   988  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   989  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   990  /** \brief Gets the requested queue slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   991   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   992   * \return requested queue slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   993   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   994  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   995  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   996  /** \brief Gets the requested queue slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   997   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   998   * \return requested queue slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   999   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1000  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1001  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1002  /** \brief Gets the requested queue slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1003   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1004   * \return requested queue slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1005   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1006  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1007  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1008  /** \brief Returns the queue slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1009   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1010   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1011   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1012  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1013  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1014  /** \brief Sets the gating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1015   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1016   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1017   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1018   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1019   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1020  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1021  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1022  /** \brief Sets the trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1023   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1024   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1025   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1026   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1027   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1028  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1029  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1030  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1031   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1032   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1033   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1034  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1035  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1036  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1037  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1038  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1039  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1040  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1041   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1042   * \return status of the Queue
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1043   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1044   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1045   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1046   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1047   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1048   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1049   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1050  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1051  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1052  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1053  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1054  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1055   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1056  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1057  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1058  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1059  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1060  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1061  /** \brief Initializes a EMUX output
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1062   * \param emux the Emux Pin which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1063   * \param outputMode the pin output mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1064   * \param padDriver the pad driver mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1065   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1066   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1067  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1068  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1069  /** \brief Initializes a GxBFL output
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1070   * \param gxBfl the GxBFL Pin which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1071   * \param outputMode the pin output mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1072   * \param padDriver the pad driver mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1073   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1074   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1075  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1076  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1077  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1078  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1079  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1080   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1081  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1082  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1083  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1084  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1085  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1086  /** \brief Calculate the time using analog frequency.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1087   * \param analogFrequency analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1088   * \param sampleTime sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1089   * \return sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1090   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1091  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1092  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1093  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1094  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1095  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1096  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1097  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1098   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1099   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1100   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1101  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1102  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1103  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1104   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1105   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1106   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1107  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1108  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1109  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1110  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1111  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1112   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1114  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1115  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1116  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1117  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1118  /** \brief Clears the all group requests.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1119   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1120   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1121   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1122  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1124  /** \brief Gets the ADC group arbitration round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1125   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1126   * \return ADC group arbitration round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1127   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1128  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1129  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1130  /** \brief Gets the channel esult service request node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1131   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1132   * \return channel result service request node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1133   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1134  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1135  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1136  /** \brief Gets the channel esult service request node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1137   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1138   * \return channel result service request node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1139   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1140  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1141  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1142  /** \brief Gets the channel service request node pointer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1143   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1144   * \return channel service request node pointer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1145   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1146  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1147  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1148  /** \brief Gets the configured master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1149   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1150   * \return configured master kernel index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1151   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1152  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1153  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1154  /** \brief Resets the ADC group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1155   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1156   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1157   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1158  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1159  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1160  /** \brief Sets analog converter group number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1161   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1162   * \param analogConverterMode group analog converter mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1163   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1164   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1165  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1166  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1167  /** \brief Sets the arbiter round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1168   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1169   * \param arbiterRoundLength arbiter round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1170   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1171   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1172  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1173  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1174  /** \brief Sets the ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1175   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1176   * \param inputClassNum input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1177   * \param resolution ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1178   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1179   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1180  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1181  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1182  /** \brief Sets the ADC input class sample time.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1183   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1184   * \param inputClassNum input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1185   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1186   * \param sampleTime request sample time in sec for input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1187   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1188   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1189  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1190  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1191  /** \brief Sets the master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1192   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1193   * \param masterIndex master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1194   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1195   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1196  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1197  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1198  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1199  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1200  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1201  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1202  /** \brief Sets the Arbiter slot configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1203   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1204   * \param slotEnable enable/disable of slot.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1205   * \param prio channel request priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1206   * \param mode Channel Slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1207   * \param slot channel slot Request source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1208   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1209   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1210  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1211  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1212  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1213  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1214  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1215   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1216  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1217  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1218  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1219  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1221  /** \brief Disable VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1222   * \param vadc Pointer to VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1223   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1224   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1225  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1226  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1227  /** \brief Enable VADC kernel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1228   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1229   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1230   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1231  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1232  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1233  /** \brief gets ADC Calibration Flag CAL status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1234   * \param vadc pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1235   * \param adcCalGroupNum ADC CAL group number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1236   * \return CAL group status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1237   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1238  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1239  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1240  /** \brief Gets the global control configuration value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1241   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1242   * \return global control configuration value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1244  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1246  /** \brief get SUCAL bit field status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1247   * \param vadc Pointer to VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1248   * \return Indicate the start-up calibration phase
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1249   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1250  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1251  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1252  /** \brief initiates the calibration pulse phase.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1253   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1254   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1255   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1256  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1257  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1258  /** \brief Sets the channel conversion mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1259   * \param vadc pointer to VADC module registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1260   * \param inputClassNum global input class  number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1261   * \param resolution ADC channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1262   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1263   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1264  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1265  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1266  /** \brief Sets the sample time of ADC global class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1267   * \param vadc pointer to VADC module registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1268   * \param inputClassNum global input class  number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1269   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1270   * \param sampleTime the requested sample time for input class in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1271   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1272   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1273  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1274  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1275  /** \brief Sets the sensitivity of the module to sleep signal
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1276   * \param vadc pointer to VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1277   * \param mode mode selection (enable/disable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1278   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1279   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1280  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1281  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1282  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1283  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1284  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1285  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1286  /** \brief Disable write access to the VADC config/control registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1287   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1288   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1289   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1290   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1291  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1292  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1293  /** \brief Disables the post calibration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1294   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1295   * \param group Index of the group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1296   * \param disable disable or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1297   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1298   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1299  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1300  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1301  /** \brief Enable write access to the VADC config/control registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1302   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1303   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1304   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1305   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1306  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1307  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1308  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1309   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1310   * \param ccu6Num selects CCU60 or CCU61
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1311   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1312   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1313  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1314  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1315  /** \brief Module Frequency in Hz
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1316   * \return Module Frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1317   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1318  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1319  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1320  /** \brief Gives the SRC source address.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1321   * \param group Index of the group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1322   * \param index SRC number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1323   * \return SRC source address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1324   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1325  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1326  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1327  /** \brief Initialises ADC arbiter clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1328   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1329   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1330   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1331   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1332  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1333  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1334  /** \brief Initialises the ADC Converter clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1335   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1336   * \param converterClockDivider ADC converter clock divider.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1337   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1338   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1339  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1340  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1341  /** \brief Configure the FadcD vadc digital clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1342   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1343   * \param fAdcD ADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1344   * \return calculated ADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1345   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1346  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1347  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1348  /** \brief Configure the ADC analog clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1349   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1350   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1351   * \return ADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1352   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1353  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1354  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1355  /** \brief Return the post calibration status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1356   * \param vadc Pointer to VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1357   * \param group specifies Group ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1358   * \return TRUE if the post calibration is enabled for the group else false
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1359   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1360  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1361  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1362  /** \brief Resets the kernel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1363   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1364   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1365   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1366  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1367  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1368  /** \brief Select Low Power Supply Voltage
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1369   * \param vadc Pointer to Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1370   * \param supplyVoltage Select Supply Voltage
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1371   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1372   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1373  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1374  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1375  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1376   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1377   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1378   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1379  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1380  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1381  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1382  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1383  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1384   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1386  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1387  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1388  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1389  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1390  /** \brief Clears the channel request.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1391   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1392   * \param channelId channel id whose request to be cleared.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1393   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1394   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1395  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1396  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1397  /** \brief Enables the FIFO mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1398   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1399   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1400   * \param fifoMode FIFO mode .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1401   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1402   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1403  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1404  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1405  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1406   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1407   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1408   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1409   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1410  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1411  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1412  /** \brief Gets the group's assigned channels.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1413   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1414   * \return group's assigned channels.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1415   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1416  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1417  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1418  /** \brief Gets the current ADC channel control configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1419   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1420   * \param channelIndex ADC channel number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1421   * \return current ADC channel control configuration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1422   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1423  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1424  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1425  /** \brief Gets the channel input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1426   * \param vadcG pointer to VADC Group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1427   * \param channelIndex specifies channel ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1428   * \return Input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1429   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1430  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1431  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1432  /** \brief Gets the ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1433   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1434   * \param inputClassNum ADC input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1435   * \return ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1436   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1437  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1438  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1439  /** \brief Gets the ADC input class channel sample time.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1440   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1441   * \param inputClassNum ADC input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1442   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1443   * \return ADC input class channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1444   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1445  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1446  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1447  /** \brief Sets the channels with low priority as background channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1448   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1449   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1450   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1451   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1452  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1453  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1454  /** \brief Sets the target for result background source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1455   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1456   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1457   * \param globalResultUsage whether storage in global result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1458   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1459   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1460  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1462  /** \brief Selects boundary extension.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1463   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1464   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1465   * \param boundaryMode boundary extension mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1466   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1467   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1468  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1469  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1470  /** \brief Sets the channel event service request line.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1471   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1472   * \param channelSrcNr channel event Service Node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1473   * \param channel channel number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1474   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1475   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1476  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1477  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1478  /** \brief Sets the channel input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1479   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1480   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1481   * \param inputClass group input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1482   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1483   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1484  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1485  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1486  /** \brief Sets the channel event mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1487   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1488   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1489   * \param limitCheck channel event mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1490   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1491   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1492  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1493  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1494  /** \brief Sets channel as priority channel with in the group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1495   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1496   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1497   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1498   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1499  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1500  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1501  /** \brief Sets group's lower boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1502   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1503   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1504   * \param lowerBoundary group lower boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1505   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1506   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1507  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1508  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1509  /** \brief Selects the refernce input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1510   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1511   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1512   * \param reference reference input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1513   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1514   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1515  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1516  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1517  /** \brief Sets result event node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1518   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1519   * \param resultSrcNr channel result event service node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1520   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1521   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1522   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1523  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1524  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1525  /** \brief Sets result event node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1526   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1527   * \param resultSrcNr channel result event service node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1528   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1529   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1530   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1531  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1532  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1533  /** \brief Sets result store position.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1534   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1535   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1536   * \param rightAlignedStorage result store position.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1537   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1538   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1539  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1540  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1541  /** \brief Sets channel synchronization request.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1542   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1543   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1544   * \param synchonize whether channel synchronize or stand alone operation.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1545   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1546   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1547  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1548  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1549  /** \brief Sets group's upper boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1550   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1551   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1552   * \param upperBoundary group upper boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1553   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1554   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1555  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1556  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1557  /** \brief Sets the group result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1558   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1559   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1560   * \param resultRegister result register for group result storage.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1561   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1562   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1563  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1564  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1565  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1566  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1567  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1568  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1569  /** \brief get channel conversion timing
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1570   * \param vadc Pointer to VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1571   * \param group specifies the Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1572   * \param inputClass Input class used
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1573   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1574   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1575   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1576   * \return Channel conversion Time in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1577   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1578  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1579  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1580  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1581  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1582  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1583   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1584  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1585  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1586  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1587  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1588  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1589  /** \brief get global input class resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1590   * \param vadc Pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1591   * \param inputClassNum global input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1592   * \return External channel resolution for global input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1593   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1594  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1595  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1596  /** \brief Get the sample time of ADC global class for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1597   * \param vadc pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1598   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1599   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1600   * \return ADC input class external channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1601   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1602  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1603  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1604  /** \brief get the external channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1605   * \param vadcG Pointer to VADC group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1606   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1607   * \return Adc input class External channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1608   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1609  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1610  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1611  /** \brief Gets the ADC input class sample time of external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1612   * \param vadcG Pointer to Register Group space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1613   * \param inputClassNum ADC input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1614   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1615   * \return ADC input class external channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1616   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1617  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1618  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1619  /** \brief set the external channel resolution of Global class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1620   * \param vadc pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1621   * \param inputClassNum Global Input Class Number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1622   * \param resolution External Channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1623   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1624   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1625  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1626  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1627  /** \brief Sets the sample time of ADC global class for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1628   * \param vadc Pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1629   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1630   * \param analogFrequency ADC analog Frequency in HZ
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1631   * \param sampleTime the requested sample time for input class in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1632   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1633   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1634  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1635  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1636  /** \brief set the external channel resolution of ADC input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1637   * \param vadcG pointer to VADC Group Register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1638   * \param inputClassNum input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1639   * \param resolution input class external channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1640   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1641   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1642  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1643  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1644  /** \brief Sets the ADC input class sample time for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1645   * \param vadcG Pointer to VADC Group Register Space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1646   * \param inputClassNum input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1647   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1648   * \param sampleTime request sample time in sec for input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1649   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1650   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1651  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1652  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1653  /** \brief Sets the Emux Interface for a particular group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1654   * \param vadc Pointer to VADC Module Space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1655   * \param emuxInterface specifies the EmuxInterface
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1656   * \param group specifies the group ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1657   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1658   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1659  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1660  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1661  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1662  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1663  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1664  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1665  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1666   * \param vadc pointer to Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1667   * \param vadcG Pointer to VADC group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1668   * \param mode External Multiplexer mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1669   * \param channels Specifies channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1670   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1671   * \param code Output the channel number in binary code/gray code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1672   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1673   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1674   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1675   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1676  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1677  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1678  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1679  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1680  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1681  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1682  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1683  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1684  /** \brief get channel service request node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1685   * \param vadcG Pointer to VADC Group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1686   * \return channel service request node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1687   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1688  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1689  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1690  /** \brief set channel event node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1691   * \param vadcG Pointer to the Vadc group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1692   * \param channelSrcNr Service request
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1693   * \param channel specifies channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1694   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1695   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1696  IFX_INLINE void IfxVadc_setChannelEventNodePointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1697  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1698  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1699  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1700  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1701  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1702  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1703  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1704      group->QINR0.U = channel | options;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1705  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1706  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1707  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1708  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1709  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1710      uint32 ticks;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1711  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1712      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1713  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1714      if (ticks > 31)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1715      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1716          ticks = (ticks / 16) + 15;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1717      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1718  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1719      ticks = __minu(ticks, 0xFFu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1720  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1721      return ticks;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1722  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1723  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1724  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1725  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1726  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1727      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1728  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1729  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1730  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1731  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1732  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1733      vadcG->CEFCLR.U = 1 << channelId;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1734  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1735  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1736  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1737  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1738  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1739      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1740  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1741  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1742  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1743  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1744  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1745      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1746  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1747  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1748  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1749  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1750  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1751      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1752  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1753  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1754  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1755  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1756  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1757      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1758      IfxScuWdt_clearCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1759      vadc->CLC.B.DISR = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1760      IfxScuWdt_setCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1761  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1762  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1763  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1764  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1765  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1766      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1767  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1768  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1769  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1770  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1771  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1772      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1773  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1774  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1775  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1776  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1777  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1778      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1779  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1780  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1781  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1782  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1783  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1784      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1785  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1786  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1787  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1788  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1789  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1790      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1791  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1792      IfxScuWdt_clearCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1793      vadc->CLC.U = 0x00000000;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1794      IfxScuWdt_setCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1795  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1796  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1797  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1798  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1799  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1800      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1801  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1802  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1803  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1804  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1805  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1806      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1807  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1808  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1809  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1810  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1811  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1812      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1813  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1814  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1815  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1816  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1817  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1818      uint8 status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1819      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	ld.bu	d15,[a2]
.L749:
	lea	a2,[a2]1024
.L750:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    24   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    25   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    26   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    27   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    28   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    29   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    30   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    31   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    32   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    33   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    34   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    35   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    36   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    37   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    38   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    39   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    40   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    41   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    42   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    43   * \ingroup IfxLld_Vadc_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    44   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    46  #ifndef IFXVADC_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    47  #define IFXVADC_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    48  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    49  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    50  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    51  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    52  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    53  #include "_Impl/IfxVadc_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    54  #include "_PinMap/IfxVadc_PinMap.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    55  #include "IfxVadc_bf.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    56  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    57  #include "Scu/Std/IfxScuCcu.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    58  #include "Scu/Std/IfxScuWdt.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    59  #include "IfxCcu6_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    60  #include "IfxCcu6_bf.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    61  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    62  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    63  /*--------------------------------Enumerations--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    64  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    65  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    66  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    67   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    68  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    69   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    70  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    71  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    72      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    73      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    74      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    75      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    76  } IfxVadc_AnalogConverterMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    77  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    78  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    79   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    80  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    81  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    82      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    83      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    84      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    85      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    86  } IfxVadc_ArbitrationRounds;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    87  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    88  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    89   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    91  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    92      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    93      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    94      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    95      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    96      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    97      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    98      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	    99      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   100      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   101      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   102      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   103      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   104      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   105      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   106      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   107      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   108  } IfxVadc_BoundaryExtension;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   109  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   110  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   111   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   112  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   113  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   118  } IfxVadc_BoundarySelection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   119  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   120  /** \brief VADC Channels
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   121   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   122  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   123  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   124      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   125      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   126      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   127      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   128      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   129      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   130      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   131      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   132      IfxVadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   133      IfxVadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   134      IfxVadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   135      IfxVadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   136      IfxVadc_ChannelId_11   = 11   /**< \brief Channel 11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   137  } IfxVadc_ChannelId;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   138  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   139  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   140   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   141  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   142  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   143      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   144      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   145  } IfxVadc_ChannelReference;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   146  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   147  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   148   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   149  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   150  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   151      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   152      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   153      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   154      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   155  } IfxVadc_ChannelResolution;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   156  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   157  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   158   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   159  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   160  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   161      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   162      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   163      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   164      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   165      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   166      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   169      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   170      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   171      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   172      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   173      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   174      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   175      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   176      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   177  } IfxVadc_ChannelResult;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   178  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   179  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   180   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   181   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   182  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   183  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   184      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   185      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   186                                                         * associated channel for EMUX control */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   187  } IfxVadc_ChannelSelectionStyle;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   189  /** \brief type of conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   190   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   191  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   192  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   193      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   194  } IfxVadc_ConversionType;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   195  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   196  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   197   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   198   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   199  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   200  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   201      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   202      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   203  } IfxVadc_EmuxCodingScheme;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   204  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   205  /** \brief Specifies the Emux interface
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   206   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   207  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   208  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   209      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   210      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   211  } IfxVadc_EmuxInterface;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   212  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   213  /** \brief External Multiplexer sample time control
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   214   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   215   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   216  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   217  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   218      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   219      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   220  } IfxVadc_EmuxSampleTimeControl;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   221  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   222  /** \brief specifies the External Channel Start select value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   223   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   224   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   225  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   226  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   227      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   228      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   229      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   230      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   231      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   232      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   233      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   234      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   235  } IfxVadc_EmuxSelectValue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   236  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   237  /** \brief Specifies External Multiplexer Mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   238   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   239   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   240  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   241  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   242      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   243      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   244      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   245      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   246  } IfxVadc_ExternalMultiplexerMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   247  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   248  /** \brief FIFO mode enable
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   249   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   250  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   251  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   252      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   253      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   254      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   255      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   256  } IfxVadc_FifoMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   257  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   258  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   259   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   260  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   261  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   262      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   263      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   264      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   265      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   266  } IfxVadc_GatingMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   267  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   268  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   269   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   270  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   271  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   272      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   273      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   274      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   275      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   276      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   277      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   278      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   279      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   280      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   281      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   282      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   283      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   284      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   285      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   286      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   287      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   288  } IfxVadc_GatingSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   289  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   290  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   291   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   292  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   293  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   294      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   295      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   296      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   297      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   298  } IfxVadc_InputClasses;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   299  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   300  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   301   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   302  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   303  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   304      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   305      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   306      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   307      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   308  } IfxVadc_LimitCheck;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   309  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   310  /** \brief Low Power Supply Voltage Select
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   311   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   312  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   313  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   314      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   315      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   316  } IfxVadc_LowSupplyVoltageSelect;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   318  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   319   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   320  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   321  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   322      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   323      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   324      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   325      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   326      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   327      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   328      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   329      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   330      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   331      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   332      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   333      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   334      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   335      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   336      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   337      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   338      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   339      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   340      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   341      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   342      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   343      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   344      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   345      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   381      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   382      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   383      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   384      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   385  } IfxVadc_Protection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   386  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   387  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   388   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   389  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   390  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   391      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   392      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   393      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   394      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   395  } IfxVadc_RequestSlotPriority;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   396  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   397  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   398   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   399  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   400  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   401      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   402      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   403  } IfxVadc_RequestSlotStartMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   404  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   405  /** \brief Request sources
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   406   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   407  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   408  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   409      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   410      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   411      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   412  } IfxVadc_RequestSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   413  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   414  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   415   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   416   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   417  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   418  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   419      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   420      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   421  } IfxVadc_SleepMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   422  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   423  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   424   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   425  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   426  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   427      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   428      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   429      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   430      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   431      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   432      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   433      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   434      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   435  } IfxVadc_SrcNr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   436  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   437  /** \brief API return values defined in
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   438   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   439   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   440   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   441  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   442  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   443      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   444      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   445      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   446      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   447      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   448      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   449      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   450  } IfxVadc_Status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   451  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   452  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   453   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   454  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   455  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   456      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   457      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   458      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   459      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   460  } IfxVadc_TriggerMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   462  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   463   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   464  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   465  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   466      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   467      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   468      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   469      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   470      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   471      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   472      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   473      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   474      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   475      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   476      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   477      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   478      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   479      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   480      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   481      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   482  } IfxVadc_TriggerSource;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   483  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   484  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   485  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   486  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   487   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   488  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   489  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   490  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   491  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   492  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   493  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   494   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   495   * \param resultIdx result register index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   496   * \param waitForRead wait for read mode enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   497   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   498   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   499  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   500  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   501  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   502   * \param vadc pointer to the VADC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   503   * \param waitForRead wait for read mode enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   504   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   505   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   506  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   507  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   508  /** \brief Enables the background sacn external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   509   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   510   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   511   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   512  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   513  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   514  /** \brief Gets the background scan gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   515   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   516   * \return background scan gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   517   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   518  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   519  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   520  /** \brief Gets the gating input selection.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   521   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   522   * \return background scan gating input selection.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   523   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   524  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   525  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   526  /** \brief Gets the requested background scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   527   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   528   * \return requested background scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   529   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   530  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   531  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   532  /** \brief Gets the requested background scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   533   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   534   * \return requested background scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   535   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   536  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   537  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   538  /** \brief Gets the background scan trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   539   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   540   * \return Gets the background scan external trigger source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   541   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   542  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   543  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   544  /** \brief Gets the background scan external trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   545   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   546   * \return background scan external trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   547   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   548  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   549  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   550  /** \brief get global input class resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   551   * \param vadc Pointer to the VADC Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   552   * \param inputClassNum global input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   553   * \return ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   554   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   555  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   556  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   557  /** \brief return conversion result stored in the Global result Register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   558   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   559   * \return global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   560   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   561   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   562   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   563   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   564   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   565   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   566   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   567   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   568   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   569   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   570   * // configure background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   571   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   572   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   573   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   574   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   575   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   576   * // start the background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   577   * IfxVadc_startBackgroundScan(vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   578   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   579   * Ifx_VADC_GLOBRES result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   580   * result = IfxVadc_getGlobalResult (vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   581   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   582   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   583   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   584   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   585  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   586  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   587  /** \brief get global input class sample time in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   588   * \param vadc Pointer to the VADC Group Register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   589   * \param inputClassNum ADC input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   590   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   591   * \return ADC input class channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   592   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   593  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   594  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   595  /** \brief Get conversion result for the group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   596   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   597   * \param results pointer to scaled conversion results
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   598   * \param resultOffset offset for the first result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   599   * \param numResults number of results
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   600   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   601   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   602   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   603   * Ifx_VADC* vadc = &MODULE_VADC
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   604   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   605   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   606   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   607   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   608   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   609   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   610   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   611   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   612   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   613   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   614   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   615   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   616   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   617   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   618   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   619   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   620   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   621   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   622   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   623   * // fetch the 2 results of conversion for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   624   * Ifx_VADC_RES results[10];
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   625   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   626   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   627   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   628   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   629  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   630  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   631  /** \brief Get conversion result (Function does not care about the alignment)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   632   * value = raw * gain + offset.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   633   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   634   * \param resultIdx result register index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   635   * \return scaled Conversion result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   636   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   637   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   638   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   639   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   640   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   641   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   642   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   643   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   644   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   645   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   646   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   647   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   648   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   649   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   650   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   651   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   652   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   653   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   654   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   655   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   656   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   657   * // fetch the result of conversion from result register 0 for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   658   * Ifx_VADC_RES result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   659   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   660   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   661   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   662   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   663  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   664  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   665  /** \brief Returns the auto background scan status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   666   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   667   * \return TRUE if enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   668   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   669  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   670  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   671  /** \brief Returns the background scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   672   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   673   * \return background scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   674   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   675  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   676  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   677  /** \brief Enables/Disables continuous background auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   678   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   679   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   680   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   681   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   682  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   683  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   684  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   685   * \param vadc pointer to the VADC module registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   686   * \param groupId group index
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   687   * \param channels specifies the channels which should be enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   688   * \param mask specifies the channels which should be modified
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   689   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   690   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   691   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   692   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   693   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   694   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   695   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   696   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   697   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   698   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   699   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   700   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   701   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   702   * // configure background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   703   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   704   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   705   * // enable auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   706   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   707   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   708   * // start the background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   709   * IfxVadc_startBackgroundScan(vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   710   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   711   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   712   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   713  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   714  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   715  /** \brief Sets the background scan slot gating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   716   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   717   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   718   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   719   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   720   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   721  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   722  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   723  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   724   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   725   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   726   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   727   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   728   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   729  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   730  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   731  /** \brief Starts a background scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   732   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   733   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   734   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   735   * \see IfxVadc_setBackgroundScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   736   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   737   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   738  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   739  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   740  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   741  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   742  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   743  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   744  /** \brief Gives the background scan status for a group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   745   * \param vadc pointer to the VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   746   * \return IfxVadc_Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   747   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   748  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   749  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   750  /** \brief Get conversion result (Function does not care about the alignment)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   751   * value = raw * gain + offset.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   752   * \param vadc VADC module pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   753   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   754   * \param channel channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   755   * \param sourceType type of request source
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   756   * \return scaled Conversion result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   757   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   758   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   759   * Ifx_VADC vadc;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   760   * vadc.vadc = &MODULE_VADC;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   761   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   762   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   763   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   764   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   765   * //confiure wait for read mode for global result register
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   766   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   767   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   768   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   769   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   770   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   771   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   772   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   773   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   774   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   775   * // wait for conversion to finish
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   776   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   777   * // fetch the result of conversion for channel 2 of group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   778   * Ifx_VADC_RESresult2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   779   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   780   * Ifx_VADC_RESresult5;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   781   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   782   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   783   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   784   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   785  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   786  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   787  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   788  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   789  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   790   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   791  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   792  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   794  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   795  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   796  /** \brief Disables the scan slot external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   797   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   798   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   799   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   800  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   801  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   802  /** \brief Enables the scan slot external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   803   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   804   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   805   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   806  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   807  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   808  /** \brief Gets the request scan slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   809   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   810   * \return requested scan slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   811   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   812  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   813  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   814  /** \brief Gets the request scan slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   815   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   816   * \return request scan slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   817   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   818  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   819  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   820  /** \brief Gets the request scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   821   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   822   * \return request scan slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   823   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   824  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   825  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   826  /** \brief Gets the request scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   827   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   828   * \return request scan slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   829   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   830  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   831  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   832  /** \brief Gets the requested scan slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   833   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   834   * \return requested scan slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   835   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   836  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   837  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   838  /** \brief Gets the requested scan slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   839   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   840   * \return requested scan slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   841   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   842  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   843  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   844  /** \brief Gets the auto scan enable status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   845   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   846   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   847   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   848  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   849  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   850  /** \brief Returns the scan slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   851   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   852   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   853   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   854  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   855  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   856  /** \brief Enables/Disables continuous auto scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   857   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   858   * \param autoscanEnable whether autoscan is enabled or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   859   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   860   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   861  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   862  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   863  /** \brief Sets the scan slot gating configuration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   864   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   865   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   866   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   867   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   868   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   869  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   870  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   871  /** \brief Sets the scan slot trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   872   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   873   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   874   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   875   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   876   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   877  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   878  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   879  /** \brief Starts an autoscan on the specified group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   880   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   881   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   882   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   883   * See \ref IfxVadc_setScan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   884   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   885   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   886  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   887  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   888  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   889  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   890  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   891  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   892  /** \brief Gives the scan status for a group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   893   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   894   * \return IfxVadc_Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   895   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   896  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   897  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   898  /** \brief Configures an (auto-)scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   899   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   900   * \param channels specifies the channels which should be enabled/disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   901   * \param mask specifies the channels which should be modified
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   902   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   903   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   904   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   905   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   906   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   907   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   908   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   909   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   910   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   911   * // configure scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   912   * IfxVadc_setScan(group, channels, mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   913   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   914   * // enable Auto-Scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   915   * IfxVadc_setAutoScan(group, TRUE);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   916   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   917   * // start the scan
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   918   * IfxVadc_startScan(group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   919   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   920   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   921   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   922  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   923  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   924  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   925  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   926  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   927   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   928  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   929  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   930  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   931  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   932  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   933  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   934   * refill incase of aborted conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   935   * source interrupt enable/disable
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   936   * external trigger control of the aborted conversion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   937   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   938   * \param channel specifies channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   939   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   940   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   941   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   942   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   943   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   944   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   945   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   946   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   947   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   948   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   949   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   950   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   951  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   952  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   953  /** \brief Clears all the queue entries including backup stage.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   954   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   955   * \param flushQueue Whether queue is cleared or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   956   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   957   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   958  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   959  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   960  /** \brief Disables the external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   961   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   962   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   963   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   964  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   965  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   966  /** \brief Enables the external trigger.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   967   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   968   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   969   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   970  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   971  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   972  /** \brief Gets the requested queue slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   973   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   974   * \return requested queue slot gating mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   975   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   976  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   977  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   978  /** \brief Gets the requested queue slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   979   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   980   * \return requested queue slot gating input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   981   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   982  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   983  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   984  /** \brief Gets the request queue slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   985   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   986   * \return requested queue slot priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   987   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   988  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   989  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   990  /** \brief Gets the requested queue slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   991   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   992   * \return requested queue slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   993   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   994  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   995  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   996  /** \brief Gets the requested queue slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   997   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   998   * \return requested queue slot trigger input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	   999   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1000  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1001  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1002  /** \brief Gets the requested queue slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1003   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1004   * \return requested queue slot trigger mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1005   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1006  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1007  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1008  /** \brief Returns the queue slot requested status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1009   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1010   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1011   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1012  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1013  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1014  /** \brief Sets the gating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1015   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1016   * \param gatingSource gate input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1017   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1018   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1019   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1020  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1021  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1022  /** \brief Sets the trigger operating configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1023   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1024   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1025   * \param triggerSource trigger input for group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1026   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1027   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1028  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1029  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1030  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1031   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1032   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1033   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1034  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1035  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1036  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1037  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1038  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1039  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1040  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1041   * \param group pointer to the VADC group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1042   * \return status of the Queue
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1043   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1044   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1045   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1046   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1047   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1048   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1049   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1050  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1051  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1052  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1053  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1054  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1055   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1056  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1057  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1058  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1059  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1060  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1061  /** \brief Initializes a EMUX output
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1062   * \param emux the Emux Pin which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1063   * \param outputMode the pin output mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1064   * \param padDriver the pad driver mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1065   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1066   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1067  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1068  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1069  /** \brief Initializes a GxBFL output
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1070   * \param gxBfl the GxBFL Pin which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1071   * \param outputMode the pin output mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1072   * \param padDriver the pad driver mode which should be configured
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1073   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1074   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1075  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1076  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1077  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1078  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1079  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1080   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1081  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1082  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1083  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1084  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1085  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1086  /** \brief Calculate the time using analog frequency.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1087   * \param analogFrequency analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1088   * \param sampleTime sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1089   * \return sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1090   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1091  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1092  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1093  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1094  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1095  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1096  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1097  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1098   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1099   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1100   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1101  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1102  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1103  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1104   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1105   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1106   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1107  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1108  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1109  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1110  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1111  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1112   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1114  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1115  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1116  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1117  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1118  /** \brief Clears the all group requests.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1119   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1120   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1121   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1122  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1124  /** \brief Gets the ADC group arbitration round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1125   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1126   * \return ADC group arbitration round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1127   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1128  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1129  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1130  /** \brief Gets the channel esult service request node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1131   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1132   * \return channel result service request node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1133   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1134  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1135  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1136  /** \brief Gets the channel esult service request node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1137   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1138   * \return channel result service request node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1139   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1140  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1141  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1142  /** \brief Gets the channel service request node pointer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1143   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1144   * \return channel service request node pointer.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1145   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1146  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1147  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1148  /** \brief Gets the configured master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1149   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1150   * \return configured master kernel index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1151   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1152  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1153  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1154  /** \brief Resets the ADC group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1155   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1156   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1157   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1158  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1159  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1160  /** \brief Sets analog converter group number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1161   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1162   * \param analogConverterMode group analog converter mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1163   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1164   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1165  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1166  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1167  /** \brief Sets the arbiter round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1168   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1169   * \param arbiterRoundLength arbiter round length.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1170   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1171   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1172  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1173  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1174  /** \brief Sets the ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1175   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1176   * \param inputClassNum input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1177   * \param resolution ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1178   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1179   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1180  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1181  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1182  /** \brief Sets the ADC input class sample time.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1183   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1184   * \param inputClassNum input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1185   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1186   * \param sampleTime request sample time in sec for input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1187   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1188   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1189  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1190  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1191  /** \brief Sets the master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1192   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1193   * \param masterIndex master index.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1194   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1195   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1196  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1197  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1198  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1199  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1200  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1201  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1202  /** \brief Sets the Arbiter slot configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1203   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1204   * \param slotEnable enable/disable of slot.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1205   * \param prio channel request priority.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1206   * \param mode Channel Slot start mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1207   * \param slot channel slot Request source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1208   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1209   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1210  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1211  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1212  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1213  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1214  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1215   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1216  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1217  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1218  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1219  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1221  /** \brief Disable VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1222   * \param vadc Pointer to VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1223   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1224   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1225  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1226  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1227  /** \brief Enable VADC kernel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1228   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1229   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1230   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1231  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1232  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1233  /** \brief gets ADC Calibration Flag CAL status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1234   * \param vadc pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1235   * \param adcCalGroupNum ADC CAL group number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1236   * \return CAL group status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1237   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1238  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1239  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1240  /** \brief Gets the global control configuration value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1241   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1242   * \return global control configuration value.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1243   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1244  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1246  /** \brief get SUCAL bit field status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1247   * \param vadc Pointer to VADC Module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1248   * \return Indicate the start-up calibration phase
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1249   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1250  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1251  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1252  /** \brief initiates the calibration pulse phase.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1253   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1254   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1255   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1256  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1257  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1258  /** \brief Sets the channel conversion mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1259   * \param vadc pointer to VADC module registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1260   * \param inputClassNum global input class  number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1261   * \param resolution ADC channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1262   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1263   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1264  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1265  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1266  /** \brief Sets the sample time of ADC global class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1267   * \param vadc pointer to VADC module registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1268   * \param inputClassNum global input class  number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1269   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1270   * \param sampleTime the requested sample time for input class in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1271   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1272   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1273  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1274  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1275  /** \brief Sets the sensitivity of the module to sleep signal
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1276   * \param vadc pointer to VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1277   * \param mode mode selection (enable/disable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1278   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1279   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1280  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1281  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1282  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1283  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1284  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1285  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1286  /** \brief Disable write access to the VADC config/control registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1287   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1288   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1289   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1290   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1291  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1292  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1293  /** \brief Disables the post calibration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1294   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1295   * \param group Index of the group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1296   * \param disable disable or not.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1297   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1298   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1299  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1300  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1301  /** \brief Enable write access to the VADC config/control registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1302   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1303   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1304   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1305   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1306  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1307  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1308  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1309   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1310   * \param ccu6Num selects CCU60 or CCU61
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1311   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1312   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1313  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1314  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1315  /** \brief Module Frequency in Hz
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1316   * \return Module Frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1317   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1318  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1319  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1320  /** \brief Gives the SRC source address.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1321   * \param group Index of the group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1322   * \param index SRC number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1323   * \return SRC source address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1324   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1325  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1326  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1327  /** \brief Initialises ADC arbiter clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1328   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1329   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1330   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1331   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1332  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1333  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1334  /** \brief Initialises the ADC Converter clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1335   * \param vadc pointer to the base of VADC registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1336   * \param converterClockDivider ADC converter clock divider.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1337   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1338   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1339  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1340  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1341  /** \brief Configure the FadcD vadc digital clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1342   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1343   * \param fAdcD ADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1344   * \return calculated ADC digital clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1345   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1346  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1347  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1348  /** \brief Configure the ADC analog clock.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1349   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1350   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1351   * \return ADC analog clock frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1352   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1353  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1354  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1355  /** \brief Return the post calibration status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1356   * \param vadc Pointer to VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1357   * \param group specifies Group ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1358   * \return TRUE if the post calibration is enabled for the group else false
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1359   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1360  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1361  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1362  /** \brief Resets the kernel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1363   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1364   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1365   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1366  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1367  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1368  /** \brief Select Low Power Supply Voltage
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1369   * \param vadc Pointer to Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1370   * \param supplyVoltage Select Supply Voltage
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1371   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1372   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1373  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1374  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1375  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1376   * \param vadc pointer to the base of VADC registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1377   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1378   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1379  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1380  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1381  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1382  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1383  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1384   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1385  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1386  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1387  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1388  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1389  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1390  /** \brief Clears the channel request.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1391   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1392   * \param channelId channel id whose request to be cleared.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1393   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1394   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1395  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1396  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1397  /** \brief Enables the FIFO mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1398   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1399   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1400   * \param fifoMode FIFO mode .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1401   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1402   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1403  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1404  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1405  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1406   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1407   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1408   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1409   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1410  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1411  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1412  /** \brief Gets the group's assigned channels.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1413   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1414   * \return group's assigned channels.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1415   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1416  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1417  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1418  /** \brief Gets the current ADC channel control configurations.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1419   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1420   * \param channelIndex ADC channel number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1421   * \return current ADC channel control configuration.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1422   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1423  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1424  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1425  /** \brief Gets the channel input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1426   * \param vadcG pointer to VADC Group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1427   * \param channelIndex specifies channel ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1428   * \return Input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1429   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1430  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1431  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1432  /** \brief Gets the ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1433   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1434   * \param inputClassNum ADC input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1435   * \return ADC input class channel resolution.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1436   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1437  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1438  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1439  /** \brief Gets the ADC input class channel sample time.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1440   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1441   * \param inputClassNum ADC input class number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1442   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1443   * \return ADC input class channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1444   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1445  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1446  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1447  /** \brief Sets the channels with low priority as background channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1448   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1449   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1450   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1451   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1452  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1453  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1454  /** \brief Sets the target for result background source.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1455   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1456   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1457   * \param globalResultUsage whether storage in global result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1458   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1459   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1460  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1461  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1462  /** \brief Selects boundary extension.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1463   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1464   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1465   * \param boundaryMode boundary extension mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1466   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1467   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1468  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1469  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1470  /** \brief Sets the channel event service request line.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1471   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1472   * \param channelSrcNr channel event Service Node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1473   * \param channel channel number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1474   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1475   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1476  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1477  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1478  /** \brief Sets the channel input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1479   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1480   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1481   * \param inputClass group input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1482   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1483   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1484  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1485  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1486  /** \brief Sets the channel event mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1487   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1488   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1489   * \param limitCheck channel event mode.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1490   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1491   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1492  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1493  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1494  /** \brief Sets channel as priority channel with in the group.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1495   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1496   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1497   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1498   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1499  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1500  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1501  /** \brief Sets group's lower boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1502   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1503   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1504   * \param lowerBoundary group lower boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1505   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1506   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1507  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1508  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1509  /** \brief Selects the refernce input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1510   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1511   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1512   * \param reference reference input.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1513   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1514   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1515  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1516  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1517  /** \brief Sets result event node pointer 0.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1518   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1519   * \param resultSrcNr channel result event service node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1520   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1521   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1522   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1523  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1524  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1525  /** \brief Sets result event node pointer 1.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1526   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1527   * \param resultSrcNr channel result event service node.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1528   * \param resultRegister channel result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1529   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1530   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1531  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1532  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1533  /** \brief Sets result store position.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1534   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1535   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1536   * \param rightAlignedStorage result store position.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1537   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1538   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1539  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1540  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1541  /** \brief Sets channel synchronization request.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1542   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1543   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1544   * \param synchonize whether channel synchronize or stand alone operation.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1545   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1546   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1547  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1548  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1549  /** \brief Sets group's upper boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1550   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1551   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1552   * \param upperBoundary group upper boundary.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1553   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1554   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1555  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1556  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1557  /** \brief Sets the group result register.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1558   * \param vadcG pointer to VADC group registers.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1559   * \param channelIndex group channel id.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1560   * \param resultRegister result register for group result storage.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1561   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1562   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1563  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1564  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1565  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1566  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1567  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1568  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1569  /** \brief get channel conversion timing
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1570   * \param vadc Pointer to VADC module
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1571   * \param group specifies the Group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1572   * \param inputClass Input class used
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1573   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1574   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1575   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1576   * \return Channel conversion Time in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1577   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1578  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1579  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1580  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1581  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1582  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1583   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1584  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1585  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1586  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1587  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1588  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1589  /** \brief get global input class resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1590   * \param vadc Pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1591   * \param inputClassNum global input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1592   * \return External channel resolution for global input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1593   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1594  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1595  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1596  /** \brief Get the sample time of ADC global class for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1597   * \param vadc pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1598   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1599   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1600   * \return ADC input class external channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1601   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1602  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1603  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1604  /** \brief get the external channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1605   * \param vadcG Pointer to VADC group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1606   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1607   * \return Adc input class External channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1608   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1609  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1610  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1611  /** \brief Gets the ADC input class sample time of external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1612   * \param vadcG Pointer to Register Group space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1613   * \param inputClassNum ADC input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1614   * \param analogFrequency ADC module analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1615   * \return ADC input class external channel sample time in sec.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1616   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1617  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1618  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1619  /** \brief set the external channel resolution of Global class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1620   * \param vadc pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1621   * \param inputClassNum Global Input Class Number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1622   * \param resolution External Channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1623   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1624   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1625  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1626  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1627  /** \brief Sets the sample time of ADC global class for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1628   * \param vadc Pointer to VADC Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1629   * \param inputClassNum Adc input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1630   * \param analogFrequency ADC analog Frequency in HZ
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1631   * \param sampleTime the requested sample time for input class in sec
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1632   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1633   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1634  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1635  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1636  /** \brief set the external channel resolution of ADC input class
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1637   * \param vadcG pointer to VADC Group Register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1638   * \param inputClassNum input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1639   * \param resolution input class external channel resolution
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1640   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1641   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1642  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1643  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1644  /** \brief Sets the ADC input class sample time for external channel.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1645   * \param vadcG Pointer to VADC Group Register Space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1646   * \param inputClassNum input class number
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1647   * \param analogFrequency ADC analog frequency in Hz.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1648   * \param sampleTime request sample time in sec for input class.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1649   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1650   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1651  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1652  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1653  /** \brief Sets the Emux Interface for a particular group
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1654   * \param vadc Pointer to VADC Module Space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1655   * \param emuxInterface specifies the EmuxInterface
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1656   * \param group specifies the group ID
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1657   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1658   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1659  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1660  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1661  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1662  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1663  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1664  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1665  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1666   * \param vadc pointer to Module space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1667   * \param vadcG Pointer to VADC group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1668   * \param mode External Multiplexer mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1669   * \param channels Specifies channel Id
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1670   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1671   * \param code Output the channel number in binary code/gray code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1672   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1673   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1674   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1675   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1676  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1677  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1678  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1679  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1680  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1681  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1682  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1683  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1684  /** \brief get channel service request node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1685   * \param vadcG Pointer to VADC Group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1686   * \return channel service request node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1687   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1688  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1689  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1690  /** \brief set channel event node pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1691   * \param vadcG Pointer to the Vadc group register space
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1692   * \param channelSrcNr Service request
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1693   * \param channel specifies channel
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1694   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1695   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1696  IFX_INLINE void IfxVadc_setChannelEventNodePointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1697  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1698  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1699  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1700  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1701  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1702  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1703  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1704      group->QINR0.U = channel | options;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1705  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1706  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1707  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1708  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1709  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1710      uint32 ticks;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1711  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1712      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1713  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1714      if (ticks > 31)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1715      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1716          ticks = (ticks / 16) + 15;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1717      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1718  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1719      ticks = __minu(ticks, 0xFFu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1720  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1721      return ticks;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1722  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1723  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1724  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1725  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1726  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1727      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1728  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1729  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1730  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1731  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1732  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1733      vadcG->CEFCLR.U = 1 << channelId;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1734  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1735  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1736  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1737  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1738  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1739      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1740  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1741  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1742  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1743  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1744  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1745      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1746  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1747  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1748  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1749  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1750  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1751      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1752  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1753  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1754  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1755  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1756  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1757      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1758      IfxScuWdt_clearCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1759      vadc->CLC.B.DISR = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1760      IfxScuWdt_setCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1761  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1762  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1763  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1764  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1765  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1766      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1767  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1768  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1769  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1770  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1771  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1772      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1773  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1774  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1775  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1776  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1777  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1778      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1779  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1780  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1781  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1782  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1783  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1784      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1785  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1786  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1787  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1788  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1789  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1790      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1791  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1792      IfxScuWdt_clearCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1793      vadc->CLC.U = 0x00000000;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1794      IfxScuWdt_setCpuEndinit(passwd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1795  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1796  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1797  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1798  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1799  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1800      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1801  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1802  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1803  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1804  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1805  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1806      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1807  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1808  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1809  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1810  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1811  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1812      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1813  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1814  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1815  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1816  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1817  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1818      uint8 status;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.h	  1819      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	extr.u	d15,d15,#4,#1
.L526:
	cmov	d0,d15,#1
	loop	a4,.L68
.L371:
	jne	d0,#0,.L67
.L751:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Vadc\Std\IfxVadc.c	   562  }
	ret
.L360:
	
__IfxVadc_startupCalibration_function_end:
	.size	IfxVadc_startupCalibration,__IfxVadc_startupCalibration_function_end-IfxVadc_startupCalibration
.L235:
	; End of function
	
	.calls	'IfxVadc_configExternalMultiplexerMode','IfxVadc_enableAccess'
	.calls	'IfxVadc_configExternalMultiplexerMode','IfxVadc_disableAccess'
	.calls	'IfxVadc_disableAccess','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxVadc_disableAccess','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxVadc_disableAccess','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxVadc_disablePostCalibration','IfxVadc_enableAccess'
	.calls	'IfxVadc_disablePostCalibration','IfxVadc_disableAccess'
	.calls	'IfxVadc_enableAccess','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxVadc_enableAccess','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxVadc_enableAccess','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxVadc_enableGroupSync','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxVadc_enableGroupSync','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxVadc_enableGroupSync','IfxVadc_enableAccess'
	.calls	'IfxVadc_enableGroupSync','IfxVadc_disableAccess'
	.calls	'IfxVadc_enableGroupSync','IfxScuWdt_setCpuEndinit'
	.calls	'IfxVadc_getAdcAnalogFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_getAdcDigitalFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_getAdcModuleFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_getChannelConversionTime','IfxVadc_isPostCalibration'
	.calls	'IfxVadc_initialiseAdcArbiterClock','IfxVadc_enableAccess'
	.calls	'IfxVadc_initialiseAdcArbiterClock','IfxVadc_disableAccess'
	.calls	'IfxVadc_initialiseAdcConverterClock','IfxVadc_enableAccess'
	.calls	'IfxVadc_initialiseAdcConverterClock','IfxVadc_disableAccess'
	.calls	'IfxVadc_initializeFAdcD','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_initializeFAdcD','IfxVadc_initialiseAdcArbiterClock'
	.calls	'IfxVadc_initializeFAdcI','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_initializeFAdcI','IfxVadc_initialiseAdcConverterClock'
	.calls	'IfxVadc_resetKernel','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxVadc_resetKernel','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxVadc_resetKernel','IfxVadc_enableAccess'
	.calls	'IfxVadc_resetKernel','IfxScuWdt_setCpuEndinit'
	.calls	'IfxVadc_resetKernel','IfxVadc_disableAccess'
	.calls	'IfxVadc_selectPowerSupplyVoltage','IfxVadc_enableAccess'
	.calls	'IfxVadc_selectPowerSupplyVoltage','IfxVadc_disableAccess'
	.calls	'IfxVadc_startupCalibration','IfxVadc_enableAccess'
	.calls	'IfxVadc_startupCalibration','IfxVadc_disableAccess'
	.calls	'IfxVadc_disableAccess','.cocofun_8'
	.calls	'IfxVadc_disablePostCalibration','.cocofun_7'
	.calls	'IfxVadc_enableAccess','.cocofun_8'
	.calls	'IfxVadc_enableGroupSync','.cocofun_7'
	.calls	'IfxVadc_initialiseAdcArbiterClock','.cocofun_7'
	.calls	'IfxVadc_initialiseAdcConverterClock','.cocofun_7'
	.calls	'IfxVadc_resetKernel','.cocofun_7'
	.calls	'IfxVadc_selectPowerSupplyVoltage','.cocofun_7'
	.calls	'IfxVadc_startupCalibration','.cocofun_7'
	.calls	'IfxVadc_configExternalMultiplexerMode','',0
	.calls	'IfxVadc_disableAccess','',0
	.calls	'.cocofun_8','',0
	.calls	'IfxVadc_disablePostCalibration','',0
	.calls	'.cocofun_7','',0
	.calls	'IfxVadc_enableAccess','',0
	.calls	'IfxVadc_enableGroupSync','',0
	.calls	'IfxVadc_getAdcAnalogFrequency','',0
	.calls	'IfxVadc_getAdcDigitalFrequency','',0
	.calls	'IfxVadc_getAdcModuleFrequency','',0
	.calls	'IfxVadc_getBackgroundScanStatus','',0
	.calls	'IfxVadc_getChannelConversionTime','',0
	.calls	'IfxVadc_getQueueStatus','',0
	.calls	'IfxVadc_getResultBasedOnRequestSource','',0
	.calls	'IfxVadc_getScanStatus','',0
	.calls	'IfxVadc_getSrcAddress','',0
	.calls	'IfxVadc_initialiseAdcArbiterClock','',0
	.calls	'IfxVadc_initialiseAdcConverterClock','',0
	.calls	'IfxVadc_initializeFAdcD','',0
	.calls	'IfxVadc_initializeFAdcI','',0
	.calls	'IfxVadc_isPostCalibration','',0
	.calls	'IfxVadc_resetKernel','',0
	.calls	'IfxVadc_selectPowerSupplyVoltage','',0
	.calls	'IfxVadc_setArbiterPriority','',0
	.calls	'IfxVadc_setScan','',0
	.extern	IfxVadc_cfg_srcAddresses
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_clearSafetyEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_setSafetyEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxScuCcu_getSpbFrequency
	.calls	'IfxVadc_startupCalibration','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L123:
	.word	115678
	.half	3
	.word	.L124
	.byte	4
.L122:
	.byte	1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L125
	.byte	2
	.byte	'__stopPerfCounters',0,3,1,217,1,17,1,1,3,0,4
	.byte	'unsigned long long int',0,8,7,5
	.byte	'void',0,6
	.word	241
	.byte	7
	.byte	'__ld64',0,3,2,110,19
	.word	215
	.byte	1,1,8
	.byte	'addr',0,2,110,32
	.word	247
	.byte	3,0,2
	.byte	'__st64',0,3,2,118,17,1,1,8
	.byte	'addr',0,2,118,30
	.word	247
	.byte	8
	.byte	'value',0,2,118,43
	.word	215
	.byte	3,0,4
	.byte	'unsigned int',0,4,7,4
	.byte	'int',0,4,5
.L260:
	.byte	4
	.byte	'unsigned char',0,1,8,9
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,45,16,4,10
	.byte	'SRPN',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'ECC',0,1
	.word	351
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	3,0,2,35,2,10
	.byte	'SRR',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,4,70,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	368
	.byte	4,2,35,0,0,13
	.word	658
.L324:
	.byte	6
	.word	697
	.byte	2
	.byte	'IfxSrc_clearRequest',0,3,3,230,1,17,1,1,8
	.byte	'src',0,3,230,1,60
	.word	702
	.byte	3,0,4
	.byte	'unsigned int',0,4,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,6,133,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	750
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	750
	.byte	16,0,2,35,0,0,11,6,187,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	766
	.byte	4,2,35,0,0
.L301:
	.byte	4
	.byte	'unsigned short int',0,2,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,6,142,8,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'IR0',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	351
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,6,195,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	924
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,6,157,8,16,4,10
	.byte	'AE',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	351
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,6,203,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1168
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU',0,6,243,13,25,12,12
	.byte	'CON0',0
	.word	862
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	1128
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	1359
	.byte	4,2,35,8,0,13
	.word	1399
	.byte	6
	.word	1462
	.byte	2
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,5,130,3,17,1,1,8
	.byte	'watchdog',0,5,130,3,65
	.word	1467
	.byte	8
	.byte	'password',0,5,130,3,82
	.word	902
	.byte	3,0,2
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,5,222,3,17,1,1,8
	.byte	'watchdog',0,5,222,3,63
	.word	1467
	.byte	8
	.byte	'password',0,5,222,3,80
	.word	902
	.byte	3,0,7
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,5,187,3,19
	.word	902
	.byte	1,1,8
	.byte	'watchdog',0,5,187,3,74
	.word	1467
	.byte	3,0,9
	.byte	'_Ifx_P_OUT_Bits',0,8,231,2,16,4,10
	.byte	'P0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,8,239,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1697
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMR_Bits',0,8,129,2,16,4,10
	.byte	'PS0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'PCL0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,8,191,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2013
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,10
	.byte	'MODREV',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,8,231,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2584
	.byte	4,2,35,0,0,14,4
	.word	351
	.byte	15,3,0,9
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'PC0',0,1
	.word	351
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'PC1',0,1
	.word	351
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	351
	.byte	3,5,2,35,2,10
	.byte	'PC2',0,1
	.word	351
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	3,5,2,35,3,10
	.byte	'PC3',0,1
	.word	351
	.byte	5,0,2,35,3,0,11,8,247,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2712
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'PC4',0,1
	.word	351
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'PC5',0,1
	.word	351
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	351
	.byte	3,5,2,35,2,10
	.byte	'PC6',0,1
	.word	351
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	3,5,2,35,3,10
	.byte	'PC7',0,1
	.word	351
	.byte	5,0,2,35,3,0,11,8,135,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2927
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'PC8',0,1
	.word	351
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'PC9',0,1
	.word	351
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	351
	.byte	3,5,2,35,2,10
	.byte	'PC10',0,1
	.word	351
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	3,5,2,35,3,10
	.byte	'PC11',0,1
	.word	351
	.byte	5,0,2,35,3,0,11,8,143,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3142
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'PC12',0,1
	.word	351
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'PC13',0,1
	.word	351
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	351
	.byte	3,5,2,35,2,10
	.byte	'PC14',0,1
	.word	351
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	3,5,2,35,3,10
	.byte	'PC15',0,1
	.word	351
	.byte	5,0,2,35,3,0,11,8,255,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3359
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,10
	.byte	'P0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,8,239,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3579
	.byte	4,2,35,0,0,14,24
	.word	351
	.byte	15,23,0,9
	.byte	'_Ifx_P_PDR0_Bits',0,8,160,3,16,4,10
	.byte	'PD0',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	351
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'PD2',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'PL2',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'PD3',0,1
	.word	351
	.byte	3,1,2,35,1,10
	.byte	'PL3',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'PD4',0,1
	.word	351
	.byte	3,5,2,35,2,10
	.byte	'PL4',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'PD5',0,1
	.word	351
	.byte	3,1,2,35,2,10
	.byte	'PL5',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'PD6',0,1
	.word	351
	.byte	3,5,2,35,3,10
	.byte	'PL6',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'PD7',0,1
	.word	351
	.byte	3,1,2,35,3,10
	.byte	'PL7',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,8,135,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3902
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PDR1_Bits',0,8,181,3,16,4,10
	.byte	'PD8',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'PL8',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PD9',0,1
	.word	351
	.byte	3,1,2,35,0,10
	.byte	'PL9',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'PD10',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'PL10',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'PD11',0,1
	.word	351
	.byte	3,1,2,35,1,10
	.byte	'PL11',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'PD12',0,1
	.word	351
	.byte	3,5,2,35,2,10
	.byte	'PL12',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'PD13',0,1
	.word	351
	.byte	3,1,2,35,2,10
	.byte	'PL13',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'PD14',0,1
	.word	351
	.byte	3,5,2,35,3,10
	.byte	'PL14',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'PD15',0,1
	.word	351
	.byte	3,1,2,35,3,10
	.byte	'PL15',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,8,143,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4206
	.byte	4,2,35,0,0,14,8
	.word	351
	.byte	15,7,0,9
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,10
	.byte	'EN0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,8,223,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4531
	.byte	4,2,35,0,0,14,12
	.word	351
	.byte	15,11,0,9
	.byte	'_Ifx_P_PDISC_Bits',0,8,138,3,16,4,10
	.byte	'PDIS0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'PDIS2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'PDIS3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PDIS4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'PDIS5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'PDIS6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PDIS7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'PDIS8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PDIS9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'PDIS10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'PDIS11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'PDIS12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'PDIS13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'PDIS14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'PDIS15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,8,255,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4871
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PCSR_Bits',0,8,253,2,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'SEL1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'SEL2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	902
	.byte	6,7,2,35,0,10
	.byte	'SEL9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'SEL10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	328
	.byte	20,1,2,35,0,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,8,247,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5237
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR0_Bits',0,8,166,2,16,4,10
	.byte	'PS0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,11,8,207,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5448
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR4_Bits',0,8,187,2,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'PS4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,11,8,223,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5595
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR8_Bits',0,8,198,2,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'PS8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	328
	.byte	20,0,2,35,0,0,11,8,231,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5764
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR12_Bits',0,8,176,2,16,4,10
	.byte	'reserved_0',0,2
	.word	902
	.byte	12,4,2,35,0,10
	.byte	'PS12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,8,215,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5936
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR0_Bits',0,8,192,1,16,4,10
	.byte	'reserved_0',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	902
	.byte	12,0,2,35,2,0,11,8,159,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6111
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR4_Bits',0,8,213,1,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	20,12,2,35,0,10
	.byte	'PCL4',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	8,0,2,35,3,0,11,8,175,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6285
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR8_Bits',0,8,224,1,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	24,8,2,35,0,10
	.byte	'PCL8',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	351
	.byte	4,0,2,35,3,0,11,8,183,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6459
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR12_Bits',0,8,203,1,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	28,4,2,35,0,10
	.byte	'PCL12',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,8,167,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6635
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR_Bits',0,8,209,2,16,4,10
	.byte	'PS0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,8,199,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6791
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR_Bits',0,8,235,1,16,4,10
	.byte	'reserved_0',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,8,151,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7124
	.byte	4,2,35,0,0,14,96
	.word	351
	.byte	15,95,0,9
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,11,8,215,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7481
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,10
	.byte	'EN0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,8,207,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7568
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P',0,8,159,5,25,128,2,12
	.byte	'OUT',0
	.word	1973
	.byte	4,2,35,0,12
	.byte	'OMR',0
	.word	2544
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	2663
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	2703
	.byte	4,2,35,12,12
	.byte	'IOCR0',0
	.word	2887
	.byte	4,2,35,16,12
	.byte	'IOCR4',0
	.word	3102
	.byte	4,2,35,20,12
	.byte	'IOCR8',0
	.word	3319
	.byte	4,2,35,24,12
	.byte	'IOCR12',0
	.word	3539
	.byte	4,2,35,28,12
	.byte	'reserved_20',0
	.word	2703
	.byte	4,2,35,32,12
	.byte	'IN',0
	.word	3853
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	3893
	.byte	24,2,35,40,12
	.byte	'PDR0',0
	.word	4166
	.byte	4,2,35,64,12
	.byte	'PDR1',0
	.word	4482
	.byte	4,2,35,68,12
	.byte	'reserved_48',0
	.word	4522
	.byte	8,2,35,72,12
	.byte	'ESR',0
	.word	4822
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	4862
	.byte	12,2,35,84,12
	.byte	'PDISC',0
	.word	5197
	.byte	4,2,35,96,12
	.byte	'PCSR',0
	.word	5408
	.byte	4,2,35,100,12
	.byte	'reserved_64',0
	.word	4522
	.byte	8,2,35,104,12
	.byte	'OMSR0',0
	.word	5555
	.byte	4,2,35,112,12
	.byte	'OMSR4',0
	.word	5724
	.byte	4,2,35,116,12
	.byte	'OMSR8',0
	.word	5896
	.byte	4,2,35,120,12
	.byte	'OMSR12',0
	.word	6071
	.byte	4,2,35,124,12
	.byte	'OMCR0',0
	.word	6245
	.byte	4,3,35,128,1,12
	.byte	'OMCR4',0
	.word	6419
	.byte	4,3,35,132,1,12
	.byte	'OMCR8',0
	.word	6595
	.byte	4,3,35,136,1,12
	.byte	'OMCR12',0
	.word	6751
	.byte	4,3,35,140,1,12
	.byte	'OMSR',0
	.word	7084
	.byte	4,3,35,144,1,12
	.byte	'OMCR',0
	.word	7432
	.byte	4,3,35,148,1,12
	.byte	'reserved_98',0
	.word	7472
	.byte	96,3,35,152,1,12
	.byte	'ACCEN1',0
	.word	7528
	.byte	4,3,35,248,1,12
	.byte	'ACCEN0',0
	.word	8095
	.byte	4,3,35,252,1,0,13
	.word	8135
	.byte	6
	.word	8668
	.byte	16,7,105,9,1,17
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,17
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,16,7,91,9,1,17
	.byte	'IfxPort_OutputIdx_general',0,128,1,17
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,17
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,17
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,17
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,17
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,17
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,17
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,2
	.byte	'IfxPort_setPinModeOutput',0,3,7,137,4,17,1,1,8
	.byte	'port',0,7,137,4,49
	.word	8673
	.byte	8
	.byte	'pinIndex',0,7,137,4,61
	.word	351
	.byte	8
	.byte	'mode',0,7,137,4,90
	.word	8678
	.byte	8
	.byte	'index',0,7,137,4,114
	.word	8747
	.byte	3,0,16,7,131,1,9,4,17
	.byte	'IfxPort_State_notChanged',0,0,17
	.byte	'IfxPort_State_high',0,1,17
	.byte	'IfxPort_State_low',0,128,128,4,17
	.byte	'IfxPort_State_toggled',0,129,128,4,0,2
	.byte	'IfxPort_setPinState',0,3,7,143,4,17,1,1,8
	.byte	'port',0,7,143,4,44
	.word	8673
	.byte	8
	.byte	'pinIndex',0,7,143,4,56
	.word	351
	.byte	8
	.byte	'action',0,7,143,4,80
	.word	9060
	.byte	3,0,16,10,83,9,1,17
	.byte	'IfxCpu_ResourceCpu_0',0,0,17
	.byte	'IfxCpu_ResourceCpu_none',0,1,0,7
	.byte	'IfxCpu_getCoreIndex',0,3,9,170,5,31
	.word	9241
	.byte	1,1,3,0,7
	.byte	'IfxCpu_areInterruptsEnabled',0,3,9,185,4,20
	.word	351
	.byte	1,1,3,0
.L278:
	.byte	4
	.byte	'unsigned long int',0,4,7,7
	.byte	'IfxCpu_getPerformanceCounter',0,3,9,190,5,19
	.word	9372
	.byte	1,1,8
	.byte	'address',0,9,190,5,55
	.word	9372
	.byte	3,0,7
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,9,198,5,20
	.word	351
	.byte	1,1,8
	.byte	'address',0,9,198,5,70
	.word	9372
	.byte	3,0,2
	.byte	'IfxCpu_updatePerformanceCounter',0,3,9,153,7,17,1,1,8
	.byte	'address',0,9,153,7,56
	.word	9372
	.byte	8
	.byte	'count',0,9,153,7,72
	.word	9372
	.byte	3,0
.L283:
	.byte	4
	.byte	'float',0,4,4,7
	.byte	'IfxVadc_calculateSampleTime',0,3,11,172,13,19
	.word	9372
	.byte	1,1,8
	.byte	'analogFrequency',0,11,172,13,55
	.word	9601
	.byte	8
	.byte	'sampleTime',0,11,172,13,80
	.word	9601
	.byte	3,0,9
	.byte	'_Ifx_VADC_CLC_Bits',0,12,164,1,16,4,10
	.byte	'DISR',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,11,12,217,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9697
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_ID_Bits',0,12,241,7,16,4,10
	.byte	'MODREV',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,169,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9855
	.byte	4,2,35,0,0,14,28
	.word	351
	.byte	15,27,0,9
	.byte	'_Ifx_VADC_OCS_Bits',0,12,143,8,16,4,10
	.byte	'TGS',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'TGB',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'TG_P',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	20,8,2,35,0,10
	.byte	'SUS',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	351
	.byte	2,0,2,35,3,0,11,12,201,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9987
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_KRSTCLR_Bits',0,12,136,8,16,4,10
	.byte	'CLR',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,11,12,193,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10194
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_KRST1_Bits',0,12,129,8,16,4,10
	.byte	'RST',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,11,12,185,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10301
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_KRST0_Bits',0,12,249,7,16,4,10
	.byte	'RST',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,11,12,177,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10406
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_ACCEN0_Bits',0,12,49,16,4,10
	.byte	'EN0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,161,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10530
	.byte	4,2,35,0,0,14,64
	.word	351
	.byte	15,63,0,9
	.byte	'_Ifx_VADC_GLOBCFG_Bits',0,12,252,6,16,4,10
	.byte	'DIVA',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	351
	.byte	2,1,2,35,0,10
	.byte	'DCMSB',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'DIVD',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	351
	.byte	2,4,2,35,1,10
	.byte	'REFPC',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'LOSUP',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'DIVWC',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'DPCAL0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'DPCAL1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'DPCAL2',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'DPCAL3',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	902
	.byte	11,1,2,35,2,10
	.byte	'SUCAL',0,1
	.word	351
	.byte	1,0,2,35,3,0
.L321:
	.byte	11,12,225,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11109
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_ACCPROT0_Bits',0,12,86,16,4,10
	.byte	'APC0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'APC1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'APC2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'APC3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	902
	.byte	11,1,2,35,0,10
	.byte	'APEM',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'API0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'API1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'API2',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'API3',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	902
	.byte	11,1,2,35,2,10
	.byte	'APGC',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,169,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11459
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_ACCPROT1_Bits',0,12,103,16,4,10
	.byte	'APS0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'APS1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'APS2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'APS3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	902
	.byte	11,1,2,35,0,10
	.byte	'APTF',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'APR0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'APR1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'APR2',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'APR3',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	902
	.byte	12,0,2,35,2,0,11,12,177,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11734
	.byte	4,2,35,0,0,14,16
	.word	351
	.byte	15,15,0,9
	.byte	'_Ifx_VADC_ICLASS_Bits',0,12,228,7,16,4,10
	.byte	'STCS',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	351
	.byte	3,0,2,35,0,10
	.byte	'CMS',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	5,0,2,35,1,10
	.byte	'STCE',0,1
	.word	351
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	3,0,2,35,2,10
	.byte	'CME',0,1
	.word	351
	.byte	3,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	351
	.byte	5,0,2,35,3,0,11,12,161,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12002
	.byte	4,2,35,0,0,14,8
	.word	12184
	.byte	15,1,0,9
	.byte	'_Ifx_VADC_GLOBBOUND_Bits',0,12,243,6,16,4,10
	.byte	'BOUNDARY0',0,2
	.word	902
	.byte	12,4,2,35,0,10
	.byte	'reserved_12',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'BOUNDARY1',0,2
	.word	902
	.byte	12,4,2,35,2,10
	.byte	'reserved_28',0,1
	.word	351
	.byte	4,0,2,35,3,0,11,12,217,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12233
	.byte	4,2,35,0,0,14,36
	.word	351
	.byte	15,35,0,9
	.byte	'_Ifx_VADC_GLOBEFLAG_Bits',0,12,144,7,16,4,10
	.byte	'SEVGLB',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	351
	.byte	7,0,2,35,0,10
	.byte	'REVGLB',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	351
	.byte	7,0,2,35,1,10
	.byte	'SEVGLBCLR',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	351
	.byte	7,0,2,35,2,10
	.byte	'REVGLBCLR',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	351
	.byte	7,0,2,35,3,0,11,12,233,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12402
	.byte	4,2,35,0,0,14,92
	.word	351
	.byte	15,91,0,9
	.byte	'_Ifx_VADC_GLOBEVNP_Bits',0,12,157,7,16,4,10
	.byte	'SEV0NP',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	902
	.byte	12,0,2,35,0,10
	.byte	'REV0NP',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	902
	.byte	12,0,2,35,2,0,11,12,241,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12651
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_GLOBTF_Bits',0,12,209,7,16,4,10
	.byte	'CDCH',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'CDGR',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'CDEN',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'CDSEL',0,1
	.word	351
	.byte	2,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	4,1,2,35,1,10
	.byte	'CDWC',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'PDD',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'MDPD',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'MDPU',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	351
	.byte	4,1,2,35,2,10
	.byte	'MDWC',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	6,2,2,35,3,10
	.byte	'RCEN',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'RCWC',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,153,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12803
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_GLOBTE_Bits',0,12,201,7,16,4,10
	.byte	'TFEG0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'TFEG1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,11,12,145,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13117
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_BRSSEL_Bits',0,12,158,1,16,4,10
	.byte	'CHSELGy',0,4
	.word	328
	.byte	32,0,2,35,0,0,11,12,209,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13242
	.byte	4,2,35,0,0,14,16
	.word	13290
	.byte	15,3,0,14,48
	.word	351
	.byte	15,47,0,9
	.byte	'_Ifx_VADC_BRSPND_Bits',0,12,152,1,16,4,10
	.byte	'CHPNDGy',0,4
	.word	328
	.byte	32,0,2,35,0,0,11,12,201,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13348
	.byte	4,2,35,0,0,14,16
	.word	13396
	.byte	15,3,0,9
	.byte	'_Ifx_VADC_BRSCTRL_Bits',0,12,119,16,4,10
	.byte	'SRCRESREG',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'XTSEL',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'XTLVL',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'XTMODE',0,1
	.word	351
	.byte	2,1,2,35,1,10
	.byte	'XTWC',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'GTSEL',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'GTLVL',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	2,1,2,35,2,10
	.byte	'GTWC',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	8,0,2,35,3,0,11,12,185,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13445
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_BRSMR_Bits',0,12,135,1,16,4,10
	.byte	'ENGT',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'ENTR',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'ENSI',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'SCAN',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'LDM',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'REQGT',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'CLRPND',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'LDEV',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	351
	.byte	6,0,2,35,1,10
	.byte	'RPTDIS',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	902
	.byte	15,0,2,35,2,0,11,12,193,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13721
	.byte	4,2,35,0,0,14,120
	.word	351
	.byte	15,119,0,9
	.byte	'_Ifx_VADC_GLOBRCR_Bits',0,12,166,7,16,4,10
	.byte	'reserved_0',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'DRCTR',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'reserved_20',0,1
	.word	351
	.byte	4,0,2,35,2,10
	.byte	'WFR',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	351
	.byte	6,1,2,35,3,10
	.byte	'SRGEN',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,249,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14014
	.byte	4,2,35,0,0,14,124
	.word	351
	.byte	15,123,0,9
	.byte	'_Ifx_VADC_GLOBRES_Bits',0,12,177,7,16,4,10
	.byte	'RESULT',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'GNR',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	902
	.byte	5,7,2,35,2,10
	.byte	'EMUX',0,1
	.word	351
	.byte	3,4,2,35,3,10
	.byte	'CRS',0,1
	.word	351
	.byte	2,2,2,35,3,10
	.byte	'FCR',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'VF',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,129,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14210
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_GLOBRESD_Bits',0,12,189,7,16,4,10
	.byte	'RESULT',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'GNR',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	902
	.byte	5,7,2,35,2,10
	.byte	'EMUX',0,1
	.word	351
	.byte	3,4,2,35,3,10
	.byte	'CRS',0,1
	.word	351
	.byte	2,2,2,35,3,10
	.byte	'FCR',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'VF',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,137,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14389
	.byte	4,2,35,0,0,14,108
	.word	351
	.byte	15,107,0,9
	.byte	'_Ifx_VADC_EMUXSEL_Bits',0,12,174,1,16,4,10
	.byte	'EMUXGRP0',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'EMUXGRP1',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,11,12,225,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14578
	.byte	4,2,35,0,0,14,140,1
	.word	351
	.byte	15,139,1,0,9
	.byte	'_Ifx_VADC_G_ARBCFG_Bits',0,12,191,1,16,4,10
	.byte	'ANONC',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'ARBRND',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'ARBM',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'ANONS',0,1
	.word	351
	.byte	2,6,2,35,2,10
	.byte	'CSRC',0,1
	.word	351
	.byte	2,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	902
	.byte	5,7,2,35,2,10
	.byte	'SYNRUN',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	2,4,2,35,3,10
	.byte	'CAL',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'CALS',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'BUSY',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'SAMPLE',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,241,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14721
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ARBPR_Bits',0,12,211,1,16,4,10
	.byte	'PRIO0',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'CSM0',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PRIO1',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'CSM1',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'PRIO2',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'CSM2',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'PRIO3',0,1
	.word	351
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'CSM3',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	351
	.byte	8,0,2,35,2,10
	.byte	'ASEN0',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'ASEN1',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'ASEN2',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'ASEN3',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	351
	.byte	4,0,2,35,3,0,11,12,249,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15064
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_CHASS_Bits',0,12,160,3,16,4,10
	.byte	'ASSCH0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ASSCH1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'ASSCH2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'ASSCH3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'ASSCH4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'ASSCH5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ASSCH6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'ASSCH7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'ASSCH8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'ASSCH9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'ASSCH10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'ASSCH11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'ASSCH12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'ASSCH13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'ASSCH14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'ASSCH15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'ASSCH16',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'ASSCH17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'ASSCH18',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'ASSCH19',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'ASSCH20',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'ASSCH21',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'ASSCH22',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'ASSCH23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'ASSCH24',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'ASSCH25',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'ASSCH26',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'ASSCH27',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'ASSCH28',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'ASSCH29',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'ASSCH30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'ASSCH31',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,233,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15470
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_RRASS_Bits',0,12,255,5,16,4,10
	.byte	'ASSRR0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ASSRR1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'ASSRR2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'ASSRR3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'ASSRR4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'ASSRR5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ASSRR6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'ASSRR7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'ASSRR8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'ASSRR9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'ASSRR10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'ASSRR11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'ASSRR12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'ASSRR13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'ASSRR14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'ASSRR15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,153,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16138
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ALIAS_Bits',0,12,182,1,16,4,10
	.byte	'ALIAS0',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	351
	.byte	3,0,2,35,0,10
	.byte	'ALIAS1',0,1
	.word	351
	.byte	5,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	328
	.byte	19,0,2,35,0,0,11,12,233,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16525
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BOUND_Bits',0,12,209,2,16,4,10
	.byte	'BOUNDARY0',0,2
	.word	902
	.byte	12,4,2,35,0,10
	.byte	'reserved_12',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'BOUNDARY1',0,2
	.word	902
	.byte	12,4,2,35,2,10
	.byte	'reserved_28',0,1
	.word	351
	.byte	4,0,2,35,3,0,11,12,193,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16676
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SYNCTR_Bits',0,12,194,6,16,4,10
	.byte	'STSEL',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'EVALR1',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EVALR2',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'EVALR3',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,4
	.word	328
	.byte	25,0,2,35,0,0,11,12,193,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16834
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BFL_Bits',0,12,154,2,16,4,10
	.byte	'BFL0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'BFL1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'BFL2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'BFL3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'BFA0',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'BFA1',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'BFA2',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'BFA3',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'BFI0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'BFI1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'BFI2',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'BFI3',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	902
	.byte	12,0,2,35,2,0,11,12,161,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17020
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BFLS_Bits',0,12,194,2,16,4,10
	.byte	'BFC0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'BFC1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'BFC2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'BFC3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	902
	.byte	12,0,2,35,0,10
	.byte	'BFS0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'BFS1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'BFS2',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'BFS3',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	902
	.byte	12,0,2,35,2,0,11,12,185,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17348
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BFLC_Bits',0,12,174,2,16,4,10
	.byte	'BFM0',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'BFM1',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'BFM2',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'BFM3',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,169,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17590
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_BFLNP_Bits',0,12,184,2,16,4,10
	.byte	'BFL0NP',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'BFL1NP',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'BFL2NP',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'BFL3NP',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,177,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17746
	.byte	4,2,35,0,0,14,40
	.word	351
	.byte	15,39,0,9
	.byte	'_Ifx_VADC_G_QCTRL0_Bits',0,12,158,4,16,4,10
	.byte	'SRCRESREG',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'XTSEL',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'XTLVL',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'XTMODE',0,1
	.word	351
	.byte	2,1,2,35,1,10
	.byte	'XTWC',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'GTSEL',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'GTLVL',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	2,1,2,35,2,10
	.byte	'GTWC',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'TMEN',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	351
	.byte	2,1,2,35,3,10
	.byte	'TMWC',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,161,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17920
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QMR0_Bits',0,12,222,4,16,4,10
	.byte	'ENGT',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'ENTR',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	5,0,2,35,0,10
	.byte	'CLRV',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'TREV',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'FLUSH',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'CEV',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'RPTDIS',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	902
	.byte	15,0,2,35,2,0,11,12,193,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18253
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QSR0_Bits',0,12,252,4,16,4,10
	.byte	'FILL',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EMPTY',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'REQGT',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EV',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	328
	.byte	23,0,2,35,0,0,11,12,209,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18504
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_Q0R0_Bits',0,12,232,3,16,4,10
	.byte	'REQCHNR',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'RF',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ENSI',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EXTR',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'V',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	328
	.byte	23,0,2,35,0,0,11,12,129,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18703
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QBUR0_Bits',0,12,131,4,16,4,10
	.byte	'REQCHNR',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'RF',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ENSI',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EXTR',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'V',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	328
	.byte	23,0,2,35,0,0,11,12,145,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18872
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QINR0_Bits',0,12,196,4,16,4,10
	.byte	'REQCHNR',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'RF',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ENSI',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EXTR',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,11,12,177,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19042
	.byte	4,2,35,0,0,11,12,241,12,5,4,12
	.byte	'QBUR0',0
	.word	19002
	.byte	4,2,35,0,12
	.byte	'QINR0',0
	.word	19159
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ASCTRL_Bits',0,12,234,1,16,4,10
	.byte	'SRCRESREG',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'XTSEL',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'XTLVL',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'XTMODE',0,1
	.word	351
	.byte	2,1,2,35,1,10
	.byte	'XTWC',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'GTSEL',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'GTLVL',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	2,1,2,35,2,10
	.byte	'GTWC',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'TMEN',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	351
	.byte	2,1,2,35,3,10
	.byte	'TMWC',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,129,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19236
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ASMR_Bits',0,12,253,1,16,4,10
	.byte	'ENGT',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'ENTR',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'ENSI',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'SCAN',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'LDM',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'REQGT',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'CLRPND',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'LDEV',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	351
	.byte	6,0,2,35,1,10
	.byte	'RPTDIS',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	902
	.byte	15,0,2,35,2,0,11,12,137,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19569
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ASSEL_Bits',0,12,148,2,16,4,10
	.byte	'CHSEL',0,4
	.word	328
	.byte	32,0,2,35,0,0,11,12,153,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19854
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_ASPND_Bits',0,12,142,2,16,4,10
	.byte	'CHPND',0,4
	.word	328
	.byte	32,0,2,35,0,0,11,12,145,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19941
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QCTRL3_Bits',0,12,177,4,16,4,10
	.byte	'SRCRESREG',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'XTSEL',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'XTLVL',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'XTMODE',0,1
	.word	351
	.byte	2,1,2,35,1,10
	.byte	'XTWC',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'GTSEL',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'GTLVL',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	2,1,2,35,2,10
	.byte	'GTWC',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'TMEN',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	351
	.byte	2,1,2,35,3,10
	.byte	'TMWC',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,169,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20028
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QMR3_Bits',0,12,237,4,16,4,10
	.byte	'ENGT',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'ENTR',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	5,0,2,35,0,10
	.byte	'CLRV',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'TREV',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'FLUSH',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'CEV',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'RPTDIS',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	902
	.byte	15,0,2,35,2,0,11,12,201,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20361
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QSR3_Bits',0,12,136,5,16,4,10
	.byte	'FILL',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EMPTY',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'REQGT',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EV',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	328
	.byte	23,0,2,35,0,0,11,12,217,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20612
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_Q0R3_Bits',0,12,243,3,16,4,10
	.byte	'REQCHNR',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'RF',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ENSI',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EXTR',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'V',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PDD',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'MDPD',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'MDPU',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'CDEN',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'CDSEL',0,1
	.word	351
	.byte	2,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	328
	.byte	17,0,2,35,0,0,11,12,137,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	20811
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QBUR3_Bits',0,12,142,4,16,4,10
	.byte	'REQCHNR',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'RF',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ENSI',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EXTR',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'V',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PDD',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'MDPD',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'MDPU',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'CDEN',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'CDSEL',0,1
	.word	351
	.byte	2,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	328
	.byte	17,0,2,35,0,0,11,12,153,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21061
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_QINR3_Bits',0,12,206,4,16,4,10
	.byte	'REQCHNR',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'RF',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ENSI',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EXTR',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PDD',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'MDPD',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'MDPU',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'CDEN',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'CDSEL',0,1
	.word	351
	.byte	2,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	328
	.byte	17,0,2,35,0,0,11,12,185,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21312
	.byte	4,2,35,0,0,11,12,129,13,5,4,12
	.byte	'QBUR3',0
	.word	21272
	.byte	4,2,35,0,12
	.byte	'QINR3',0
	.word	21532
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_TRCTR_Bits',0,12,205,6,16,4,10
	.byte	'TSC',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	902
	.byte	8,2,2,35,0,10
	.byte	'Q3ACT',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'OV',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'TSCSET',0,1
	.word	351
	.byte	6,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	351
	.byte	2,0,2,35,2,10
	.byte	'ITSEL',0,1
	.word	351
	.byte	2,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	2,4,2,35,3,10
	.byte	'SRDIS',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	351
	.byte	2,1,2,35,3,10
	.byte	'COV',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,201,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21609
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_CEFLAG_Bits',0,12,240,2,16,4,10
	.byte	'CEV0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'CEV1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'CEV2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'CEV3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'CEV4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'CEV5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'CEV6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'CEV7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'CEV8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'CEV9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'CEV10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'CEV11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'CEV12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'CEV13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'CEV14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'CEV15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,209,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	21883
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_REFLAG_Bits',0,12,183,5,16,4,10
	.byte	'REV0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'REV1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'REV2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'REV3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'REV4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'REV5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'REV6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'REV7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'REV8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'REV9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'REV10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'REV11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'REV12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'REV13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'REV14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'REV15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,241,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22239
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SEFLAG_Bits',0,12,159,6,16,4,10
	.byte	'SEV0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'SEV1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SEV3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,11,12,169,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22595
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_CEFCLR_Bits',0,12,218,2,16,4,10
	.byte	'CEV0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'CEV1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'CEV2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'CEV3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'CEV4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'CEV5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'CEV6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'CEV7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'CEV8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'CEV9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'CEV10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'CEV11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'CEV12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'CEV13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'CEV14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'CEV15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,201,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	22758
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_REFCLR_Bits',0,12,161,5,16,4,10
	.byte	'REV0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'REV1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'REV2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'REV3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'REV4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'REV5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'REV6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'REV7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'REV8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'REV9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'REV10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'REV11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'REV12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'REV13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'REV14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'REV15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,233,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23114
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SEFCLR_Bits',0,12,149,6,16,4,10
	.byte	'SEV0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'SEV1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SEV3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,11,12,161,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23470
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_CEVNP0_Bits',0,12,134,3,16,4,10
	.byte	'CEV0NP',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'CEV1NP',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'CEV2NP',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'CEV3NP',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'CEV4NP',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'CEV5NP',0,1
	.word	351
	.byte	4,0,2,35,2,10
	.byte	'CEV6NP',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'CEV7NP',0,1
	.word	351
	.byte	4,0,2,35,3,0,11,12,217,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23633
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_CEVNP1_Bits',0,12,147,3,16,4,10
	.byte	'CEV8NP',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'CEV9NP',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'CEV10NP',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'CEV11NP',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'CEV12NP',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'CEV13NP',0,1
	.word	351
	.byte	4,0,2,35,2,10
	.byte	'CEV14NP',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'CEV15NP',0,1
	.word	351
	.byte	4,0,2,35,3,0,11,12,225,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23848
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_REVNP0_Bits',0,12,229,5,16,4,10
	.byte	'REV0NP',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'REV1NP',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'REV2NP',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'REV3NP',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'REV4NP',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'REV5NP',0,1
	.word	351
	.byte	4,0,2,35,2,10
	.byte	'REV6NP',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'REV7NP',0,1
	.word	351
	.byte	4,0,2,35,3,0,11,12,137,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24069
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_REVNP1_Bits',0,12,242,5,16,4,10
	.byte	'REV8NP',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'REV9NP',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'REV10NP',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'REV11NP',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'REV12NP',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'REV13NP',0,1
	.word	351
	.byte	4,0,2,35,2,10
	.byte	'REV14NP',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'REV15NP',0,1
	.word	351
	.byte	4,0,2,35,3,0,11,12,145,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24284
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SEVNP_Bits',0,12,169,6,16,4,10
	.byte	'SEV0NP',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'SEV1NP',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'SEV3NP',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,177,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24505
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_SRACT_Bits',0,12,179,6,16,4,10
	.byte	'AGSR0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'AGSR1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'AGSR2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'AGSR3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'ASSR0',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'ASSR1',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'ASSR2',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'ASSR3',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	328
	.byte	20,0,2,35,0,0,11,12,185,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24674
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_EMUXCTR_Bits',0,12,217,3,16,4,10
	.byte	'EMUXSET',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	5,0,2,35,0,10
	.byte	'EMUXACT',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	5,0,2,35,1,10
	.byte	'EMUXCH',0,2
	.word	902
	.byte	10,6,2,35,2,10
	.byte	'EMUXMODE',0,1
	.word	351
	.byte	2,4,2,35,3,10
	.byte	'EMXCOD',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'EMXST',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'EMXCSS',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'EMXWC',0,1
	.word	351
	.byte	1,0,2,35,3,0
.L412:
	.byte	11,12,249,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24925
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_VFR_Bits',0,12,221,6,16,4,10
	.byte	'VF0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'VF1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'VF2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'VF3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'VF4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'VF5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'VF6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'VF7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'VF8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'VF9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'VF10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'VF11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'VF12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'VF13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'VF14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'VF15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,11,12,209,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25188
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_VADC_G_CHCTR_Bits',0,12,197,3,16,4,10
	.byte	'ICLSEL',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'BNDSELL',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'BNDSELU',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'CHEVMODE',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'SYNC',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'REFSEL',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'BNDSELX',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'RESREG',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'RESTBS',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'RESPOS',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	902
	.byte	6,4,2,35,2,10
	.byte	'BWDCH',0,1
	.word	351
	.byte	2,2,2,35,3,10
	.byte	'BWDEN',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,241,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25525
	.byte	4,2,35,0,0,14,48
	.word	25840
	.byte	15,11,0,14,80
	.word	351
	.byte	15,79,0,9
	.byte	'_Ifx_VADC_G_RCR_Bits',0,12,148,5,16,4,10
	.byte	'reserved_0',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'DRCTR',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'DMM',0,1
	.word	351
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	351
	.byte	2,0,2,35,2,10
	.byte	'WFR',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'FEN',0,1
	.word	351
	.byte	2,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	351
	.byte	4,1,2,35,3,10
	.byte	'SRGEN',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,225,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25898
	.byte	4,2,35,0,0,14,64
	.word	26073
	.byte	15,15,0,9
	.byte	'_Ifx_VADC_G_RES_Bits',0,12,205,5,16,4,10
	.byte	'RESULT',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'DRC',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	902
	.byte	5,7,2,35,2,10
	.byte	'EMUX',0,1
	.word	351
	.byte	3,4,2,35,3,10
	.byte	'CRS',0,1
	.word	351
	.byte	2,2,2,35,3,10
	.byte	'FCR',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'VF',0,1
	.word	351
	.byte	1,0,2,35,3,0
.L262:
	.byte	11,12,249,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26122
	.byte	4,2,35,0,0,14,64
	.word	26259
	.byte	15,15,0,9
	.byte	'_Ifx_VADC_G_RESD_Bits',0,12,217,5,16,4,10
	.byte	'RESULT',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'DRC',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'CHNR',0,2
	.word	902
	.byte	5,7,2,35,2,10
	.byte	'EMUX',0,1
	.word	351
	.byte	3,4,2,35,3,10
	.byte	'CRS',0,1
	.word	351
	.byte	2,2,2,35,3,10
	.byte	'FCR',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'VF',0,1
	.word	351
	.byte	1,0,2,35,3,0,11,12,129,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26308
	.byte	4,2,35,0,0,14,64
	.word	26446
	.byte	15,15,0,14,192,1
	.word	351
	.byte	15,191,1,0,9
	.byte	'_Ifx_VADC_G',0,12,217,12,25,128,8,12
	.byte	'ARBCFG',0
	.word	15024
	.byte	4,2,35,0,12
	.byte	'ARBPR',0
	.word	15430
	.byte	4,2,35,4,12
	.byte	'CHASS',0
	.word	16098
	.byte	4,2,35,8,12
	.byte	'RRASS',0
	.word	16485
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	11993
	.byte	16,2,35,16,12
	.byte	'ICLASS',0
	.word	12224
	.byte	8,2,35,32,12
	.byte	'reserved_28',0
	.word	4522
	.byte	8,2,35,40,12
	.byte	'ALIAS',0
	.word	16636
	.byte	4,2,35,48,12
	.byte	'reserved_34',0
	.word	2703
	.byte	4,2,35,52,12
	.byte	'BOUND',0
	.word	16794
	.byte	4,2,35,56,12
	.byte	'reserved_3C',0
	.word	2703
	.byte	4,2,35,60,12
	.byte	'SYNCTR',0
	.word	16980
	.byte	4,2,35,64,12
	.byte	'reserved_44',0
	.word	2703
	.byte	4,2,35,68,12
	.byte	'BFL',0
	.word	17308
	.byte	4,2,35,72,12
	.byte	'BFLS',0
	.word	17550
	.byte	4,2,35,76,12
	.byte	'BFLC',0
	.word	17706
	.byte	4,2,35,80,12
	.byte	'BFLNP',0
	.word	17871
	.byte	4,2,35,84,12
	.byte	'reserved_58',0
	.word	17911
	.byte	40,2,35,88,12
	.byte	'QCTRL0',0
	.word	18213
	.byte	4,3,35,128,1,12
	.byte	'QMR0',0
	.word	18464
	.byte	4,3,35,132,1,12
	.byte	'QSR0',0
	.word	18663
	.byte	4,3,35,136,1,12
	.byte	'Q0R0',0
	.word	18832
	.byte	4,3,35,140,1,18
	.word	19199
	.byte	4,3,35,144,1,12
	.byte	'reserved_94',0
	.word	4862
	.byte	12,3,35,148,1,12
	.byte	'ASCTRL',0
	.word	19529
	.byte	4,3,35,160,1,12
	.byte	'ASMR',0
	.word	19814
	.byte	4,3,35,164,1,12
	.byte	'ASSEL',0
	.word	19901
	.byte	4,3,35,168,1,12
	.byte	'ASPND',0
	.word	19988
	.byte	4,3,35,172,1,12
	.byte	'reserved_B0',0
	.word	11993
	.byte	16,3,35,176,1,12
	.byte	'QCTRL3',0
	.word	20321
	.byte	4,3,35,192,1,12
	.byte	'QMR3',0
	.word	20572
	.byte	4,3,35,196,1,12
	.byte	'QSR3',0
	.word	20771
	.byte	4,3,35,200,1,12
	.byte	'Q0R3',0
	.word	21021
	.byte	4,3,35,204,1,18
	.word	21572
	.byte	4,3,35,208,1,12
	.byte	'TRCTR',0
	.word	21843
	.byte	4,3,35,212,1,12
	.byte	'reserved_D8',0
	.word	17911
	.byte	40,3,35,216,1,12
	.byte	'CEFLAG',0
	.word	22199
	.byte	4,3,35,128,2,12
	.byte	'REFLAG',0
	.word	22555
	.byte	4,3,35,132,2,12
	.byte	'SEFLAG',0
	.word	22718
	.byte	4,3,35,136,2,12
	.byte	'reserved_10C',0
	.word	2703
	.byte	4,3,35,140,2,12
	.byte	'CEFCLR',0
	.word	23074
	.byte	4,3,35,144,2,12
	.byte	'REFCLR',0
	.word	23430
	.byte	4,3,35,148,2,12
	.byte	'SEFCLR',0
	.word	23593
	.byte	4,3,35,152,2,12
	.byte	'reserved_11C',0
	.word	2703
	.byte	4,3,35,156,2,12
	.byte	'CEVNP0',0
	.word	23808
	.byte	4,3,35,160,2,12
	.byte	'CEVNP1',0
	.word	24029
	.byte	4,3,35,164,2,12
	.byte	'reserved_128',0
	.word	4522
	.byte	8,3,35,168,2,12
	.byte	'REVNP0',0
	.word	24244
	.byte	4,3,35,176,2,12
	.byte	'REVNP1',0
	.word	24465
	.byte	4,3,35,180,2,12
	.byte	'reserved_138',0
	.word	4522
	.byte	8,3,35,184,2,12
	.byte	'SEVNP',0
	.word	24634
	.byte	4,3,35,192,2,12
	.byte	'reserved_144',0
	.word	2703
	.byte	4,3,35,196,2,12
	.byte	'SRACT',0
	.word	24885
	.byte	4,3,35,200,2,12
	.byte	'reserved_14C',0
	.word	12393
	.byte	36,3,35,204,2,12
	.byte	'EMUXCTR',0
	.word	25148
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	2703
	.byte	4,3,35,244,2,12
	.byte	'VFR',0
	.word	25485
	.byte	4,3,35,248,2,12
	.byte	'reserved_17C',0
	.word	2703
	.byte	4,3,35,252,2,12
	.byte	'CHCTR',0
	.word	25880
	.byte	48,3,35,128,3,12
	.byte	'reserved_1B0',0
	.word	25889
	.byte	80,3,35,176,3,12
	.byte	'RCR',0
	.word	26113
	.byte	64,3,35,128,4,12
	.byte	'reserved_240',0
	.word	11100
	.byte	64,3,35,192,4,12
	.byte	'RES',0
	.word	26299
	.byte	64,3,35,128,5,12
	.byte	'reserved_2C0',0
	.word	11100
	.byte	64,3,35,192,5,12
	.byte	'RESD',0
	.word	26486
	.byte	64,3,35,128,6,12
	.byte	'reserved_340',0
	.word	26495
	.byte	192,1,3,35,192,6,0,14,128,32
	.word	26506
	.byte	15,3,0,13
	.word	27691
	.byte	14,128,87
	.word	351
	.byte	15,255,86,0,9
	.byte	'_Ifx_VADC',0,12,180,13,25,128,128,1,12
	.byte	'CLC',0
	.word	9815
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	2703
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	9938
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	9978
	.byte	28,2,35,12,12
	.byte	'OCS',0
	.word	10154
	.byte	4,2,35,40,12
	.byte	'KRSTCLR',0
	.word	10261
	.byte	4,2,35,44,12
	.byte	'KRST1',0
	.word	10366
	.byte	4,2,35,48,12
	.byte	'KRST0',0
	.word	10490
	.byte	4,2,35,52,12
	.byte	'reserved_38',0
	.word	2703
	.byte	4,2,35,56,12
	.byte	'ACCEN0',0
	.word	11060
	.byte	4,2,35,60,12
	.byte	'reserved_40',0
	.word	11100
	.byte	64,2,35,64,12
	.byte	'GLOBCFG',0
	.word	11419
	.byte	4,3,35,128,1,12
	.byte	'reserved_84',0
	.word	2703
	.byte	4,3,35,132,1,12
	.byte	'ACCPROT0',0
	.word	11694
	.byte	4,3,35,136,1,12
	.byte	'ACCPROT1',0
	.word	11953
	.byte	4,3,35,140,1,12
	.byte	'reserved_90',0
	.word	11993
	.byte	16,3,35,144,1,12
	.byte	'GLOBICLASS',0
	.word	12224
	.byte	8,3,35,160,1,12
	.byte	'reserved_A8',0
	.word	11993
	.byte	16,3,35,168,1,12
	.byte	'GLOBBOUND',0
	.word	12353
	.byte	4,3,35,184,1,12
	.byte	'reserved_BC',0
	.word	12393
	.byte	36,3,35,188,1,12
	.byte	'GLOBEFLAG',0
	.word	12602
	.byte	4,3,35,224,1,12
	.byte	'reserved_E4',0
	.word	12642
	.byte	92,3,35,228,1,12
	.byte	'GLOBEVNP',0
	.word	12763
	.byte	4,3,35,192,2,12
	.byte	'reserved_144',0
	.word	9978
	.byte	28,3,35,196,2,12
	.byte	'GLOBTF',0
	.word	13077
	.byte	4,3,35,224,2,12
	.byte	'GLOBTE',0
	.word	13202
	.byte	4,3,35,228,2,12
	.byte	'reserved_168',0
	.word	3893
	.byte	24,3,35,232,2,12
	.byte	'BRSSEL',0
	.word	13330
	.byte	16,3,35,128,3,12
	.byte	'reserved_190',0
	.word	13339
	.byte	48,3,35,144,3,12
	.byte	'BRSPND',0
	.word	13436
	.byte	16,3,35,192,3,12
	.byte	'reserved_1D0',0
	.word	13339
	.byte	48,3,35,208,3,12
	.byte	'BRSCTRL',0
	.word	13681
	.byte	4,3,35,128,4,12
	.byte	'BRSMR',0
	.word	13965
	.byte	4,3,35,132,4,12
	.byte	'reserved_208',0
	.word	14005
	.byte	120,3,35,136,4,12
	.byte	'GLOBRCR',0
	.word	14161
	.byte	4,3,35,128,5,12
	.byte	'reserved_284',0
	.word	14201
	.byte	124,3,35,132,5,12
	.byte	'GLOBRES',0
	.word	14349
	.byte	4,3,35,128,6,12
	.byte	'reserved_304',0
	.word	14201
	.byte	124,3,35,132,6,12
	.byte	'GLOBRESD',0
	.word	14529
	.byte	4,3,35,128,7,12
	.byte	'reserved_384',0
	.word	14569
	.byte	108,3,35,132,7,12
	.byte	'EMUXSEL',0
	.word	14670
	.byte	4,3,35,240,7,12
	.byte	'reserved_3F4',0
	.word	14710
	.byte	140,1,3,35,244,7,12
	.byte	'G',0
	.word	27701
	.byte	128,32,3,35,128,9,12
	.byte	'reserved_1480',0
	.word	27706
	.byte	128,87,3,35,128,41,0,13
	.word	27717
.L258:
	.byte	6
	.word	28586
.L370:
	.byte	7
	.byte	'IfxVadc_getAdcCalibrationActiveState',0,3,11,152,14,18
	.word	351
	.byte	1,1
.L372:
	.byte	8
	.byte	'vadc',0,11,152,14,65
	.word	28591
.L374:
	.byte	8
	.byte	'adcCalGroupNum',0,11,152,14,77
	.word	351
.L376:
	.byte	3,0
.L364:
	.byte	2
	.byte	'IfxVadc_initiateStartupCalibration',0,3,11,201,16,17,1,1
.L367:
	.byte	8
	.byte	'vadc',0,11,201,16,62
	.word	28591
.L369:
	.byte	3,0,19
	.byte	'__minu',0
	.word	328
	.byte	1,1,1,1,20
	.word	328
	.byte	20
	.word	328
	.byte	0,21
	.word	186
	.byte	3,0,21
	.word	252
	.byte	22
	.word	270
	.byte	3,0,21
	.word	285
	.byte	22
	.word	299
	.byte	22
	.word	312
	.byte	3,0,21
	.word	707
	.byte	22
	.word	735
	.byte	3,0,21
	.word	1472
	.byte	22
	.word	1512
	.byte	22
	.word	1530
	.byte	3,0,21
	.word	1550
	.byte	22
	.word	1588
	.byte	22
	.word	1606
	.byte	3,0,23
	.byte	'IfxScuWdt_clearCpuEndinit',0,5,187,1,17,1,1,1,1,8
	.byte	'password',0,5,187,1,50
	.word	902
	.byte	0,23
	.byte	'IfxScuWdt_clearSafetyEndinit',0,5,199,1,17,1,1,1,1,8
	.byte	'password',0,5,199,1,53
	.word	902
	.byte	0,23
	.byte	'IfxScuWdt_setCpuEndinit',0,5,209,1,17,1,1,1,1,8
	.byte	'password',0,5,209,1,48
	.word	902
	.byte	0,23
	.byte	'IfxScuWdt_setSafetyEndinit',0,5,219,1,17,1,1,1,1,8
	.byte	'password',0,5,219,1,51
	.word	902
	.byte	0,21
	.word	1626
	.byte	22
	.word	1677
	.byte	3,0,24
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,5,221,2,19
	.word	902
	.byte	1,1,1,1,24
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,5,230,2,19
	.word	902
	.byte	1,1,1,1,21
	.word	8964
	.byte	22
	.word	8997
	.byte	22
	.word	9011
	.byte	22
	.word	9029
	.byte	22
	.word	9043
	.byte	3,0,21
	.word	9163
	.byte	22
	.word	9191
	.byte	22
	.word	9205
	.byte	22
	.word	9223
	.byte	3,0,21
	.word	9296
	.byte	3,0,21
	.word	9330
	.byte	3,0,21
	.word	9393
	.byte	22
	.word	9434
	.byte	3,0,21
	.word	9453
	.byte	22
	.word	9508
	.byte	3,0,21
	.word	9527
	.byte	22
	.word	9567
	.byte	22
	.word	9584
	.byte	3,0,24
	.byte	'IfxScuCcu_getSpbFrequency',0,13,145,7,20
	.word	9601
	.byte	1,1,1,1
.L256:
	.byte	16,11,185,3,9,1,17
	.byte	'IfxVadc_Status_noError',0,0,17
	.byte	'IfxVadc_Status_notInitialised',0,1,17
	.byte	'IfxVadc_Status_invalidGroup',0,2,17
	.byte	'IfxVadc_Status_invalidChannel',0,3,17
	.byte	'IfxVadc_Status_queueFull',0,4,17
	.byte	'IfxVadc_Status_noAccess',0,5,17
	.byte	'IfxVadc_Status_channelsStillPending',0,6,0,13
	.word	26506
.L265:
	.byte	6
	.word	29538
.L267:
	.byte	16,11,122,9,1,17
	.byte	'IfxVadc_ChannelId_none',0,127,17
	.byte	'IfxVadc_ChannelId_0',0,0,17
	.byte	'IfxVadc_ChannelId_1',0,1,17
	.byte	'IfxVadc_ChannelId_2',0,2,17
	.byte	'IfxVadc_ChannelId_3',0,3,17
	.byte	'IfxVadc_ChannelId_4',0,4,17
	.byte	'IfxVadc_ChannelId_5',0,5,17
	.byte	'IfxVadc_ChannelId_6',0,6,17
	.byte	'IfxVadc_ChannelId_7',0,7,17
	.byte	'IfxVadc_ChannelId_8',0,8,17
	.byte	'IfxVadc_ChannelId_9',0,9,17
	.byte	'IfxVadc_ChannelId_10',0,10,17
	.byte	'IfxVadc_ChannelId_11',0,11,0
.L269:
	.byte	16,11,151,3,9,1,17
	.byte	'IfxVadc_RequestSource_queue',0,0,17
	.byte	'IfxVadc_RequestSource_scan',0,1,17
	.byte	'IfxVadc_RequestSource_background',0,2,0
.L271:
	.byte	4
	.byte	'long int',0,4,5,21
	.word	9610
	.byte	22
	.word	9650
	.byte	22
	.word	9675
	.byte	3,0
.L291:
	.byte	16,11,133,3,9,1,17
	.byte	'IfxVadc_RequestSlotPriority_lowest',0,0,17
	.byte	'IfxVadc_RequestSlotPriority_low',0,1,17
	.byte	'IfxVadc_RequestSlotPriority_high',0,2,17
	.byte	'IfxVadc_RequestSlotPriority_highest',0,3,0
.L293:
	.byte	16,11,143,3,9,1,17
	.byte	'IfxVadc_RequestSlotStartMode_waitForStart',0,0,17
	.byte	'IfxVadc_RequestSlotStartMode_cancelInjectRepeat',0,1,0,21
	.word	28596
	.byte	22
	.word	28645
	.byte	22
	.word	28659
	.byte	3,0,21
	.word	28685
	.byte	22
	.word	28728
	.byte	3,0
.L298:
	.byte	16,11,192,2,9,1,17
	.byte	'IfxVadc_Protection_channelControl0',0,0,17
	.byte	'IfxVadc_Protection_channelControl1',0,1,17
	.byte	'IfxVadc_Protection_channelControl2',0,2,17
	.byte	'IfxVadc_Protection_channelControl3',0,3,17
	.byte	'IfxVadc_Protection_channelControl4',0,4,17
	.byte	'IfxVadc_Protection_channelControl5',0,5,17
	.byte	'IfxVadc_Protection_channelControl6',0,6,17
	.byte	'IfxVadc_Protection_channelControl7',0,7,17
	.byte	'IfxVadc_Protection_channelControl8',0,8,17
	.byte	'IfxVadc_Protection_channelControl9',0,9,17
	.byte	'IfxVadc_Protection_channelControl10',0,10,17
	.byte	'IfxVadc_Protection_channelControl11',0,11,17
	.byte	'IfxVadc_Protection_channelControl12',0,12,17
	.byte	'IfxVadc_Protection_channelControl13',0,13,17
	.byte	'IfxVadc_Protection_channelControl14',0,14,17
	.byte	'IfxVadc_Protection_externalMultiplexer',0,15,17
	.byte	'IfxVadc_Protection_initGroup0',0,16,17
	.byte	'IfxVadc_Protection_initGroup1',0,17,17
	.byte	'IfxVadc_Protection_initGroup2',0,18,17
	.byte	'IfxVadc_Protection_initGroup3',0,19,17
	.byte	'IfxVadc_Protection_initGroup4',0,20,17
	.byte	'IfxVadc_Protection_initGroup5',0,21,17
	.byte	'IfxVadc_Protection_initGroup6',0,22,17
	.byte	'IfxVadc_Protection_initGroup7',0,23,17
	.byte	'IfxVadc_Protection_initGroup8',0,24,17
	.byte	'IfxVadc_Protection_initGroup9',0,25,17
	.byte	'IfxVadc_Protection_initGroup10',0,26,17
	.byte	'IfxVadc_Protection_initGroup11',0,27,17
	.byte	'IfxVadc_Protection_initGroup12',0,28,17
	.byte	'IfxVadc_Protection_initGroup13',0,29,17
	.byte	'IfxVadc_Protection_initGroup14',0,30,17
	.byte	'IfxVadc_Protection_globalConfig',0,31,17
	.byte	'IfxVadc_Protection_serviceGroup0',0,32,17
	.byte	'IfxVadc_Protection_serviceGroup1',0,33,17
	.byte	'IfxVadc_Protection_serviceGroup2',0,34,17
	.byte	'IfxVadc_Protection_serviceGroup3',0,35,17
	.byte	'IfxVadc_Protection_serviceGroup4',0,36,17
	.byte	'IfxVadc_Protection_serviceGroup5',0,37,17
	.byte	'IfxVadc_Protection_serviceGroup6',0,38,17
	.byte	'IfxVadc_Protection_serviceGroup7',0,39,17
	.byte	'IfxVadc_Protection_serviceGroup8',0,40,17
	.byte	'IfxVadc_Protection_serviceGroup9',0,41,17
	.byte	'IfxVadc_Protection_serviceGroup10',0,42,17
	.byte	'IfxVadc_Protection_serviceGroup11',0,43,17
	.byte	'IfxVadc_Protection_serviceGroup12',0,44,17
	.byte	'IfxVadc_Protection_serviceGroup13',0,45,17
	.byte	'IfxVadc_Protection_serviceGroup14',0,46,17
	.byte	'IfxVadc_Protection_testFunction',0,47,17
	.byte	'IfxVadc_Protection_resultRegisterGroup0',0,48,17
	.byte	'IfxVadc_Protection_resultRegisterGroup1',0,49,17
	.byte	'IfxVadc_Protection_resultRegisterGroup2',0,50,17
	.byte	'IfxVadc_Protection_resultRegisterGroup3',0,51,17
	.byte	'IfxVadc_Protection_resultRegisterGroup4',0,52,17
	.byte	'IfxVadc_Protection_resultRegisterGroup5',0,53,17
	.byte	'IfxVadc_Protection_resultRegisterGroup6',0,54,17
	.byte	'IfxVadc_Protection_resultRegisterGroup7',0,55,17
	.byte	'IfxVadc_Protection_resultRegisterGroup8',0,56,17
	.byte	'IfxVadc_Protection_resultRegisterGroup9',0,57,17
	.byte	'IfxVadc_Protection_resultRegisterGroup10',0,58,17
	.byte	'IfxVadc_Protection_resultRegisterGroup11',0,59,17
	.byte	'IfxVadc_Protection_resultRegisterGroup12',0,60,17
	.byte	'IfxVadc_Protection_resultRegisterGroup13',0,61,17
	.byte	'IfxVadc_Protection_resultRegisterGroup14',0,62,0
.L305:
	.byte	16,14,93,9,1,17
	.byte	'IfxVadc_GroupId_0',0,0,17
	.byte	'IfxVadc_GroupId_1',0,1,17
	.byte	'IfxVadc_GroupId_global0',0,2,17
	.byte	'IfxVadc_GroupId_global1',0,3,0
.L327:
	.byte	16,11,169,3,9,1,17
	.byte	'IfxVadc_SrcNr_group0',0,0,17
	.byte	'IfxVadc_SrcNr_group1',0,1,17
	.byte	'IfxVadc_SrcNr_group2',0,2,17
	.byte	'IfxVadc_SrcNr_group3',0,3,17
	.byte	'IfxVadc_SrcNr_shared0',0,4,17
	.byte	'IfxVadc_SrcNr_shared1',0,5,17
	.byte	'IfxVadc_SrcNr_shared2',0,6,17
	.byte	'IfxVadc_SrcNr_shared3',0,7,0
.L357:
	.byte	16,11,184,2,9,1,17
	.byte	'IfxVadc_LowSupplyVoltageSelect_5V',0,0,17
	.byte	'IfxVadc_LowSupplyVoltageSelect_3V',0,1,0
.L381:
	.byte	16,11,164,2,9,1,17
	.byte	'IfxVadc_InputClasses_group0',0,0,17
	.byte	'IfxVadc_InputClasses_group1',0,1,17
	.byte	'IfxVadc_InputClasses_global0',0,2,17
	.byte	'IfxVadc_InputClasses_global1',0,3,0
.L385:
	.byte	16,11,191,1,9,1,17
	.byte	'IfxVadc_ConversionType_Compatible',0,0,0
.L390:
	.byte	16,11,149,1,9,1,17
	.byte	'IfxVadc_ChannelResolution_12bit',0,0,17
	.byte	'IfxVadc_ChannelResolution_10bit',0,1,17
	.byte	'IfxVadc_ChannelResolution_8bit',0,2,17
	.byte	'IfxVadc_ChannelResolution_10bitFast',0,5,0
.L401:
	.byte	16,11,240,1,9,1,17
	.byte	'IfxVadc_ExternalMultiplexerMode_softwareControl',0,0,17
	.byte	'IfxVadc_ExternalMultiplexerMode_steady',0,1,17
	.byte	'IfxVadc_ExternalMultiplexerMode_singleStep',0,2,17
	.byte	'IfxVadc_ExternalMultiplexerMode_sequence',0,3,0
.L404:
	.byte	16,11,225,1,9,1,17
	.byte	'IfxVadc_EmuxSelectValue_0',0,0,17
	.byte	'IfxVadc_EmuxSelectValue_1',0,1,17
	.byte	'IfxVadc_EmuxSelectValue_2',0,2,17
	.byte	'IfxVadc_EmuxSelectValue_3',0,3,17
	.byte	'IfxVadc_EmuxSelectValue_4',0,4,17
	.byte	'IfxVadc_EmuxSelectValue_5',0,5,17
	.byte	'IfxVadc_EmuxSelectValue_6',0,6,17
	.byte	'IfxVadc_EmuxSelectValue_7',0,7,0
.L406:
	.byte	16,11,199,1,9,1,17
	.byte	'IfxVadc_EmuxCodingScheme_binary',0,0,17
	.byte	'IfxVadc_EmuxCodingScheme_gray',0,1,0
.L408:
	.byte	16,11,216,1,9,1,17
	.byte	'IfxVadc_EmuxSampleTimeControl_settingChanges',0,0,17
	.byte	'IfxVadc_EmuxSampleTimeControl_always',0,1,0
.L410:
	.byte	16,11,182,1,9,1,17
	.byte	'IfxVadc_ChannelSelectionStyle_channelNumber',0,0,17
	.byte	'IfxVadc_ChannelSelectionStyle_binary',0,1,0,4
	.byte	'short int',0,2,5,25
	.byte	'__wchar_t',0,15,1,1
	.word	33947
	.byte	25
	.byte	'__size_t',0,15,1,1
	.word	328
	.byte	25
	.byte	'__ptrdiff_t',0,15,1,1
	.word	344
	.byte	26,1,6
	.word	34015
	.byte	25
	.byte	'__codeptr',0,15,1,1
	.word	34017
	.byte	25
	.byte	'__intptr_t',0,15,1,1
	.word	344
	.byte	25
	.byte	'__uintptr_t',0,15,1,1
	.word	328
	.byte	16,16,49,9,1,17
	.byte	'IfxSrc_Tos_cpu0',0,0,17
	.byte	'IfxSrc_Tos_dma',0,1,0,25
	.byte	'IfxSrc_Tos',0,16,53,3
	.word	34079
	.byte	25
	.byte	'_iob_flag_t',0,17,82,25
	.word	902
	.byte	25
	.byte	'uint8',0,18,89,24
	.word	351
	.byte	25
	.byte	'sint16',0,18,90,24
	.word	33947
	.byte	25
	.byte	'uint16',0,18,91,24
	.word	902
	.byte	25
	.byte	'sint32',0,18,92,24
	.word	29946
	.byte	25
	.byte	'uint32',0,18,93,24
	.word	9372
	.byte	25
	.byte	'float32',0,18,94,24
	.word	9601
	.byte	25
	.byte	'boolean',0,18,104,24
	.word	351
	.byte	4
	.byte	'long long int',0,8,5,25
	.byte	'sint64',0,19,36,28
	.word	34265
	.byte	25
	.byte	'uint64',0,19,37,28
	.word	215
	.byte	25
	.byte	'pvoid',0,19,40,28
	.word	247
	.byte	25
	.byte	'Ifx_TickTime',0,19,43,28
	.word	34265
	.byte	25
	.byte	'Ifx_Priority',0,19,67,16
	.word	902
	.byte	16,19,94,9,1,17
	.byte	'Ifx_RxSel_a',0,0,17
	.byte	'Ifx_RxSel_b',0,1,17
	.byte	'Ifx_RxSel_c',0,2,17
	.byte	'Ifx_RxSel_d',0,3,17
	.byte	'Ifx_RxSel_e',0,4,17
	.byte	'Ifx_RxSel_f',0,5,17
	.byte	'Ifx_RxSel_g',0,6,17
	.byte	'Ifx_RxSel_h',0,7,0,25
	.byte	'Ifx_RxSel',0,19,104,3
	.word	34368
	.byte	25
	.byte	'Ifx_SRC_SRCR_Bits',0,4,62,3
	.word	368
	.byte	25
	.byte	'Ifx_SRC_SRCR',0,4,75,3
	.word	658
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,4,86,25,12,12
	.byte	'TX',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	658
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	658
	.byte	4,2,35,8,0,13
	.word	34551
	.byte	25
	.byte	'Ifx_SRC_ASCLIN',0,4,91,3
	.word	34610
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,4,94,25,4,12
	.byte	'SBSRC',0
	.word	658
	.byte	4,2,35,0,0,13
	.word	34638
	.byte	25
	.byte	'Ifx_SRC_BCUSPB',0,4,97,3
	.word	34675
	.byte	14,64
	.word	658
	.byte	15,15,0,9
	.byte	'_Ifx_SRC_CAN',0,4,100,25,64,12
	.byte	'INT',0
	.word	34703
	.byte	64,2,35,0,0,13
	.word	34712
	.byte	25
	.byte	'Ifx_SRC_CAN',0,4,103,3
	.word	34744
	.byte	14,32
	.word	658
	.byte	15,7,0,9
	.byte	'_Ifx_SRC_CAN1',0,4,106,25,32,12
	.byte	'INT',0
	.word	34769
	.byte	32,2,35,0,0,13
	.word	34778
	.byte	25
	.byte	'Ifx_SRC_CAN1',0,4,109,3
	.word	34811
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,4,112,25,16,12
	.byte	'SR0',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	658
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	658
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	658
	.byte	4,2,35,12,0,13
	.word	34837
	.byte	25
	.byte	'Ifx_SRC_CCU6',0,4,118,3
	.word	34909
	.byte	14,8
	.word	658
	.byte	15,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,4,121,25,8,12
	.byte	'SR',0
	.word	34935
	.byte	8,2,35,0,0,13
	.word	34944
	.byte	25
	.byte	'Ifx_SRC_CERBERUS',0,4,124,3
	.word	34980
	.byte	9
	.byte	'_Ifx_SRC_CPU',0,4,127,25,32,12
	.byte	'SBSRC',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	9978
	.byte	28,2,35,4,0,13
	.word	35010
	.byte	25
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	35064
	.byte	9
	.byte	'_Ifx_SRC_DMA',0,4,134,1,25,80,12
	.byte	'ERR',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	4862
	.byte	12,2,35,4,12
	.byte	'CH',0
	.word	34703
	.byte	64,2,35,16,0,13
	.word	35090
	.byte	25
	.byte	'Ifx_SRC_DMA',0,4,139,1,3
	.word	35155
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,4,142,1,25,4,12
	.byte	'SR',0
	.word	658
	.byte	4,2,35,0,0,13
	.word	35181
	.byte	25
	.byte	'Ifx_SRC_EMEM',0,4,145,1,3
	.word	35214
	.byte	9
	.byte	'_Ifx_SRC_ERAY',0,4,148,1,25,80,12
	.byte	'INT',0
	.word	34935
	.byte	8,2,35,0,12
	.byte	'TINT',0
	.word	34935
	.byte	8,2,35,8,12
	.byte	'NDAT',0
	.word	34935
	.byte	8,2,35,16,12
	.byte	'MBSC',0
	.word	34935
	.byte	8,2,35,24,12
	.byte	'OBUSY',0
	.word	658
	.byte	4,2,35,32,12
	.byte	'IBUSY',0
	.word	658
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	17911
	.byte	40,2,35,40,0,13
	.word	35241
	.byte	25
	.byte	'Ifx_SRC_ERAY',0,4,157,1,3
	.word	35368
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,4,160,1,25,4,12
	.byte	'SR',0
	.word	658
	.byte	4,2,35,0,0,13
	.word	35395
	.byte	25
	.byte	'Ifx_SRC_ETH',0,4,163,1,3
	.word	35427
	.byte	9
	.byte	'_Ifx_SRC_EVR',0,4,166,1,25,8,12
	.byte	'WUT',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'SCDC',0
	.word	658
	.byte	4,2,35,4,0,13
	.word	35453
	.byte	25
	.byte	'Ifx_SRC_EVR',0,4,170,1,3
	.word	35500
	.byte	9
	.byte	'_Ifx_SRC_FFT',0,4,173,1,25,12,12
	.byte	'DONE',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'ERR',0
	.word	658
	.byte	4,2,35,4,12
	.byte	'RFS',0
	.word	658
	.byte	4,2,35,8,0,13
	.word	35526
	.byte	25
	.byte	'Ifx_SRC_FFT',0,4,178,1,3
	.word	35586
	.byte	14,240,11
	.word	351
	.byte	15,239,11,0,9
	.byte	'_Ifx_SRC_GPSR',0,4,181,1,25,128,12,12
	.byte	'SR0',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	658
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	658
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	658
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	35612
	.byte	240,11,2,35,16,0,13
	.word	35623
	.byte	25
	.byte	'Ifx_SRC_GPSR',0,4,188,1,3
	.word	35719
	.byte	9
	.byte	'_Ifx_SRC_GPT12',0,4,191,1,25,48,12
	.byte	'CIRQ',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'T2',0
	.word	658
	.byte	4,2,35,4,12
	.byte	'T3',0
	.word	658
	.byte	4,2,35,8,12
	.byte	'T4',0
	.word	658
	.byte	4,2,35,12,12
	.byte	'T5',0
	.word	658
	.byte	4,2,35,16,12
	.byte	'T6',0
	.word	658
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	3893
	.byte	24,2,35,24,0,13
	.word	35746
	.byte	25
	.byte	'Ifx_SRC_GPT12',0,4,200,1,3
	.word	35863
	.byte	14,236,2
	.word	351
	.byte	15,235,2,0,14,32
	.word	34769
	.byte	15,0,0,14,224,7
	.word	351
	.byte	15,223,7,0,14,64
	.word	34769
	.byte	15,1,0,9
	.byte	'_Ifx_SRC_GTM',0,4,203,1,25,192,11,12
	.byte	'AEIIRQ',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	35891
	.byte	236,2,2,35,4,12
	.byte	'ERR',0
	.word	658
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	4862
	.byte	12,3,35,244,2,12
	.byte	'TIM',0
	.word	35902
	.byte	32,3,35,128,3,12
	.byte	'reserved_1A0',0
	.word	35911
	.byte	224,7,3,35,160,3,12
	.byte	'TOM',0
	.word	35922
	.byte	64,3,35,128,11,0,13
	.word	35931
	.byte	25
	.byte	'Ifx_SRC_GTM',0,4,212,1,3
	.word	36078
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,4,215,1,25,8,12
	.byte	'HSM',0
	.word	34935
	.byte	8,2,35,0,0,13
	.word	36104
	.byte	25
	.byte	'Ifx_SRC_HSM',0,4,218,1,3
	.word	36137
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,4,221,1,25,4,12
	.byte	'SR',0
	.word	658
	.byte	4,2,35,0,0,13
	.word	36163
	.byte	25
	.byte	'Ifx_SRC_LMU',0,4,224,1,3
	.word	36195
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,4,227,1,25,4,12
	.byte	'SR',0
	.word	658
	.byte	4,2,35,0,0,13
	.word	36221
	.byte	25
	.byte	'Ifx_SRC_PMU',0,4,230,1,3
	.word	36253
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,4,233,1,25,24,12
	.byte	'TX',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	658
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	658
	.byte	4,2,35,8,12
	.byte	'PT',0
	.word	658
	.byte	4,2,35,12,12
	.byte	'HC',0
	.word	658
	.byte	4,2,35,16,12
	.byte	'U',0
	.word	658
	.byte	4,2,35,20,0,13
	.word	36279
	.byte	25
	.byte	'Ifx_SRC_QSPI',0,4,241,1,3
	.word	36372
	.byte	14,16
	.word	658
	.byte	15,3,0,9
	.byte	'_Ifx_SRC_SCU',0,4,244,1,25,20,12
	.byte	'DTS',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'ERU',0
	.word	36399
	.byte	16,2,35,4,0,13
	.word	36408
	.byte	25
	.byte	'Ifx_SRC_SCU',0,4,248,1,3
	.word	36454
	.byte	9
	.byte	'_Ifx_SRC_SENT',0,4,251,1,25,16,12
	.byte	'SR',0
	.word	36399
	.byte	16,2,35,0,0,13
	.word	36480
	.byte	25
	.byte	'Ifx_SRC_SENT',0,4,254,1,3
	.word	36513
	.byte	14,12
	.word	658
	.byte	15,2,0,9
	.byte	'_Ifx_SRC_SMU',0,4,129,2,25,12,12
	.byte	'SR',0
	.word	36540
	.byte	12,2,35,0,0,13
	.word	36549
	.byte	25
	.byte	'Ifx_SRC_SMU',0,4,132,2,3
	.word	36581
	.byte	14,88
	.word	351
	.byte	15,87,0,9
	.byte	'_Ifx_SRC_STM',0,4,135,2,25,96,12
	.byte	'SR0',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	658
	.byte	4,2,35,4,12
	.byte	'reserved_8',0
	.word	36607
	.byte	88,2,35,8,0,13
	.word	36616
	.byte	25
	.byte	'Ifx_SRC_STM',0,4,140,2,3
	.word	36682
	.byte	14,176,2
	.word	351
	.byte	15,175,2,0,9
	.byte	'_Ifx_SRC_VADCCG',0,4,143,2,25,192,2,12
	.byte	'SR0',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	658
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	658
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	658
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	36708
	.byte	176,2,2,35,16,0,13
	.word	36719
	.byte	25
	.byte	'Ifx_SRC_VADCCG',0,4,150,2,3
	.word	36817
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,4,153,2,25,16,12
	.byte	'SR0',0
	.word	658
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	658
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	658
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	658
	.byte	4,2,35,12,0,13
	.word	36846
	.byte	25
	.byte	'Ifx_SRC_VADCG',0,4,159,2,3
	.word	36920
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,4,162,2,25,4,12
	.byte	'SRC',0
	.word	658
	.byte	4,2,35,0,0,13
	.word	36948
	.byte	25
	.byte	'Ifx_SRC_XBAR',0,4,165,2,3
	.word	36982
	.byte	14,24
	.word	34551
	.byte	15,1,0,13
	.word	37009
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,4,178,2,25,24,12
	.byte	'ASCLIN',0
	.word	37018
	.byte	24,2,35,0,0,13
	.word	37023
	.byte	25
	.byte	'Ifx_SRC_GASCLIN',0,4,181,2,3
	.word	37063
	.byte	13
	.word	34638
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,4,184,2,25,4,12
	.byte	'SPB',0
	.word	37093
	.byte	4,2,35,0,0,13
	.word	37098
	.byte	25
	.byte	'Ifx_SRC_GBCU',0,4,187,2,3
	.word	37132
	.byte	14,64
	.word	34712
	.byte	15,0,0,13
	.word	37159
	.byte	14,32
	.word	34778
	.byte	15,0,0,13
	.word	37173
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,4,190,2,25,96,12
	.byte	'CAN',0
	.word	37168
	.byte	64,2,35,0,12
	.byte	'CAN1',0
	.word	37182
	.byte	32,2,35,64,0,13
	.word	37187
	.byte	25
	.byte	'Ifx_SRC_GCAN',0,4,194,2,3
	.word	37235
	.byte	14,32
	.word	34837
	.byte	15,1,0,13
	.word	37262
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,4,197,2,25,32,12
	.byte	'CCU6',0
	.word	37271
	.byte	32,2,35,0,0,13
	.word	37276
	.byte	25
	.byte	'Ifx_SRC_GCCU6',0,4,200,2,3
	.word	37312
	.byte	13
	.word	34944
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,4,203,2,25,8,12
	.byte	'CERBERUS',0
	.word	37340
	.byte	8,2,35,0,0,13
	.word	37345
	.byte	25
	.byte	'Ifx_SRC_GCERBERUS',0,4,206,2,3
	.word	37389
	.byte	14,32
	.word	35010
	.byte	15,0,0,13
	.word	37421
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,4,209,2,25,32,12
	.byte	'CPU',0
	.word	37430
	.byte	32,2,35,0,0,13
	.word	37435
	.byte	25
	.byte	'Ifx_SRC_GCPU',0,4,212,2,3
	.word	37469
	.byte	14,80
	.word	35090
	.byte	15,0,0,13
	.word	37496
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,4,215,2,25,80,12
	.byte	'DMA',0
	.word	37505
	.byte	80,2,35,0,0,13
	.word	37510
	.byte	25
	.byte	'Ifx_SRC_GDMA',0,4,218,2,3
	.word	37544
	.byte	14,4
	.word	35181
	.byte	15,0,0,13
	.word	37571
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,4,221,2,25,4,12
	.byte	'EMEM',0
	.word	37580
	.byte	4,2,35,0,0,13
	.word	37585
	.byte	25
	.byte	'Ifx_SRC_GEMEM',0,4,224,2,3
	.word	37621
	.byte	14,80
	.word	35241
	.byte	15,0,0,13
	.word	37649
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,4,227,2,25,80,12
	.byte	'ERAY',0
	.word	37658
	.byte	80,2,35,0,0,13
	.word	37663
	.byte	25
	.byte	'Ifx_SRC_GERAY',0,4,230,2,3
	.word	37699
	.byte	14,4
	.word	35395
	.byte	15,0,0,13
	.word	37727
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,4,233,2,25,4,12
	.byte	'ETH',0
	.word	37736
	.byte	4,2,35,0,0,13
	.word	37741
	.byte	25
	.byte	'Ifx_SRC_GETH',0,4,236,2,3
	.word	37775
	.byte	14,8
	.word	35453
	.byte	15,0,0,13
	.word	37802
	.byte	9
	.byte	'_Ifx_SRC_GEVR',0,4,239,2,25,8,12
	.byte	'EVR',0
	.word	37811
	.byte	8,2,35,0,0,13
	.word	37816
	.byte	25
	.byte	'Ifx_SRC_GEVR',0,4,242,2,3
	.word	37850
	.byte	14,12
	.word	35526
	.byte	15,0,0,13
	.word	37877
	.byte	9
	.byte	'_Ifx_SRC_GFFT',0,4,245,2,25,12,12
	.byte	'FFT',0
	.word	37886
	.byte	12,2,35,0,0,13
	.word	37891
	.byte	25
	.byte	'Ifx_SRC_GFFT',0,4,248,2,3
	.word	37925
	.byte	14,128,12
	.word	35623
	.byte	15,0,0,13
	.word	37952
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,4,251,2,25,128,12,12
	.byte	'GPSR',0
	.word	37962
	.byte	128,12,2,35,0,0,13
	.word	37967
	.byte	25
	.byte	'Ifx_SRC_GGPSR',0,4,254,2,3
	.word	38005
	.byte	14,48
	.word	35746
	.byte	15,0,0,13
	.word	38033
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,4,129,3,25,48,12
	.byte	'GPT12',0
	.word	38042
	.byte	48,2,35,0,0,13
	.word	38047
	.byte	25
	.byte	'Ifx_SRC_GGPT12',0,4,132,3,3
	.word	38085
	.byte	14,192,11
	.word	35931
	.byte	15,0,0,13
	.word	38114
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,4,135,3,25,192,11,12
	.byte	'GTM',0
	.word	38124
	.byte	192,11,2,35,0,0,13
	.word	38129
	.byte	25
	.byte	'Ifx_SRC_GGTM',0,4,138,3,3
	.word	38165
	.byte	14,8
	.word	36104
	.byte	15,0,0,13
	.word	38192
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,4,141,3,25,8,12
	.byte	'HSM',0
	.word	38201
	.byte	8,2,35,0,0,13
	.word	38206
	.byte	25
	.byte	'Ifx_SRC_GHSM',0,4,144,3,3
	.word	38240
	.byte	14,4
	.word	36163
	.byte	15,0,0,13
	.word	38267
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,4,147,3,25,4,12
	.byte	'LMU',0
	.word	38276
	.byte	4,2,35,0,0,13
	.word	38281
	.byte	25
	.byte	'Ifx_SRC_GLMU',0,4,150,3,3
	.word	38315
	.byte	14,8
	.word	36221
	.byte	15,1,0,13
	.word	38342
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,4,153,3,25,8,12
	.byte	'PMU',0
	.word	38351
	.byte	8,2,35,0,0,13
	.word	38356
	.byte	25
	.byte	'Ifx_SRC_GPMU',0,4,156,3,3
	.word	38390
	.byte	14,96
	.word	36279
	.byte	15,3,0,13
	.word	38417
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,4,159,3,25,96,12
	.byte	'QSPI',0
	.word	38426
	.byte	96,2,35,0,0,13
	.word	38431
	.byte	25
	.byte	'Ifx_SRC_GQSPI',0,4,162,3,3
	.word	38467
	.byte	13
	.word	36408
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,4,165,3,25,20,12
	.byte	'SCU',0
	.word	38495
	.byte	20,2,35,0,0,13
	.word	38500
	.byte	25
	.byte	'Ifx_SRC_GSCU',0,4,168,3,3
	.word	38534
	.byte	14,16
	.word	36480
	.byte	15,0,0,13
	.word	38561
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,4,171,3,25,16,12
	.byte	'SENT',0
	.word	38570
	.byte	16,2,35,0,0,13
	.word	38575
	.byte	25
	.byte	'Ifx_SRC_GSENT',0,4,174,3,3
	.word	38611
	.byte	14,12
	.word	36549
	.byte	15,0,0,13
	.word	38639
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,4,177,3,25,12,12
	.byte	'SMU',0
	.word	38648
	.byte	12,2,35,0,0,13
	.word	38653
	.byte	25
	.byte	'Ifx_SRC_GSMU',0,4,180,3,3
	.word	38687
	.byte	14,96
	.word	36616
	.byte	15,0,0,13
	.word	38714
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,4,183,3,25,96,12
	.byte	'STM',0
	.word	38723
	.byte	96,2,35,0,0,13
	.word	38728
	.byte	25
	.byte	'Ifx_SRC_GSTM',0,4,186,3,3
	.word	38762
	.byte	14,64
	.word	36846
	.byte	15,3,0,13
	.word	38789
	.byte	14,224,1
	.word	351
	.byte	15,223,1,0,14,192,2
	.word	36719
	.byte	15,0,0,13
	.word	38814
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,4,189,3,25,224,4,12
	.byte	'G',0
	.word	38798
	.byte	64,2,35,0,12
	.byte	'reserved_40',0
	.word	38803
	.byte	224,1,2,35,64,12
	.byte	'CG',0
	.word	38824
	.byte	192,2,3,35,160,2,0,13
	.word	38829
	.byte	25
	.byte	'Ifx_SRC_GVADC',0,4,194,3,3
	.word	38899
	.byte	13
	.word	36948
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,4,197,3,25,4,12
	.byte	'XBAR',0
	.word	38927
	.byte	4,2,35,0,0,13
	.word	38932
	.byte	25
	.byte	'Ifx_SRC_GXBAR',0,4,200,3,3
	.word	38968
	.byte	25
	.byte	'IfxVadc_GroupId',0,14,99,3
	.word	32582
	.byte	14,48
	.word	9372
	.byte	15,11,0,27
	.word	39020
	.byte	28
	.byte	'IfxVadc_cfg_srcAddresses',0,14,105,25
	.word	39029
	.byte	1,1,25
	.byte	'Ifx_VADC_ACCEN0_Bits',0,12,83,3
	.word	10530
	.byte	25
	.byte	'Ifx_VADC_ACCPROT0_Bits',0,12,100,3
	.word	11459
	.byte	25
	.byte	'Ifx_VADC_ACCPROT1_Bits',0,12,116,3
	.word	11734
	.byte	25
	.byte	'Ifx_VADC_BRSCTRL_Bits',0,12,132,1,3
	.word	13445
	.byte	25
	.byte	'Ifx_VADC_BRSMR_Bits',0,12,149,1,3
	.word	13721
	.byte	25
	.byte	'Ifx_VADC_BRSPND_Bits',0,12,155,1,3
	.word	13348
	.byte	25
	.byte	'Ifx_VADC_BRSSEL_Bits',0,12,161,1,3
	.word	13242
	.byte	25
	.byte	'Ifx_VADC_CLC_Bits',0,12,171,1,3
	.word	9697
	.byte	25
	.byte	'Ifx_VADC_EMUXSEL_Bits',0,12,179,1,3
	.word	14578
	.byte	25
	.byte	'Ifx_VADC_G_ALIAS_Bits',0,12,188,1,3
	.word	16525
	.byte	25
	.byte	'Ifx_VADC_G_ARBCFG_Bits',0,12,208,1,3
	.word	14721
	.byte	25
	.byte	'Ifx_VADC_G_ARBPR_Bits',0,12,231,1,3
	.word	15064
	.byte	25
	.byte	'Ifx_VADC_G_ASCTRL_Bits',0,12,250,1,3
	.word	19236
	.byte	25
	.byte	'Ifx_VADC_G_ASMR_Bits',0,12,139,2,3
	.word	19569
	.byte	25
	.byte	'Ifx_VADC_G_ASPND_Bits',0,12,145,2,3
	.word	19941
	.byte	25
	.byte	'Ifx_VADC_G_ASSEL_Bits',0,12,151,2,3
	.word	19854
	.byte	25
	.byte	'Ifx_VADC_G_BFL_Bits',0,12,171,2,3
	.word	17020
	.byte	25
	.byte	'Ifx_VADC_G_BFLC_Bits',0,12,181,2,3
	.word	17590
	.byte	25
	.byte	'Ifx_VADC_G_BFLNP_Bits',0,12,191,2,3
	.word	17746
	.byte	25
	.byte	'Ifx_VADC_G_BFLS_Bits',0,12,206,2,3
	.word	17348
	.byte	25
	.byte	'Ifx_VADC_G_BOUND_Bits',0,12,215,2,3
	.word	16676
	.byte	25
	.byte	'Ifx_VADC_G_CEFCLR_Bits',0,12,237,2,3
	.word	22758
	.byte	25
	.byte	'Ifx_VADC_G_CEFLAG_Bits',0,12,131,3,3
	.word	21883
	.byte	25
	.byte	'Ifx_VADC_G_CEVNP0_Bits',0,12,144,3,3
	.word	23633
	.byte	25
	.byte	'Ifx_VADC_G_CEVNP1_Bits',0,12,157,3,3
	.word	23848
	.byte	25
	.byte	'Ifx_VADC_G_CHASS_Bits',0,12,194,3,3
	.word	15470
	.byte	25
	.byte	'Ifx_VADC_G_CHCTR_Bits',0,12,214,3,3
	.word	25525
	.byte	25
	.byte	'Ifx_VADC_G_EMUXCTR_Bits',0,12,229,3,3
	.word	24925
	.byte	25
	.byte	'Ifx_VADC_G_Q0R0_Bits',0,12,240,3,3
	.word	18703
	.byte	25
	.byte	'Ifx_VADC_G_Q0R3_Bits',0,12,128,4,3
	.word	20811
	.byte	25
	.byte	'Ifx_VADC_G_QBUR0_Bits',0,12,139,4,3
	.word	18872
	.byte	25
	.byte	'Ifx_VADC_G_QBUR3_Bits',0,12,155,4,3
	.word	21061
	.byte	25
	.byte	'Ifx_VADC_G_QCTRL0_Bits',0,12,174,4,3
	.word	17920
	.byte	25
	.byte	'Ifx_VADC_G_QCTRL3_Bits',0,12,193,4,3
	.word	20028
	.byte	25
	.byte	'Ifx_VADC_G_QINR0_Bits',0,12,203,4,3
	.word	19042
	.byte	25
	.byte	'Ifx_VADC_G_QINR3_Bits',0,12,219,4,3
	.word	21312
	.byte	25
	.byte	'Ifx_VADC_G_QMR0_Bits',0,12,234,4,3
	.word	18253
	.byte	25
	.byte	'Ifx_VADC_G_QMR3_Bits',0,12,249,4,3
	.word	20361
	.byte	25
	.byte	'Ifx_VADC_G_QSR0_Bits',0,12,133,5,3
	.word	18504
	.byte	25
	.byte	'Ifx_VADC_G_QSR3_Bits',0,12,145,5,3
	.word	20612
	.byte	25
	.byte	'Ifx_VADC_G_RCR_Bits',0,12,158,5,3
	.word	25898
	.byte	25
	.byte	'Ifx_VADC_G_REFCLR_Bits',0,12,180,5,3
	.word	23114
	.byte	25
	.byte	'Ifx_VADC_G_REFLAG_Bits',0,12,202,5,3
	.word	22239
	.byte	25
	.byte	'Ifx_VADC_G_RES_Bits',0,12,214,5,3
	.word	26122
	.byte	25
	.byte	'Ifx_VADC_G_RESD_Bits',0,12,226,5,3
	.word	26308
	.byte	25
	.byte	'Ifx_VADC_G_REVNP0_Bits',0,12,239,5,3
	.word	24069
	.byte	25
	.byte	'Ifx_VADC_G_REVNP1_Bits',0,12,252,5,3
	.word	24284
	.byte	25
	.byte	'Ifx_VADC_G_RRASS_Bits',0,12,146,6,3
	.word	16138
	.byte	25
	.byte	'Ifx_VADC_G_SEFCLR_Bits',0,12,156,6,3
	.word	23470
	.byte	25
	.byte	'Ifx_VADC_G_SEFLAG_Bits',0,12,166,6,3
	.word	22595
	.byte	25
	.byte	'Ifx_VADC_G_SEVNP_Bits',0,12,176,6,3
	.word	24505
	.byte	25
	.byte	'Ifx_VADC_G_SRACT_Bits',0,12,191,6,3
	.word	24674
	.byte	25
	.byte	'Ifx_VADC_G_SYNCTR_Bits',0,12,202,6,3
	.word	16834
	.byte	25
	.byte	'Ifx_VADC_G_TRCTR_Bits',0,12,218,6,3
	.word	21609
	.byte	25
	.byte	'Ifx_VADC_G_VFR_Bits',0,12,240,6,3
	.word	25188
	.byte	25
	.byte	'Ifx_VADC_GLOBBOUND_Bits',0,12,249,6,3
	.word	12233
	.byte	25
	.byte	'Ifx_VADC_GLOBCFG_Bits',0,12,141,7,3
	.word	11109
	.byte	25
	.byte	'Ifx_VADC_GLOBEFLAG_Bits',0,12,154,7,3
	.word	12402
	.byte	25
	.byte	'Ifx_VADC_GLOBEVNP_Bits',0,12,163,7,3
	.word	12651
	.byte	25
	.byte	'Ifx_VADC_GLOBRCR_Bits',0,12,174,7,3
	.word	14014
	.byte	25
	.byte	'Ifx_VADC_GLOBRES_Bits',0,12,186,7,3
	.word	14210
	.byte	25
	.byte	'Ifx_VADC_GLOBRESD_Bits',0,12,198,7,3
	.word	14389
	.byte	25
	.byte	'Ifx_VADC_GLOBTE_Bits',0,12,206,7,3
	.word	13117
	.byte	25
	.byte	'Ifx_VADC_GLOBTF_Bits',0,12,225,7,3
	.word	12803
	.byte	25
	.byte	'Ifx_VADC_ICLASS_Bits',0,12,238,7,3
	.word	12002
	.byte	25
	.byte	'Ifx_VADC_ID_Bits',0,12,246,7,3
	.word	9855
	.byte	25
	.byte	'Ifx_VADC_KRST0_Bits',0,12,254,7,3
	.word	10406
	.byte	25
	.byte	'Ifx_VADC_KRST1_Bits',0,12,133,8,3
	.word	10301
	.byte	25
	.byte	'Ifx_VADC_KRSTCLR_Bits',0,12,140,8,3
	.word	10194
	.byte	25
	.byte	'Ifx_VADC_OCS_Bits',0,12,153,8,3
	.word	9987
	.byte	25
	.byte	'Ifx_VADC_ACCEN0',0,12,166,8,3
	.word	11060
	.byte	25
	.byte	'Ifx_VADC_ACCPROT0',0,12,174,8,3
	.word	11694
	.byte	25
	.byte	'Ifx_VADC_ACCPROT1',0,12,182,8,3
	.word	11953
	.byte	25
	.byte	'Ifx_VADC_BRSCTRL',0,12,190,8,3
	.word	13681
	.byte	25
	.byte	'Ifx_VADC_BRSMR',0,12,198,8,3
	.word	13965
	.byte	25
	.byte	'Ifx_VADC_BRSPND',0,12,206,8,3
	.word	13396
	.byte	25
	.byte	'Ifx_VADC_BRSSEL',0,12,214,8,3
	.word	13290
	.byte	25
	.byte	'Ifx_VADC_CLC',0,12,222,8,3
	.word	9815
	.byte	25
	.byte	'Ifx_VADC_EMUXSEL',0,12,230,8,3
	.word	14670
	.byte	25
	.byte	'Ifx_VADC_G_ALIAS',0,12,238,8,3
	.word	16636
	.byte	25
	.byte	'Ifx_VADC_G_ARBCFG',0,12,246,8,3
	.word	15024
	.byte	25
	.byte	'Ifx_VADC_G_ARBPR',0,12,254,8,3
	.word	15430
	.byte	25
	.byte	'Ifx_VADC_G_ASCTRL',0,12,134,9,3
	.word	19529
	.byte	25
	.byte	'Ifx_VADC_G_ASMR',0,12,142,9,3
	.word	19814
	.byte	25
	.byte	'Ifx_VADC_G_ASPND',0,12,150,9,3
	.word	19988
	.byte	25
	.byte	'Ifx_VADC_G_ASSEL',0,12,158,9,3
	.word	19901
	.byte	25
	.byte	'Ifx_VADC_G_BFL',0,12,166,9,3
	.word	17308
	.byte	25
	.byte	'Ifx_VADC_G_BFLC',0,12,174,9,3
	.word	17706
	.byte	25
	.byte	'Ifx_VADC_G_BFLNP',0,12,182,9,3
	.word	17871
	.byte	25
	.byte	'Ifx_VADC_G_BFLS',0,12,190,9,3
	.word	17550
	.byte	25
	.byte	'Ifx_VADC_G_BOUND',0,12,198,9,3
	.word	16794
	.byte	25
	.byte	'Ifx_VADC_G_CEFCLR',0,12,206,9,3
	.word	23074
	.byte	25
	.byte	'Ifx_VADC_G_CEFLAG',0,12,214,9,3
	.word	22199
	.byte	25
	.byte	'Ifx_VADC_G_CEVNP0',0,12,222,9,3
	.word	23808
	.byte	25
	.byte	'Ifx_VADC_G_CEVNP1',0,12,230,9,3
	.word	24029
	.byte	25
	.byte	'Ifx_VADC_G_CHASS',0,12,238,9,3
	.word	16098
	.byte	25
	.byte	'Ifx_VADC_G_CHCTR',0,12,246,9,3
	.word	25840
	.byte	25
	.byte	'Ifx_VADC_G_EMUXCTR',0,12,254,9,3
	.word	25148
	.byte	25
	.byte	'Ifx_VADC_G_Q0R0',0,12,134,10,3
	.word	18832
	.byte	25
	.byte	'Ifx_VADC_G_Q0R3',0,12,142,10,3
	.word	21021
	.byte	25
	.byte	'Ifx_VADC_G_QBUR0',0,12,150,10,3
	.word	19002
	.byte	25
	.byte	'Ifx_VADC_G_QBUR3',0,12,158,10,3
	.word	21272
	.byte	25
	.byte	'Ifx_VADC_G_QCTRL0',0,12,166,10,3
	.word	18213
	.byte	25
	.byte	'Ifx_VADC_G_QCTRL3',0,12,174,10,3
	.word	20321
	.byte	25
	.byte	'Ifx_VADC_G_QINR0',0,12,182,10,3
	.word	19159
	.byte	25
	.byte	'Ifx_VADC_G_QINR3',0,12,190,10,3
	.word	21532
	.byte	25
	.byte	'Ifx_VADC_G_QMR0',0,12,198,10,3
	.word	18464
	.byte	25
	.byte	'Ifx_VADC_G_QMR3',0,12,206,10,3
	.word	20572
	.byte	25
	.byte	'Ifx_VADC_G_QSR0',0,12,214,10,3
	.word	18663
	.byte	25
	.byte	'Ifx_VADC_G_QSR3',0,12,222,10,3
	.word	20771
	.byte	25
	.byte	'Ifx_VADC_G_RCR',0,12,230,10,3
	.word	26073
	.byte	25
	.byte	'Ifx_VADC_G_REFCLR',0,12,238,10,3
	.word	23430
	.byte	25
	.byte	'Ifx_VADC_G_REFLAG',0,12,246,10,3
	.word	22555
	.byte	25
	.byte	'Ifx_VADC_G_RES',0,12,254,10,3
	.word	26259
	.byte	25
	.byte	'Ifx_VADC_G_RESD',0,12,134,11,3
	.word	26446
	.byte	25
	.byte	'Ifx_VADC_G_REVNP0',0,12,142,11,3
	.word	24244
	.byte	25
	.byte	'Ifx_VADC_G_REVNP1',0,12,150,11,3
	.word	24465
	.byte	25
	.byte	'Ifx_VADC_G_RRASS',0,12,158,11,3
	.word	16485
	.byte	25
	.byte	'Ifx_VADC_G_SEFCLR',0,12,166,11,3
	.word	23593
	.byte	25
	.byte	'Ifx_VADC_G_SEFLAG',0,12,174,11,3
	.word	22718
	.byte	25
	.byte	'Ifx_VADC_G_SEVNP',0,12,182,11,3
	.word	24634
	.byte	25
	.byte	'Ifx_VADC_G_SRACT',0,12,190,11,3
	.word	24885
	.byte	25
	.byte	'Ifx_VADC_G_SYNCTR',0,12,198,11,3
	.word	16980
	.byte	25
	.byte	'Ifx_VADC_G_TRCTR',0,12,206,11,3
	.word	21843
	.byte	25
	.byte	'Ifx_VADC_G_VFR',0,12,214,11,3
	.word	25485
	.byte	25
	.byte	'Ifx_VADC_GLOBBOUND',0,12,222,11,3
	.word	12353
	.byte	25
	.byte	'Ifx_VADC_GLOBCFG',0,12,230,11,3
	.word	11419
	.byte	25
	.byte	'Ifx_VADC_GLOBEFLAG',0,12,238,11,3
	.word	12602
	.byte	25
	.byte	'Ifx_VADC_GLOBEVNP',0,12,246,11,3
	.word	12763
	.byte	25
	.byte	'Ifx_VADC_GLOBRCR',0,12,254,11,3
	.word	14161
	.byte	25
	.byte	'Ifx_VADC_GLOBRES',0,12,134,12,3
	.word	14349
	.byte	25
	.byte	'Ifx_VADC_GLOBRESD',0,12,142,12,3
	.word	14529
	.byte	25
	.byte	'Ifx_VADC_GLOBTE',0,12,150,12,3
	.word	13202
	.byte	25
	.byte	'Ifx_VADC_GLOBTF',0,12,158,12,3
	.word	13077
	.byte	25
	.byte	'Ifx_VADC_ICLASS',0,12,166,12,3
	.word	12184
	.byte	25
	.byte	'Ifx_VADC_ID',0,12,174,12,3
	.word	9938
	.byte	25
	.byte	'Ifx_VADC_KRST0',0,12,182,12,3
	.word	10490
	.byte	25
	.byte	'Ifx_VADC_KRST1',0,12,190,12,3
	.word	10366
	.byte	25
	.byte	'Ifx_VADC_KRSTCLR',0,12,198,12,3
	.word	10261
	.byte	25
	.byte	'Ifx_VADC_OCS',0,12,206,12,3
	.word	10154
	.byte	13
	.word	26506
	.byte	25
	.byte	'Ifx_VADC_G',0,12,167,13,3
	.word	43020
	.byte	13
	.word	27717
	.byte	25
	.byte	'Ifx_VADC',0,12,226,13,3
	.word	43045
	.byte	25
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	7568
	.byte	25
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	7481
	.byte	25
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4531
	.byte	25
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2584
	.byte	25
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3579
	.byte	25
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2712
	.byte	25
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3359
	.byte	25
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	2927
	.byte	25
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3142
	.byte	25
	.byte	'Ifx_P_OMCR0_Bits',0,8,200,1,3
	.word	6111
	.byte	25
	.byte	'Ifx_P_OMCR12_Bits',0,8,210,1,3
	.word	6635
	.byte	25
	.byte	'Ifx_P_OMCR4_Bits',0,8,221,1,3
	.word	6285
	.byte	25
	.byte	'Ifx_P_OMCR8_Bits',0,8,232,1,3
	.word	6459
	.byte	25
	.byte	'Ifx_P_OMCR_Bits',0,8,254,1,3
	.word	7124
	.byte	25
	.byte	'Ifx_P_OMR_Bits',0,8,163,2,3
	.word	2013
	.byte	25
	.byte	'Ifx_P_OMSR0_Bits',0,8,173,2,3
	.word	5448
	.byte	25
	.byte	'Ifx_P_OMSR12_Bits',0,8,184,2,3
	.word	5936
	.byte	25
	.byte	'Ifx_P_OMSR4_Bits',0,8,195,2,3
	.word	5595
	.byte	25
	.byte	'Ifx_P_OMSR8_Bits',0,8,206,2,3
	.word	5764
	.byte	25
	.byte	'Ifx_P_OMSR_Bits',0,8,228,2,3
	.word	6791
	.byte	25
	.byte	'Ifx_P_OUT_Bits',0,8,250,2,3
	.word	1697
	.byte	25
	.byte	'Ifx_P_PCSR_Bits',0,8,135,3,3
	.word	5237
	.byte	25
	.byte	'Ifx_P_PDISC_Bits',0,8,157,3,3
	.word	4871
	.byte	25
	.byte	'Ifx_P_PDR0_Bits',0,8,178,3,3
	.word	3902
	.byte	25
	.byte	'Ifx_P_PDR1_Bits',0,8,199,3,3
	.word	4206
	.byte	25
	.byte	'Ifx_P_ACCEN0',0,8,212,3,3
	.word	8095
	.byte	25
	.byte	'Ifx_P_ACCEN1',0,8,220,3,3
	.word	7528
	.byte	25
	.byte	'Ifx_P_ESR',0,8,228,3,3
	.word	4822
	.byte	25
	.byte	'Ifx_P_ID',0,8,236,3,3
	.word	2663
	.byte	25
	.byte	'Ifx_P_IN',0,8,244,3,3
	.word	3853
	.byte	25
	.byte	'Ifx_P_IOCR0',0,8,252,3,3
	.word	2887
	.byte	25
	.byte	'Ifx_P_IOCR12',0,8,132,4,3
	.word	3539
	.byte	25
	.byte	'Ifx_P_IOCR4',0,8,140,4,3
	.word	3102
	.byte	25
	.byte	'Ifx_P_IOCR8',0,8,148,4,3
	.word	3319
	.byte	25
	.byte	'Ifx_P_OMCR',0,8,156,4,3
	.word	7432
	.byte	25
	.byte	'Ifx_P_OMCR0',0,8,164,4,3
	.word	6245
	.byte	25
	.byte	'Ifx_P_OMCR12',0,8,172,4,3
	.word	6751
	.byte	25
	.byte	'Ifx_P_OMCR4',0,8,180,4,3
	.word	6419
	.byte	25
	.byte	'Ifx_P_OMCR8',0,8,188,4,3
	.word	6595
	.byte	25
	.byte	'Ifx_P_OMR',0,8,196,4,3
	.word	2544
	.byte	25
	.byte	'Ifx_P_OMSR',0,8,204,4,3
	.word	7084
	.byte	25
	.byte	'Ifx_P_OMSR0',0,8,212,4,3
	.word	5555
	.byte	25
	.byte	'Ifx_P_OMSR12',0,8,220,4,3
	.word	6071
	.byte	25
	.byte	'Ifx_P_OMSR4',0,8,228,4,3
	.word	5724
	.byte	25
	.byte	'Ifx_P_OMSR8',0,8,236,4,3
	.word	5896
	.byte	25
	.byte	'Ifx_P_OUT',0,8,244,4,3
	.word	1973
	.byte	25
	.byte	'Ifx_P_PCSR',0,8,252,4,3
	.word	5408
	.byte	25
	.byte	'Ifx_P_PDISC',0,8,132,5,3
	.word	5197
	.byte	25
	.byte	'Ifx_P_PDR0',0,8,140,5,3
	.word	4166
	.byte	25
	.byte	'Ifx_P_PDR1',0,8,148,5,3
	.word	4482
	.byte	13
	.word	8135
	.byte	25
	.byte	'Ifx_P',0,8,193,5,3
	.word	44215
	.byte	16,20,139,10,9,1,17
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,17
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,25
	.byte	'IfxScu_CCUCON0_CLKSEL',0,20,143,10,3
	.word	44235
	.byte	16,20,153,10,9,1,17
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,17
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,17
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,25
	.byte	'IfxScu_WDTCON1_IR',0,20,158,10,3
	.word	44332
	.byte	9
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,6,45,16,4,10
	.byte	'EN0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_ACCEN0_Bits',0,6,79,3
	.word	44454
	.byte	9
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,6,82,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_SCU_ACCEN1_Bits',0,6,85,3
	.word	45011
	.byte	9
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,6,88,16,4,10
	.byte	'STM0DIS',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'STM1DIS',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'STM2DIS',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	328
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,6,94,3
	.word	45088
	.byte	9
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,6,97,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'BAUD2DIV',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'SRIDIV',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'LPDIV',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'SPBDIV',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'FSI2DIV',0,1
	.word	351
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	351
	.byte	2,0,2,35,2,10
	.byte	'FSIDIV',0,1
	.word	351
	.byte	2,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	2,4,2,35,3,10
	.byte	'CLKSEL',0,1
	.word	351
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON0_Bits',0,6,111,3
	.word	45224
	.byte	9
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,6,114,16,4,10
	.byte	'CANDIV',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'ERAYDIV',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'STMDIV',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'GTMDIV',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'ETHDIV',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'ASCLINFDIV',0,1
	.word	351
	.byte	4,0,2,35,2,10
	.byte	'ASCLINSDIV',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'INSEL',0,1
	.word	351
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON1_Bits',0,6,126,3
	.word	45506
	.byte	9
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,6,129,1,16,4,10
	.byte	'BBBDIV',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON2_Bits',0,6,135,1,3
	.word	45744
	.byte	9
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,6,138,1,16,4,10
	.byte	'PLLDIV',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'PLLSEL',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'PLLERAYDIV',0,1
	.word	351
	.byte	6,2,2,35,1,10
	.byte	'PLLERAYSEL',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'SRIDIV',0,1
	.word	351
	.byte	6,2,2,35,2,10
	.byte	'SRISEL',0,1
	.word	351
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON3_Bits',0,6,149,1,3
	.word	45872
	.byte	9
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,6,152,1,16,4,10
	.byte	'SPBDIV',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'SPBSEL',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'GTMDIV',0,1
	.word	351
	.byte	6,2,2,35,1,10
	.byte	'GTMSEL',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'STMDIV',0,1
	.word	351
	.byte	6,2,2,35,2,10
	.byte	'STMSEL',0,1
	.word	351
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON4_Bits',0,6,163,1,3
	.word	46099
	.byte	9
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,6,166,1,16,4,10
	.byte	'MAXDIV',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON5_Bits',0,6,172,1,3
	.word	46318
	.byte	9
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,6,175,1,16,4,10
	.byte	'CPU0DIV',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON6_Bits',0,6,179,1,3
	.word	46446
	.byte	9
	.byte	'_Ifx_SCU_CHIPID_Bits',0,6,182,1,16,4,10
	.byte	'CHREV',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'CHTEC',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'CHID',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'EEA',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'UCODE',0,1
	.word	351
	.byte	7,0,2,35,2,10
	.byte	'FSIZE',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'SP',0,1
	.word	351
	.byte	2,2,2,35,3,10
	.byte	'SEC',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CHIPID_Bits',0,6,193,1,3
	.word	46546
	.byte	9
	.byte	'_Ifx_SCU_DTSCON_Bits',0,6,196,1,16,4,10
	.byte	'PWD',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'START',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'CAL',0,4
	.word	328
	.byte	22,6,2,35,0,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	5,1,2,35,3,10
	.byte	'SLCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_DTSCON_Bits',0,6,204,1,3
	.word	46754
	.byte	9
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,6,207,1,16,4,10
	.byte	'LOWER',0,2
	.word	902
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	351
	.byte	5,1,2,35,1,10
	.byte	'LLU',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'UPPER',0,2
	.word	902
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	4,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'UOF',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_DTSLIM_Bits',0,6,216,1,3
	.word	46919
	.byte	9
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,6,219,1,16,4,10
	.byte	'RESULT',0,2
	.word	902
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	351
	.byte	4,2,2,35,1,10
	.byte	'RDY',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'BUSY',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,6,226,1,3
	.word	47102
	.byte	9
	.byte	'_Ifx_SCU_EICR_Bits',0,6,229,1,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'EXIS0',0,1
	.word	351
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'FEN0',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'REN0',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'LDEN0',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'EIEN0',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'INP0',0,1
	.word	351
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	328
	.byte	5,12,2,35,0,10
	.byte	'EXIS1',0,1
	.word	351
	.byte	3,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'FEN1',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'REN1',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'LDEN1',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'EIEN1',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'INP1',0,1
	.word	351
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EICR_Bits',0,6,248,1,3
	.word	47256
	.byte	9
	.byte	'_Ifx_SCU_EIFR_Bits',0,6,251,1,16,4,10
	.byte	'INTF0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'INTF1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'INTF2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'INTF3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'INTF4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'INTF5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'INTF6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'INTF7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_EIFR_Bits',0,6,134,2,3
	.word	47620
	.byte	9
	.byte	'_Ifx_SCU_EMSR_Bits',0,6,137,2,16,4,10
	.byte	'POL',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'MODE',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'ENON',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'PSEL',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	902
	.byte	12,0,2,35,0,10
	.byte	'EMSF',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'SEMSF',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	351
	.byte	6,0,2,35,2,10
	.byte	'EMSFM',0,1
	.word	351
	.byte	2,6,2,35,3,10
	.byte	'SEMSFM',0,1
	.word	351
	.byte	2,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	351
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_EMSR_Bits',0,6,150,2,3
	.word	47831
	.byte	9
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,6,153,2,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	7,1,2,35,0,10
	.byte	'EDCON',0,2
	.word	902
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	328
	.byte	23,0,2,35,0,0,25
	.byte	'Ifx_SCU_ESRCFG_Bits',0,6,158,2,3
	.word	48083
	.byte	9
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,6,161,2,16,4,10
	.byte	'ARI',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ARC',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_ESROCFG_Bits',0,6,166,2,3
	.word	48201
	.byte	9
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,6,169,2,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	28,4,2,35,0,10
	.byte	'EVR13OFF',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'BPEVR13OFF',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVR13CON_Bits',0,6,176,2,3
	.word	48312
	.byte	9
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,6,179,2,16,4,10
	.byte	'ADC13V',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'ADCSWDV',0,1
	.word	351
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,6,186,2,3
	.word	48475
	.byte	9
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,6,189,2,16,4,10
	.byte	'EVR13OVMOD',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'EVR13UVMOD',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	902
	.byte	10,0,2,35,0,10
	.byte	'SWDOVMOD',0,1
	.word	351
	.byte	2,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	351
	.byte	2,4,2,35,2,10
	.byte	'SWDUVMOD',0,1
	.word	351
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	902
	.byte	8,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,6,201,2,3
	.word	48637
	.byte	9
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,6,204,2,16,4,10
	.byte	'EVR13OVVAL',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'SWDOVVAL',0,1
	.word	351
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVROVMON_Bits',0,6,212,2,3
	.word	48915
	.byte	9
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,6,215,2,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	28,4,2,35,0,10
	.byte	'RSTSWDOFF',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'BPRSTSWDOFF',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,6,222,2,3
	.word	49094
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,6,225,2,16,4,10
	.byte	'SD33P',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'SD33I',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	328
	.byte	19,1,2,35,0,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,6,232,2,3
	.word	49254
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,6,235,2,16,4,10
	.byte	'SDFREQSPRD',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'TON',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'TOFF',0,1
	.word	351
	.byte	8,0,2,35,2,10
	.byte	'SDSTEP',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'SYNCDIV',0,1
	.word	351
	.byte	3,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,6,244,2,3
	.word	49415
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,6,247,2,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'STBS',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'STSP',0,1
	.word	351
	.byte	2,4,2,35,1,10
	.byte	'NS',0,1
	.word	351
	.byte	2,2,2,35,1,10
	.byte	'OL',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'PIAD',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'ADCMODE',0,1
	.word	351
	.byte	4,4,2,35,2,10
	.byte	'ADCLPF',0,1
	.word	351
	.byte	2,2,2,35,2,10
	.byte	'ADCLSB',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'SDLUT',0,1
	.word	351
	.byte	6,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,6,134,3,3
	.word	49607
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,6,137,3,16,4,10
	.byte	'SDOLCON',0,1
	.word	351
	.byte	7,1,2,35,0,10
	.byte	'MODSEL',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'MODLOW',0,1
	.word	351
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'SDVOKLVL',0,1
	.word	351
	.byte	6,2,2,35,2,10
	.byte	'MODMAN',0,1
	.word	351
	.byte	2,0,2,35,2,10
	.byte	'MODHIGH',0,1
	.word	351
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,6,147,3,3
	.word	49903
	.byte	9
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,6,150,3,16,4,10
	.byte	'EVR13',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'OV13',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'OVSWD',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'UV13',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'UVSWD',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'BGPROK',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'SCMOD',0,1
	.word	351
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	328
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,6,164,3,3
	.word	50118
	.byte	9
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,6,167,3,16,4,10
	.byte	'EVR13UVVAL',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'SWDUVVAL',0,1
	.word	351
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,6,175,3,3
	.word	50407
	.byte	9
	.byte	'_Ifx_SCU_EXTCON_Bits',0,6,178,3,16,4,10
	.byte	'EN0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'SEL0',0,1
	.word	351
	.byte	4,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	902
	.byte	10,0,2,35,0,10
	.byte	'EN1',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'NSEL',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'SEL1',0,1
	.word	351
	.byte	4,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	351
	.byte	2,0,2,35,2,10
	.byte	'DIV1',0,1
	.word	351
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_SCU_EXTCON_Bits',0,6,189,3,3
	.word	50586
	.byte	9
	.byte	'_Ifx_SCU_FDR_Bits',0,6,192,3,16,4,10
	.byte	'STEP',0,2
	.word	902
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	351
	.byte	4,2,2,35,1,10
	.byte	'DM',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'RESULT',0,2
	.word	902
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	5,1,2,35,3,10
	.byte	'DISCLK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_FDR_Bits',0,6,200,3,3
	.word	50804
	.byte	9
	.byte	'_Ifx_SCU_FMR_Bits',0,6,203,3,16,4,10
	.byte	'FS0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'FS1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'FS2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'FS3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'FS4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'FS5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'FS6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'FS7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'FC0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'FC1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'FC2',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'FC3',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'FC4',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'FC5',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'FC6',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'FC7',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_SCU_FMR_Bits',0,6,223,3,3
	.word	50967
	.byte	9
	.byte	'_Ifx_SCU_ID_Bits',0,6,226,3,16,4,10
	.byte	'MODREV',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_ID_Bits',0,6,231,3,3
	.word	51303
	.byte	9
	.byte	'_Ifx_SCU_IGCR_Bits',0,6,234,3,16,4,10
	.byte	'IPEN00',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'IPEN01',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'IPEN02',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'IPEN03',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'IPEN04',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'IPEN05',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'IPEN06',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'IPEN07',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	5,3,2,35,1,10
	.byte	'GEEN0',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'IGP0',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'IPEN10',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'IPEN11',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'IPEN12',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'IPEN13',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'IPEN14',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'IPEN15',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'IPEN16',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'IPEN17',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	5,3,2,35,3,10
	.byte	'GEEN1',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'IGP1',0,1
	.word	351
	.byte	2,0,2,35,3,0,25
	.byte	'Ifx_SCU_IGCR_Bits',0,6,130,4,3
	.word	51410
	.byte	9
	.byte	'_Ifx_SCU_IN_Bits',0,6,133,4,16,4,10
	.byte	'P0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_IN_Bits',0,6,138,4,3
	.word	51862
	.byte	9
	.byte	'_Ifx_SCU_IOCR_Bits',0,6,141,4,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'PC0',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'PC1',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_IOCR_Bits',0,6,148,4,3
	.word	51961
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,6,151,4,16,4,10
	.byte	'LBISTREQ',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'LBISTREQP',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'PATTERNS',0,2
	.word	902
	.byte	14,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,6,157,4,3
	.word	52111
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,6,160,4,16,4,10
	.byte	'SEED',0,4
	.word	328
	.byte	23,9,2,35,0,10
	.byte	'reserved_23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'SPLITSH',0,1
	.word	351
	.byte	3,5,2,35,3,10
	.byte	'BODY',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'LBISTFREQU',0,1
	.word	351
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,6,167,4,3
	.word	52260
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,6,170,4,16,4,10
	.byte	'SIGNATURE',0,4
	.word	328
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	7,1,2,35,3,10
	.byte	'LBISTDONE',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,6,175,4,3
	.word	52421
	.byte	9
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,6,178,4,16,4,10
	.byte	'reserved_0',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'LS',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	902
	.byte	14,1,2,35,2,10
	.byte	'LSEN',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_LCLCON0_Bits',0,6,184,4,3
	.word	52551
	.byte	9
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,6,187,4,16,4,10
	.byte	'LCLT0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'LCLT1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_LCLTEST_Bits',0,6,192,4,3
	.word	52685
	.byte	9
	.byte	'_Ifx_SCU_MANID_Bits',0,6,195,4,16,4,10
	.byte	'DEPT',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'MANUF',0,2
	.word	902
	.byte	11,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_MANID_Bits',0,6,200,4,3
	.word	52800
	.byte	9
	.byte	'_Ifx_SCU_OMR_Bits',0,6,203,4,16,4,10
	.byte	'PS0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	902
	.byte	14,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	902
	.byte	14,0,2,35,2,0,25
	.byte	'Ifx_SCU_OMR_Bits',0,6,211,4,3
	.word	52911
	.byte	9
	.byte	'_Ifx_SCU_OSCCON_Bits',0,6,214,4,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PLLLV',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'OSCRES',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'GAINSEL',0,1
	.word	351
	.byte	2,3,2,35,0,10
	.byte	'MODE',0,1
	.word	351
	.byte	2,1,2,35,0,10
	.byte	'SHBY',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'PLLHV',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'X1D',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'X1DEN',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'OSCVAL',0,1
	.word	351
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	2,1,2,35,2,10
	.byte	'APREN',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_SCU_OSCCON_Bits',0,6,231,4,3
	.word	53069
	.byte	9
	.byte	'_Ifx_SCU_OUT_Bits',0,6,234,4,16,4,10
	.byte	'P0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_OUT_Bits',0,6,239,4,3
	.word	53409
	.byte	9
	.byte	'_Ifx_SCU_OVCCON_Bits',0,6,242,4,16,4,10
	.byte	'CSEL0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'CSEL1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'CSEL2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	902
	.byte	13,0,2,35,0,10
	.byte	'OVSTRT',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'OVSTP',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'DCINVAL',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	351
	.byte	5,0,2,35,2,10
	.byte	'OVCONF',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'POVCONF',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	6,0,2,35,3,0,25
	.byte	'Ifx_SCU_OVCCON_Bits',0,6,255,4,3
	.word	53510
	.byte	9
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,6,130,5,16,4,10
	.byte	'OVEN0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'OVEN1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'OVEN2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	328
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,6,136,5,3
	.word	53777
	.byte	9
	.byte	'_Ifx_SCU_PDISC_Bits',0,6,139,5,16,4,10
	.byte	'PDIS0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_PDISC_Bits',0,6,144,5,3
	.word	53913
	.byte	9
	.byte	'_Ifx_SCU_PDR_Bits',0,6,147,5,16,4,10
	.byte	'PD0',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	351
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_PDR_Bits',0,6,154,5,3
	.word	54024
	.byte	9
	.byte	'_Ifx_SCU_PDRR_Bits',0,6,157,5,16,4,10
	.byte	'PDR0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PDR1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'PDR2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'PDR3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PDR4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'PDR5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'PDR6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PDR7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_PDRR_Bits',0,6,168,5,3
	.word	54157
	.byte	9
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,6,171,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'MODEN',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	902
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	351
	.byte	7,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	351
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	351
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_PLLCON0_Bits',0,6,188,5,3
	.word	54360
	.byte	9
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,6,191,5,16,4,10
	.byte	'K2DIV',0,1
	.word	351
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	351
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	351
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	902
	.byte	9,0,2,35,2,0,25
	.byte	'Ifx_SCU_PLLCON1_Bits',0,6,199,5,3
	.word	54716
	.byte	9
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,6,202,5,16,4,10
	.byte	'MODCFG',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_PLLCON2_Bits',0,6,206,5,3
	.word	54894
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,6,209,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	902
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	351
	.byte	5,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	351
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	351
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,6,226,5,3
	.word	54994
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,6,229,5,16,4,10
	.byte	'K2DIV',0,1
	.word	351
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	351
	.byte	4,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	351
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	902
	.byte	9,0,2,35,2,0,25
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,6,237,5,3
	.word	55364
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,6,240,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PWDSTAT',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,6,249,5,3
	.word	55550
	.byte	9
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,6,252,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'MODRUN',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,6,135,6,3
	.word	55748
	.byte	9
	.byte	'_Ifx_SCU_PMCSR_Bits',0,6,138,6,16,4,10
	.byte	'REQSLP',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'SMUSLP',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	5,0,2,35,0,10
	.byte	'PMST',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,25
	.byte	'Ifx_SCU_PMCSR_Bits',0,6,145,6,3
	.word	55981
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,6,148,6,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ESR1WKEN',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'PINAWKEN',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'PINBWKEN',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'ESR0DFEN',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'ESR0EDCON',0,1
	.word	351
	.byte	2,1,2,35,0,10
	.byte	'ESR1DFEN',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'ESR1EDCON',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'PINADFEN',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'PINAEDCON',0,1
	.word	351
	.byte	2,3,2,35,1,10
	.byte	'PINBDFEN',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'PINBEDCON',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'STBYRAMSEL',0,1
	.word	351
	.byte	2,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	2,1,2,35,2,10
	.byte	'PORSTDF',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'DCDCSYNC',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	3,3,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,6,174,6,3
	.word	56133
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,6,177,6,16,4,10
	.byte	'reserved_0',0,2
	.word	902
	.byte	12,4,2,35,0,10
	.byte	'IRADIS',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	328
	.byte	14,5,2,35,0,10
	.byte	'STBYEVEN',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'STBYEV',0,1
	.word	351
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,6,185,6,3
	.word	56692
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR3_Bits',0,6,188,6,16,4,10
	.byte	'WUTREL',0,4
	.word	328
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'WUTDIV',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWCR3_Bits',0,6,196,6,3
	.word	56875
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,6,199,6,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKP',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUN',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PINAWKP',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUN',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'PINBWKP',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUN',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PORSTDF',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'HWCFGEVR',0,1
	.word	351
	.byte	3,3,2,35,1,10
	.byte	'STBYRAM',0,1
	.word	351
	.byte	2,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'WUTWKP',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUN',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'ESR1WKEN',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'PINAWKEN',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'PINBWKEN',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	902
	.byte	4,5,2,35,2,10
	.byte	'ESR0TRIST',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'WUTRUN',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,6,226,6,3
	.word	57044
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,6,229,6,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKPCLR',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUNCLR',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PINAWKPCLR',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUNCLR',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'PINBWKPCLR',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUNCLR',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'WUTWKPCLR',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUNCLR',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	902
	.byte	14,0,2,35,2,0,25
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,6,242,6,3
	.word	57611
	.byte	9
	.byte	'_Ifx_SCU_PMSWUTCNT_Bits',0,6,245,6,16,4,10
	.byte	'WUTCNT',0,4
	.word	328
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWUTCNT_Bits',0,6,250,6,3
	.word	57927
	.byte	9
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,6,253,6,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'CLRC',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	902
	.byte	10,4,2,35,0,10
	.byte	'CSS0',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'CSS1',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'CSS2',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'USRINFO',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_RSTCON2_Bits',0,6,135,7,3
	.word	58046
	.byte	9
	.byte	'_Ifx_SCU_RSTCON_Bits',0,6,138,7,16,4,10
	.byte	'ESR0',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'ESR1',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'SMU',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'SW',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'STM0',0,1
	.word	351
	.byte	2,4,2,35,1,10
	.byte	'STM1',0,1
	.word	351
	.byte	2,2,2,35,1,10
	.byte	'STM2',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_RSTCON_Bits',0,6,149,7,3
	.word	58255
	.byte	9
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,6,152,7,16,4,10
	.byte	'ESR0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ESR1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SMU',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'SW',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'STM0',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'STM1',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'STM2',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'PORST',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'CB0',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'CB1',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'CB3',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	2,1,2,35,2,10
	.byte	'EVR13',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'EVR33',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'SWD',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	2,4,2,35,3,10
	.byte	'STBYR',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	351
	.byte	3,0,2,35,3,0,25
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,6,175,7,3
	.word	58466
	.byte	9
	.byte	'_Ifx_SCU_SAFECON_Bits',0,6,178,7,16,4,10
	.byte	'HBT',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_SCU_SAFECON_Bits',0,6,182,7,3
	.word	58898
	.byte	9
	.byte	'_Ifx_SCU_STSTAT_Bits',0,6,185,7,16,4,10
	.byte	'HWCFG',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'FTM',0,1
	.word	351
	.byte	7,1,2,35,1,10
	.byte	'MODE',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'FCBAE',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'LUDIS',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'TRSTL',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'SPDEN',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	3,0,2,35,2,10
	.byte	'RAMINT',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	351
	.byte	7,0,2,35,3,0,25
	.byte	'Ifx_SCU_STSTAT_Bits',0,6,198,7,3
	.word	58994
	.byte	9
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,6,201,7,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'SWRSTREQ',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,6,206,7,3
	.word	59254
	.byte	9
	.byte	'_Ifx_SCU_SYSCON_Bits',0,6,209,7,16,4,10
	.byte	'CCTRIG0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'RAMINTM',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'SETLUDIS',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	351
	.byte	3,0,2,35,0,10
	.byte	'DATM',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	328
	.byte	23,0,2,35,0,0,25
	.byte	'Ifx_SCU_SYSCON_Bits',0,6,218,7,3
	.word	59379
	.byte	9
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,6,221,7,16,4,10
	.byte	'ESR0T',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,6,228,7,3
	.word	59576
	.byte	9
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,6,231,7,16,4,10
	.byte	'ESR0T',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,6,238,7,3
	.word	59729
	.byte	9
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,6,241,7,16,4,10
	.byte	'ESR0T',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSET_Bits',0,6,248,7,3
	.word	59882
	.byte	9
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,6,251,7,16,4,10
	.byte	'ESR0T',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,6,130,8,3
	.word	60035
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,6,139,8,3
	.word	766
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,6,154,8,3
	.word	924
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,6,170,8,3
	.word	1168
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,6,173,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	750
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,6,179,8,3
	.word	60290
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,6,182,8,16,4,10
	.byte	'CLRIRF',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'IR0',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	351
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,6,195,8,3
	.word	60416
	.byte	9
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,6,198,8,16,4,10
	.byte	'AE',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	351
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,6,211,8,3
	.word	60668
	.byte	11,6,219,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44454
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ACCEN0',0,6,224,8,3
	.word	60887
	.byte	11,6,227,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45011
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ACCEN1',0,6,232,8,3
	.word	60951
	.byte	11,6,235,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45088
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ARSTDIS',0,6,240,8,3
	.word	61015
	.byte	11,6,243,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45224
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON0',0,6,248,8,3
	.word	61080
	.byte	11,6,251,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45506
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON1',0,6,128,9,3
	.word	61145
	.byte	11,6,131,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45744
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON2',0,6,136,9,3
	.word	61210
	.byte	11,6,139,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45872
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON3',0,6,144,9,3
	.word	61275
	.byte	11,6,147,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46099
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON4',0,6,152,9,3
	.word	61340
	.byte	11,6,155,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46318
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON5',0,6,160,9,3
	.word	61405
	.byte	11,6,163,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46446
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON6',0,6,168,9,3
	.word	61470
	.byte	11,6,171,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46546
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CHIPID',0,6,176,9,3
	.word	61535
	.byte	11,6,179,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46754
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_DTSCON',0,6,184,9,3
	.word	61599
	.byte	11,6,187,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46919
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_DTSLIM',0,6,192,9,3
	.word	61663
	.byte	11,6,195,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47102
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_DTSSTAT',0,6,200,9,3
	.word	61727
	.byte	11,6,203,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47256
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EICR',0,6,208,9,3
	.word	61792
	.byte	11,6,211,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47620
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EIFR',0,6,216,9,3
	.word	61854
	.byte	11,6,219,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47831
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EMSR',0,6,224,9,3
	.word	61916
	.byte	11,6,227,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48083
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ESRCFG',0,6,232,9,3
	.word	61978
	.byte	11,6,235,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48201
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ESROCFG',0,6,240,9,3
	.word	62042
	.byte	11,6,243,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48312
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVR13CON',0,6,248,9,3
	.word	62107
	.byte	11,6,251,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48475
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRADCSTAT',0,6,128,10,3
	.word	62173
	.byte	11,6,131,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48637
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRMONCTRL',0,6,136,10,3
	.word	62241
	.byte	11,6,139,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48915
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVROVMON',0,6,144,10,3
	.word	62309
	.byte	11,6,147,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49094
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRRSTCON',0,6,152,10,3
	.word	62375
	.byte	11,6,155,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49254
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,6,160,10,3
	.word	62442
	.byte	11,6,163,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49415
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCTRL1',0,6,168,10,3
	.word	62511
	.byte	11,6,171,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49607
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCTRL2',0,6,176,10,3
	.word	62579
	.byte	11,6,179,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49903
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCTRL3',0,6,184,10,3
	.word	62647
	.byte	11,6,187,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50118
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSTAT',0,6,192,10,3
	.word	62715
	.byte	11,6,195,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50407
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRUVMON',0,6,200,10,3
	.word	62780
	.byte	11,6,203,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50586
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EXTCON',0,6,208,10,3
	.word	62846
	.byte	11,6,211,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50804
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_FDR',0,6,216,10,3
	.word	62910
	.byte	11,6,219,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	50967
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_FMR',0,6,224,10,3
	.word	62971
	.byte	11,6,227,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51303
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ID',0,6,232,10,3
	.word	63032
	.byte	11,6,235,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51410
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_IGCR',0,6,240,10,3
	.word	63092
	.byte	11,6,243,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51862
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_IN',0,6,248,10,3
	.word	63154
	.byte	11,6,251,10,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	51961
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_IOCR',0,6,128,11,3
	.word	63214
	.byte	11,6,131,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52111
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LBISTCTRL0',0,6,136,11,3
	.word	63276
	.byte	11,6,139,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52260
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LBISTCTRL1',0,6,144,11,3
	.word	63344
	.byte	11,6,147,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52421
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LBISTCTRL2',0,6,152,11,3
	.word	63412
	.byte	11,6,155,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52551
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LCLCON0',0,6,160,11,3
	.word	63480
	.byte	11,6,163,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52685
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LCLTEST',0,6,168,11,3
	.word	63545
	.byte	11,6,171,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52800
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_MANID',0,6,176,11,3
	.word	63610
	.byte	11,6,179,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	52911
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OMR',0,6,184,11,3
	.word	63673
	.byte	11,6,187,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53069
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OSCCON',0,6,192,11,3
	.word	63734
	.byte	11,6,195,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53409
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OUT',0,6,200,11,3
	.word	63798
	.byte	11,6,203,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53510
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OVCCON',0,6,208,11,3
	.word	63859
	.byte	11,6,211,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53777
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OVCENABLE',0,6,216,11,3
	.word	63923
	.byte	11,6,219,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	53913
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PDISC',0,6,224,11,3
	.word	63990
	.byte	11,6,227,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54024
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PDR',0,6,232,11,3
	.word	64053
	.byte	11,6,235,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54157
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PDRR',0,6,240,11,3
	.word	64114
	.byte	11,6,243,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54360
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLCON0',0,6,248,11,3
	.word	64176
	.byte	11,6,251,11,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54716
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLCON1',0,6,128,12,3
	.word	64241
	.byte	11,6,131,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54894
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLCON2',0,6,136,12,3
	.word	64306
	.byte	11,6,139,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	54994
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYCON0',0,6,144,12,3
	.word	64371
	.byte	11,6,147,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55364
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYCON1',0,6,152,12,3
	.word	64440
	.byte	11,6,155,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55550
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYSTAT',0,6,160,12,3
	.word	64509
	.byte	11,6,163,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55748
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLSTAT',0,6,168,12,3
	.word	64578
	.byte	11,6,171,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	55981
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMCSR',0,6,176,12,3
	.word	64643
	.byte	11,6,179,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56133
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWCR0',0,6,184,12,3
	.word	64706
	.byte	11,6,187,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56692
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWCR1',0,6,192,12,3
	.word	64771
	.byte	11,6,195,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	56875
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWCR3',0,6,200,12,3
	.word	64836
	.byte	11,6,203,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57044
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWSTAT',0,6,208,12,3
	.word	64901
	.byte	11,6,211,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57611
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWSTATCLR',0,6,216,12,3
	.word	64967
	.byte	11,6,219,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57927
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWUTCNT',0,6,224,12,3
	.word	65036
	.byte	11,6,227,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58255
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_RSTCON',0,6,232,12,3
	.word	65103
	.byte	11,6,235,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58046
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_RSTCON2',0,6,240,12,3
	.word	65167
	.byte	11,6,243,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58466
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_RSTSTAT',0,6,248,12,3
	.word	65232
	.byte	11,6,251,12,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58898
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_SAFECON',0,6,128,13,3
	.word	65297
	.byte	11,6,131,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58994
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_STSTAT',0,6,136,13,3
	.word	65362
	.byte	11,6,139,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59254
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_SWRSTCON',0,6,144,13,3
	.word	65426
	.byte	11,6,147,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59379
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_SYSCON',0,6,152,13,3
	.word	65492
	.byte	11,6,155,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59576
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPCLR',0,6,160,13,3
	.word	65556
	.byte	11,6,163,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59729
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPDIS',0,6,168,13,3
	.word	65621
	.byte	11,6,171,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59882
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSET',0,6,176,13,3
	.word	65686
	.byte	11,6,179,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60035
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSTAT',0,6,184,13,3
	.word	65751
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON0',0,6,192,13,3
	.word	862
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON1',0,6,200,13,3
	.word	1128
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_SR',0,6,208,13,3
	.word	1359
	.byte	11,6,211,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60290
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_CON0',0,6,216,13,3
	.word	65902
	.byte	11,6,219,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60416
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_CON1',0,6,224,13,3
	.word	65969
	.byte	11,6,227,13,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60668
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_SR',0,6,232,13,3
	.word	66036
	.byte	13
	.word	1399
	.byte	25
	.byte	'Ifx_SCU_WDTCPU',0,6,248,13,3
	.word	66101
	.byte	9
	.byte	'_Ifx_SCU_WDTS',0,6,251,13,25,12,12
	.byte	'CON0',0
	.word	65902
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	65969
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	66036
	.byte	4,2,35,8,0,13
	.word	66130
	.byte	25
	.byte	'Ifx_SCU_WDTS',0,6,128,14,3
	.word	66191
	.byte	14,8
	.word	61978
	.byte	15,1,0,14,4
	.word	64643
	.byte	15,0,0,13
	.word	66130
	.byte	14,12
	.word	1399
	.byte	15,0,0,13
	.word	66241
	.byte	14,20
	.word	351
	.byte	15,19,0,14,16
	.word	61792
	.byte	15,3,0,14,16
	.word	63092
	.byte	15,3,0,14,188,1
	.word	351
	.byte	15,187,1,0,14,244,1
	.word	351
	.byte	15,243,1,0,9
	.byte	'_Ifx_SCU',0,6,141,14,25,128,8,12
	.byte	'reserved_0',0
	.word	4522
	.byte	8,2,35,0,12
	.byte	'ID',0
	.word	63032
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	2703
	.byte	4,2,35,12,12
	.byte	'OSCCON',0
	.word	63734
	.byte	4,2,35,16,12
	.byte	'PLLSTAT',0
	.word	64578
	.byte	4,2,35,20,12
	.byte	'PLLCON0',0
	.word	64176
	.byte	4,2,35,24,12
	.byte	'PLLCON1',0
	.word	64241
	.byte	4,2,35,28,12
	.byte	'PLLCON2',0
	.word	64306
	.byte	4,2,35,32,12
	.byte	'PLLERAYSTAT',0
	.word	64509
	.byte	4,2,35,36,12
	.byte	'PLLERAYCON0',0
	.word	64371
	.byte	4,2,35,40,12
	.byte	'PLLERAYCON1',0
	.word	64440
	.byte	4,2,35,44,12
	.byte	'CCUCON0',0
	.word	61080
	.byte	4,2,35,48,12
	.byte	'CCUCON1',0
	.word	61145
	.byte	4,2,35,52,12
	.byte	'FDR',0
	.word	62910
	.byte	4,2,35,56,12
	.byte	'EXTCON',0
	.word	62846
	.byte	4,2,35,60,12
	.byte	'CCUCON2',0
	.word	61210
	.byte	4,2,35,64,12
	.byte	'CCUCON3',0
	.word	61275
	.byte	4,2,35,68,12
	.byte	'CCUCON4',0
	.word	61340
	.byte	4,2,35,72,12
	.byte	'CCUCON5',0
	.word	61405
	.byte	4,2,35,76,12
	.byte	'RSTSTAT',0
	.word	65232
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	2703
	.byte	4,2,35,84,12
	.byte	'RSTCON',0
	.word	65103
	.byte	4,2,35,88,12
	.byte	'ARSTDIS',0
	.word	61015
	.byte	4,2,35,92,12
	.byte	'SWRSTCON',0
	.word	65426
	.byte	4,2,35,96,12
	.byte	'RSTCON2',0
	.word	65167
	.byte	4,2,35,100,12
	.byte	'reserved_68',0
	.word	2703
	.byte	4,2,35,104,12
	.byte	'EVRRSTCON',0
	.word	62375
	.byte	4,2,35,108,12
	.byte	'ESRCFG',0
	.word	66218
	.byte	8,2,35,112,12
	.byte	'ESROCFG',0
	.word	62042
	.byte	4,2,35,120,12
	.byte	'SYSCON',0
	.word	65492
	.byte	4,2,35,124,12
	.byte	'CCUCON6',0
	.word	61470
	.byte	4,3,35,128,1,12
	.byte	'reserved_84',0
	.word	3893
	.byte	24,3,35,132,1,12
	.byte	'PDR',0
	.word	64053
	.byte	4,3,35,156,1,12
	.byte	'IOCR',0
	.word	63214
	.byte	4,3,35,160,1,12
	.byte	'OUT',0
	.word	63798
	.byte	4,3,35,164,1,12
	.byte	'OMR',0
	.word	63673
	.byte	4,3,35,168,1,12
	.byte	'IN',0
	.word	63154
	.byte	4,3,35,172,1,12
	.byte	'EVRSTAT',0
	.word	62715
	.byte	4,3,35,176,1,12
	.byte	'reserved_B4',0
	.word	2703
	.byte	4,3,35,180,1,12
	.byte	'EVR13CON',0
	.word	62107
	.byte	4,3,35,184,1,12
	.byte	'reserved_BC',0
	.word	2703
	.byte	4,3,35,188,1,12
	.byte	'STSTAT',0
	.word	65362
	.byte	4,3,35,192,1,12
	.byte	'reserved_C4',0
	.word	2703
	.byte	4,3,35,196,1,12
	.byte	'PMSWCR0',0
	.word	64706
	.byte	4,3,35,200,1,12
	.byte	'PMSWSTAT',0
	.word	64901
	.byte	4,3,35,204,1,12
	.byte	'PMSWSTATCLR',0
	.word	64967
	.byte	4,3,35,208,1,12
	.byte	'PMCSR',0
	.word	66227
	.byte	4,3,35,212,1,12
	.byte	'reserved_D8',0
	.word	4522
	.byte	8,3,35,216,1,12
	.byte	'DTSSTAT',0
	.word	61727
	.byte	4,3,35,224,1,12
	.byte	'DTSCON',0
	.word	61599
	.byte	4,3,35,228,1,12
	.byte	'PMSWCR1',0
	.word	64771
	.byte	4,3,35,232,1,12
	.byte	'reserved_EC',0
	.word	2703
	.byte	4,3,35,236,1,12
	.byte	'WDTS',0
	.word	66236
	.byte	12,3,35,240,1,12
	.byte	'EMSR',0
	.word	61916
	.byte	4,3,35,252,1,12
	.byte	'WDTCPU',0
	.word	66250
	.byte	12,3,35,128,2,12
	.byte	'reserved_10C',0
	.word	3893
	.byte	24,3,35,140,2,12
	.byte	'TRAPSTAT',0
	.word	65751
	.byte	4,3,35,164,2,12
	.byte	'TRAPSET',0
	.word	65686
	.byte	4,3,35,168,2,12
	.byte	'TRAPCLR',0
	.word	65556
	.byte	4,3,35,172,2,12
	.byte	'TRAPDIS',0
	.word	65621
	.byte	4,3,35,176,2,12
	.byte	'LCLCON0',0
	.word	63480
	.byte	4,3,35,180,2,12
	.byte	'reserved_138',0
	.word	2703
	.byte	4,3,35,184,2,12
	.byte	'LCLTEST',0
	.word	63545
	.byte	4,3,35,188,2,12
	.byte	'CHIPID',0
	.word	61535
	.byte	4,3,35,192,2,12
	.byte	'MANID',0
	.word	63610
	.byte	4,3,35,196,2,12
	.byte	'reserved_148',0
	.word	4522
	.byte	8,3,35,200,2,12
	.byte	'SAFECON',0
	.word	65297
	.byte	4,3,35,208,2,12
	.byte	'reserved_154',0
	.word	11993
	.byte	16,3,35,212,2,12
	.byte	'LBISTCTRL0',0
	.word	63276
	.byte	4,3,35,228,2,12
	.byte	'LBISTCTRL1',0
	.word	63344
	.byte	4,3,35,232,2,12
	.byte	'LBISTCTRL2',0
	.word	63412
	.byte	4,3,35,236,2,12
	.byte	'reserved_170',0
	.word	9978
	.byte	28,3,35,240,2,12
	.byte	'PDISC',0
	.word	63990
	.byte	4,3,35,140,3,12
	.byte	'reserved_190',0
	.word	4862
	.byte	12,3,35,144,3,12
	.byte	'EVRADCSTAT',0
	.word	62173
	.byte	4,3,35,156,3,12
	.byte	'EVRUVMON',0
	.word	62780
	.byte	4,3,35,160,3,12
	.byte	'EVROVMON',0
	.word	62309
	.byte	4,3,35,164,3,12
	.byte	'EVRMONCTRL',0
	.word	62241
	.byte	4,3,35,168,3,12
	.byte	'reserved_1AC',0
	.word	2703
	.byte	4,3,35,172,3,12
	.byte	'EVRSDCTRL1',0
	.word	62511
	.byte	4,3,35,176,3,12
	.byte	'EVRSDCTRL2',0
	.word	62579
	.byte	4,3,35,180,3,12
	.byte	'EVRSDCTRL3',0
	.word	62647
	.byte	4,3,35,184,3,12
	.byte	'reserved_1BC',0
	.word	4522
	.byte	8,3,35,188,3,12
	.byte	'EVRSDCOEFF2',0
	.word	62442
	.byte	4,3,35,196,3,12
	.byte	'reserved_1C8',0
	.word	66255
	.byte	20,3,35,200,3,12
	.byte	'PMSWUTCNT',0
	.word	65036
	.byte	4,3,35,220,3,12
	.byte	'OVCENABLE',0
	.word	63923
	.byte	4,3,35,224,3,12
	.byte	'OVCCON',0
	.word	63859
	.byte	4,3,35,228,3,12
	.byte	'reserved_1E8',0
	.word	17911
	.byte	40,3,35,232,3,12
	.byte	'EICR',0
	.word	66264
	.byte	16,3,35,144,4,12
	.byte	'EIFR',0
	.word	61854
	.byte	4,3,35,160,4,12
	.byte	'FMR',0
	.word	62971
	.byte	4,3,35,164,4,12
	.byte	'PDRR',0
	.word	64114
	.byte	4,3,35,168,4,12
	.byte	'IGCR',0
	.word	66273
	.byte	16,3,35,172,4,12
	.byte	'reserved_23C',0
	.word	2703
	.byte	4,3,35,188,4,12
	.byte	'DTSLIM',0
	.word	61663
	.byte	4,3,35,192,4,12
	.byte	'reserved_244',0
	.word	66282
	.byte	188,1,3,35,196,4,12
	.byte	'PMSWCR3',0
	.word	64836
	.byte	4,3,35,128,6,12
	.byte	'reserved_304',0
	.word	66293
	.byte	244,1,3,35,132,6,12
	.byte	'ACCEN1',0
	.word	60951
	.byte	4,3,35,248,7,12
	.byte	'ACCEN0',0
	.word	60887
	.byte	4,3,35,252,7,0,13
	.word	66304
	.byte	25
	.byte	'Ifx_SCU',0,6,244,14,3
	.word	68200
	.byte	16,7,54,9,1,17
	.byte	'IfxPort_InputMode_undefined',0,127,17
	.byte	'IfxPort_InputMode_noPullDevice',0,0,17
	.byte	'IfxPort_InputMode_pullDown',0,8,17
	.byte	'IfxPort_InputMode_pullUp',0,16,0,25
	.byte	'IfxPort_InputMode',0,7,60,3
	.word	68222
	.byte	25
	.byte	'IfxPort_OutputIdx',0,7,101,3
	.word	8747
	.byte	25
	.byte	'IfxPort_OutputMode',0,7,109,3
	.word	8678
	.byte	16,7,115,9,1,17
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,17
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,17
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,17
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,17
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,17
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,17
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,17
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,25
	.byte	'IfxPort_PadDriver',0,7,125,3
	.word	68426
	.byte	25
	.byte	'IfxPort_State',0,7,137,1,3
	.word	9060
	.byte	29,7,149,1,9,8,12
	.byte	'port',0
	.word	8673
	.byte	4,2,35,0,12
	.byte	'pinIndex',0
	.word	351
	.byte	1,2,35,4,0,25
	.byte	'IfxPort_Pin',0,7,153,1,3
	.word	68765
	.byte	29,21,39,15,20,12
	.byte	'module',0
	.word	28591
	.byte	4,2,35,0,12
	.byte	'groupId',0
	.word	32582
	.byte	1,2,35,4,12
	.byte	'pin',0
	.word	68765
	.byte	8,2,35,8,12
	.byte	'select',0
	.word	8747
	.byte	1,2,35,16,0,27
	.word	68825
	.byte	25
	.byte	'IfxVadc_GxBfl_Out',0,21,45,3
	.word	68893
	.byte	29,21,48,15,16,12
	.byte	'module',0
	.word	28591
	.byte	4,2,35,0,12
	.byte	'pin',0
	.word	68765
	.byte	8,2,35,4,12
	.byte	'select',0
	.word	8747
	.byte	1,2,35,12,0,27
	.word	68924
	.byte	25
	.byte	'IfxVadc_Emux_Out',0,21,53,3
	.word	68975
	.byte	9
	.byte	'_Ifx_CPU_A_Bits',0,22,45,16,4,10
	.byte	'ADDR',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_A_Bits',0,22,48,3
	.word	69005
	.byte	9
	.byte	'_Ifx_CPU_BIV_Bits',0,22,51,16,4,10
	.byte	'VSS',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'BIV',0,4
	.word	750
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_BIV_Bits',0,22,55,3
	.word	69066
	.byte	9
	.byte	'_Ifx_CPU_BTV_Bits',0,22,58,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'BTV',0,4
	.word	750
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_BTV_Bits',0,22,62,3
	.word	69145
	.byte	9
	.byte	'_Ifx_CPU_CCNT_Bits',0,22,65,16,4,10
	.byte	'CountValue',0,4
	.word	750
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	750
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_CCNT_Bits',0,22,69,3
	.word	69231
	.byte	9
	.byte	'_Ifx_CPU_CCTRL_Bits',0,22,72,16,4,10
	.byte	'CM',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'CE',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'M1',0,4
	.word	750
	.byte	3,27,2,35,0,10
	.byte	'M2',0,4
	.word	750
	.byte	3,24,2,35,0,10
	.byte	'M3',0,4
	.word	750
	.byte	3,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	750
	.byte	21,0,2,35,0,0,25
	.byte	'Ifx_CPU_CCTRL_Bits',0,22,80,3
	.word	69320
	.byte	9
	.byte	'_Ifx_CPU_COMPAT_Bits',0,22,83,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'RM',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'SP',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	750
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_COMPAT_Bits',0,22,89,3
	.word	69466
	.byte	9
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,22,92,16,4,10
	.byte	'CORE_ID',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	750
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_CORE_ID_Bits',0,22,96,3
	.word	69593
	.byte	9
	.byte	'_Ifx_CPU_CPR_L_Bits',0,22,99,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	750
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_CPR_L_Bits',0,22,103,3
	.word	69691
	.byte	9
	.byte	'_Ifx_CPU_CPR_U_Bits',0,22,106,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	750
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_CPR_U_Bits',0,22,110,3
	.word	69784
	.byte	9
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,22,113,16,4,10
	.byte	'MODREV',0,4
	.word	750
	.byte	8,24,2,35,0,10
	.byte	'MOD_32B',0,4
	.word	750
	.byte	8,16,2,35,0,10
	.byte	'MOD',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_CPU_ID_Bits',0,22,118,3
	.word	69877
	.byte	9
	.byte	'_Ifx_CPU_CPXE_Bits',0,22,121,16,4,10
	.byte	'XE',0,4
	.word	750
	.byte	8,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	750
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_CPXE_Bits',0,22,125,3
	.word	69984
	.byte	9
	.byte	'_Ifx_CPU_CREVT_Bits',0,22,128,1,16,4,10
	.byte	'EVTA',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	750
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	750
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	750
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_CREVT_Bits',0,22,136,1,3
	.word	70071
	.byte	9
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,22,139,1,16,4,10
	.byte	'CID',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	750
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_CUS_ID_Bits',0,22,143,1,3
	.word	70225
	.byte	9
	.byte	'_Ifx_CPU_D_Bits',0,22,146,1,16,4,10
	.byte	'DATA',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_D_Bits',0,22,149,1,3
	.word	70319
	.byte	9
	.byte	'_Ifx_CPU_DATR_Bits',0,22,152,1,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'SBE',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'reserved_4',0,4
	.word	750
	.byte	5,23,2,35,0,10
	.byte	'CWE',0,4
	.word	750
	.byte	1,22,2,35,0,10
	.byte	'CFE',0,4
	.word	750
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	750
	.byte	3,18,2,35,0,10
	.byte	'SOE',0,4
	.word	750
	.byte	1,17,2,35,0,10
	.byte	'SME',0,4
	.word	750
	.byte	1,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_DATR_Bits',0,22,163,1,3
	.word	70382
	.byte	9
	.byte	'_Ifx_CPU_DBGSR_Bits',0,22,166,1,16,4,10
	.byte	'DE',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'HALT',0,4
	.word	750
	.byte	2,29,2,35,0,10
	.byte	'SIH',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'SUSP',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	750
	.byte	1,26,2,35,0,10
	.byte	'PREVSUSP',0,4
	.word	750
	.byte	1,25,2,35,0,10
	.byte	'PEVT',0,4
	.word	750
	.byte	1,24,2,35,0,10
	.byte	'EVTSRC',0,4
	.word	750
	.byte	5,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	750
	.byte	19,0,2,35,0,0,25
	.byte	'Ifx_CPU_DBGSR_Bits',0,22,177,1,3
	.word	70600
	.byte	9
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,22,180,1,16,4,10
	.byte	'DTA',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	750
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_DBGTCR_Bits',0,22,184,1,3
	.word	70815
	.byte	9
	.byte	'_Ifx_CPU_DCON0_Bits',0,22,187,1,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'DCBYP',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	750
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_CPU_DCON0_Bits',0,22,192,1,3
	.word	70909
	.byte	9
	.byte	'_Ifx_CPU_DCON2_Bits',0,22,195,1,16,4,10
	.byte	'DCACHE_SZE',0,4
	.word	750
	.byte	16,16,2,35,0,10
	.byte	'DSCRATCH_SZE',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_DCON2_Bits',0,22,199,1,3
	.word	71025
	.byte	9
	.byte	'_Ifx_CPU_DCX_Bits',0,22,202,1,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	6,26,2,35,0,10
	.byte	'DCXValue',0,4
	.word	750
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_CPU_DCX_Bits',0,22,206,1,3
	.word	71126
	.byte	9
	.byte	'_Ifx_CPU_DEADD_Bits',0,22,209,1,16,4,10
	.byte	'ERROR_ADDRESS',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_DEADD_Bits',0,22,212,1,3
	.word	71219
	.byte	9
	.byte	'_Ifx_CPU_DIEAR_Bits',0,22,215,1,16,4,10
	.byte	'TA',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_DIEAR_Bits',0,22,218,1,3
	.word	71299
	.byte	9
	.byte	'_Ifx_CPU_DIETR_Bits',0,22,221,1,16,4,10
	.byte	'IED',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	750
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	750
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	750
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	750
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	750
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	750
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_CPU_DIETR_Bits',0,22,233,1,3
	.word	71368
	.byte	9
	.byte	'_Ifx_CPU_DMS_Bits',0,22,236,1,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'DMSValue',0,4
	.word	750
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_DMS_Bits',0,22,240,1,3
	.word	71597
	.byte	9
	.byte	'_Ifx_CPU_DPR_L_Bits',0,22,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	750
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_DPR_L_Bits',0,22,247,1,3
	.word	71690
	.byte	9
	.byte	'_Ifx_CPU_DPR_U_Bits',0,22,250,1,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	750
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_DPR_U_Bits',0,22,254,1,3
	.word	71785
	.byte	9
	.byte	'_Ifx_CPU_DPRE_Bits',0,22,129,2,16,4,10
	.byte	'RE',0,4
	.word	750
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_DPRE_Bits',0,22,133,2,3
	.word	71880
	.byte	9
	.byte	'_Ifx_CPU_DPWE_Bits',0,22,136,2,16,4,10
	.byte	'WE',0,4
	.word	750
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_DPWE_Bits',0,22,140,2,3
	.word	71970
	.byte	9
	.byte	'_Ifx_CPU_DSTR_Bits',0,22,143,2,16,4,10
	.byte	'SRE',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'GAE',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'LBE',0,4
	.word	750
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	750
	.byte	3,26,2,35,0,10
	.byte	'CRE',0,4
	.word	750
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	750
	.byte	7,18,2,35,0,10
	.byte	'DTME',0,4
	.word	750
	.byte	1,17,2,35,0,10
	.byte	'LOE',0,4
	.word	750
	.byte	1,16,2,35,0,10
	.byte	'SDE',0,4
	.word	750
	.byte	1,15,2,35,0,10
	.byte	'SCE',0,4
	.word	750
	.byte	1,14,2,35,0,10
	.byte	'CAC',0,4
	.word	750
	.byte	1,13,2,35,0,10
	.byte	'MPE',0,4
	.word	750
	.byte	1,12,2,35,0,10
	.byte	'CLE',0,4
	.word	750
	.byte	1,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	750
	.byte	3,8,2,35,0,10
	.byte	'ALN',0,4
	.word	750
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	750
	.byte	7,0,2,35,0,0,25
	.byte	'Ifx_CPU_DSTR_Bits',0,22,161,2,3
	.word	72060
	.byte	9
	.byte	'_Ifx_CPU_EXEVT_Bits',0,22,164,2,16,4,10
	.byte	'EVTA',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	750
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	750
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	750
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_EXEVT_Bits',0,22,172,2,3
	.word	72384
	.byte	9
	.byte	'_Ifx_CPU_FCX_Bits',0,22,175,2,16,4,10
	.byte	'FCXO',0,4
	.word	750
	.byte	16,16,2,35,0,10
	.byte	'FCXS',0,4
	.word	750
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	750
	.byte	12,0,2,35,0,0,25
	.byte	'Ifx_CPU_FCX_Bits',0,22,180,2,3
	.word	72538
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,22,183,2,16,4,10
	.byte	'TST',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'TCL',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	750
	.byte	6,24,2,35,0,10
	.byte	'RM',0,4
	.word	750
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	750
	.byte	8,14,2,35,0,10
	.byte	'FXE',0,4
	.word	750
	.byte	1,13,2,35,0,10
	.byte	'FUE',0,4
	.word	750
	.byte	1,12,2,35,0,10
	.byte	'FZE',0,4
	.word	750
	.byte	1,11,2,35,0,10
	.byte	'FVE',0,4
	.word	750
	.byte	1,10,2,35,0,10
	.byte	'FIE',0,4
	.word	750
	.byte	1,9,2,35,0,10
	.byte	'reserved_23',0,4
	.word	750
	.byte	3,6,2,35,0,10
	.byte	'FX',0,4
	.word	750
	.byte	1,5,2,35,0,10
	.byte	'FU',0,4
	.word	750
	.byte	1,4,2,35,0,10
	.byte	'FZ',0,4
	.word	750
	.byte	1,3,2,35,0,10
	.byte	'FV',0,4
	.word	750
	.byte	1,2,2,35,0,10
	.byte	'FI',0,4
	.word	750
	.byte	1,1,2,35,0,10
	.byte	'reserved_31',0,4
	.word	750
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,22,202,2,3
	.word	72644
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,205,2,16,4,10
	.byte	'OPC',0,4
	.word	750
	.byte	8,24,2,35,0,10
	.byte	'FMT',0,4
	.word	750
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	750
	.byte	7,16,2,35,0,10
	.byte	'DREG',0,4
	.word	750
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	750
	.byte	12,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,22,212,2,3
	.word	72993
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,22,215,2,16,4,10
	.byte	'PC',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,22,218,2,3
	.word	73153
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,221,2,16,4,10
	.byte	'SRC1',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,22,224,2,3
	.word	73234
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,227,2,16,4,10
	.byte	'SRC2',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,22,230,2,3
	.word	73321
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,233,2,16,4,10
	.byte	'SRC3',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,22,236,2,3
	.word	73408
	.byte	9
	.byte	'_Ifx_CPU_ICNT_Bits',0,22,239,2,16,4,10
	.byte	'CountValue',0,4
	.word	750
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	750
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_ICNT_Bits',0,22,243,2,3
	.word	73495
	.byte	9
	.byte	'_Ifx_CPU_ICR_Bits',0,22,246,2,16,4,10
	.byte	'CCPN',0,4
	.word	750
	.byte	10,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	750
	.byte	5,17,2,35,0,10
	.byte	'IE',0,4
	.word	750
	.byte	1,16,2,35,0,10
	.byte	'PIPN',0,4
	.word	750
	.byte	10,6,2,35,0,10
	.byte	'reserved_26',0,4
	.word	750
	.byte	6,0,2,35,0,0,25
	.byte	'Ifx_CPU_ICR_Bits',0,22,253,2,3
	.word	73586
	.byte	9
	.byte	'_Ifx_CPU_ISP_Bits',0,22,128,3,16,4,10
	.byte	'ISP',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_ISP_Bits',0,22,131,3,3
	.word	73729
	.byte	9
	.byte	'_Ifx_CPU_LCX_Bits',0,22,134,3,16,4,10
	.byte	'LCXO',0,4
	.word	750
	.byte	16,16,2,35,0,10
	.byte	'LCXS',0,4
	.word	750
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	750
	.byte	12,0,2,35,0,0,25
	.byte	'Ifx_CPU_LCX_Bits',0,22,139,3,3
	.word	73795
	.byte	9
	.byte	'_Ifx_CPU_M1CNT_Bits',0,22,142,3,16,4,10
	.byte	'CountValue',0,4
	.word	750
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	750
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_M1CNT_Bits',0,22,146,3,3
	.word	73901
	.byte	9
	.byte	'_Ifx_CPU_M2CNT_Bits',0,22,149,3,16,4,10
	.byte	'CountValue',0,4
	.word	750
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	750
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_M2CNT_Bits',0,22,153,3,3
	.word	73994
	.byte	9
	.byte	'_Ifx_CPU_M3CNT_Bits',0,22,156,3,16,4,10
	.byte	'CountValue',0,4
	.word	750
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	750
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_M3CNT_Bits',0,22,160,3,3
	.word	74087
	.byte	9
	.byte	'_Ifx_CPU_PC_Bits',0,22,163,3,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'PC',0,4
	.word	750
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_PC_Bits',0,22,167,3,3
	.word	74180
	.byte	9
	.byte	'_Ifx_CPU_PCON0_Bits',0,22,170,3,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'PCBYP',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	750
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_CPU_PCON0_Bits',0,22,175,3,3
	.word	74265
	.byte	9
	.byte	'_Ifx_CPU_PCON1_Bits',0,22,178,3,16,4,10
	.byte	'PCINV',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'PBINV',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	750
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_CPU_PCON1_Bits',0,22,183,3,3
	.word	74381
	.byte	9
	.byte	'_Ifx_CPU_PCON2_Bits',0,22,186,3,16,4,10
	.byte	'PCACHE_SZE',0,4
	.word	750
	.byte	16,16,2,35,0,10
	.byte	'PSCRATCH_SZE',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_PCON2_Bits',0,22,190,3,3
	.word	74492
	.byte	9
	.byte	'_Ifx_CPU_PCXI_Bits',0,22,193,3,16,4,10
	.byte	'PCXO',0,4
	.word	750
	.byte	16,16,2,35,0,10
	.byte	'PCXS',0,4
	.word	750
	.byte	4,12,2,35,0,10
	.byte	'UL',0,4
	.word	750
	.byte	1,11,2,35,0,10
	.byte	'PIE',0,4
	.word	750
	.byte	1,10,2,35,0,10
	.byte	'PCPN',0,4
	.word	750
	.byte	10,0,2,35,0,0,25
	.byte	'Ifx_CPU_PCXI_Bits',0,22,200,3,3
	.word	74593
	.byte	9
	.byte	'_Ifx_CPU_PIEAR_Bits',0,22,203,3,16,4,10
	.byte	'TA',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_PIEAR_Bits',0,22,206,3,3
	.word	74723
	.byte	9
	.byte	'_Ifx_CPU_PIETR_Bits',0,22,209,3,16,4,10
	.byte	'IED',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	750
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	750
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	750
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	750
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	750
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	750
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_CPU_PIETR_Bits',0,22,221,3,3
	.word	74792
	.byte	9
	.byte	'_Ifx_CPU_PMA0_Bits',0,22,224,3,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	13,19,2,35,0,10
	.byte	'DAC',0,4
	.word	750
	.byte	3,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_PMA0_Bits',0,22,229,3,3
	.word	75021
	.byte	9
	.byte	'_Ifx_CPU_PMA1_Bits',0,22,232,3,16,4,10
	.byte	'reserved_0',0,4
	.word	750
	.byte	14,18,2,35,0,10
	.byte	'CAC',0,4
	.word	750
	.byte	2,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_PMA1_Bits',0,22,237,3,3
	.word	75134
	.byte	9
	.byte	'_Ifx_CPU_PMA2_Bits',0,22,240,3,16,4,10
	.byte	'PSI',0,4
	.word	750
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	750
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_PMA2_Bits',0,22,244,3,3
	.word	75247
	.byte	9
	.byte	'_Ifx_CPU_PSTR_Bits',0,22,247,3,16,4,10
	.byte	'FRE',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'FBE',0,4
	.word	750
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	750
	.byte	9,20,2,35,0,10
	.byte	'FPE',0,4
	.word	750
	.byte	1,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	750
	.byte	1,18,2,35,0,10
	.byte	'FME',0,4
	.word	750
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	750
	.byte	17,0,2,35,0,0,25
	.byte	'Ifx_CPU_PSTR_Bits',0,22,129,4,3
	.word	75338
	.byte	9
	.byte	'_Ifx_CPU_PSW_Bits',0,22,132,4,16,4,10
	.byte	'CDC',0,4
	.word	750
	.byte	7,25,2,35,0,10
	.byte	'CDE',0,4
	.word	750
	.byte	1,24,2,35,0,10
	.byte	'GW',0,4
	.word	750
	.byte	1,23,2,35,0,10
	.byte	'IS',0,4
	.word	750
	.byte	1,22,2,35,0,10
	.byte	'IO',0,4
	.word	750
	.byte	2,20,2,35,0,10
	.byte	'PRS',0,4
	.word	750
	.byte	2,18,2,35,0,10
	.byte	'S',0,4
	.word	750
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	750
	.byte	12,5,2,35,0,10
	.byte	'SAV',0,4
	.word	750
	.byte	1,4,2,35,0,10
	.byte	'AV',0,4
	.word	750
	.byte	1,3,2,35,0,10
	.byte	'SV',0,4
	.word	750
	.byte	1,2,2,35,0,10
	.byte	'V',0,4
	.word	750
	.byte	1,1,2,35,0,10
	.byte	'C',0,4
	.word	750
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_PSW_Bits',0,22,147,4,3
	.word	75541
	.byte	9
	.byte	'_Ifx_CPU_SEGEN_Bits',0,22,150,4,16,4,10
	.byte	'ADFLIP',0,4
	.word	750
	.byte	8,24,2,35,0,10
	.byte	'ADTYPE',0,4
	.word	750
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	750
	.byte	21,1,2,35,0,10
	.byte	'AE',0,4
	.word	750
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_SEGEN_Bits',0,22,156,4,3
	.word	75784
	.byte	9
	.byte	'_Ifx_CPU_SMACON_Bits',0,22,159,4,16,4,10
	.byte	'PC',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'PT',0,4
	.word	750
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	750
	.byte	5,24,2,35,0,10
	.byte	'DC',0,4
	.word	750
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	750
	.byte	1,22,2,35,0,10
	.byte	'DT',0,4
	.word	750
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	750
	.byte	13,8,2,35,0,10
	.byte	'IODT',0,4
	.word	750
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	750
	.byte	7,0,2,35,0,0,25
	.byte	'Ifx_CPU_SMACON_Bits',0,22,171,4,3
	.word	75912
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,22,174,4,16,4,10
	.byte	'EN',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,22,177,4,3
	.word	76153
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,22,180,4,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,22,183,4,3
	.word	76236
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,22,186,4,16,4,10
	.byte	'EN',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,22,189,4,3
	.word	76327
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,22,192,4,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,22,195,4,3
	.word	76418
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,22,198,4,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	328
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,22,202,4,3
	.word	76517
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,22,205,4,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	328
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,22,209,4,3
	.word	76624
	.byte	9
	.byte	'_Ifx_CPU_SWEVT_Bits',0,22,212,4,16,4,10
	.byte	'EVTA',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	750
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	750
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	750
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_SWEVT_Bits',0,22,220,4,3
	.word	76731
	.byte	9
	.byte	'_Ifx_CPU_SYSCON_Bits',0,22,223,4,16,4,10
	.byte	'FCDSF',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'PROTEN',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'TPROTEN',0,4
	.word	750
	.byte	1,29,2,35,0,10
	.byte	'IS',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'IT',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	750
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_SYSCON_Bits',0,22,231,4,3
	.word	76885
	.byte	9
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,22,234,4,16,4,10
	.byte	'ASI',0,4
	.word	750
	.byte	5,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	750
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,22,238,4,3
	.word	77046
	.byte	9
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,22,241,4,16,4,10
	.byte	'TEXP0',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'TEXP1',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'TEXP2',0,4
	.word	750
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	750
	.byte	13,16,2,35,0,10
	.byte	'TTRAP',0,4
	.word	750
	.byte	1,15,2,35,0,10
	.byte	'reserved_17',0,4
	.word	750
	.byte	15,0,2,35,0,0,25
	.byte	'Ifx_CPU_TPS_CON_Bits',0,22,249,4,3
	.word	77144
	.byte	9
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,22,252,4,16,4,10
	.byte	'Timer',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,22,255,4,3
	.word	77316
	.byte	9
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,22,130,5,16,4,10
	.byte	'ADDR',0,4
	.word	750
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_TR_ADR_Bits',0,22,133,5,3
	.word	77396
	.byte	9
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,22,136,5,16,4,10
	.byte	'EVTA',0,4
	.word	750
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	750
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	750
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	750
	.byte	4,20,2,35,0,10
	.byte	'TYP',0,4
	.word	750
	.byte	1,19,2,35,0,10
	.byte	'RNG',0,4
	.word	750
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	750
	.byte	1,17,2,35,0,10
	.byte	'ASI_EN',0,4
	.word	750
	.byte	1,16,2,35,0,10
	.byte	'ASI',0,4
	.word	750
	.byte	5,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	750
	.byte	6,5,2,35,0,10
	.byte	'AST',0,4
	.word	750
	.byte	1,4,2,35,0,10
	.byte	'ALD',0,4
	.word	750
	.byte	1,3,2,35,0,10
	.byte	'reserved_29',0,4
	.word	750
	.byte	3,0,2,35,0,0,25
	.byte	'Ifx_CPU_TR_EVT_Bits',0,22,153,5,3
	.word	77469
	.byte	9
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,22,156,5,16,4,10
	.byte	'T0',0,4
	.word	750
	.byte	1,31,2,35,0,10
	.byte	'T1',0,4
	.word	750
	.byte	1,30,2,35,0,10
	.byte	'T2',0,4
	.word	750
	.byte	1,29,2,35,0,10
	.byte	'T3',0,4
	.word	750
	.byte	1,28,2,35,0,10
	.byte	'T4',0,4
	.word	750
	.byte	1,27,2,35,0,10
	.byte	'T5',0,4
	.word	750
	.byte	1,26,2,35,0,10
	.byte	'T6',0,4
	.word	750
	.byte	1,25,2,35,0,10
	.byte	'T7',0,4
	.word	750
	.byte	1,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	750
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,22,167,5,3
	.word	77787
	.byte	11,22,175,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69005
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_A',0,22,180,5,3
	.word	77982
	.byte	11,22,183,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69066
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_BIV',0,22,188,5,3
	.word	78041
	.byte	11,22,191,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69145
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_BTV',0,22,196,5,3
	.word	78102
	.byte	11,22,199,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69231
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CCNT',0,22,204,5,3
	.word	78163
	.byte	11,22,207,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69320
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CCTRL',0,22,212,5,3
	.word	78225
	.byte	11,22,215,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69466
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_COMPAT',0,22,220,5,3
	.word	78288
	.byte	11,22,223,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69593
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CORE_ID',0,22,228,5,3
	.word	78352
	.byte	11,22,231,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69691
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CPR_L',0,22,236,5,3
	.word	78417
	.byte	11,22,239,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69784
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CPR_U',0,22,244,5,3
	.word	78480
	.byte	11,22,247,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69877
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CPU_ID',0,22,252,5,3
	.word	78543
	.byte	11,22,255,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	69984
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CPXE',0,22,132,6,3
	.word	78607
	.byte	11,22,135,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70071
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CREVT',0,22,140,6,3
	.word	78669
	.byte	11,22,143,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70225
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CUS_ID',0,22,148,6,3
	.word	78732
	.byte	11,22,151,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70319
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_D',0,22,156,6,3
	.word	78796
	.byte	11,22,159,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70382
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DATR',0,22,164,6,3
	.word	78855
	.byte	11,22,167,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70600
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DBGSR',0,22,172,6,3
	.word	78917
	.byte	11,22,175,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70815
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DBGTCR',0,22,180,6,3
	.word	78980
	.byte	11,22,183,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	70909
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DCON0',0,22,188,6,3
	.word	79044
	.byte	11,22,191,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71025
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DCON2',0,22,196,6,3
	.word	79107
	.byte	11,22,199,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71126
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DCX',0,22,204,6,3
	.word	79170
	.byte	11,22,207,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71219
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DEADD',0,22,212,6,3
	.word	79231
	.byte	11,22,215,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71299
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DIEAR',0,22,220,6,3
	.word	79294
	.byte	11,22,223,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71368
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DIETR',0,22,228,6,3
	.word	79357
	.byte	11,22,231,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71597
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DMS',0,22,236,6,3
	.word	79420
	.byte	11,22,239,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71690
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DPR_L',0,22,244,6,3
	.word	79481
	.byte	11,22,247,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71785
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DPR_U',0,22,252,6,3
	.word	79544
	.byte	11,22,255,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71880
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DPRE',0,22,132,7,3
	.word	79607
	.byte	11,22,135,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71970
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DPWE',0,22,140,7,3
	.word	79669
	.byte	11,22,143,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72060
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DSTR',0,22,148,7,3
	.word	79731
	.byte	11,22,151,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72384
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_EXEVT',0,22,156,7,3
	.word	79793
	.byte	11,22,159,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72538
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FCX',0,22,164,7,3
	.word	79856
	.byte	11,22,167,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72644
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,22,172,7,3
	.word	79917
	.byte	11,22,175,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72993
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,22,180,7,3
	.word	79987
	.byte	11,22,183,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73153
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,22,188,7,3
	.word	80057
	.byte	11,22,191,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73234
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,22,196,7,3
	.word	80126
	.byte	11,22,199,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73321
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,22,204,7,3
	.word	80197
	.byte	11,22,207,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73408
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,22,212,7,3
	.word	80268
	.byte	11,22,215,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73495
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_ICNT',0,22,220,7,3
	.word	80339
	.byte	11,22,223,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73586
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_ICR',0,22,228,7,3
	.word	80401
	.byte	11,22,231,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73729
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_ISP',0,22,236,7,3
	.word	80462
	.byte	11,22,239,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73795
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_LCX',0,22,244,7,3
	.word	80523
	.byte	11,22,247,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73901
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_M1CNT',0,22,252,7,3
	.word	80584
	.byte	11,22,255,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73994
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_M2CNT',0,22,132,8,3
	.word	80647
	.byte	11,22,135,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74087
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_M3CNT',0,22,140,8,3
	.word	80710
	.byte	11,22,143,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74180
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PC',0,22,148,8,3
	.word	80773
	.byte	11,22,151,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74265
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PCON0',0,22,156,8,3
	.word	80833
	.byte	11,22,159,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74381
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PCON1',0,22,164,8,3
	.word	80896
	.byte	11,22,167,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74492
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PCON2',0,22,172,8,3
	.word	80959
	.byte	11,22,175,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74593
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PCXI',0,22,180,8,3
	.word	81022
	.byte	11,22,183,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74723
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PIEAR',0,22,188,8,3
	.word	81084
	.byte	11,22,191,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74792
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PIETR',0,22,196,8,3
	.word	81147
	.byte	11,22,199,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75021
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PMA0',0,22,204,8,3
	.word	81210
	.byte	11,22,207,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75134
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PMA1',0,22,212,8,3
	.word	81272
	.byte	11,22,215,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75247
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PMA2',0,22,220,8,3
	.word	81334
	.byte	11,22,223,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75338
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PSTR',0,22,228,8,3
	.word	81396
	.byte	11,22,231,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75541
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PSW',0,22,236,8,3
	.word	81458
	.byte	11,22,239,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75784
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SEGEN',0,22,244,8,3
	.word	81519
	.byte	11,22,247,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75912
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SMACON',0,22,252,8,3
	.word	81582
	.byte	11,22,255,8,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76153
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENA',0,22,132,9,3
	.word	81646
	.byte	11,22,135,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76236
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENB',0,22,140,9,3
	.word	81716
	.byte	11,22,143,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76327
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,22,148,9,3
	.word	81786
	.byte	11,22,151,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76418
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,22,156,9,3
	.word	81860
	.byte	11,22,159,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76517
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,22,164,9,3
	.word	81934
	.byte	11,22,167,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76624
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,22,172,9,3
	.word	82004
	.byte	11,22,175,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76731
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SWEVT',0,22,180,9,3
	.word	82074
	.byte	11,22,183,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76885
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SYSCON',0,22,188,9,3
	.word	82137
	.byte	11,22,191,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77046
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TASK_ASI',0,22,196,9,3
	.word	82201
	.byte	11,22,199,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77144
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TPS_CON',0,22,204,9,3
	.word	82267
	.byte	11,22,207,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77316
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TPS_TIMER',0,22,212,9,3
	.word	82332
	.byte	11,22,215,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77396
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TR_ADR',0,22,220,9,3
	.word	82399
	.byte	11,22,223,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77469
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TR_EVT',0,22,228,9,3
	.word	82463
	.byte	11,22,231,9,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77787
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TRIG_ACC',0,22,236,9,3
	.word	82527
	.byte	9
	.byte	'_Ifx_CPU_CPR',0,22,247,9,25,8,12
	.byte	'L',0
	.word	78417
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	78480
	.byte	4,2,35,4,0,13
	.word	82593
	.byte	25
	.byte	'Ifx_CPU_CPR',0,22,251,9,3
	.word	82635
	.byte	9
	.byte	'_Ifx_CPU_DPR',0,22,254,9,25,8,12
	.byte	'L',0
	.word	79481
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	79544
	.byte	4,2,35,4,0,13
	.word	82661
	.byte	25
	.byte	'Ifx_CPU_DPR',0,22,130,10,3
	.word	82703
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN',0,22,133,10,25,16,12
	.byte	'LA',0
	.word	81934
	.byte	4,2,35,0,12
	.byte	'UA',0
	.word	82004
	.byte	4,2,35,4,12
	.byte	'ACCENA',0
	.word	81786
	.byte	4,2,35,8,12
	.byte	'ACCENB',0
	.word	81860
	.byte	4,2,35,12,0,13
	.word	82729
	.byte	25
	.byte	'Ifx_CPU_SPROT_RGN',0,22,139,10,3
	.word	82811
	.byte	14,12
	.word	82332
	.byte	15,2,0,9
	.byte	'_Ifx_CPU_TPS',0,22,142,10,25,16,12
	.byte	'CON',0
	.word	82267
	.byte	4,2,35,0,12
	.byte	'TIMER',0
	.word	82843
	.byte	12,2,35,4,0,13
	.word	82852
	.byte	25
	.byte	'Ifx_CPU_TPS',0,22,146,10,3
	.word	82900
	.byte	9
	.byte	'_Ifx_CPU_TR',0,22,149,10,25,8,12
	.byte	'EVT',0
	.word	82463
	.byte	4,2,35,0,12
	.byte	'ADR',0
	.word	82399
	.byte	4,2,35,4,0,13
	.word	82926
	.byte	25
	.byte	'Ifx_CPU_TR',0,22,153,10,3
	.word	82971
	.byte	25
	.byte	'IfxCpu_ResourceCpu',0,10,87,3
	.word	9241
	.byte	16,9,118,9,1,17
	.byte	'IfxCpu_CounterMode_normal',0,0,17
	.byte	'IfxCpu_CounterMode_task',0,1,0,25
	.byte	'IfxCpu_CounterMode',0,9,122,3
	.word	83023
	.byte	29,9,132,1,9,6,12
	.byte	'counter',0
	.word	9372
	.byte	4,2,35,0,12
	.byte	'overlfow',0
	.word	351
	.byte	1,2,35,4,0,25
	.byte	'IfxCpu_Counter',0,9,136,1,3
	.word	83110
	.byte	29,9,144,1,9,32,12
	.byte	'instruction',0
	.word	83110
	.byte	6,2,35,0,12
	.byte	'clock',0
	.word	83110
	.byte	6,2,35,6,12
	.byte	'counter1',0
	.word	83110
	.byte	6,2,35,12,12
	.byte	'counter2',0
	.word	83110
	.byte	6,2,35,18,12
	.byte	'counter3',0
	.word	83110
	.byte	6,2,35,24,0,25
	.byte	'IfxCpu_Perf',0,9,151,1,3
	.word	83176
	.byte	9
	.byte	'_Ifx_STM_ACCEN0_Bits',0,23,45,16,4,10
	.byte	'EN0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_STM_ACCEN0_Bits',0,23,79,3
	.word	83294
	.byte	9
	.byte	'_Ifx_STM_ACCEN1_Bits',0,23,82,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_ACCEN1_Bits',0,23,85,3
	.word	83851
	.byte	9
	.byte	'_Ifx_STM_CAP_Bits',0,23,88,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_CAP_Bits',0,23,91,3
	.word	83928
	.byte	9
	.byte	'_Ifx_STM_CAPSV_Bits',0,23,94,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_CAPSV_Bits',0,23,97,3
	.word	84000
	.byte	9
	.byte	'_Ifx_STM_CLC_Bits',0,23,100,16,4,10
	.byte	'DISR',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_STM_CLC_Bits',0,23,107,3
	.word	84076
	.byte	9
	.byte	'_Ifx_STM_CMCON_Bits',0,23,110,16,4,10
	.byte	'MSIZE0',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	351
	.byte	3,0,2,35,0,10
	.byte	'MSTART0',0,1
	.word	351
	.byte	5,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	351
	.byte	3,0,2,35,1,10
	.byte	'MSIZE1',0,1
	.word	351
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	3,0,2,35,2,10
	.byte	'MSTART1',0,1
	.word	351
	.byte	5,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	351
	.byte	3,0,2,35,3,0,25
	.byte	'Ifx_STM_CMCON_Bits',0,23,120,3
	.word	84217
	.byte	9
	.byte	'_Ifx_STM_CMP_Bits',0,23,123,16,4,10
	.byte	'CMPVAL',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_CMP_Bits',0,23,126,3
	.word	84435
	.byte	9
	.byte	'_Ifx_STM_ICR_Bits',0,23,129,1,16,4,10
	.byte	'CMP0EN',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'CMP0IR',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'CMP0OS',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'CMP1EN',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'CMP1IR',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'CMP1OS',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,4
	.word	328
	.byte	25,0,2,35,0,0,25
	.byte	'Ifx_STM_ICR_Bits',0,23,139,1,3
	.word	84502
	.byte	9
	.byte	'_Ifx_STM_ID_Bits',0,23,142,1,16,4,10
	.byte	'MODREV',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_STM_ID_Bits',0,23,147,1,3
	.word	84705
	.byte	9
	.byte	'_Ifx_STM_ISCR_Bits',0,23,150,1,16,4,10
	.byte	'CMP0IRR',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'CMP0IRS',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'CMP1IRR',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'CMP1IRS',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_STM_ISCR_Bits',0,23,157,1,3
	.word	84812
	.byte	9
	.byte	'_Ifx_STM_KRST0_Bits',0,23,160,1,16,4,10
	.byte	'RST',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_STM_KRST0_Bits',0,23,165,1,3
	.word	84963
	.byte	9
	.byte	'_Ifx_STM_KRST1_Bits',0,23,168,1,16,4,10
	.byte	'RST',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_STM_KRST1_Bits',0,23,172,1,3
	.word	85074
	.byte	9
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,23,175,1,16,4,10
	.byte	'CLR',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_STM_KRSTCLR_Bits',0,23,179,1,3
	.word	85166
	.byte	9
	.byte	'_Ifx_STM_OCS_Bits',0,23,182,1,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	24,8,2,35,0,10
	.byte	'SUS',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	351
	.byte	2,0,2,35,3,0,25
	.byte	'Ifx_STM_OCS_Bits',0,23,189,1,3
	.word	85262
	.byte	9
	.byte	'_Ifx_STM_TIM0_Bits',0,23,192,1,16,4,10
	.byte	'STM31_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM0_Bits',0,23,195,1,3
	.word	85408
	.byte	9
	.byte	'_Ifx_STM_TIM0SV_Bits',0,23,198,1,16,4,10
	.byte	'STM31_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM0SV_Bits',0,23,201,1,3
	.word	85480
	.byte	9
	.byte	'_Ifx_STM_TIM1_Bits',0,23,204,1,16,4,10
	.byte	'STM35_4',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM1_Bits',0,23,207,1,3
	.word	85556
	.byte	9
	.byte	'_Ifx_STM_TIM2_Bits',0,23,210,1,16,4,10
	.byte	'STM39_8',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM2_Bits',0,23,213,1,3
	.word	85628
	.byte	9
	.byte	'_Ifx_STM_TIM3_Bits',0,23,216,1,16,4,10
	.byte	'STM43_12',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM3_Bits',0,23,219,1,3
	.word	85700
	.byte	9
	.byte	'_Ifx_STM_TIM4_Bits',0,23,222,1,16,4,10
	.byte	'STM47_16',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM4_Bits',0,23,225,1,3
	.word	85773
	.byte	9
	.byte	'_Ifx_STM_TIM5_Bits',0,23,228,1,16,4,10
	.byte	'STM51_20',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM5_Bits',0,23,231,1,3
	.word	85846
	.byte	9
	.byte	'_Ifx_STM_TIM6_Bits',0,23,234,1,16,4,10
	.byte	'STM63_32',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM6_Bits',0,23,237,1,3
	.word	85919
	.byte	11,23,245,1,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83294
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ACCEN0',0,23,250,1,3
	.word	85992
	.byte	11,23,253,1,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83851
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ACCEN1',0,23,130,2,3
	.word	86056
	.byte	11,23,133,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83928
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CAP',0,23,138,2,3
	.word	86120
	.byte	11,23,141,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84000
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CAPSV',0,23,146,2,3
	.word	86181
	.byte	11,23,149,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84076
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CLC',0,23,154,2,3
	.word	86244
	.byte	11,23,157,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84217
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CMCON',0,23,162,2,3
	.word	86305
	.byte	11,23,165,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84435
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CMP',0,23,170,2,3
	.word	86368
	.byte	11,23,173,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84502
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ICR',0,23,178,2,3
	.word	86429
	.byte	11,23,181,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84705
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ID',0,23,186,2,3
	.word	86490
	.byte	11,23,189,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84812
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ISCR',0,23,194,2,3
	.word	86550
	.byte	11,23,197,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84963
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_KRST0',0,23,202,2,3
	.word	86612
	.byte	11,23,205,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85074
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_KRST1',0,23,210,2,3
	.word	86675
	.byte	11,23,213,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85166
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_KRSTCLR',0,23,218,2,3
	.word	86738
	.byte	11,23,221,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85262
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_OCS',0,23,226,2,3
	.word	86803
	.byte	11,23,229,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85408
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM0',0,23,234,2,3
	.word	86864
	.byte	11,23,237,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85480
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM0SV',0,23,242,2,3
	.word	86926
	.byte	11,23,245,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85556
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM1',0,23,250,2,3
	.word	86990
	.byte	11,23,253,2,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85628
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM2',0,23,130,3,3
	.word	87052
	.byte	11,23,133,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85700
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM3',0,23,138,3,3
	.word	87114
	.byte	11,23,141,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85773
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM4',0,23,146,3,3
	.word	87176
	.byte	11,23,149,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85846
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM5',0,23,154,3,3
	.word	87238
	.byte	11,23,157,3,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	85919
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM6',0,23,162,3,3
	.word	87300
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,24,45,16,4,10
	.byte	'EN0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,24,79,3
	.word	87362
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,24,82,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,24,85,3
	.word	87923
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,24,88,16,4,10
	.byte	'SEL',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	328
	.byte	22,0,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,24,95,3
	.word	88004
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,24,98,16,4,10
	.byte	'VLD0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'VLD1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'VLD2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'VLD3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'VLD4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'VLD5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'VLD6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'VLD7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'VLD8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'VLD9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	328
	.byte	22,0,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,24,111,3
	.word	88157
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,24,114,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	328
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	351
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,24,121,3
	.word	88405
	.byte	9
	.byte	'_Ifx_FLASH_COMM0_Bits',0,24,124,16,4,10
	.byte	'STATUS',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_FLASH_COMM0_Bits',0,24,128,1,3
	.word	88551
	.byte	9
	.byte	'_Ifx_FLASH_COMM1_Bits',0,24,131,1,16,4,10
	.byte	'STATUS',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_COMM1_Bits',0,24,136,1,3
	.word	88649
	.byte	9
	.byte	'_Ifx_FLASH_COMM2_Bits',0,24,139,1,16,4,10
	.byte	'STATUS',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_COMM2_Bits',0,24,144,1,3
	.word	88765
	.byte	9
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,24,147,1,16,4,10
	.byte	'RCODE',0,4
	.word	328
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	902
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_ECCRD_Bits',0,24,153,1,3
	.word	88881
	.byte	9
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,24,156,1,16,4,10
	.byte	'RCODE',0,4
	.word	328
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	902
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_ECCRP_Bits',0,24,162,1,3
	.word	89021
	.byte	9
	.byte	'_Ifx_FLASH_ECCW_Bits',0,24,165,1,16,4,10
	.byte	'WCODE',0,4
	.word	328
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	902
	.byte	8,2,2,35,2,10
	.byte	'DECENCDIS',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'PECENCDIS',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_ECCW_Bits',0,24,171,1,3
	.word	89161
	.byte	9
	.byte	'_Ifx_FLASH_FCON_Bits',0,24,174,1,16,4,10
	.byte	'WSPFLASH',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'WSECPF',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'WSDFLASH',0,2
	.word	902
	.byte	6,4,2,35,0,10
	.byte	'WSECDF',0,1
	.word	351
	.byte	3,1,2,35,1,10
	.byte	'IDLE',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'ESLDIS',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'SLEEP',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'NSAFECC',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'STALL',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'RES21',0,1
	.word	351
	.byte	2,2,2,35,2,10
	.byte	'RES23',0,1
	.word	351
	.byte	2,0,2,35,2,10
	.byte	'VOPERM',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'PROERM',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	351
	.byte	3,2,2,35,3,10
	.byte	'PR5V',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_FCON_Bits',0,24,193,1,3
	.word	89300
	.byte	9
	.byte	'_Ifx_FLASH_FPRO_Bits',0,24,196,1,16,4,10
	.byte	'PROINP',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'PRODISP',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'PROIND',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'PRODISD',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'PROINHSMCOTP',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'PROINOTP',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'RES7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'PROINDBG',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PRODISDBG',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'PROINHSM',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	5,0,2,35,1,10
	.byte	'DCFP',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'DDFP',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'DDFPX',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'DDFD',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'ENPE',0,1
	.word	351
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	351
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_FLASH_FPRO_Bits',0,24,218,1,3
	.word	89662
	.byte	9
	.byte	'_Ifx_FLASH_FSR_Bits',0,24,221,1,16,4,10
	.byte	'FABUSY',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'D0BUSY',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'RES1',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'P0BUSY',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'RES4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'RES6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PROG',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'PFPAGE',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'PROER',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'PFSBER',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'PFDBER',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'PFMBER',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'RES17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'DFSBER',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'DFDBER',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'DFTBER',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'DFMBER',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'SRIADDERR',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	902
	.byte	2,7,2,35,2,10
	.byte	'PVER',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'SLM',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'ORIER',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_FSR_Bits',0,24,254,1,3
	.word	90103
	.byte	9
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,24,129,2,16,4,10
	.byte	'LCKHSMUCB',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	22,8,2,35,0,10
	.byte	'VOPERM',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	351
	.byte	5,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,24,137,2,3
	.word	90707
	.byte	9
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,24,140,2,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	4,1,2,35,0,10
	.byte	'PROG',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	328
	.byte	12,7,2,35,0,10
	.byte	'PVER',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	351
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,24,156,2,3
	.word	90887
	.byte	9
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,24,159,2,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'SELD1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,4
	.word	328
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,24,167,2,3
	.word	91209
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,24,170,2,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	328
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,24,174,2,3
	.word	91390
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,24,177,2,16,4,10
	.byte	'STRT',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	351
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	351
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,24,188,2,3
	.word	91490
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,24,191,2,16,4,10
	.byte	'DATA',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,24,194,2,3
	.word	91706
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,24,197,2,16,4,10
	.byte	'DATA',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,24,200,2,3
	.word	91785
	.byte	9
	.byte	'_Ifx_FLASH_ID_Bits',0,24,203,2,16,4,10
	.byte	'MODREV',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_ID_Bits',0,24,208,2,3
	.word	91864
	.byte	9
	.byte	'_Ifx_FLASH_MARD_Bits',0,24,211,2,16,4,10
	.byte	'HMARGIN',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'SELD0',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	902
	.byte	10,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_MARD_Bits',0,24,221,2,3
	.word	91975
	.byte	9
	.byte	'_Ifx_FLASH_MARP_Bits',0,24,224,2,16,4,10
	.byte	'SELP0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'RES1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'RES2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'RES3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	902
	.byte	11,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_MARP_Bits',0,24,233,2,3
	.word	92189
	.byte	9
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,24,236,2,16,4,10
	.byte	'L',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'NSAFECC',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'RAMIN',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'RAMINSEL',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'RES8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'RES9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'RES10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'RES11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'RES12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'RES13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'RES14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'RES15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'ESR0CNT',0,2
	.word	902
	.byte	12,4,2,35,2,10
	.byte	'RES29',0,1
	.word	351
	.byte	2,2,2,35,3,10
	.byte	'RES30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_PROCOND_Bits',0,24,254,2,3
	.word	92375
	.byte	9
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,24,129,3,16,4,10
	.byte	'OCDSDIS',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'EDM',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,24,135,3,3
	.word	92710
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,24,138,3,16,4,10
	.byte	'HSMDBGDIS',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'TSTIFLCK',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'HSMTSTDIS',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'RES15',0,2
	.word	902
	.byte	12,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,24,146,3,3
	.word	92853
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,24,149,3,16,4,10
	.byte	'HSMBOOTEN',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'SSWWAIT',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'HSMDX',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'HSM6X',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'HSM16X',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'HSM17X',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'HSMENPINS',0,2
	.word	902
	.byte	2,7,2,35,0,10
	.byte	'HSMENRES',0,1
	.word	351
	.byte	2,5,2,35,1,10
	.byte	'DESTDBG',0,1
	.word	351
	.byte	2,3,2,35,1,10
	.byte	'BLKFLAN',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'BOOTSEL',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	902
	.byte	14,0,2,35,2,0,25
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,24,166,3,3
	.word	93042
	.byte	9
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,24,169,3,16,4,10
	.byte	'S0ROM',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'S1ROM',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'S2ROM',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'S3ROM',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'S4ROM',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'S5ROM',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'S7ROM',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'S8ROM',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'S9ROM',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'S10ROM',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'S11ROM',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'S12ROM',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'S13ROM',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'S14ROM',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'S15ROM',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'S18ROM',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'S19ROM',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'S20ROM',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'S21ROM',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'S22ROM',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'S23ROM',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'S24ROM',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'S25ROM',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'S26ROM',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	351
	.byte	2,3,2,35,3,10
	.byte	'BML',0,1
	.word	351
	.byte	2,1,2,35,3,10
	.byte	'TP',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,24,201,3,3
	.word	93401
	.byte	9
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,24,204,3,16,4,10
	.byte	'S0L',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'S1L',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'S2L',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'S3L',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'S4L',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'S5L',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'S6L',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'S7L',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'S8L',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'S9L',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'S10L',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'S11L',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'S12L',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'S13L',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'S14L',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'S15L',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'S16L',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'S17L',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'S18L',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'S19L',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'S20L',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'S21L',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'S22L',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'S23L',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'S24L',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'S25L',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'S26L',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	351
	.byte	4,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_PROCONP_Bits',0,24,235,3,3
	.word	93996
	.byte	9
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,24,238,3,16,4,10
	.byte	'S0WOP',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'S1WOP',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'S2WOP',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'S3WOP',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'S4WOP',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'S5WOP',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'S6WOP',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'S7WOP',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'S8WOP',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'S9WOP',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'S10WOP',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'S11WOP',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'S12WOP',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'S13WOP',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'S14WOP',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'S15WOP',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'S16WOP',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'S17WOP',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'S18WOP',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'S19WOP',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'S20WOP',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'S21WOP',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'S22WOP',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'S23WOP',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'S24WOP',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'S25WOP',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'S26WOP',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	351
	.byte	4,1,2,35,3,10
	.byte	'DATM',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,24,141,4,3
	.word	94520
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,24,144,4,16,4,10
	.byte	'TAG',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,24,148,4,3
	.word	95102
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,24,151,4,16,4,10
	.byte	'TAG',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,24,155,4,3
	.word	95204
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,24,158,4,16,4,10
	.byte	'TAG',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	328
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,24,162,4,3
	.word	95306
	.byte	9
	.byte	'_Ifx_FLASH_RRAD_Bits',0,24,165,4,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	328
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RRAD_Bits',0,24,169,4,3
	.word	95408
	.byte	9
	.byte	'_Ifx_FLASH_RRCT_Bits',0,24,172,4,16,4,10
	.byte	'STRT',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	351
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	351
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_RRCT_Bits',0,24,183,4,3
	.word	95502
	.byte	9
	.byte	'_Ifx_FLASH_RRD0_Bits',0,24,186,4,16,4,10
	.byte	'DATA',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RRD0_Bits',0,24,189,4,3
	.word	95712
	.byte	9
	.byte	'_Ifx_FLASH_RRD1_Bits',0,24,192,4,16,4,10
	.byte	'DATA',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RRD1_Bits',0,24,195,4,3
	.word	95785
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,24,198,4,16,4,10
	.byte	'SEL',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	328
	.byte	22,0,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,24,205,4,3
	.word	95858
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,24,208,4,16,4,10
	.byte	'VLD0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,24,212,4,3
	.word	96013
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,24,215,4,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	328
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	351
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,24,222,4,3
	.word	96118
	.byte	11,24,230,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87362
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ACCEN0',0,24,235,4,3
	.word	96266
	.byte	11,24,238,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	87923
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ACCEN1',0,24,243,4,3
	.word	96332
	.byte	11,24,246,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88004
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_CFG',0,24,251,4,3
	.word	96398
	.byte	11,24,254,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88157
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_STAT',0,24,131,5,3
	.word	96466
	.byte	11,24,134,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88405
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_TOP',0,24,139,5,3
	.word	96535
	.byte	11,24,142,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88551
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_COMM0',0,24,147,5,3
	.word	96603
	.byte	11,24,150,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88649
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_COMM1',0,24,155,5,3
	.word	96668
	.byte	11,24,158,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88765
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_COMM2',0,24,163,5,3
	.word	96733
	.byte	11,24,166,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	88881
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ECCRD',0,24,171,5,3
	.word	96798
	.byte	11,24,174,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89021
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ECCRP',0,24,179,5,3
	.word	96863
	.byte	11,24,182,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89161
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ECCW',0,24,187,5,3
	.word	96928
	.byte	11,24,190,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89300
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_FCON',0,24,195,5,3
	.word	96992
	.byte	11,24,198,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	89662
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_FPRO',0,24,203,5,3
	.word	97056
	.byte	11,24,206,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90103
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_FSR',0,24,211,5,3
	.word	97120
	.byte	11,24,214,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90707
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMFCON',0,24,219,5,3
	.word	97183
	.byte	11,24,222,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	90887
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMFSR',0,24,227,5,3
	.word	97250
	.byte	11,24,230,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91209
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMMARD',0,24,235,5,3
	.word	97316
	.byte	11,24,238,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91390
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRAD',0,24,243,5,3
	.word	97383
	.byte	11,24,246,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91490
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRCT',0,24,251,5,3
	.word	97450
	.byte	11,24,254,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91706
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRD0',0,24,131,6,3
	.word	97517
	.byte	11,24,134,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91785
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRD1',0,24,139,6,3
	.word	97584
	.byte	11,24,142,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91864
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ID',0,24,147,6,3
	.word	97651
	.byte	11,24,150,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	91975
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_MARD',0,24,155,6,3
	.word	97713
	.byte	11,24,158,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	92189
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_MARP',0,24,163,6,3
	.word	97777
	.byte	11,24,166,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	92375
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCOND',0,24,171,6,3
	.word	97841
	.byte	11,24,174,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	92710
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONDBG',0,24,179,6,3
	.word	97908
	.byte	11,24,182,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	92853
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONHSM',0,24,187,6,3
	.word	97977
	.byte	11,24,190,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	93042
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,24,195,6,3
	.word	98046
	.byte	11,24,198,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	93401
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONOTP',0,24,203,6,3
	.word	98119
	.byte	11,24,206,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	93996
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONP',0,24,211,6,3
	.word	98188
	.byte	11,24,214,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	94520
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONWOP',0,24,219,6,3
	.word	98255
	.byte	11,24,222,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95102
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG0',0,24,227,6,3
	.word	98324
	.byte	11,24,230,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95204
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG1',0,24,235,6,3
	.word	98392
	.byte	11,24,238,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95306
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG2',0,24,243,6,3
	.word	98460
	.byte	11,24,246,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95408
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RRAD',0,24,251,6,3
	.word	98528
	.byte	11,24,254,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95502
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RRCT',0,24,131,7,3
	.word	98592
	.byte	11,24,134,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95712
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RRD0',0,24,139,7,3
	.word	98656
	.byte	11,24,142,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95785
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RRD1',0,24,147,7,3
	.word	98720
	.byte	11,24,150,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	95858
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_CFG',0,24,155,7,3
	.word	98784
	.byte	11,24,158,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	96013
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_STAT',0,24,163,7,3
	.word	98852
	.byte	11,24,166,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	96118
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_TOP',0,24,171,7,3
	.word	98921
	.byte	9
	.byte	'_Ifx_FLASH_CBAB',0,24,182,7,25,48,12
	.byte	'CFG',0
	.word	96398
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	96466
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	96535
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	12393
	.byte	36,2,35,12,0,13
	.word	98989
	.byte	25
	.byte	'Ifx_FLASH_CBAB',0,24,188,7,3
	.word	99072
	.byte	9
	.byte	'_Ifx_FLASH_RDB',0,24,191,7,25,48,12
	.byte	'CFG0',0
	.word	98324
	.byte	4,2,35,0,12
	.byte	'CFG1',0
	.word	98392
	.byte	4,2,35,4,12
	.byte	'CFG2',0
	.word	98460
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	12393
	.byte	36,2,35,12,0,13
	.word	99101
	.byte	25
	.byte	'Ifx_FLASH_RDB',0,24,197,7,3
	.word	99185
	.byte	9
	.byte	'_Ifx_FLASH_UBAB',0,24,200,7,25,92,12
	.byte	'CFG',0
	.word	98784
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	98852
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	98921
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	25889
	.byte	80,2,35,12,0,13
	.word	99213
	.byte	25
	.byte	'Ifx_FLASH_UBAB',0,24,206,7,3
	.word	99296
	.byte	30,1,1,6
	.word	99325
	.byte	25
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,13,129,1,16
	.word	99328
	.byte	29,13,197,5,9,8,12
	.byte	'value',0
	.word	9372
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	9372
	.byte	4,2,35,4,0,25
	.byte	'IfxScuCcu_CcuconRegConfig',0,13,201,5,3
	.word	99373
	.byte	29,13,206,5,9,8,12
	.byte	'pDivider',0
	.word	351
	.byte	1,2,35,0,12
	.byte	'nDivider',0
	.word	351
	.byte	1,2,35,1,12
	.byte	'k2Initial',0
	.word	351
	.byte	1,2,35,2,12
	.byte	'waitTime',0
	.word	9601
	.byte	4,2,35,4,0,25
	.byte	'IfxScuCcu_InitialStepConfig',0,13,212,5,3
	.word	99444
	.byte	29,13,216,5,9,12,12
	.byte	'k2Step',0
	.word	351
	.byte	1,2,35,0,12
	.byte	'waitTime',0
	.word	9601
	.byte	4,2,35,2,12
	.byte	'hookFunction',0
	.word	99333
	.byte	4,2,35,8,0,25
	.byte	'IfxScuCcu_PllStepsConfig',0,13,221,5,3
	.word	99561
	.byte	6
	.word	99325
	.byte	29,13,229,5,9,40,12
	.byte	'ccucon0',0
	.word	99373
	.byte	8,2,35,0,12
	.byte	'ccucon1',0
	.word	99373
	.byte	8,2,35,8,12
	.byte	'ccucon2',0
	.word	99373
	.byte	8,2,35,16,12
	.byte	'ccucon5',0
	.word	99373
	.byte	8,2,35,24,12
	.byte	'ccucon6',0
	.word	99373
	.byte	8,2,35,32,0,25
	.byte	'IfxScuCcu_ClockDistributionConfig',0,13,236,5,3
	.word	99663
	.byte	29,13,240,5,9,8,12
	.byte	'value',0
	.word	9372
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	9372
	.byte	4,2,35,4,0,25
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,13,244,5,3
	.word	99798
	.byte	6
	.word	99561
	.byte	29,13,249,5,9,16,12
	.byte	'numOfPllDividerSteps',0
	.word	351
	.byte	1,2,35,0,12
	.byte	'pllDividerStep',0
	.word	99874
	.byte	4,2,35,4,12
	.byte	'pllInitialStep',0
	.word	99444
	.byte	8,2,35,8,0,25
	.byte	'IfxScuCcu_SysPllConfig',0,13,254,5,3
	.word	99879
	.byte	9
	.byte	'_Ifx_CCU6_ACCEN0_Bits',0,25,45,16,4,10
	.byte	'EN0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	351
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	351
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	351
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	351
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	351
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	351
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	351
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	351
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	351
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	351
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	351
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	351
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	351
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	351
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_CCU6_ACCEN0_Bits',0,25,79,3
	.word	99996
	.byte	9
	.byte	'_Ifx_CCU6_ACCEN1_Bits',0,25,82,16,4,10
	.byte	'reserved_0',0,4
	.word	328
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CCU6_ACCEN1_Bits',0,25,85,3
	.word	100555
	.byte	9
	.byte	'_Ifx_CCU6_CC60R_Bits',0,25,88,16,4,10
	.byte	'CCV',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_CC60R_Bits',0,25,92,3
	.word	100634
	.byte	9
	.byte	'_Ifx_CCU6_CC60SR_Bits',0,25,95,16,4,10
	.byte	'CCS',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_CC60SR_Bits',0,25,99,3
	.word	100727
	.byte	9
	.byte	'_Ifx_CCU6_CC61R_Bits',0,25,102,16,4,10
	.byte	'CCV',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_CC61R_Bits',0,25,106,3
	.word	100822
	.byte	9
	.byte	'_Ifx_CCU6_CC61SR_Bits',0,25,109,16,4,10
	.byte	'CCS',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_CC61SR_Bits',0,25,113,3
	.word	100915
	.byte	9
	.byte	'_Ifx_CCU6_CC62R_Bits',0,25,116,16,4,10
	.byte	'CCV',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_CC62R_Bits',0,25,120,3
	.word	101010
	.byte	9
	.byte	'_Ifx_CCU6_CC62SR_Bits',0,25,123,16,4,10
	.byte	'CCS',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_CC62SR_Bits',0,25,127,3
	.word	101103
	.byte	9
	.byte	'_Ifx_CCU6_CC63R_Bits',0,25,130,1,16,4,10
	.byte	'CCV',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_CC63R_Bits',0,25,134,1,3
	.word	101198
	.byte	9
	.byte	'_Ifx_CCU6_CC63SR_Bits',0,25,137,1,16,4,10
	.byte	'CCS',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_CC63SR_Bits',0,25,141,1,3
	.word	101293
	.byte	9
	.byte	'_Ifx_CCU6_CLC_Bits',0,25,144,1,16,4,10
	.byte	'DISR',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_CCU6_CLC_Bits',0,25,151,1,3
	.word	101390
	.byte	9
	.byte	'_Ifx_CCU6_CMPMODIF_Bits',0,25,154,1,16,4,10
	.byte	'MCC60S',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'MCC61S',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'MCC62S',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	3,2,2,35,0,10
	.byte	'MCC63S',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'MCC60R',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'MCC61R',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'MCC62R',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	3,2,2,35,1,10
	.byte	'MCC63R',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	328
	.byte	17,0,2,35,0,0,25
	.byte	'Ifx_CCU6_CMPMODIF_Bits',0,25,168,1,3
	.word	101535
	.byte	9
	.byte	'_Ifx_CCU6_CMPSTAT_Bits',0,25,171,1,16,4,10
	.byte	'CC60ST',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'CC61ST',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'CC62ST',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'CCPOS60',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'CCPOS61',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'CCPOS62',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'CC63ST',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'CC60PS',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'COUT60PS',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'CC61PS',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'COUT61PS',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'CC62PS',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'COUT62PS',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'COUT63PS',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'T13IM',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_CMPSTAT_Bits',0,25,190,1,3
	.word	101832
	.byte	9
	.byte	'_Ifx_CCU6_ID_Bits',0,25,193,1,16,4,10
	.byte	'MODREV',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'MODNUMBER',0,1
	.word	351
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_ID_Bits',0,25,198,1,3
	.word	102218
	.byte	9
	.byte	'_Ifx_CCU6_IEN_Bits',0,25,201,1,16,4,10
	.byte	'ENCC60R',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ENCC60F',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'ENCC61R',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'ENCC61F',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'ENCC62R',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'ENCC62F',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ENT12OM',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'ENT12PM',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'ENT13CM',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'ENT13PM',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'ENTRPF',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'ENCHE',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'ENWHE',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'ENIDLE',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'ENSTR',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_IEN_Bits',0,25,220,1,3
	.word	102331
	.byte	9
	.byte	'_Ifx_CCU6_IMON_Bits',0,25,223,1,16,4,10
	.byte	'LBE',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'CCPOS0I',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'CCPOS1I',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'CCPOS2I',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'CC60INI',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'CC61INI',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'CC62INI',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'CTRAPI',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'T12HRI',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'T13HRI',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	328
	.byte	22,0,2,35,0,0,25
	.byte	'Ifx_CCU6_IMON_Bits',0,25,236,1,3
	.word	102707
	.byte	9
	.byte	'_Ifx_CCU6_INP_Bits',0,25,239,1,16,4,10
	.byte	'INPCC60',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'INPCC61',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'INPCC62',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'INPCHE',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'INPERR',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'INPT12',0,1
	.word	351
	.byte	2,4,2,35,1,10
	.byte	'INPT13',0,1
	.word	351
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	328
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_CCU6_INP_Bits',0,25,249,1,3
	.word	102968
	.byte	9
	.byte	'_Ifx_CCU6_IS_Bits',0,25,252,1,16,4,10
	.byte	'ICC60R',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'ICC60F',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'ICC61R',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'ICC61F',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'ICC62R',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'ICC62F',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'T12OM',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'T12PM',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'T13CM',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'T13PM',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'TRPF',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'TRPS',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'CHE',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'WHE',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'IDLE',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'STR',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_IS_Bits',0,25,143,2,3
	.word	103173
	.byte	9
	.byte	'_Ifx_CCU6_ISR_Bits',0,25,146,2,16,4,10
	.byte	'RCC60R',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'RCC60F',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'RCC61R',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'RCC61F',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'RCC62R',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'RCC62F',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'RT12OM',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'RT12PM',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'RT13CM',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'RT13PM',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'RTRPF',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'RCHE',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'RWHE',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'RIDLE',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'RSTR',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_ISR_Bits',0,25,165,2,3
	.word	103516
	.byte	9
	.byte	'_Ifx_CCU6_ISS_Bits',0,25,168,2,16,4,10
	.byte	'SCC60R',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'SCC60F',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'SCC61R',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SCC61F',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'SCC62R',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'SCC62F',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'ST12OM',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'ST12PM',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'ST13CM',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'ST13PM',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'STRPF',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'SWHC',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'SCHE',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'SWHE',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'SIDLE',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'SSTR',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_ISS_Bits',0,25,187,2,3
	.word	103877
	.byte	9
	.byte	'_Ifx_CCU6_KRST0_Bits',0,25,190,2,16,4,10
	.byte	'RST',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	328
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_CCU6_KRST0_Bits',0,25,195,2,3
	.word	104231
	.byte	9
	.byte	'_Ifx_CCU6_KRST1_Bits',0,25,198,2,16,4,10
	.byte	'RST',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CCU6_KRST1_Bits',0,25,202,2,3
	.word	104344
	.byte	9
	.byte	'_Ifx_CCU6_KRSTCLR_Bits',0,25,205,2,16,4,10
	.byte	'CLR',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	328
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CCU6_KRSTCLR_Bits',0,25,209,2,3
	.word	104438
	.byte	9
	.byte	'_Ifx_CCU6_KSCSR_Bits',0,25,212,2,16,4,10
	.byte	'SB0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'SB1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'SB2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'SB3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_CCU6_KSCSR_Bits',0,25,219,2,3
	.word	104536
	.byte	9
	.byte	'_Ifx_CCU6_LI_Bits',0,25,222,2,16,4,10
	.byte	'reserved_0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'CCPOS0EN',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'CCPOS1EN',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'CCPOS2EN',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'CC60INEN',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'CC61INEN',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'CC62INEN',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'CTRAPEN',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'T12HREN',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'T13HREN',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	351
	.byte	3,3,2,35,1,10
	.byte	'LBEEN',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'INPLBE',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_LI_Bits',0,25,238,2,3
	.word	104675
	.byte	9
	.byte	'_Ifx_CCU6_MCFG_Bits',0,25,241,2,16,4,10
	.byte	'T12',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'T13',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'MCM',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	328
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CCU6_MCFG_Bits',0,25,247,2,3
	.word	105006
	.byte	9
	.byte	'_Ifx_CCU6_MCMCTR_Bits',0,25,250,2,16,4,10
	.byte	'SWSEL',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'SWSYN',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'STE12U',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'STE12D',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'STE13U',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	328
	.byte	21,0,2,35,0,0,25
	.byte	'Ifx_CCU6_MCMCTR_Bits',0,25,132,3,3
	.word	105128
	.byte	9
	.byte	'_Ifx_CCU6_MCMOUT_Bits',0,25,135,3,16,4,10
	.byte	'MCMP',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'R',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EXPH',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'CURH',0,1
	.word	351
	.byte	3,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	328
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_CCU6_MCMOUT_Bits',0,25,143,3,3
	.word	105342
	.byte	9
	.byte	'_Ifx_CCU6_MCMOUTS_Bits',0,25,146,3,16,4,10
	.byte	'MCMPS',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'STRMCM',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'EXPHS',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'CURHS',0,1
	.word	351
	.byte	3,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'STRHP',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_MCMOUTS_Bits',0,25,156,3,3
	.word	105507
	.byte	9
	.byte	'_Ifx_CCU6_MODCTR_Bits',0,25,159,3,16,4,10
	.byte	'T12MODEN',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'MCMEN',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'T13MODEN',0,1
	.word	351
	.byte	6,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'ECT13O',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_MODCTR_Bits',0,25,168,3,3
	.word	105722
	.byte	9
	.byte	'_Ifx_CCU6_MOSEL_Bits',0,25,171,3,16,4,10
	.byte	'TRIG0SEL',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'TRIG1SEL',0,1
	.word	351
	.byte	3,2,2,35,0,10
	.byte	'TRIG2SEL',0,2
	.word	902
	.byte	3,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	328
	.byte	23,0,2,35,0,0,25
	.byte	'Ifx_CCU6_MOSEL_Bits',0,25,177,3,3
	.word	105924
	.byte	9
	.byte	'_Ifx_CCU6_OCS_Bits',0,25,180,3,16,4,10
	.byte	'TGS',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'TGB',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'TG_P',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	328
	.byte	20,8,2,35,0,10
	.byte	'SUS',0,1
	.word	351
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	351
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	351
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	351
	.byte	2,0,2,35,3,0,25
	.byte	'Ifx_CCU6_OCS_Bits',0,25,190,3,3
	.word	106063
	.byte	9
	.byte	'_Ifx_CCU6_PISEL0_Bits',0,25,193,3,16,4,10
	.byte	'ISCC60',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'ISCC61',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'ISCC62',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'ISTRP',0,1
	.word	351
	.byte	2,0,2,35,0,10
	.byte	'ISPOS0',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'ISPOS1',0,1
	.word	351
	.byte	2,4,2,35,1,10
	.byte	'ISPOS2',0,1
	.word	351
	.byte	2,2,2,35,1,10
	.byte	'IST12HR',0,1
	.word	351
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_PISEL0_Bits',0,25,204,3,3
	.word	106257
	.byte	9
	.byte	'_Ifx_CCU6_PISEL2_Bits',0,25,207,3,16,4,10
	.byte	'IST13HR',0,1
	.word	351
	.byte	2,6,2,35,0,10
	.byte	'ISCNT12',0,1
	.word	351
	.byte	2,4,2,35,0,10
	.byte	'ISCNT13',0,1
	.word	351
	.byte	2,2,2,35,0,10
	.byte	'T12EXT',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'T13EXT',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CCU6_PISEL2_Bits',0,25,215,3,3
	.word	106483
	.byte	9
	.byte	'_Ifx_CCU6_PSLR_Bits',0,25,218,3,16,4,10
	.byte	'PSL',0,1
	.word	351
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'PSL63',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	328
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CCU6_PSLR_Bits',0,25,224,3,3
	.word	106657
	.byte	9
	.byte	'_Ifx_CCU6_T12_Bits',0,25,227,3,16,4,10
	.byte	'T12CV',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_T12_Bits',0,25,231,3,3
	.word	106788
	.byte	9
	.byte	'_Ifx_CCU6_T12DTC_Bits',0,25,234,3,16,4,10
	.byte	'DTM',0,1
	.word	351
	.byte	8,0,2,35,0,10
	.byte	'DTE0',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'DTE1',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'DTE2',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'DTR0',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'DTR1',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'DTR2',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	328
	.byte	17,0,2,35,0,0,25
	.byte	'Ifx_CCU6_T12DTC_Bits',0,25,245,3,3
	.word	106881
	.byte	9
	.byte	'_Ifx_CCU6_T12MSEL_Bits',0,25,248,3,16,4,10
	.byte	'MSEL60',0,1
	.word	351
	.byte	4,4,2,35,0,10
	.byte	'MSEL61',0,1
	.word	351
	.byte	4,0,2,35,0,10
	.byte	'MSEL62',0,1
	.word	351
	.byte	4,4,2,35,1,10
	.byte	'HSYNC',0,1
	.word	351
	.byte	3,1,2,35,1,10
	.byte	'DBYP',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_T12MSEL_Bits',0,25,128,4,3
	.word	107097
	.byte	9
	.byte	'_Ifx_CCU6_T12PR_Bits',0,25,131,4,16,4,10
	.byte	'T12PV',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_T12PR_Bits',0,25,135,4,3
	.word	107268
	.byte	9
	.byte	'_Ifx_CCU6_T13_Bits',0,25,138,4,16,4,10
	.byte	'T13CV',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_T13_Bits',0,25,142,4,3
	.word	107365
	.byte	9
	.byte	'_Ifx_CCU6_T13PR_Bits',0,25,145,4,16,4,10
	.byte	'T13PV',0,2
	.word	902
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_T13PR_Bits',0,25,149,4,3
	.word	107458
	.byte	9
	.byte	'_Ifx_CCU6_TCTR0_Bits',0,25,152,4,16,4,10
	.byte	'T12CLK',0,1
	.word	351
	.byte	3,5,2,35,0,10
	.byte	'T12PRE',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'T12R',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'STE12',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'CDIR',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'CTM',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'T13CLK',0,1
	.word	351
	.byte	3,5,2,35,1,10
	.byte	'T13PRE',0,1
	.word	351
	.byte	1,4,2,35,1,10
	.byte	'T13R',0,1
	.word	351
	.byte	1,3,2,35,1,10
	.byte	'STE13',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	328
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_CCU6_TCTR0_Bits',0,25,165,4,3
	.word	107555
	.byte	9
	.byte	'_Ifx_CCU6_TCTR2_Bits',0,25,168,4,16,4,10
	.byte	'T12SSC',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'T13SSC',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'T13TEC',0,1
	.word	351
	.byte	3,3,2,35,0,10
	.byte	'T13TED',0,1
	.word	351
	.byte	2,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'T12RSEL',0,1
	.word	351
	.byte	2,6,2,35,1,10
	.byte	'T13RSEL',0,1
	.word	351
	.byte	2,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	328
	.byte	20,0,2,35,0,0,25
	.byte	'Ifx_CCU6_TCTR2_Bits',0,25,178,4,3
	.word	107804
	.byte	9
	.byte	'_Ifx_CCU6_TCTR4_Bits',0,25,181,4,16,4,10
	.byte	'T12RR',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'T12RS',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'T12RES',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'DTRES',0,1
	.word	351
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	351
	.byte	1,3,2,35,0,10
	.byte	'T12CNT',0,1
	.word	351
	.byte	1,2,2,35,0,10
	.byte	'T12STR',0,1
	.word	351
	.byte	1,1,2,35,0,10
	.byte	'T12STD',0,1
	.word	351
	.byte	1,0,2,35,0,10
	.byte	'T13RR',0,1
	.word	351
	.byte	1,7,2,35,1,10
	.byte	'T13RS',0,1
	.word	351
	.byte	1,6,2,35,1,10
	.byte	'T13RES',0,1
	.word	351
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	351
	.byte	2,3,2,35,1,10
	.byte	'T13CNT',0,1
	.word	351
	.byte	1,2,2,35,1,10
	.byte	'T13STR',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'T13STD',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_TCTR4_Bits',0,25,199,4,3
	.word	108016
	.byte	9
	.byte	'_Ifx_CCU6_TRPCTR_Bits',0,25,202,4,16,4,10
	.byte	'TRPM0',0,1
	.word	351
	.byte	1,7,2,35,0,10
	.byte	'TRPM1',0,1
	.word	351
	.byte	1,6,2,35,0,10
	.byte	'TRPM2',0,1
	.word	351
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	351
	.byte	5,0,2,35,0,10
	.byte	'TRPEN',0,1
	.word	351
	.byte	6,2,2,35,1,10
	.byte	'TRPEN13',0,1
	.word	351
	.byte	1,1,2,35,1,10
	.byte	'TRPPEN',0,1
	.word	351
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	902
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_CCU6_TRPCTR_Bits',0,25,212,4,3
	.word	108370
	.byte	11,25,220,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	99996
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_ACCEN0',0,25,225,4,3
	.word	108579
	.byte	11,25,228,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	100555
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_ACCEN1',0,25,233,4,3
	.word	108644
	.byte	11,25,236,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	100634
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CC60R',0,25,241,4,3
	.word	108709
	.byte	11,25,244,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	100727
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CC60SR',0,25,249,4,3
	.word	108773
	.byte	11,25,252,4,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	100822
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CC61R',0,25,129,5,3
	.word	108838
	.byte	11,25,132,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	100915
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CC61SR',0,25,137,5,3
	.word	108902
	.byte	11,25,140,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	101010
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CC62R',0,25,145,5,3
	.word	108967
	.byte	11,25,148,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	101103
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CC62SR',0,25,153,5,3
	.word	109031
	.byte	11,25,156,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	101198
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CC63R',0,25,161,5,3
	.word	109096
	.byte	11,25,164,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	101293
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CC63SR',0,25,169,5,3
	.word	109160
	.byte	11,25,172,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	101390
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CLC',0,25,177,5,3
	.word	109225
	.byte	11,25,180,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	101535
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CMPMODIF',0,25,185,5,3
	.word	109287
	.byte	11,25,188,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	101832
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_CMPSTAT',0,25,193,5,3
	.word	109354
	.byte	11,25,196,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	102218
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_ID',0,25,201,5,3
	.word	109420
	.byte	11,25,204,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	102331
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_IEN',0,25,209,5,3
	.word	109481
	.byte	11,25,212,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	102707
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_IMON',0,25,217,5,3
	.word	109543
	.byte	11,25,220,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	102968
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_INP',0,25,225,5,3
	.word	109606
	.byte	11,25,228,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103173
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_IS',0,25,233,5,3
	.word	109668
	.byte	11,25,236,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103516
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_ISR',0,25,241,5,3
	.word	109729
	.byte	11,25,244,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	103877
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_ISS',0,25,249,5,3
	.word	109791
	.byte	11,25,252,5,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	104231
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_KRST0',0,25,129,6,3
	.word	109853
	.byte	11,25,132,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	104344
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_KRST1',0,25,137,6,3
	.word	109917
	.byte	11,25,140,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	104438
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_KRSTCLR',0,25,145,6,3
	.word	109981
	.byte	11,25,148,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	104536
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_KSCSR',0,25,153,6,3
	.word	110047
	.byte	11,25,156,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	104675
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_LI',0,25,161,6,3
	.word	110111
	.byte	11,25,164,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	105006
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_MCFG',0,25,169,6,3
	.word	110172
	.byte	11,25,172,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	105128
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_MCMCTR',0,25,177,6,3
	.word	110235
	.byte	11,25,180,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	105342
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_MCMOUT',0,25,185,6,3
	.word	110300
	.byte	11,25,188,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	105507
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_MCMOUTS',0,25,193,6,3
	.word	110365
	.byte	11,25,196,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	105722
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_MODCTR',0,25,201,6,3
	.word	110431
	.byte	11,25,204,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	105924
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_MOSEL',0,25,209,6,3
	.word	110496
	.byte	11,25,212,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106063
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_OCS',0,25,217,6,3
	.word	110560
	.byte	11,25,220,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106257
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_PISEL0',0,25,225,6,3
	.word	110622
	.byte	11,25,228,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106483
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_PISEL2',0,25,233,6,3
	.word	110687
	.byte	11,25,236,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106657
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_PSLR',0,25,241,6,3
	.word	110752
	.byte	11,25,244,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106788
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_T12',0,25,249,6,3
	.word	110815
	.byte	11,25,252,6,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	106881
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_T12DTC',0,25,129,7,3
	.word	110877
	.byte	11,25,132,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107097
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_T12MSEL',0,25,137,7,3
	.word	110942
	.byte	11,25,140,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107268
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_T12PR',0,25,145,7,3
	.word	111008
	.byte	11,25,148,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107365
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_T13',0,25,153,7,3
	.word	111072
	.byte	11,25,156,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107458
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_T13PR',0,25,161,7,3
	.word	111134
	.byte	11,25,164,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107555
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_TCTR0',0,25,169,7,3
	.word	111198
	.byte	11,25,172,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	107804
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_TCTR2',0,25,177,7,3
	.word	111262
	.byte	11,25,180,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	108016
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_TCTR4',0,25,185,7,3
	.word	111326
	.byte	11,25,188,7,9,4,12
	.byte	'U',0
	.word	328
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	344
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	108370
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CCU6_TRPCTR',0,25,193,7,3
	.word	111390
	.byte	16,11,70,9,1,17
	.byte	'IfxVadc_AnalogConverterMode_off',0,0,17
	.byte	'IfxVadc_AnalogConverterMode_slowStandby',0,1,17
	.byte	'IfxVadc_AnalogConverterMode_fastStandby',0,2,17
	.byte	'IfxVadc_AnalogConverterMode_normalOperation',0,3,0,25
	.byte	'IfxVadc_AnalogConverterMode',0,11,76,3
	.word	111455
	.byte	16,11,80,9,1,17
	.byte	'IfxVadc_ArbitrationRounds_4_slots',0,0,17
	.byte	'IfxVadc_ArbitrationRounds_8_slots',0,1,17
	.byte	'IfxVadc_ArbitrationRounds_16_slots',0,2,17
	.byte	'IfxVadc_ArbitrationRounds_20_slots',0,3,0,25
	.byte	'IfxVadc_ArbitrationRounds',0,11,86,3
	.word	111661
	.byte	16,11,90,9,1,17
	.byte	'IfxVadc_BoundaryExtension_standard',0,0,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult1',0,1,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult2',0,2,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult3',0,3,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult4',0,4,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult5',0,5,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult6',0,6,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult7',0,7,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult8',0,8,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult9',0,9,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult10',0,10,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult11',0,11,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult12',0,12,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult13',0,13,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult14',0,14,17
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult15',0,15,0,25
	.byte	'IfxVadc_BoundaryExtension',0,11,108,3
	.word	111847
	.byte	16,11,112,9,1,17
	.byte	'IfxVadc_BoundarySelection_group0',0,0,17
	.byte	'IfxVadc_BoundarySelection_group1',0,1,17
	.byte	'IfxVadc_BoundarySelection_global0',0,2,17
	.byte	'IfxVadc_BoundarySelection_global1',0,3,0,25
	.byte	'IfxVadc_BoundarySelection',0,11,118,3
	.word	112635
	.byte	25
	.byte	'IfxVadc_ChannelId',0,11,137,1,3
	.word	29548
	.byte	16,11,141,1,9,1,17
	.byte	'IfxVadc_ChannelReference_standard',0,0,17
	.byte	'IfxVadc_ChannelReference_channel0',0,1,0,25
	.byte	'IfxVadc_ChannelReference',0,11,145,1,3
	.word	112844
	.byte	25
	.byte	'IfxVadc_ChannelResolution',0,11,155,1,3
	.word	33126
	.byte	16,11,159,1,9,1,17
	.byte	'IfxVadc_ChannelResult_0',0,0,17
	.byte	'IfxVadc_ChannelResult_1',0,1,17
	.byte	'IfxVadc_ChannelResult_2',0,2,17
	.byte	'IfxVadc_ChannelResult_3',0,3,17
	.byte	'IfxVadc_ChannelResult_4',0,4,17
	.byte	'IfxVadc_ChannelResult_5',0,5,17
	.byte	'IfxVadc_ChannelResult_6',0,6,17
	.byte	'IfxVadc_ChannelResult_7',0,7,17
	.byte	'IfxVadc_ChannelResult_8',0,8,17
	.byte	'IfxVadc_ChannelResult_9',0,9,17
	.byte	'IfxVadc_ChannelResult_10',0,10,17
	.byte	'IfxVadc_ChannelResult_11',0,11,17
	.byte	'IfxVadc_ChannelResult_12',0,12,17
	.byte	'IfxVadc_ChannelResult_13',0,13,17
	.byte	'IfxVadc_ChannelResult_14',0,14,17
	.byte	'IfxVadc_ChannelResult_15',0,15,0,25
	.byte	'IfxVadc_ChannelResult',0,11,177,1,3
	.word	112992
	.byte	25
	.byte	'IfxVadc_ChannelSelectionStyle',0,11,187,1,3
	.word	33855
	.byte	25
	.byte	'IfxVadc_ConversionType',0,11,194,1,3
	.word	33083
	.byte	25
	.byte	'IfxVadc_EmuxCodingScheme',0,11,203,1,3
	.word	33689
	.byte	16,11,207,1,9,1,17
	.byte	'IfxVadc_EmuxInterface_0',0,0,17
	.byte	'IfxVadc_EmuxInterface_1',0,1,0,25
	.byte	'IfxVadc_EmuxInterface',0,11,211,1,3
	.word	113557
	.byte	25
	.byte	'IfxVadc_EmuxSampleTimeControl',0,11,220,1,3
	.word	33762
	.byte	25
	.byte	'IfxVadc_EmuxSelectValue',0,11,235,1,3
	.word	33458
	.byte	25
	.byte	'IfxVadc_ExternalMultiplexerMode',0,11,246,1,3
	.word	33272
	.byte	16,11,250,1,9,1,17
	.byte	'IfxVadc_FifoMode_seperateResultRegister',0,0,17
	.byte	'IfxVadc_FifoMode_fifoStructure',0,1,17
	.byte	'IfxVadc_FifoMode_maximumMode',0,2,17
	.byte	'IfxVadc_FifoMode_minimumMode',0,3,0,25
	.byte	'IfxVadc_FifoMode',0,11,128,2,3
	.word	113760
	.byte	16,11,132,2,9,1,17
	.byte	'IfxVadc_GatingMode_disabled',0,0,17
	.byte	'IfxVadc_GatingMode_always',0,1,17
	.byte	'IfxVadc_GatingMode_gatingHigh',0,2,17
	.byte	'IfxVadc_GatingMode_gatingLow',0,3,0,25
	.byte	'IfxVadc_GatingMode',0,11,138,2,3
	.word	113930
	.byte	16,11,142,2,9,1,17
	.byte	'IfxVadc_GatingSource_0',0,0,17
	.byte	'IfxVadc_GatingSource_1',0,1,17
	.byte	'IfxVadc_GatingSource_2',0,2,17
	.byte	'IfxVadc_GatingSource_3',0,3,17
	.byte	'IfxVadc_GatingSource_4',0,4,17
	.byte	'IfxVadc_GatingSource_5',0,5,17
	.byte	'IfxVadc_GatingSource_6',0,6,17
	.byte	'IfxVadc_GatingSource_7',0,7,17
	.byte	'IfxVadc_GatingSource_8',0,8,17
	.byte	'IfxVadc_GatingSource_9',0,9,17
	.byte	'IfxVadc_GatingSource_10',0,10,17
	.byte	'IfxVadc_GatingSource_11',0,11,17
	.byte	'IfxVadc_GatingSource_12',0,12,17
	.byte	'IfxVadc_GatingSource_13',0,13,17
	.byte	'IfxVadc_GatingSource_14',0,14,17
	.byte	'IfxVadc_GatingSource_15',0,15,0,25
	.byte	'IfxVadc_GatingSource',0,11,160,2,3
	.word	114086
	.byte	25
	.byte	'IfxVadc_InputClasses',0,11,170,2,3
	.word	32954
	.byte	16,11,174,2,9,1,17
	.byte	'IfxVadc_LimitCheck_noCheck',0,0,17
	.byte	'IfxVadc_LimitCheck_eventIfInArea',0,1,17
	.byte	'IfxVadc_LimitCheck_eventIfOutsideArea',0,2,17
	.byte	'IfxVadc_LimitCheck_always',0,3,0,25
	.byte	'IfxVadc_LimitCheck',0,11,180,2,3
	.word	114559
	.byte	25
	.byte	'IfxVadc_LowSupplyVoltageSelect',0,11,188,2,3
	.word	32875
	.byte	25
	.byte	'IfxVadc_Protection',0,11,129,3,3
	.word	30256
	.byte	25
	.byte	'IfxVadc_RequestSlotPriority',0,11,139,3,3
	.word	29975
	.byte	25
	.byte	'IfxVadc_RequestSlotStartMode',0,11,147,3,3
	.word	30126
	.byte	25
	.byte	'IfxVadc_RequestSource',0,11,156,3,3
	.word	29845
	.byte	16,11,161,3,9,1,17
	.byte	'IfxVadc_SleepMode_enable',0,0,17
	.byte	'IfxVadc_SleepMode_disable',0,1,0,25
	.byte	'IfxVadc_SleepMode',0,11,165,3,3
	.word	114900
	.byte	25
	.byte	'IfxVadc_SrcNr',0,11,179,3,3
	.word	32680
	.byte	25
	.byte	'IfxVadc_Status',0,11,194,3,3
	.word	29321
	.byte	16,11,198,3,9,1,17
	.byte	'IfxVadc_TriggerMode_noExternalTrigger',0,0,17
	.byte	'IfxVadc_TriggerMode_uponFallingEdge',0,1,17
	.byte	'IfxVadc_TriggerMode_uponRisingEdge',0,2,17
	.byte	'IfxVadc_TriggerMode_uponAnyEdge',0,3,0,25
	.byte	'IfxVadc_TriggerMode',0,11,204,3,3
	.word	115036
	.byte	16,11,208,3,9,1,17
	.byte	'IfxVadc_TriggerSource_0',0,0,17
	.byte	'IfxVadc_TriggerSource_1',0,1,17
	.byte	'IfxVadc_TriggerSource_2',0,2,17
	.byte	'IfxVadc_TriggerSource_3',0,3,17
	.byte	'IfxVadc_TriggerSource_4',0,4,17
	.byte	'IfxVadc_TriggerSource_5',0,5,17
	.byte	'IfxVadc_TriggerSource_6',0,6,17
	.byte	'IfxVadc_TriggerSource_7',0,7,17
	.byte	'IfxVadc_TriggerSource_8',0,8,17
	.byte	'IfxVadc_TriggerSource_9',0,9,17
	.byte	'IfxVadc_TriggerSource_10',0,10,17
	.byte	'IfxVadc_TriggerSource_11',0,11,17
	.byte	'IfxVadc_TriggerSource_12',0,12,17
	.byte	'IfxVadc_TriggerSource_13',0,13,17
	.byte	'IfxVadc_TriggerSource_14',0,14,17
	.byte	'IfxVadc_TriggerSource_15',0,15,0,25
	.byte	'IfxVadc_TriggerSource',0,11,226,3,3
	.word	115221
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L124:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,36,0,3,8,11,15,62,15,0,0,5,59,0,3,8,0,0,6,15,0,73,19,0,0,7,46,1,3,8,32,13,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,0,0,8,5,0,3,8,58,15,59,15,57,15,73,19,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,11,23,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,13,53,0,73,19,0,0,14,1,1,11,15,73,19,0,0,15,33,0,47,15,0,0,16,4,1,58,15,59,15,57,15,11,15,0,0,17
	.byte	40,0,3,8,28,13,0,0,18,13,0,73,19,11,15,56,9,0,0,19,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,20,5,0,73
	.byte	19,0,0,21,46,1,49,19,0,0,22,5,0,49,19,0,0,23,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,24
	.byte	46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,25,22,0,3,8,58,15,59,15,57,15,73,19,0,0,26
	.byte	21,0,54,15,0,0,27,38,0,73,19,0,0,28,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,29,19,1,58,15,59
	.byte	15,57,15,11,15,0,0,30,21,0,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L125:
	.word	.L528-.L527
.L527:
	.half	3
	.word	.L530-.L529
.L529:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Reg',0
	.byte	'C:\\TASKING\\TriCore v6.2r2\\ctc\\include\\',0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Src\\Std\\IfxSrc.h',0
	.byte	0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Port\\Std\\IfxPort.h',0
	.byte	0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxCpu_cfg.h',0
	.byte	0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.h',0,0,0,0
	.byte	'IfxVadc_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuCcu.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxVadc_cfg.h',0
	.byte	0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxSrc_cfg.h',0
	.byte	0,0,0
	.byte	'stdio.h',0,2,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Platform_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Ifx_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxScu_cfg.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_PinMap\\IfxVadc_PinMap.h',0
	.byte	0,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'IfxStm_regdef.h',0,1,0,0
	.byte	'IfxFlash_regdef.h',0,1,0,0
	.byte	'IfxCcu6_regdef.h',0,1,0,0,0
.L530:
.L528:
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_info'
.L126:
	.word	292
	.half	3
	.word	.L127
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L129,.L128
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_getBackgroundScanStatus',0,1,181,1,16
	.word	.L256
	.byte	1,1,1
	.word	.L91,.L257,.L90
	.byte	4
	.byte	'vadc',0,1,181,1,58
	.word	.L258,.L259
	.byte	5
	.word	.L91,.L257
	.byte	6
	.byte	'i',0,1,184,1,20
	.word	.L260,.L261
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_abbrev'
.L127:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_line'
.L128:
	.word	.L532-.L531
.L531:
	.half	3
	.word	.L534-.L533
.L533:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L534:
	.byte	5,17,7,0,5,2
	.word	.L91
	.byte	3,187,1,1,5,43,9
	.half	.L535-.L91
	.byte	3,126,1,5,28,9
	.half	.L15-.L535
	.byte	3,2,1,5,9,9
	.half	.L536-.L15
	.byte	1,5,20,7,9
	.half	.L537-.L536
	.byte	3,2,1,5,1,3,9,1,5,46,7,9
	.half	.L16-.L537
	.byte	3,115,1,5,43,1,5,12,7,9
	.half	.L538-.L16
	.byte	3,12,1,5,1,3,1,1,7,9
	.half	.L130-.L538
	.byte	0,1,1
.L532:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_ranges'
.L129:
	.word	-1,.L91,0,.L130-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_info'
.L131:
	.word	405
	.half	3
	.word	.L132
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L134,.L133
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_getResultBasedOnRequestSource',0,1,152,2,14
	.word	.L262
	.byte	1,1,1
	.word	.L97,.L263,.L96
	.byte	4
	.byte	'vadc',0,1,152,2,62
	.word	.L258,.L264
	.byte	4
	.byte	'group',0,1,152,2,80
	.word	.L265,.L266
	.byte	4
	.byte	'channel',0,1,152,2,105
	.word	.L267,.L268
	.byte	4
	.byte	'sourceType',0,1,152,2,136,1
	.word	.L269,.L270
	.byte	5
	.word	.L97,.L263
	.byte	6
	.byte	'sourceResultRegister',0,1,154,2,18
	.word	.L271,.L272
	.byte	6
	.byte	'tmpResult',0,1,155,2,18
	.word	.L262,.L273
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_abbrev'
.L132:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_line'
.L133:
	.word	.L540-.L539
.L539:
	.half	3
	.word	.L542-.L541
.L541:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L542:
	.byte	5,39,7,0,5,2
	.word	.L97
	.byte	3,153,2,1,5,10,9
	.half	.L470-.L97
	.byte	3,5,1,7,9
	.half	.L543-.L470
	.byte	3,4,1,7,9
	.half	.L544-.L543
	.byte	3,4,1,7,9
	.half	.L545-.L544
	.byte	1,5,47,9
	.half	.L34-.L545
	.byte	3,121,1,5,9,9
	.half	.L471-.L34
	.byte	3,1,1,5,47,9
	.half	.L35-.L471
	.byte	3,3,1,5,9,9
	.half	.L472-.L35
	.byte	3,1,1,5,47,9
	.half	.L36-.L472
	.byte	3,3,1,5,5,9
	.half	.L37-.L36
	.byte	3,4,1,5,13,7,9
	.half	.L546-.L37
	.byte	3,8,1,5,78,7,9
	.half	.L547-.L546
	.byte	1,5,89,9
	.half	.L548-.L547
	.byte	1,5,97,9
	.half	.L473-.L548
	.byte	1,5,49,7,9
	.half	.L549-.L473
	.byte	3,2,1,5,32,9
	.half	.L474-.L549
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L550-.L474
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L551-.L550
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L552-.L551
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L553-.L552
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L554-.L553
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L555-.L554
	.byte	1,5,1,3,11,1,5,50,7,9
	.half	.L42-.L555
	.byte	3,123,1,5,61,9
	.half	.L556-.L42
	.byte	1,5,37,9
	.half	.L41-.L556
	.byte	1,5,69,9
	.half	.L557-.L41
	.byte	1,5,1,9
	.half	.L475-.L557
	.byte	3,5,1,7,9
	.half	.L135-.L475
	.byte	0,1,1
.L540:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_ranges'
.L134:
	.word	-1,.L97,0,.L135-.L97,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_info'
.L136:
	.word	267
	.half	3
	.word	.L137
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L139,.L138
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_getScanStatus',0,1,202,2,16
	.word	.L256
	.byte	1,1,1
	.word	.L99,.L274,.L98
	.byte	4
	.byte	'group',0,1,202,2,50
	.word	.L265,.L275
	.byte	5
	.word	.L99,.L274
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_abbrev'
.L137:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_line'
.L138:
	.word	.L559-.L558
.L558:
	.half	3
	.word	.L561-.L560
.L560:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L561:
	.byte	5,21,7,0,5,2
	.word	.L99
	.byte	3,205,2,1,5,16,9
	.half	.L562-.L99
	.byte	3,2,1,5,1,9
	.half	.L563-.L562
	.byte	3,6,1,7,9
	.half	.L140-.L563
	.byte	0,1,1
.L559:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_ranges'
.L139:
	.word	-1,.L99,0,.L140-.L99,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_info'
.L141:
	.word	297
	.half	3
	.word	.L142
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L144,.L143
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_setScan',0,1,141,4,6,1,1,1
	.word	.L119,.L276,.L118
	.byte	4
	.byte	'group',0,1,141,4,34
	.word	.L265,.L277
	.byte	4
	.byte	'channels',0,1,141,4,48
	.word	.L278,.L279
	.byte	4
	.byte	'mask',0,1,141,4,65
	.word	.L278,.L280
	.byte	5
	.word	.L119,.L276
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_abbrev'
.L142:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_line'
.L143:
	.word	.L565-.L564
.L564:
	.half	3
	.word	.L567-.L566
.L566:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L567:
	.byte	5,40,7,0,5,2
	.word	.L119
	.byte	3,144,4,1,5,35,1,5,40,9
	.half	.L568-.L119
	.byte	1,5,38,9
	.half	.L569-.L568
	.byte	1,5,59,9
	.half	.L570-.L569
	.byte	1,5,47,9
	.half	.L522-.L570
	.byte	1,5,20,1,5,1,9
	.half	.L571-.L522
	.byte	3,1,1,7,9
	.half	.L145-.L571
	.byte	0,1,1
.L565:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_ranges'
.L144:
	.word	-1,.L119,0,.L145-.L119,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_info'
.L146:
	.word	268
	.half	3
	.word	.L147
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L149,.L148
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_getQueueStatus',0,1,134,2,16
	.word	.L256
	.byte	1,1,1
	.word	.L95,.L281,.L94
	.byte	4
	.byte	'group',0,1,134,2,51
	.word	.L265,.L282
	.byte	5
	.word	.L95,.L281
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_abbrev'
.L147:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_line'
.L148:
	.word	.L573-.L572
.L572:
	.half	3
	.word	.L575-.L574
.L574:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L575:
	.byte	5,29,7,0,5,2
	.word	.L95
	.byte	3,138,2,1,5,13,9
	.half	.L576-.L95
	.byte	1,5,1,9
	.half	.L577-.L576
	.byte	3,10,1,7,9
	.half	.L150-.L577
	.byte	0,1,1
.L573:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_ranges'
.L149:
	.word	-1,.L95,0,.L150-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_info'
.L151:
	.word	274
	.half	3
	.word	.L152
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L154,.L153
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_getAdcAnalogFrequency',0,1,163,1,9
	.word	.L283
	.byte	1,1,1
	.word	.L85,.L284,.L84
	.byte	4
	.byte	'vadc',0,1,163,1,49
	.word	.L258,.L285
	.byte	5
	.word	.L85,.L284
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_abbrev'
.L152:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_line'
.L153:
	.word	.L579-.L578
.L578:
	.half	3
	.word	.L581-.L580
.L580:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L581:
	.byte	5,9,7,0,5,2
	.word	.L85
	.byte	3,162,1,1,5,37,9
	.half	.L454-.L85
	.byte	3,2,1,5,63,9
	.half	.L453-.L454
	.byte	1,5,46,9
	.half	.L582-.L453
	.byte	1,5,40,9
	.half	.L583-.L582
	.byte	1,5,1,3,1,1,7,9
	.half	.L155-.L583
	.byte	0,1,1
.L579:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_ranges'
.L154:
	.word	-1,.L85,0,.L155-.L85,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_info'
.L156:
	.word	275
	.half	3
	.word	.L157
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L159,.L158
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_getAdcDigitalFrequency',0,1,169,1,9
	.word	.L283
	.byte	1,1,1
	.word	.L87,.L286,.L86
	.byte	4
	.byte	'vadc',0,1,169,1,50
	.word	.L258,.L287
	.byte	5
	.word	.L87,.L286
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_abbrev'
.L157:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_line'
.L158:
	.word	.L585-.L584
.L584:
	.half	3
	.word	.L587-.L586
.L586:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L587:
	.byte	5,9,7,0,5,2
	.word	.L87
	.byte	3,168,1,1,5,37,9
	.half	.L456-.L87
	.byte	3,2,1,5,63,9
	.half	.L455-.L456
	.byte	1,5,46,9
	.half	.L588-.L455
	.byte	1,5,40,9
	.half	.L589-.L588
	.byte	1,5,1,3,1,1,7,9
	.half	.L160-.L589
	.byte	0,1,1
.L585:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_ranges'
.L159:
	.word	-1,.L87,0,.L160-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_info'
.L161:
	.word	348
	.half	3
	.word	.L162
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L164,.L163
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_setArbiterPriority',0,1,245,3,6,1,1,1
	.word	.L117,.L288,.L116
	.byte	4
	.byte	'vadcG',0,1,245,3,45
	.word	.L265,.L289
	.byte	4
	.byte	'slotEnable',0,1,245,3,60
	.word	.L260,.L290
	.byte	4
	.byte	'prio',0,1,245,3,100
	.word	.L291,.L292
	.byte	4
	.byte	'mode',0,1,245,3,135,1
	.word	.L293,.L294
	.byte	4
	.byte	'slot',0,1,245,3,163,1
	.word	.L269,.L295
	.byte	5
	.word	.L117,.L288
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_abbrev'
.L162:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_line'
.L163:
	.word	.L591-.L590
.L590:
	.half	3
	.word	.L593-.L592
.L592:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L593:
	.byte	5,69,7,0,5,2
	.word	.L117
	.byte	3,248,3,1,5,5,9
	.half	.L594-.L117
	.byte	3,126,1,5,38,7,9
	.half	.L595-.L594
	.byte	3,2,1,5,21,1,5,60,9
	.half	.L521-.L595
	.byte	3,1,1,5,24,9
	.half	.L520-.L521
	.byte	3,127,1,5,29,9
	.half	.L596-.L520
	.byte	3,1,1,5,21,9
	.half	.L597-.L596
	.byte	1,5,56,9
	.half	.L598-.L597
	.byte	1,5,27,9
	.half	.L599-.L598
	.byte	1,5,24,9
	.half	.L600-.L599
	.byte	1,5,31,9
	.half	.L601-.L600
	.byte	3,5,1,5,21,9
	.half	.L602-.L601
	.byte	3,124,1,5,33,9
	.half	.L603-.L602
	.byte	1,5,66,9
	.half	.L519-.L603
	.byte	3,4,1,5,24,9
	.half	.L604-.L519
	.byte	3,124,1,5,36,9
	.half	.L605-.L604
	.byte	3,4,1,5,9,9
	.half	.L606-.L605
	.byte	3,126,1,5,25,7,9
	.half	.L607-.L606
	.byte	3,2,1,5,28,9
	.half	.L608-.L607
	.byte	1,5,80,1,5,25,9
	.half	.L64-.L608
	.byte	3,4,1,5,31,9
	.half	.L609-.L64
	.byte	1,5,28,9
	.half	.L610-.L609
	.byte	1,5,9,3,126,1,5,29,9
	.half	.L63-.L610
	.byte	3,7,1,5,21,1,5,56,9
	.half	.L611-.L63
	.byte	1,5,27,9
	.half	.L612-.L611
	.byte	1,5,24,9
	.half	.L613-.L612
	.byte	1,5,1,9
	.half	.L614-.L613
	.byte	3,2,1,7,9
	.half	.L165-.L614
	.byte	0,1,1
.L591:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_ranges'
.L164:
	.word	-1,.L117,0,.L165-.L117,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_info'
.L166:
	.word	302
	.half	3
	.word	.L167
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L169,.L168
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_disableAccess',0,1,54,6,1,1,1
	.word	.L73,.L296,.L72
	.byte	4
	.byte	'vadc',0,1,54,38
	.word	.L258,.L297
	.byte	4
	.byte	'protectionSet',0,1,54,63
	.word	.L298,.L299
	.byte	5
	.word	.L300
	.byte	6
	.byte	'passwd',0,1,56,12
	.word	.L301,.L302
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_abbrev'
.L167:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_line'
.L168:
	.word	.L616-.L615
.L615:
	.half	3
	.word	.L618-.L617
.L617:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L618:
	.byte	5,6,7,0,5,2
	.word	.L73
	.byte	3,53,1,5,56,9
	.half	.L425-.L73
	.byte	3,2,1,5,19,9
	.half	.L424-.L425
	.byte	1,5,34,9
	.half	.L428-.L424
	.byte	3,1,1,5,25,9
	.half	.L427-.L428
	.byte	3,2,1,5,5,9
	.half	.L619-.L427
	.byte	1,5,30,7,9
	.half	.L620-.L619
	.byte	3,2,1,5,23,1,5,41,9
	.half	.L621-.L620
	.byte	1,5,26,9
	.half	.L622-.L621
	.byte	1,5,58,9
	.half	.L623-.L622
	.byte	1,5,23,9
	.half	.L2-.L623
	.byte	3,4,1,5,26,9
	.half	.L426-.L2
	.byte	1,5,32,9
	.half	.L3-.L426
	.byte	3,3,1,5,1,9
	.half	.L170-.L3
	.byte	3,1,0,1,1
.L616:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_ranges'
.L169:
	.word	-1,.L73,0,.L170-.L73,0,0
.L300:
	.word	-1,.L73,0,.L296-.L73,-1,.L75,0,.L255-.L75,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_info'
.L171:
	.word	331
	.half	3
	.word	.L172
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L174,.L173
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_disablePostCalibration',0,1,72,6,1,1,1
	.word	.L77,.L303,.L76
	.byte	4
	.byte	'vadc',0,1,72,47
	.word	.L258,.L304
	.byte	4
	.byte	'group',0,1,72,69
	.word	.L305,.L306
	.byte	4
	.byte	'disable',0,1,72,84
	.word	.L260,.L307
	.byte	5
	.word	.L77,.L303
	.byte	6
	.word	.L308
	.byte	7
	.byte	'mask',0,1,78,16
	.word	.L278,.L310
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_abbrev'
.L172:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,11,1,85
	.byte	6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_line'
.L173:
	.word	.L625-.L624
.L624:
	.half	3
	.word	.L627-.L626
.L626:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L627:
	.byte	5,6,7,0,5,2
	.word	.L77
	.byte	3,199,0,1,5,5,9
	.half	.L430-.L77
	.byte	3,2,1,5,36,7,9
	.half	.L628-.L430
	.byte	3,2,1,5,23,9
	.half	.L309-.L628
	.byte	3,2,1,5,57,9
	.half	.L629-.L309
	.byte	1,5,25,9
	.half	.L630-.L629
	.byte	1,5,9,9
	.half	.L432-.L630
	.byte	3,2,1,5,26,7,9
	.half	.L631-.L432
	.byte	3,2,1,5,29,9
	.half	.L431-.L631
	.byte	1,5,36,1,5,1,9
	.half	.L4-.L431
	.byte	3,9,1,5,32,7,9
	.half	.L5-.L4
	.byte	3,123,1,5,26,1,5,32,9
	.half	.L433-.L5
	.byte	1,5,29,9
	.half	.L434-.L433
	.byte	1,5,37,9
	.half	.L632-.L434
	.byte	3,3,1,5,1,9
	.half	.L175-.L632
	.byte	3,2,0,1,1
.L625:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_ranges'
.L174:
	.word	-1,.L77,0,.L175-.L77,0,0
.L308:
	.word	-1,.L77,.L309-.L77,.L4-.L77,.L5-.L77,.L303-.L77,-1,.L79,0,.L250-.L79,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_info'
.L176:
	.word	305
	.half	3
	.word	.L177
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L179,.L178
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_enableAccess',0,1,94,6,1,1,1
	.word	.L81,.L311,.L80
	.byte	4
	.byte	'vadc',0,1,94,37
	.word	.L258,.L312
	.byte	4
	.byte	'protectionSet',0,1,94,62
	.word	.L298,.L313
	.byte	5
	.word	.L81,.L311
	.byte	6
	.byte	'passwd',0,1,96,12
	.word	.L301,.L314
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_abbrev'
.L177:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_line'
.L178:
	.word	.L634-.L633
.L633:
	.half	3
	.word	.L636-.L635
.L635:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L636:
	.byte	5,6,7,0,5,2
	.word	.L81
	.byte	3,221,0,1,5,56,9
	.half	.L441-.L81
	.byte	3,2,1,5,19,9
	.half	.L438-.L441
	.byte	1,5,34,9
	.half	.L440-.L438
	.byte	3,1,1,5,25,9
	.half	.L439-.L440
	.byte	3,2,1,5,5,9
	.half	.L637-.L439
	.byte	1,5,31,7,9
	.half	.L638-.L637
	.byte	3,2,1,5,23,1,5,42,9
	.half	.L639-.L638
	.byte	1,5,29,9
	.half	.L640-.L639
	.byte	1,5,26,9
	.half	.L641-.L640
	.byte	1,5,59,9
	.half	.L642-.L641
	.byte	1,5,23,9
	.half	.L7-.L642
	.byte	3,4,1,5,29,9
	.half	.L643-.L7
	.byte	1,5,26,9
	.half	.L644-.L643
	.byte	1,5,32,9
	.half	.L8-.L644
	.byte	3,3,1,5,1,9
	.half	.L180-.L8
	.byte	3,1,0,1,1
.L634:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_ranges'
.L179:
	.word	-1,.L81,0,.L180-.L81,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_info'
.L181:
	.word	336
	.half	3
	.word	.L182
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L184,.L183
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_enableGroupSync',0,1,112,6,1,1,1
	.word	.L83,.L315,.L82
	.byte	4
	.byte	'vadc',0,1,112,40
	.word	.L258,.L316
	.byte	4
	.byte	'ccu6Num',0,1,112,53
	.word	.L278,.L317
	.byte	5
	.word	.L83,.L315
	.byte	6
	.byte	'passwd',0,1,114,12
	.word	.L301,.L318
	.byte	5
	.word	.L319,.L320
	.byte	6
	.byte	'vadcGlobCfg',0,1,119,26
	.word	.L321,.L322
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_abbrev'
.L182:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_line'
.L183:
	.word	.L646-.L645
.L645:
	.half	3
	.word	.L648-.L647
.L647:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L648:
	.byte	5,6,7,0,5,2
	.word	.L83
	.byte	3,239,0,1,5,53,9
	.half	.L448-.L83
	.byte	3,2,1,5,19,9
	.half	.L443-.L448
	.byte	1,5,31,9
	.half	.L447-.L443
	.byte	3,1,1,5,44,9
	.half	.L319-.L447
	.byte	3,5,1,5,29,9
	.half	.L450-.L319
	.byte	3,1,1,9
	.half	.L649-.L450
	.byte	3,1,1,5,36,3,2,1,5,25,9
	.half	.L445-.L649
	.byte	3,1,1,5,37,9
	.half	.L650-.L445
	.byte	3,1,1,5,5,9
	.half	.L320-.L650
	.byte	3,3,1,5,21,7,9
	.half	.L651-.L320
	.byte	3,3,1,5,22,9
	.half	.L652-.L651
	.byte	3,2,1,5,34,9
	.half	.L446-.L652
	.byte	3,3,1,5,32,9
	.half	.L653-.L446
	.byte	1,9
	.half	.L654-.L653
	.byte	3,1,1,5,23,9
	.half	.L655-.L654
	.byte	3,1,1,5,32,9
	.half	.L656-.L655
	.byte	1,5,67,9
	.half	.L657-.L656
	.byte	3,1,1,5,32,1,5,22,9
	.half	.L658-.L657
	.byte	3,1,1,5,32,9
	.half	.L659-.L658
	.byte	1,5,35,3,124,1,5,10,9
	.half	.L9-.L659
	.byte	3,6,1,5,23,7,9
	.half	.L660-.L9
	.byte	3,3,1,5,21,1,9
	.half	.L451-.L660
	.byte	3,1,1,5,22,9
	.half	.L661-.L451
	.byte	3,2,1,5,34,9
	.half	.L662-.L661
	.byte	3,3,1,5,32,9
	.half	.L663-.L662
	.byte	1,9
	.half	.L664-.L663
	.byte	3,1,1,5,23,9
	.half	.L665-.L664
	.byte	3,1,1,5,32,9
	.half	.L666-.L665
	.byte	1,5,67,9
	.half	.L667-.L666
	.byte	3,1,1,5,32,1,5,22,9
	.half	.L668-.L667
	.byte	3,1,1,5,32,9
	.half	.L669-.L668
	.byte	1,5,29,9
	.half	.L11-.L669
	.byte	3,3,1,5,1,9
	.half	.L185-.L11
	.byte	3,1,0,1,1
.L646:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_ranges'
.L184:
	.word	-1,.L83,0,.L185-.L83,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_info'
.L186:
	.word	256
	.half	3
	.word	.L187
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L189,.L188
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_getAdcModuleFrequency',0,1,175,1,9
	.word	.L283
	.byte	1,1,1
	.word	.L89,.L323,.L88
	.byte	4
	.word	.L89,.L323
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_abbrev'
.L187:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_line'
.L188:
	.word	.L671-.L670
.L670:
	.half	3
	.word	.L673-.L672
.L672:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L673:
	.byte	5,37,7,0,5,2
	.word	.L89
	.byte	3,176,1,1,5,1,7,9
	.half	.L190-.L89
	.byte	3,1,0,1,1
.L671:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_ranges'
.L189:
	.word	-1,.L89,0,.L190-.L89,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_info'
.L191:
	.word	286
	.half	3
	.word	.L192
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L194,.L193
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_getSrcAddress',0,1,217,2,24
	.word	.L324
	.byte	1,1,1
	.word	.L101,.L325,.L100
	.byte	4
	.byte	'group',0,1,217,2,62
	.word	.L305,.L326
	.byte	4
	.byte	'index',0,1,217,2,83
	.word	.L327,.L328
	.byte	5
	.word	.L101,.L325
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_abbrev'
.L192:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_line'
.L193:
	.word	.L675-.L674
.L674:
	.half	3
	.word	.L677-.L676
.L676:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L677:
	.byte	5,5,7,0,5,2
	.word	.L101
	.byte	3,220,2,1,5,15,7,9
	.half	.L678-.L101
	.byte	3,2,1,5,19,9
	.half	.L679-.L678
	.byte	3,8,1,5,54,9
	.half	.L49-.L679
	.byte	3,8,1,5,28,1,5,65,9
	.half	.L476-.L49
	.byte	1,5,28,1,5,52,9
	.half	.L477-.L476
	.byte	1,5,18,9
	.half	.L680-.L477
	.byte	3,2,1,5,1,9
	.half	.L681-.L680
	.byte	3,1,1,7,9
	.half	.L195-.L681
	.byte	0,1,1
.L675:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_ranges'
.L194:
	.word	-1,.L101,0,.L195-.L101,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_info'
.L196:
	.word	333
	.half	3
	.word	.L197
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L199,.L198
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_initialiseAdcArbiterClock',0,1,245,2,6,1,1,1
	.word	.L103,.L329,.L102
	.byte	4
	.byte	'vadc',0,1,245,2,50
	.word	.L258,.L330
	.byte	4
	.byte	'arbiterClockDivider',0,1,245,2,63
	.word	.L278,.L331
	.byte	5
	.word	.L103,.L329
	.byte	6
	.byte	'tempGLOBCFG',0,1,247,2,22
	.word	.L321,.L332
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_abbrev'
.L197:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_line'
.L198:
	.word	.L683-.L682
.L682:
	.half	3
	.word	.L685-.L684
.L684:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L685:
	.byte	5,6,7,0,5,2
	.word	.L103
	.byte	3,244,2,1,5,40,9
	.half	.L481-.L103
	.byte	3,3,1,5,18,9
	.half	.L480-.L481
	.byte	3,1,1,5,25,9
	.half	.L686-.L480
	.byte	1,5,32,9
	.half	.L687-.L686
	.byte	3,2,1,5,25,9
	.half	.L478-.L687
	.byte	3,127,1,5,32,9
	.half	.L688-.L478
	.byte	3,1,1,5,25,9
	.half	.L479-.L688
	.byte	3,1,1,5,33,9
	.half	.L689-.L479
	.byte	3,1,1,5,1,9
	.half	.L200-.L689
	.byte	3,1,0,1,1
.L683:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_ranges'
.L199:
	.word	-1,.L103,0,.L200-.L103,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_info'
.L201:
	.word	337
	.half	3
	.word	.L202
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L204,.L203
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_initialiseAdcConverterClock',0,1,129,3,6,1,1,1
	.word	.L105,.L333,.L104
	.byte	4
	.byte	'vadc',0,1,129,3,52
	.word	.L258,.L334
	.byte	4
	.byte	'converterClockDivider',0,1,129,3,65
	.word	.L278,.L335
	.byte	5
	.word	.L105,.L333
	.byte	6
	.byte	'tempGLOBCFG',0,1,131,3,22
	.word	.L321,.L336
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_abbrev'
.L202:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_line'
.L203:
	.word	.L691-.L690
.L690:
	.half	3
	.word	.L693-.L692
.L692:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L693:
	.byte	5,6,7,0,5,2
	.word	.L105
	.byte	3,128,3,1,5,40,9
	.half	.L486-.L105
	.byte	3,3,1,5,25,9
	.half	.L485-.L486
	.byte	3,1,1,5,32,9
	.half	.L694-.L485
	.byte	3,2,1,5,25,9
	.half	.L483-.L694
	.byte	3,127,1,5,32,3,1,1,5,25,9
	.half	.L484-.L483
	.byte	3,1,1,5,33,9
	.half	.L695-.L484
	.byte	3,1,1,5,1,9
	.half	.L205-.L695
	.byte	3,1,0,1,1
.L691:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_ranges'
.L204:
	.word	-1,.L105,0,.L205-.L105,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_info'
.L206:
	.word	324
	.half	3
	.word	.L207
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L209,.L208
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_initializeFAdcD',0,1,141,3,8
	.word	.L278
	.byte	1,1,1
	.word	.L107,.L337,.L106
	.byte	4
	.byte	'vadc',0,1,141,3,42
	.word	.L258,.L338
	.byte	4
	.byte	'fAdcD',0,1,141,3,55
	.word	.L278,.L339
	.byte	5
	.word	.L107,.L337
	.byte	6
	.byte	'divD',0,1,143,3,12
	.word	.L278,.L340
	.byte	6
	.byte	'fadc',0,1,145,3,12
	.word	.L278,.L341
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_abbrev'
.L207:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_line'
.L208:
	.word	.L697-.L696
.L696:
	.half	3
	.word	.L699-.L698
.L698:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L699:
	.byte	5,8,7,0,5,2
	.word	.L107
	.byte	3,140,3,1,5,44,9
	.half	.L489-.L107
	.byte	3,4,1,5,20,9
	.half	.L491-.L489
	.byte	3,2,1,5,28,9
	.half	.L700-.L491
	.byte	1,5,20,9
	.half	.L490-.L700
	.byte	3,2,1,5,45,3,3,1,5,27,9
	.half	.L494-.L490
	.byte	3,127,1,5,19,9
	.half	.L493-.L494
	.byte	1,5,1,3,3,1,7,9
	.half	.L210-.L493
	.byte	0,1,1
.L697:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_ranges'
.L209:
	.word	-1,.L107,0,.L210-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_info'
.L211:
	.word	344
	.half	3
	.word	.L212
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L214,.L213
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_initializeFAdcI',0,1,157,3,8
	.word	.L278
	.byte	1,1,1
	.word	.L109,.L342,.L108
	.byte	4
	.byte	'vadc',0,1,157,3,42
	.word	.L258,.L343
	.byte	4
	.byte	'fAdcI',0,1,157,3,55
	.word	.L278,.L344
	.byte	5
	.word	.L109,.L342
	.byte	6
	.byte	'divA',0,1,159,3,12
	.word	.L278,.L345
	.byte	6
	.byte	'result',0,1,160,3,12
	.word	.L278,.L346
	.byte	6
	.byte	'fadc',0,1,161,3,12
	.word	.L278,.L347
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_abbrev'
.L212:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_line'
.L213:
	.word	.L702-.L701
.L701:
	.half	3
	.word	.L704-.L703
.L703:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L704:
	.byte	5,8,7,0,5,2
	.word	.L109
	.byte	3,156,3,1,5,44,9
	.half	.L496-.L109
	.byte	3,4,1,5,20,9
	.half	.L498-.L496
	.byte	3,3,1,5,26,9
	.half	.L705-.L498
	.byte	1,5,20,9
	.half	.L706-.L705
	.byte	3,2,1,5,25,9
	.half	.L497-.L706
	.byte	1,5,26,9
	.half	.L707-.L497
	.byte	3,1,1,5,20,9
	.half	.L708-.L707
	.byte	1,5,27,9
	.half	.L500-.L708
	.byte	3,1,1,5,19,9
	.half	.L709-.L500
	.byte	1,5,18,3,2,1,5,5,9
	.half	.L501-.L709
	.byte	1,5,24,7,9
	.half	.L710-.L501
	.byte	3,2,1,5,31,9
	.half	.L711-.L710
	.byte	3,2,1,5,23,9
	.half	.L712-.L711
	.byte	1,5,16,9
	.half	.L499-.L712
	.byte	1,5,22,9
	.half	.L52-.L499
	.byte	3,7,1,5,66,9
	.half	.L713-.L52
	.byte	1,5,56,9
	.half	.L714-.L713
	.byte	1,5,63,9
	.half	.L715-.L714
	.byte	1,5,16,7,9
	.half	.L716-.L715
	.byte	3,2,1,5,19,1,5,51,9
	.half	.L53-.L716
	.byte	3,4,1,5,5,9
	.half	.L54-.L53
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L215-.L54
	.byte	0,1,1
.L702:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_ranges'
.L214:
	.word	-1,.L109,0,.L215-.L109,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_info'
.L216:
	.word	313
	.half	3
	.word	.L217
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L219,.L218
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_isPostCalibration',0,1,194,3,9
	.word	.L260
	.byte	1,1,1
	.word	.L111,.L348,.L110
	.byte	4
	.byte	'vadc',0,1,194,3,45
	.word	.L258,.L349
	.byte	4
	.byte	'group',0,1,194,3,67
	.word	.L305,.L350
	.byte	5
	.word	.L111,.L348
	.byte	6
	.byte	'pcEnabled',0,1,196,3,13
	.word	.L260,.L351
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_abbrev'
.L217:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_line'
.L218:
	.word	.L718-.L717
.L717:
	.half	3
	.word	.L720-.L719
.L719:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L720:
	.byte	5,10,7,0,5,2
	.word	.L111
	.byte	3,199,3,1,7,9
	.half	.L721-.L111
	.byte	3,2,1,7,9
	.half	.L722-.L721
	.byte	1,5,56,9
	.half	.L56-.L722
	.byte	3,126,1,5,9,9
	.half	.L723-.L56
	.byte	3,1,1,5,56,9
	.half	.L57-.L723
	.byte	3,1,1,5,64,9
	.half	.L59-.L57
	.byte	1,5,1,3,7,1,5,39,7,9
	.half	.L58-.L59
	.byte	3,123,1,5,1,3,5,1,7,9
	.half	.L220-.L58
	.byte	0,1,1
.L718:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_ranges'
.L219:
	.word	-1,.L111,0,.L220-.L111,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_info'
.L221:
	.word	281
	.half	3
	.word	.L222
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L224,.L223
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_resetKernel',0,1,212,3,6,1,1,1
	.word	.L113,.L352,.L112
	.byte	4
	.byte	'vadc',0,1,212,3,36
	.word	.L258,.L353
	.byte	5
	.word	.L113,.L352
	.byte	6
	.byte	'passwd',0,1,214,3,12
	.word	.L301,.L354
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_abbrev'
.L222:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_line'
.L223:
	.word	.L725-.L724
.L724:
	.half	3
	.word	.L727-.L726
.L726:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L727:
	.byte	5,6,7,0,5,2
	.word	.L113
	.byte	3,211,3,1,5,53,9
	.half	.L504-.L113
	.byte	3,2,1,5,19,9
	.half	.L503-.L504
	.byte	1,5,31,9
	.half	.L506-.L503
	.byte	3,2,1,5,32,9
	.half	.L505-.L506
	.byte	3,1,1,5,18,9
	.half	.L509-.L505
	.byte	3,1,1,5,29,9
	.half	.L728-.L509
	.byte	3,2,1,5,23,9
	.half	.L510-.L728
	.byte	3,126,1,5,18,9
	.half	.L729-.L510
	.byte	3,1,1,5,23,9
	.half	.L730-.L729
	.byte	1,5,29,9
	.half	.L731-.L730
	.byte	3,1,1,5,25,9
	.half	.L62-.L731
	.byte	3,2,1,5,38,9
	.half	.L732-.L62
	.byte	1,5,31,7,9
	.half	.L733-.L732
	.byte	3,4,1,5,20,9
	.half	.L734-.L733
	.byte	3,1,1,5,25,9
	.half	.L735-.L734
	.byte	1,5,33,9
	.half	.L508-.L735
	.byte	3,1,1,5,29,9
	.half	.L512-.L508
	.byte	3,1,1,5,1,9
	.half	.L225-.L512
	.byte	3,1,0,1,1
.L725:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_ranges'
.L224:
	.word	-1,.L113,0,.L225-.L113,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_info'
.L226:
	.word	326
	.half	3
	.word	.L227
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L229,.L228
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_selectPowerSupplyVoltage',0,1,233,3,6,1,1,1
	.word	.L115,.L355,.L114
	.byte	4
	.byte	'vadc',0,1,233,3,49
	.word	.L258,.L356
	.byte	4
	.byte	'supplyVoltage',0,1,233,3,86
	.word	.L357,.L358
	.byte	5
	.word	.L115,.L355
	.byte	6
	.byte	'tempGLOBCFG',0,1,235,3,22
	.word	.L321,.L359
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_abbrev'
.L227:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_line'
.L228:
	.word	.L737-.L736
.L736:
	.half	3
	.word	.L739-.L738
.L738:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L739:
	.byte	5,6,7,0,5,2
	.word	.L115
	.byte	3,232,3,1,5,40,9
	.half	.L517-.L115
	.byte	3,3,1,5,18,9
	.half	.L516-.L517
	.byte	3,1,1,5,25,9
	.half	.L740-.L516
	.byte	1,5,32,9
	.half	.L741-.L740
	.byte	3,2,1,5,25,9
	.half	.L514-.L741
	.byte	3,127,1,5,32,9
	.half	.L742-.L514
	.byte	3,1,1,5,25,9
	.half	.L515-.L742
	.byte	3,1,1,5,33,9
	.half	.L743-.L515
	.byte	3,1,1,5,1,9
	.half	.L230-.L743
	.byte	3,1,0,1,1
.L737:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_ranges'
.L229:
	.word	-1,.L115,0,.L230-.L115,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_info'
.L231:
	.word	430
	.half	3
	.word	.L232
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L234,.L233
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_startupCalibration',0,1,149,4,6,1,1,1
	.word	.L121,.L360,.L120
	.byte	4
	.byte	'vadc',0,1,149,4,43
	.word	.L258,.L361
	.byte	5
	.word	.L121,.L360
	.byte	6
	.byte	'calibrationRunning',0,1,151,4,13
	.word	.L260,.L362
	.byte	6
	.byte	'adcCalGroupNum',0,1,152,4,13
	.word	.L260,.L363
	.byte	7
	.word	.L364,.L365,.L366
	.byte	8
	.word	.L367,.L368
	.byte	9
	.word	.L369,.L365,.L366
	.byte	0,7
	.word	.L370,.L68,.L371
	.byte	8
	.word	.L372,.L373
	.byte	8
	.word	.L374,.L375
	.byte	10
	.word	.L376,.L68,.L371
	.byte	6
	.byte	'status',0,2,154,14,11
	.word	.L260,.L377
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_abbrev'
.L232:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_line'
.L233:
	.word	.L745-.L744
.L744:
	.half	3
	.word	.L747-.L746
.L746:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.h',0,0,0,0,0
.L747:
	.byte	5,6,7,0,5,2
	.word	.L121
	.byte	3,148,4,1,5,32,9
	.half	.L523-.L121
	.byte	3,6,1,4,2,5,20,9
	.half	.L365-.L523
	.byte	3,176,12,1,5,27,9
	.half	.L748-.L365
	.byte	1,4,1,5,33,9
	.half	.L366-.L748
	.byte	3,211,115,1,5,28,9
	.half	.L67-.L366
	.byte	3,6,1,4,2,5,18,3,247,9,1,4,1,5,77,9
	.half	.L525-.L67
	.byte	3,139,118,1,4,2,5,46,9
	.half	.L68-.L525
	.byte	3,245,9,1,4,1,5,93,9
	.half	.L749-.L68
	.byte	3,139,118,1,4,2,5,46,9
	.half	.L750-.L749
	.byte	3,245,9,1,4,1,5,36,9
	.half	.L526-.L750
	.byte	3,143,118,1,5,77,3,124,1,5,41,7,9
	.half	.L371-.L526
	.byte	3,11,1,5,1,7,9
	.half	.L751-.L371
	.byte	3,1,1,7,9
	.half	.L235-.L751
	.byte	0,1,1
.L745:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_ranges'
.L234:
	.word	-1,.L121,0,.L235-.L121,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_info'
.L236:
	.word	544
	.half	3
	.word	.L237
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L239,.L238
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_getChannelConversionTime',0,1,202,1,9
	.word	.L283
	.byte	1,1,1
	.word	.L93,.L378,.L92
	.byte	4
	.byte	'vadc',0,1,202,1,52
	.word	.L258,.L379
	.byte	4
	.byte	'group',0,1,202,1,74
	.word	.L305,.L380
	.byte	4
	.byte	'inputClass',0,1,202,1,102
	.word	.L381,.L382
	.byte	4
	.byte	'analogFrequency',0,1,202,1,122
	.word	.L283,.L383
	.byte	4
	.byte	'moduleFrequency',0,1,202,1,147,1
	.word	.L283,.L384
	.byte	4
	.byte	'conversionMode',0,1,202,1,187,1
	.word	.L385,.L386
	.byte	5
	.word	.L93,.L378
	.byte	6
	.byte	'conversionTime',0,1,204,1,31
	.word	.L283,.L387
	.byte	6
	.byte	'vadcG',0,1,205,1,31
	.word	.L265,.L388
	.byte	6
	.byte	'stc',0,1,206,1,31
	.word	.L278,.L389
	.byte	6
	.byte	'resolution',0,1,207,1,31
	.word	.L390,.L391
	.byte	6
	.byte	'n',0,1,208,1,31
	.word	.L278,.L392
	.byte	6
	.byte	'inputClassNum',0,1,210,1,31
	.word	.L278,.L393
	.byte	7
	.word	.L394
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_abbrev'
.L237:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_line'
.L238:
	.word	.L753-.L752
.L752:
	.half	3
	.word	.L755-.L754
.L754:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L755:
	.byte	5,57,7,0,5,2
	.word	.L93
	.byte	3,204,1,1,5,9,3,125,1,5,56,9
	.half	.L458-.L93
	.byte	3,3,1,5,9,9
	.half	.L756-.L458
	.byte	3,125,1,5,56,9
	.half	.L460-.L756
	.byte	3,3,1,5,46,9
	.half	.L461-.L460
	.byte	3,127,1,5,5,9
	.half	.L463-.L461
	.byte	3,8,1,5,38,7,9
	.half	.L757-.L463
	.byte	3,3,1,5,55,9
	.half	.L462-.L757
	.byte	1,5,82,9
	.half	.L758-.L462
	.byte	3,1,1,5,35,9
	.half	.L464-.L758
	.byte	3,126,1,5,36,9
	.half	.L19-.L464
	.byte	3,6,1,5,41,9
	.half	.L466-.L19
	.byte	3,1,1,5,58,9
	.half	.L465-.L466
	.byte	1,5,85,9
	.half	.L467-.L465
	.byte	3,1,1,5,10,9
	.half	.L759-.L467
	.byte	3,5,1,7,9
	.half	.L760-.L759
	.byte	3,2,1,7,9
	.half	.L761-.L760
	.byte	3,2,1,7,9
	.half	.L762-.L761
	.byte	3,2,1,7,9
	.half	.L763-.L762
	.byte	1,5,49,9
	.half	.L21-.L763
	.byte	3,122,1,5,9,3,1,1,5,49,9
	.half	.L23-.L21
	.byte	3,3,1,5,9,3,1,1,5,49,9
	.half	.L22-.L23
	.byte	3,1,1,5,9,3,1,1,5,49,9
	.half	.L25-.L22
	.byte	3,1,1,5,5,9
	.half	.L26-.L25
	.byte	3,4,1,5,78,7,9
	.half	.L395-.L26
	.byte	3,6,1,5,82,9
	.half	.L459-.L395
	.byte	1,5,9,9
	.half	.L396-.L459
	.byte	3,124,1,5,57,7,9
	.half	.L397-.L396
	.byte	3,3,1,5,48,9
	.half	.L457-.L397
	.byte	3,1,1,5,52,9
	.half	.L469-.L457
	.byte	1,5,42,9
	.half	.L764-.L469
	.byte	1,5,30,9
	.half	.L765-.L764
	.byte	1,5,23,3,127,1,5,44,9
	.half	.L30-.L765
	.byte	3,6,1,5,30,9
	.half	.L468-.L30
	.byte	1,5,53,9
	.half	.L31-.L468
	.byte	1,5,71,9
	.half	.L766-.L31
	.byte	1,5,1,9
	.half	.L29-.L766
	.byte	3,9,1,7,9
	.half	.L240-.L29
	.byte	0,1,1
.L753:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_ranges'
.L239:
	.word	-1,.L93,0,.L240-.L93,0,0
.L394:
	.word	-1,.L93,.L395-.L93,.L396-.L93,.L397-.L93,.L30-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_info'
.L241:
	.word	463
	.half	3
	.word	.L242
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L244,.L243
	.byte	2
	.word	.L122
	.byte	3
	.byte	'IfxVadc_configExternalMultiplexerMode',0,1,35,6,1,1,1
	.word	.L71,.L398,.L70
	.byte	4
	.byte	'vadc',0,1,35,54
	.word	.L258,.L399
	.byte	4
	.byte	'vadcG',0,1,35,72
	.word	.L265,.L400
	.byte	4
	.byte	'mode',0,1,35,111
	.word	.L401,.L402
	.byte	4
	.byte	'channels',0,1,35,123
	.word	.L260,.L403
	.byte	4
	.byte	'startChannel',0,1,35,157,1
	.word	.L404,.L405
	.byte	4
	.byte	'code',0,1,35,196,1
	.word	.L406,.L407
	.byte	4
	.byte	'sampleTimeControl',0,1,35,232,1
	.word	.L408,.L409
	.byte	4
	.byte	'channelSelectionStyle',0,1,35,153,2
	.word	.L410,.L411
	.byte	5
	.word	.L71,.L398
	.byte	6
	.byte	'emuxctr',0,1,37,24
	.word	.L412,.L413
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_abbrev'
.L242:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_line'
.L243:
	.word	.L768-.L767
.L767:
	.half	3
	.word	.L770-.L769
.L769:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L770:
	.byte	5,14,7,0,5,2
	.word	.L71
	.byte	3,38,1,5,6,3,124,1,5,24,9
	.half	.L420-.L71
	.byte	3,4,1,5,6,3,124,1,5,24,9
	.half	.L421-.L420
	.byte	3,5,1,5,32,9
	.half	.L771-.L421
	.byte	3,6,1,5,24,9
	.half	.L416-.L771
	.byte	3,123,1,9
	.half	.L772-.L416
	.byte	3,1,1,9
	.half	.L773-.L772
	.byte	3,1,1,5,14,9
	.half	.L774-.L773
	.byte	3,1,1,5,24,9
	.half	.L417-.L774
	.byte	1,9
	.half	.L775-.L417
	.byte	3,1,1,5,32,9
	.half	.L419-.L775
	.byte	3,1,1,5,33,9
	.half	.L414-.L419
	.byte	3,4,1,5,24,3,125,1,9
	.half	.L776-.L414
	.byte	3,1,1,5,33,3,2,1,5,24,9
	.half	.L423-.L776
	.byte	3,127,1,5,33,9
	.half	.L777-.L423
	.byte	3,1,1,5,1,7,9
	.half	.L245-.L777
	.byte	3,1,0,1,1
.L768:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_ranges'
.L244:
	.word	-1,.L71,0,.L245-.L71,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L246:
	.word	220
	.half	3
	.word	.L247
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L249,.L248
	.byte	2
	.word	.L122
	.byte	3
	.byte	'.cocofun_7',0,1,72,6,1
	.word	.L79,.L250,.L78
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L247:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L248:
	.word	.L779-.L778
.L778:
	.half	3
	.word	.L781-.L780
.L780:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L781:
	.byte	5,37,7,0,5,2
	.word	.L79
	.byte	3,216,0,1,9
	.half	.L250-.L79
	.byte	0,1,1,5,36,0,5,2
	.word	.L79
	.byte	3,251,0,1,5,37,9
	.half	.L435-.L79
	.byte	3,93,1,7,9
	.half	.L250-.L435
	.byte	0,1,1,5,37,0,5,2
	.word	.L79
	.byte	3,253,0,1,9
	.half	.L435-.L79
	.byte	3,91,1,7,9
	.half	.L250-.L435
	.byte	0,1,1,5,33,0,5,2
	.word	.L79
	.byte	3,252,2,1,5,37,9
	.half	.L435-.L79
	.byte	3,220,125,1,7,9
	.half	.L250-.L435
	.byte	0,1,1,5,33,0,5,2
	.word	.L79
	.byte	3,136,3,1,5,37,9
	.half	.L435-.L79
	.byte	3,208,125,1,7,9
	.half	.L250-.L435
	.byte	0,1,1,5,32,0,5,2
	.word	.L79
	.byte	3,216,3,1,5,37,9
	.half	.L435-.L79
	.byte	3,128,125,1,7,9
	.half	.L250-.L435
	.byte	0,1,1,5,33,0,5,2
	.word	.L79
	.byte	3,227,3,1,5,37,9
	.half	.L435-.L79
	.byte	3,245,124,1,7,9
	.half	.L250-.L435
	.byte	0,1,1,5,33,0,5,2
	.word	.L79
	.byte	3,240,3,1,5,37,9
	.half	.L435-.L79
	.byte	3,232,124,1,7,9
	.half	.L250-.L435
	.byte	0,1,1,5,33,0,5,2
	.word	.L79
	.byte	3,157,4,1,5,37,9
	.half	.L435-.L79
	.byte	3,187,124,1,7,9
	.half	.L250-.L435
	.byte	0,1,1
.L779:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L249:
	.word	-1,.L79,0,.L250-.L79,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L251:
	.word	220
	.half	3
	.word	.L252
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L254,.L253
	.byte	2
	.word	.L122
	.byte	3
	.byte	'.cocofun_8',0,1,54,6,1
	.word	.L75,.L255,.L74
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L252:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L253:
	.word	.L783-.L782
.L782:
	.half	3
	.word	.L785-.L784
.L784:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L785:
	.byte	5,59,7,0,5,2
	.word	.L75
	.byte	3,192,0,1,5,23,1,5,30,9
	.half	.L786-.L75
	.byte	1,5,41,9
	.half	.L787-.L786
	.byte	1,9
	.half	.L255-.L787
	.byte	0,1,1,5,60,0,5,2
	.word	.L75
	.byte	3,232,0,1,5,23,1,5,31,9
	.half	.L786-.L75
	.byte	1,5,42,9
	.half	.L787-.L786
	.byte	1,5,41,3,88,1,7,9
	.half	.L255-.L787
	.byte	0,1,1
.L783:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L254:
	.word	-1,.L75,0,.L255-.L75,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L78:
	.word	-1,.L79,0,.L250-.L79
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L74:
	.word	-1,.L75,0,.L255-.L75
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_loc'
.L70:
	.word	-1,.L71,0,.L398-.L71
	.half	2
	.byte	138,0
	.word	0,0
.L411:
	.word	-1,.L71,0,.L398-.L71
	.half	2
	.byte	145,4
	.word	.L415-.L71,.L417-.L71
	.half	1
	.byte	81
	.word	0,0
.L403:
	.word	-1,.L71,0,.L414-.L71
	.half	1
	.byte	85
	.word	0,0
.L407:
	.word	-1,.L71,0,.L414-.L71
	.half	1
	.byte	87
	.word	0,0
.L413:
	.word	-1,.L71,0,.L415-.L71
	.half	1
	.byte	95
	.word	.L422-.L71,.L398-.L71
	.half	1
	.byte	95
	.word	0,0
.L402:
	.word	-1,.L71,0,.L416-.L71
	.half	1
	.byte	84
	.word	0,0
.L409:
	.word	-1,.L71,0,.L398-.L71
	.half	2
	.byte	145,0
	.word	.L418-.L71,.L419-.L71
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L405:
	.word	-1,.L71,0,.L414-.L71
	.half	1
	.byte	86
	.word	0,0
.L399:
	.word	-1,.L71,0,.L414-.L71
	.half	1
	.byte	100
	.word	.L420-.L71,.L398-.L71
	.half	1
	.byte	111
	.word	.L423-.L71,.L398-.L71
	.half	1
	.byte	100
	.word	0,0
.L400:
	.word	-1,.L71,0,.L414-.L71
	.half	1
	.byte	101
	.word	.L421-.L71,.L398-.L71
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_loc'
.L72:
	.word	-1,.L73,0,.L296-.L73
	.half	2
	.byte	138,0
	.word	0,0
.L302:
	.word	-1,.L73,.L424-.L73,.L427-.L73
	.half	1
	.byte	82
	.word	.L428-.L73,.L426-.L73
	.half	1
	.byte	89
	.word	.L75-.L73,.L255-.L73
	.half	1
	.byte	89
	.word	.L3-.L73,.L296-.L73
	.half	1
	.byte	89
	.word	.L429-.L73,.L296-.L73
	.half	1
	.byte	84
	.word	0,0
.L299:
	.word	-1,.L73,0,.L424-.L73
	.half	1
	.byte	84
	.word	.L424-.L73,.L426-.L73
	.half	1
	.byte	88
	.word	.L75-.L73,.L255-.L73
	.half	1
	.byte	88
	.word	.L3-.L73,.L296-.L73
	.half	1
	.byte	88
	.word	0,0
.L297:
	.word	-1,.L73,0,.L424-.L73
	.half	1
	.byte	100
	.word	.L425-.L73,.L426-.L73
	.half	1
	.byte	111
	.word	.L75-.L73,.L255-.L73
	.half	1
	.byte	111
	.word	.L3-.L73,.L296-.L73
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_loc'
.L76:
	.word	-1,.L77,0,.L303-.L77
	.half	2
	.byte	138,0
	.word	0,0
.L307:
	.word	-1,.L77,0,.L309-.L77
	.half	1
	.byte	85
	.word	.L430-.L77,.L431-.L77
	.half	1
	.byte	95
	.word	.L4-.L77,.L5-.L77
	.half	1
	.byte	85
	.word	.L4-.L77,.L433-.L77
	.half	1
	.byte	95
	.word	0,0
.L306:
	.word	-1,.L77,0,.L309-.L77
	.half	1
	.byte	84
	.word	.L4-.L77,.L5-.L77
	.half	1
	.byte	84
	.word	.L79-.L77,.L435-.L77
	.half	1
	.byte	88
	.word	.L436-.L77,.L303-.L77
	.half	1
	.byte	88
	.word	0,0
.L310:
	.word	-1,.L77,.L432-.L77,.L4-.L77
	.half	5
	.byte	144,32,157,32,0
	.word	.L5-.L77,.L434-.L77
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L304:
	.word	-1,.L77,0,.L309-.L77
	.half	1
	.byte	100
	.word	.L4-.L77,.L5-.L77
	.half	1
	.byte	100
	.word	.L79-.L77,.L435-.L77
	.half	1
	.byte	111
	.word	.L436-.L77,.L303-.L77
	.half	1
	.byte	111
	.word	.L437-.L77,.L303-.L77
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_loc'
.L80:
	.word	-1,.L81,0,.L311-.L81
	.half	2
	.byte	138,0
	.word	0,0
.L314:
	.word	-1,.L81,.L438-.L81,.L439-.L81
	.half	1
	.byte	82
	.word	.L75-.L81,.L255-.L81
	.half	1
	.byte	89
	.word	.L440-.L81,.L311-.L81
	.half	1
	.byte	89
	.word	.L442-.L81,.L311-.L81
	.half	1
	.byte	84
	.word	0,0
.L313:
	.word	-1,.L81,0,.L438-.L81
	.half	1
	.byte	84
	.word	.L75-.L81,.L255-.L81
	.half	1
	.byte	88
	.word	.L438-.L81,.L311-.L81
	.half	1
	.byte	88
	.word	0,0
.L312:
	.word	-1,.L81,0,.L438-.L81
	.half	1
	.byte	100
	.word	.L75-.L81,.L255-.L81
	.half	1
	.byte	111
	.word	.L441-.L81,.L311-.L81
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_loc'
.L82:
	.word	-1,.L83,0,.L315-.L83
	.half	2
	.byte	138,0
	.word	0,0
.L317:
	.word	-1,.L83,0,.L443-.L83
	.half	1
	.byte	84
	.word	.L79-.L83,.L250-.L83
	.half	1
	.byte	95
	.word	.L443-.L83,.L446-.L83
	.half	1
	.byte	95
	.word	.L9-.L83,.L451-.L83
	.half	1
	.byte	95
	.word	0,0
.L318:
	.word	-1,.L83,.L443-.L83,.L319-.L83
	.half	1
	.byte	82
	.word	.L79-.L83,.L250-.L83
	.half	1
	.byte	89
	.word	.L447-.L83,.L315-.L83
	.half	1
	.byte	89
	.word	.L452-.L83,.L315-.L83
	.half	1
	.byte	84
	.word	0,0
.L316:
	.word	-1,.L83,0,.L443-.L83
	.half	1
	.byte	100
	.word	.L79-.L83,.L250-.L83
	.half	1
	.byte	111
	.word	.L435-.L83,.L250-.L83
	.half	1
	.byte	100
	.word	.L444-.L83,.L445-.L83
	.half	1
	.byte	100
	.word	.L448-.L83,.L315-.L83
	.half	1
	.byte	111
	.word	.L449-.L83,.L320-.L83
	.half	1
	.byte	100
	.word	0,0
.L322:
	.word	-1,.L83,.L79-.L83,.L250-.L83
	.half	1
	.byte	88
	.word	.L450-.L83,.L315-.L83
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_loc'
.L84:
	.word	-1,.L85,0,.L284-.L85
	.half	2
	.byte	138,0
	.word	0,0
.L285:
	.word	-1,.L85,0,.L453-.L85
	.half	1
	.byte	100
	.word	.L454-.L85,.L284-.L85
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_loc'
.L86:
	.word	-1,.L87,0,.L286-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L287:
	.word	-1,.L87,0,.L455-.L87
	.half	1
	.byte	100
	.word	.L456-.L87,.L286-.L87
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_loc'
.L88:
	.word	-1,.L89,0,.L323-.L89
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_loc'
.L90:
	.word	-1,.L91,0,.L257-.L91
	.half	2
	.byte	138,0
	.word	0,0
.L261:
	.word	0,0
.L259:
	.word	-1,.L91,0,.L257-.L91
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_loc'
.L92:
	.word	-1,.L93,0,.L378-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L383:
	.word	-1,.L93,0,.L457-.L93
	.half	1
	.byte	86
	.word	.L460-.L93,.L378-.L93
	.half	1
	.byte	88
	.word	.L30-.L93,.L31-.L93
	.half	1
	.byte	86
	.word	0,0
.L386:
	.word	-1,.L93,0,.L378-.L93
	.half	2
	.byte	145,0
	.word	.L458-.L93,.L459-.L93
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L387:
	.word	-1,.L93,.L463-.L93,.L457-.L93
	.half	1
	.byte	82
	.word	.L30-.L93,.L31-.L93
	.half	1
	.byte	82
	.word	.L29-.L93,.L378-.L93
	.half	1
	.byte	82
	.word	0,0
.L380:
	.word	-1,.L93,0,.L457-.L93
	.half	1
	.byte	84
	.word	.L30-.L93,.L31-.L93
	.half	1
	.byte	84
	.word	0,0
.L382:
	.word	-1,.L93,0,.L457-.L93
	.half	1
	.byte	85
	.word	.L30-.L93,.L31-.L93
	.half	1
	.byte	85
	.word	0,0
.L393:
	.word	-1,.L93,.L466-.L93,.L467-.L93
	.half	1
	.byte	95
	.word	0,0
.L384:
	.word	-1,.L93,0,.L457-.L93
	.half	1
	.byte	87
	.word	.L30-.L93,.L31-.L93
	.half	1
	.byte	87
	.word	0,0
.L392:
	.word	-1,.L93,.L26-.L93,.L469-.L93
	.half	1
	.byte	89
	.word	.L30-.L93,.L31-.L93
	.half	1
	.byte	89
	.word	0,0
.L391:
	.word	-1,.L93,.L20-.L93,.L31-.L93
	.half	1
	.byte	95
	.word	0,0
.L389:
	.word	-1,.L93,.L464-.L93,.L19-.L93
	.half	1
	.byte	90
	.word	.L20-.L93,.L468-.L93
	.half	1
	.byte	90
	.word	0,0
.L379:
	.word	-1,.L93,0,.L457-.L93
	.half	1
	.byte	100
	.word	.L30-.L93,.L31-.L93
	.half	1
	.byte	100
	.word	0,0
.L388:
	.word	-1,.L93,.L461-.L93,.L462-.L93
	.half	1
	.byte	111
	.word	.L19-.L93,.L465-.L93
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_loc'
.L94:
	.word	-1,.L95,0,.L281-.L95
	.half	2
	.byte	138,0
	.word	0,0
.L282:
	.word	-1,.L95,0,.L281-.L95
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_loc'
.L96:
	.word	-1,.L97,0,.L263-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L268:
	.word	-1,.L97,0,.L263-.L97
	.half	1
	.byte	84
	.word	0,0
.L266:
	.word	-1,.L97,0,.L263-.L97
	.half	1
	.byte	101
	.word	0,0
.L272:
	.word	-1,.L97,.L470-.L97,.L471-.L97
	.half	1
	.byte	95
	.word	.L35-.L97,.L472-.L97
	.half	1
	.byte	95
	.word	.L36-.L97,.L473-.L97
	.half	1
	.byte	95
	.word	0,0
.L270:
	.word	-1,.L97,0,.L263-.L97
	.half	1
	.byte	85
	.word	0,0
.L273:
	.word	-1,.L97,.L474-.L97,.L42-.L97
	.half	1
	.byte	82
	.word	.L475-.L97,.L263-.L97
	.half	1
	.byte	82
	.word	0,0
.L264:
	.word	-1,.L97,0,.L263-.L97
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_loc'
.L98:
	.word	-1,.L99,0,.L274-.L99
	.half	2
	.byte	138,0
	.word	0,0
.L275:
	.word	-1,.L99,0,.L274-.L99
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_loc'
.L100:
	.word	-1,.L101,0,.L325-.L101
	.half	2
	.byte	138,0
	.word	0,0
.L326:
	.word	-1,.L101,0,.L476-.L101
	.half	1
	.byte	84
	.word	0,0
.L328:
	.word	-1,.L101,0,.L477-.L101
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_loc'
.L102:
	.word	-1,.L103,0,.L329-.L103
	.half	2
	.byte	138,0
	.word	0,0
.L331:
	.word	-1,.L103,0,.L478-.L103
	.half	1
	.byte	84
	.word	0,0
.L332:
	.word	-1,.L103,.L79-.L103,.L250-.L103
	.half	1
	.byte	88
	.word	.L480-.L103,.L329-.L103
	.half	1
	.byte	88
	.word	0,0
.L330:
	.word	-1,.L103,0,.L479-.L103
	.half	1
	.byte	100
	.word	.L79-.L103,.L250-.L103
	.half	1
	.byte	111
	.word	.L481-.L103,.L329-.L103
	.half	1
	.byte	111
	.word	.L435-.L103,.L250-.L103
	.half	1
	.byte	100
	.word	.L482-.L103,.L329-.L103
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_loc'
.L104:
	.word	-1,.L105,0,.L333-.L105
	.half	2
	.byte	138,0
	.word	0,0
.L335:
	.word	-1,.L105,0,.L483-.L105
	.half	1
	.byte	84
	.word	0,0
.L336:
	.word	-1,.L105,.L79-.L105,.L250-.L105
	.half	1
	.byte	95
	.word	.L485-.L105,.L333-.L105
	.half	1
	.byte	95
	.word	0,0
.L334:
	.word	-1,.L105,0,.L484-.L105
	.half	1
	.byte	100
	.word	.L79-.L105,.L250-.L105
	.half	1
	.byte	111
	.word	.L486-.L105,.L333-.L105
	.half	1
	.byte	111
	.word	.L435-.L105,.L250-.L105
	.half	1
	.byte	100
	.word	.L487-.L105,.L333-.L105
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_loc'
.L106:
	.word	-1,.L107,0,.L337-.L107
	.half	2
	.byte	138,0
	.word	0,0
.L340:
	.word	-1,.L107,.L492-.L107,.L493-.L107
	.half	1
	.byte	95
	.word	0,0
.L339:
	.word	-1,.L107,0,.L488-.L107
	.half	1
	.byte	84
	.word	.L488-.L107,.L490-.L107
	.half	1
	.byte	95
	.word	0,0
.L341:
	.word	-1,.L107,.L491-.L107,.L337-.L107
	.half	1
	.byte	88
	.word	0,0
.L338:
	.word	-1,.L107,0,.L488-.L107
	.half	1
	.byte	100
	.word	.L489-.L107,.L337-.L107
	.half	1
	.byte	111
	.word	.L492-.L107,.L494-.L107
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_loc'
.L108:
	.word	-1,.L109,0,.L342-.L109
	.half	2
	.byte	138,0
	.word	0,0
.L345:
	.word	-1,.L109,.L500-.L109,.L54-.L109
	.half	1
	.byte	84
	.word	0,0
.L344:
	.word	-1,.L109,0,.L495-.L109
	.half	1
	.byte	84
	.word	.L495-.L109,.L497-.L109
	.half	1
	.byte	95
	.word	0,0
.L347:
	.word	-1,.L109,.L498-.L109,.L499-.L109
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L346:
	.word	-1,.L109,.L501-.L109,.L342-.L109
	.half	1
	.byte	88
	.word	0,0
.L343:
	.word	-1,.L109,0,.L495-.L109
	.half	1
	.byte	100
	.word	.L496-.L109,.L342-.L109
	.half	1
	.byte	111
	.word	.L502-.L109,.L54-.L109
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_loc'
.L110:
	.word	-1,.L111,0,.L348-.L111
	.half	2
	.byte	138,0
	.word	0,0
.L350:
	.word	-1,.L111,0,.L348-.L111
	.half	1
	.byte	84
	.word	0,0
.L351:
	.word	0,0
.L349:
	.word	-1,.L111,0,.L348-.L111
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_loc'
.L112:
	.word	-1,.L113,0,.L352-.L113
	.half	2
	.byte	138,0
	.word	0,0
.L354:
	.word	-1,.L113,.L503-.L113,.L505-.L113
	.half	1
	.byte	82
	.word	.L506-.L113,.L505-.L113
	.half	1
	.byte	88
	.word	.L79-.L113,.L250-.L113
	.half	1
	.byte	88
	.word	.L507-.L113,.L508-.L113
	.half	1
	.byte	88
	.word	.L510-.L113,.L62-.L113
	.half	1
	.byte	84
	.word	.L511-.L113,.L352-.L113
	.half	1
	.byte	88
	.word	.L513-.L113,.L352-.L113
	.half	1
	.byte	84
	.word	0,0
.L353:
	.word	-1,.L113,0,.L503-.L113
	.half	1
	.byte	100
	.word	.L504-.L113,.L505-.L113
	.half	1
	.byte	111
	.word	.L79-.L113,.L250-.L113
	.half	1
	.byte	111
	.word	.L507-.L113,.L508-.L113
	.half	1
	.byte	111
	.word	.L435-.L113,.L250-.L113
	.half	1
	.byte	100
	.word	.L507-.L113,.L509-.L113
	.half	1
	.byte	100
	.word	.L511-.L113,.L352-.L113
	.half	1
	.byte	111
	.word	.L511-.L113,.L512-.L113
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_loc'
.L114:
	.word	-1,.L115,0,.L355-.L115
	.half	2
	.byte	138,0
	.word	0,0
.L358:
	.word	-1,.L115,0,.L514-.L115
	.half	1
	.byte	84
	.word	0,0
.L359:
	.word	-1,.L115,.L79-.L115,.L250-.L115
	.half	1
	.byte	88
	.word	.L516-.L115,.L355-.L115
	.half	1
	.byte	88
	.word	0,0
.L356:
	.word	-1,.L115,0,.L515-.L115
	.half	1
	.byte	100
	.word	.L79-.L115,.L250-.L115
	.half	1
	.byte	111
	.word	.L517-.L115,.L355-.L115
	.half	1
	.byte	111
	.word	.L435-.L115,.L250-.L115
	.half	1
	.byte	100
	.word	.L518-.L115,.L355-.L115
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_loc'
.L116:
	.word	-1,.L117,0,.L288-.L117
	.half	2
	.byte	138,0
	.word	0,0
.L294:
	.word	-1,.L117,0,.L288-.L117
	.half	1
	.byte	86
	.word	0,0
.L292:
	.word	-1,.L117,0,.L519-.L117
	.half	1
	.byte	85
	.word	.L63-.L117,.L66-.L117
	.half	1
	.byte	85
	.word	0,0
.L295:
	.word	-1,.L117,0,.L520-.L117
	.half	1
	.byte	87
	.word	.L63-.L117,.L66-.L117
	.half	1
	.byte	87
	.word	0,0
.L290:
	.word	-1,.L117,0,.L521-.L117
	.half	1
	.byte	84
	.word	.L63-.L117,.L66-.L117
	.half	1
	.byte	84
	.word	0,0
.L289:
	.word	-1,.L117,0,.L288-.L117
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_loc'
.L118:
	.word	-1,.L119,0,.L276-.L119
	.half	2
	.byte	138,0
	.word	0,0
.L279:
	.word	-1,.L119,0,.L522-.L119
	.half	1
	.byte	84
	.word	0,0
.L277:
	.word	-1,.L119,0,.L276-.L119
	.half	1
	.byte	100
	.word	0,0
.L280:
	.word	-1,.L119,0,.L276-.L119
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_loc'
.L120:
	.word	-1,.L121,0,.L360-.L121
	.half	2
	.byte	138,0
	.word	0,0
.L363:
	.word	0,0
.L375:
	.word	0,0
.L362:
	.word	-1,.L121,.L525-.L121,.L360-.L121
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L377:
	.word	-1,.L121,.L526-.L121,.L360-.L121
	.half	1
	.byte	95
	.word	0,0
.L361:
	.word	-1,.L121,0,.L365-.L121
	.half	1
	.byte	100
	.word	.L523-.L121,.L366-.L121
	.half	1
	.byte	111
	.word	.L79-.L121,.L250-.L121
	.half	1
	.byte	111
	.word	.L524-.L121,.L360-.L121
	.half	1
	.byte	111
	.word	.L435-.L121,.L250-.L121
	.half	1
	.byte	100
	.word	.L524-.L121,.L67-.L121
	.half	1
	.byte	100
	.word	0,0
.L373:
	.word	0,0
.L368:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L788:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L71,.L398-.L71
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L73,.L296-.L73
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L77,.L303-.L77
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L81,.L311-.L81
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L83,.L315-.L83
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L85,.L284-.L85
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L87,.L286-.L87
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L89,.L323-.L89
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_frame'
	.word	20
	.word	.L788,.L91,.L257-.L91
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L93,.L378-.L93
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L788,.L95,.L281-.L95
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_frame'
	.word	20
	.word	.L788,.L97,.L263-.L97
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L788,.L99,.L274-.L99
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L788,.L101,.L325-.L101
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L103,.L329-.L103
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L105,.L333-.L105
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L107,.L337-.L107
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L109,.L342-.L109
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_frame'
	.word	24
	.word	.L788,.L111,.L348-.L111
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L113,.L352-.L113
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L115,.L355-.L115
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_frame'
	.word	24
	.word	.L788,.L117,.L288-.L117
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_frame'
	.word	24
	.word	.L788,.L119,.L276-.L119
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_frame'
	.word	12
	.word	.L788,.L121,.L360-.L121
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L789:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L789,.L75,.L255-.L75
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L789,.L79,.L250-.L79
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
