	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 07918494"
	.compiler_invocation	"ctc -f cc12164a --dep-file=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\.IfxCpu.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc23x -D__CPU_TC23X__ --core=tc1.6.x --fp-model=+float -DNDEBUG -D__SWPLATFORM__ -DIFX_CFG_USE_COMPILER_DEFAULT_LINKER -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05 -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\APP\\inc -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Configuration -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Scu/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Stm/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x/_Reg -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/SrvSw -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -g2 --no-warnings=542 --make-target=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.src ..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c"
	.compiler_name		"ctc"
	;source	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c'

	
$TC16X
	.sdecl	'.zrodata.IfxCpu..4.cnt',data,rom
	.sect	'.zrodata.IfxCpu..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268214060
	.sdecl	'.zrodata.IfxCpu..5.cnt',data,rom
	.sect	'.zrodata.IfxCpu..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	279470273
	
	.sdecl	'.text.IfxCpu.IfxCpu_acquireMutex',code,cluster('IfxCpu_acquireMutex')
	.sect	'.text.IfxCpu.IfxCpu_acquireMutex'
	.align	2
	
	.global	IfxCpu_acquireMutex

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	     2   * \file IfxCpu.c
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	     3   * \brief CPU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	     4   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	     5   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	     7   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	     9   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    10   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    15   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    16   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    22   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    24   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    25  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    26  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    27  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    28  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    29  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    30  #include "IfxCpu.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    31  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    32  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    33  /*-------------------------Function Implementations---------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    34  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    35  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    36  boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock)
; Function IfxCpu_acquireMutex
.L45:
IfxCpu_acquireMutex:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    37  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    38      boolean         retVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    39      volatile uint32 spinLockVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    40  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    41      retVal      = FALSE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    42  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    43      spinLockVal = 1UL;
	mov	d15,#1
	sub.a	a10,#8
.L222:
	st.w	[a10],d15
.L319:
	mov	d2,#0
.L223:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    44      spinLockVal =
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    45          (uint32)__cmpAndSwap(((unsigned int *)lock), spinLockVal, 0);
	ld.w	d0,[a10]
	mov	d1,d2
	cmpswap.w	[a4]0,e0
.L320:
	st.w	[a10],d0
.L321:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    46  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    47      /* Check if the SpinLock WAS set before the attempt to acquire spinlock */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    48      if (spinLockVal == 0)
	ld.w	d15,[a10]
.L322:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    49      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    50          retVal = TRUE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    51      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    52  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    53      return retVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    54  }
	cmovn	d2,d15,#1
	ret
.L188:
	
__IfxCpu_acquireMutex_function_end:
	.size	IfxCpu_acquireMutex,__IfxCpu_acquireMutex_function_end-IfxCpu_acquireMutex
.L106:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getAddress',code,cluster('IfxCpu_getAddress')
	.sect	'.text.IfxCpu.IfxCpu_getAddress'
	.align	2
	
	.global	IfxCpu_getAddress

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    55  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    56  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    57  Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; Function IfxCpu_getAddress
.L47:
IfxCpu_getAddress:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    58  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    59      Ifx_CPU *module;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    60  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    61      if (cpu < IfxCpu_ResourceCpu_none)
	jne	d4,#0,.L4
.L275:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    62      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    63          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
	ld.a	a2,IfxCpu_cfg_indexMap
.L224:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    64      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    65      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    66      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    67          module = NULL_PTR;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    68      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    69  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    70      return module;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    71  }
	ret
.L4:
	mov.a	a2,#0
.L225:
	ret
.L133:
	
__IfxCpu_getAddress_function_end:
	.size	IfxCpu_getAddress,__IfxCpu_getAddress_function_end-IfxCpu_getAddress
.L76:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getCoreMode',code,cluster('IfxCpu_getCoreMode')
	.sect	'.text.IfxCpu.IfxCpu_getCoreMode'
	.align	2
	
	.global	IfxCpu_getCoreMode

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    72  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    73  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    74  IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu)
; Function IfxCpu_getCoreMode
.L49:
IfxCpu_getCoreMode:	.type	func
	mov.aa	a15,a4
.L227:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    75  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    76      IfxCpu_CoreMode    cpuMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    77      Ifx_CPU_DBGSR      dbgsr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    78      IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
	call	IfxCpu_getIndex
.L226:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    79  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    80      cpuMode = IfxCpu_CoreMode_unknown;
	mov	d0,#5
.L145:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L229:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L146:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    81  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    82      /*get the DBGSR.HALT status */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    83      /*Check if the request is done for same cpu as the host for this call */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    84      if (IfxCpu_getCoreIndex() != index)
	jeq	d15,d2,.L7
.L280:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    85      {                           /*status request is for other cpu than the host */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    86          dbgsr = cpu->DBGSR;
	movh.a	a3,#1
	add.a	a3,a15
	ld.w	d15,[a3]-768
.L230:
	j	.L8
.L7:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    87      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    88      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    89      {                           /*status request is for same cpu as the host */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    90          dbgsr.U = __mfcr(CPU_DBGSR);
	mfcr	d15,#64768
.L8:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    91      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    92  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    93      /*Check if the requested CPU is in DBG HALT mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    94      if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
	extr.u	d15,d15,#1,#2
.L231:
	jne	d15,#1,.L9
.L281:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    95      {                           /*CPU is in DBG HALT mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    96          cpuMode = IfxCpu_CoreMode_halt;
	mov	d0,#0
	j	.L10
.L9:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    97      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    98      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	    99      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   100          if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
	jne	d15,#0,.L11
.L150:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   101          {                       /*CPU is in DBG RUNNING mode now check PMCSR status */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   102              Ifx_SCU_PMCSR *pmcsr_val;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   103  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   104              pmcsr_val = (Ifx_SCU_PMCSR *)&MODULE_SCU.PMCSR[index];
	ld.w	d15,.4.cnt
	mov.a	a15,d15
.L228:
	addsc.a	a15,a15,d2,#2
.L232:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   105  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   106              if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
	ld.bu	d15,[a15]1
	and	d15,#7
.L282:
	jne	d15,#1,.L12
.L283:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   107              {                   /*Cpu is in normal run mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   108                  cpuMode = IfxCpu_CoreMode_run;
	mov	d0,#1
	j	.L13
.L12:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   109              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   110              else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   111              {                   /*Cpu is not in run mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   112                  if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
	jne	d15,#3,.L14
.L284:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   113                  {               /*Cpu is in idle mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   114                      cpuMode = IfxCpu_CoreMode_idle;
	mov	d0,#2
.L11:
.L14:
.L13:
.L10:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   115                  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   116              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   117          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   118          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   119          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   120              cpuMode = IfxCpu_CoreMode_unknown;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   121          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   122      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   124      return cpuMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   125  }
	mov	d2,d0
	ret
.L138:
	
__IfxCpu_getCoreMode_function_end:
	.size	IfxCpu_getCoreMode,__IfxCpu_getCoreMode_function_end-IfxCpu_getCoreMode
.L81:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getIndex',code,cluster('IfxCpu_getIndex')
	.sect	'.text.IfxCpu.IfxCpu_getIndex'
	.align	2
	
	.global	IfxCpu_getIndex

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   126  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   127  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   128  IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
; Function IfxCpu_getIndex
.L51:
IfxCpu_getIndex:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   129  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   130      IfxCpu_ResourceCpu result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   131      uint32             index;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   132      result = IfxCpu_ResourceCpu_none;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   133  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   134      for (index = 0; index < IFXCPU_NUM_MODULES; index++)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   135      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   136          if (IfxCpu_cfg_indexMap[index].module == cpu)
	ld.a	a15,IfxCpu_cfg_indexMap
.L289:
	mov	d2,#1
.L233:
	jne.a	a15,a4,.L17
.L290:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   137          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   138              result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
	ld.w	d15,IfxCpu_cfg_indexMap+4
.L291:
	extr.u	d2,d15,#0,#8
.L17:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   139              break;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   140          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   141      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   142  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   143      return result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   144  }
	ret
.L153:
	
__IfxCpu_getIndex_function_end:
	.size	IfxCpu_getIndex,__IfxCpu_getIndex_function_end-IfxCpu_getIndex
.L86:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getRandomValue',code,cluster('IfxCpu_getRandomValue')
	.sect	'.text.IfxCpu.IfxCpu_getRandomValue'
	.align	2
	
	.global	IfxCpu_getRandomValue

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   145  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   146  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   147  uint32 IfxCpu_getRandomValue(uint32 *seed)
; Function IfxCpu_getRandomValue
.L53:
IfxCpu_getRandomValue:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   148  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   149      /*************************************************************************
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   150       * the choice of a and m is important for a long period of the LCG
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   151       * with a =  279470273 and
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   152       *       m = 4294967291
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   153       * a maximum period of 2^32-5 is given
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   154       * values for a:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   155       * 0x5EB0A82F = 1588635695
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   156       * 0x48E7211F = 1223106847
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   157       * 0x10a860c1 =  279470273
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   158       ***************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   159      uint32 x = *seed;
	ld.w	d0,[a4]
.L210:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   160  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   161      /* a seed of 0 is not allowed, and therefore will be changed to a valid value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   162      if (x == 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   163      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   164          x = 42;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   165      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   166  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   167      uint32 a = 0x10a860c1;  // 279470273
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   168      uint32 m = 0xfffffffb;  // 4294967291
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   169      uint32 result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   170  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   171      //__asm(a,m,x,tmp1,tmp2              );
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   172      //EhEl = a * x;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   173      //result = e14 %  m;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   174      // %0 result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   175      // %1 a
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   176      // %2 x
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   177      // %3 m
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   178  /* *INDENT-OFF* */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   179  #ifdef __GNUC__
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   180       __asm("      mul.u     %%e14,%1,%2       # d15 = Eh; d14 = El    \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   181           "        mov       %%d12,%%d14       #   e12 = El            \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   182           "        mov       %%d13, 0          #                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   183           "        madd.u    %%e14,%%e12,%%d15, 5 # e14 = El + 5 * d15    \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   184           " cmp_m: jge.u     %%d14,%3,sub_m    #                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   185           "        jz        %%d15,done        #                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   186           " sub_m: subx      %%d14,%%d14,%3    #  e12=e12-m            \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   187           "        subc      %%d15,%%d15,%%d13 # d13=d13-0             \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   188           "        loopu     cmp_m             #                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   189           " done:  mov       %0,%%d14          #                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   190           : "=d"(result) : "d"(a), "d"(x), "d"(m) : "d12","d13","d14","d15");
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   191  #elif __TASKING__
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   192       __asm("      mul.u     e14,%1,%2      ; d15 = Eh; d14 = El    \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   193           "        mov       d12,d14        ;   e12 = El            \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   194           "        mov       d13,#0         ;                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   195           "        madd.u    e14,e12,d15,#5 ; e14 = El + 5 * d15    \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   196           " cmp_m: jge.u     d14,%3,sub_m   ;                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   197           "        jz        d15,done       ;                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   198           " sub_m: subx      d14,d14,%3     ;  e12=e12-m            \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   199           "        subc      d15,d15,d13    ; d13=d13-0             \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   200           "        loopu     cmp_m          ;                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   201           " done:  mov       %0,d14         ;                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   202           : "=d"(result) : "d"(a), "d"(x), "d"(m) : "e14","e12");
	mov	d2,#-5
	ld.w	d1,.5.cnt
.L211:
	sel	d0,d0,d0,#42
.L212:
	
	      mul.u     e14,d1,d0      ; d15 = Eh; d14 = El    
        mov       d12,d14        ;   e12 = El            
        mov       d13,#0         ;                       
        madd.u    e14,e12,d15,#5 ; e14 = El + 5 * d15    
 cmp_m: jge.u     d14,d2,sub_m   ;                       
        jz        d15,done       ;                       
 sub_m: subx      d14,d14,d2     ;  e12=e12-m            
        subc      d15,d15,d13    ; d13=d13-0             
        loopu     cmp_m          ;                       
 done:  mov       d2,d14         ;                       

.L234:
	
.L346:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   203  #else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   204       asm("        mul.u     %%e14,%1,%2       # d15 = Eh; d14 = El    \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   205           "        mov       %%d12,%%d14       #   e12 = El            \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   206           "        mov       %%d13, 0          #                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   207           "        madd.u    %%e14,%%e12,%%d15, 5 # e14 = El + 5 * d15 \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   208           " .cmp_m:                                                      \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   209           "        jge.u     %%d14,%3,.sub_m                             \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   210           "        jz        %%d15,.done        #                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   211           " .sub_m:  \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   212           "        subx      %%d14,%%d14,%3    #  e12=e12-m            \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   213           "        subc      %%d15,%%d15,%%d13 # d13=d13-0             \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   214           "        loopu     .cmp_m             #                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   215           " .done:  \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   216           "        mov       %0,%%d14          #                       \n"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   217           : "=r"(result) : "r"(a), "r"(x), "r"(m));
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   218  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   219  /* *INDENT-ON* */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   220      * seed = result; // to simplify seed passing
	st.w	[a4],d2
.L347:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   221  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   222      return result;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   223  }
	ret
.L205:
	
__IfxCpu_getRandomValue_function_end:
	.size	IfxCpu_getRandomValue,__IfxCpu_getRandomValue_function_end-IfxCpu_getRandomValue
.L126:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getRandomValueWithinRange',code,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.text.IfxCpu.IfxCpu_getRandomValueWithinRange'
	.align	2
	
	.global	IfxCpu_getRandomValueWithinRange

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   224  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   226  uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max)
; Function IfxCpu_getRandomValueWithinRange
.L55:
IfxCpu_getRandomValueWithinRange:	.type	func
	mov	d8,d4
.L236:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   227  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   228      uint32 new_value = IfxCpu_getRandomValue(seed);
	mov	d15,d5
	call	IfxCpu_getRandomValue
.L235:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   229  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   230      /* swap min/max if required */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   231      if (min > max)
	jge.u	d15,d8,.L21
.L219:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   232      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   233          unsigned swap = max;
	mov	d0,d15
.L238:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   234          max = min;
	mov	d15,d8
.L352:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   235          min = swap;
	mov	d8,d0
.L21:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   236      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   237  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   238      /* special case */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   239      if ((min == 0) && (max == 0xffffffff))
	jne	d8,#0,.L22
.L353:
	jeq	d15,#-1,.L24
.L22:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   240      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   241          return new_value;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   242      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   243  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   244      /* return value within range */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   245      return (new_value % (max - min + 1)) + min;
	sub	d15,d8
.L237:
	add	d15,#1
.L354:
	div.u	e0,d2,d15
.L355:
	add	d2,d1,d8

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   246  }
.L24:
	ret
.L214:
	
__IfxCpu_getRandomValueWithinRange_function_end:
	.size	IfxCpu_getRandomValueWithinRange,__IfxCpu_getRandomValueWithinRange_function_end-IfxCpu_getRandomValueWithinRange
.L131:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_releaseMutex',code,cluster('IfxCpu_releaseMutex')
	.sect	'.text.IfxCpu.IfxCpu_releaseMutex'
	.align	2
	
	.global	IfxCpu_releaseMutex

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   247  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   248  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   249  void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock)
; Function IfxCpu_releaseMutex
.L57:
IfxCpu_releaseMutex:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   250  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   251      /*Reset the SpinLock*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   252      *lock = 0;
	mov	d15,#0
	st.w	[a4],d15
.L327:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   253  }
	ret
.L194:
	
__IfxCpu_releaseMutex_function_end:
	.size	IfxCpu_releaseMutex,__IfxCpu_releaseMutex_function_end-IfxCpu_releaseMutex
.L111:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_resetSpinLock',code,cluster('IfxCpu_resetSpinLock')
	.sect	'.text.IfxCpu.IfxCpu_resetSpinLock'
	.align	2
	
	.global	IfxCpu_resetSpinLock

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   254  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   255  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   256  void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock)
; Function IfxCpu_resetSpinLock
.L59:
IfxCpu_resetSpinLock:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   257  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   258      /*Reset the SpinLock*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   259      *lock = 0;
	mov	d15,#0
	st.w	[a4],d15
.L332:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   260  }
	ret
.L196:
	
__IfxCpu_resetSpinLock_function_end:
	.size	IfxCpu_resetSpinLock,__IfxCpu_resetSpinLock_function_end-IfxCpu_resetSpinLock
.L116:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_setCoreMode',code,cluster('IfxCpu_setCoreMode')
	.sect	'.text.IfxCpu.IfxCpu_setCoreMode'
	.align	2
	
	.global	IfxCpu_setCoreMode

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   261  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   262  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   263  boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
; Function IfxCpu_setCoreMode
.L61:
IfxCpu_setCoreMode:	.type	func
	mov.aa	a15,a4
.L240:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   264  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   265      // this switch is only temporary required
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   266      // once the IfxCan driver is generated via lldgen, we will vary the code without #ifdef
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   267  #ifdef IFX_TC27x
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   268  /* FIXME Copied from old TC27xA code, check that this is up to date code */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   269      IfxCpu_CoreMode     cpuMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   270      boolean             RetVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   271      IfxScu_PMCSR_REQSLP modeSet;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   272  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   273      RetVal  = TRUE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   274  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   275      modeSet = IfxScu_PMCSR_REQSLP_Idle;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   276  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   277      /* Check the mode the CPU is in */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   278      cpuMode = IfxCpu_getCoreMode(cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   279  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   280      /* if requested mode is same as current mode nothing to do */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   281      if (cpuMode != mode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   282      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   283          /* transition from halt to Run */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   284          if (IfxCpu_CoreMode_halt == cpuMode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   285          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   286              if (IfxCpu_CoreMode_run == mode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   287              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   288                  Ifx_CPU_DBGSR dbgsr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   289  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   290                  if (IfxCpu_getCoreIndex() != IfxCpu_getIndex(cpu))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   291                  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   292                      cpu->DBGSR.B.HALT = 0x2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   293                  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   294                  else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   295                  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   296                      dbgsr.U      = __mfcr(CPU_DBGSR);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   297                      dbgsr.B.HALT = 0x2;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   298                      __mtcr(CPU_DBGSR, dbgsr.U);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   299                  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   300              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   301              else                /* cannot go to any other mode e.g. IfxCpu_CoreMode_idle */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   302              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   303                  RetVal = FALSE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   304              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   305          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   306          /* From Run to Idle or vice versa */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   307          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   308          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   309              if (IfxCpu_CoreMode_run == cpuMode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   310              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   311                  if (IfxCpu_CoreMode_idle == mode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   312                  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   313                      modeSet = IfxScu_PMCSR_REQSLP_Idle;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   314                  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   315                  else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   316                  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   317                      RetVal = FALSE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   318                  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   319              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   320              /* idle to Run */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   321              else if (IfxCpu_CoreMode_idle == cpuMode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   322              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   323                  if (IfxCpu_CoreMode_run == mode)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   324                  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   325                      modeSet = IfxScu_PMCSR_REQSLP_Run;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   326                  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   327                  else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   328                  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   329                      RetVal = FALSE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   330                  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   331              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   332              else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   333              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   334                  RetVal = FALSE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   335              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   336  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   337              if (TRUE == RetVal)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   338              {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   339                  /* To take care of the Work Around in A step
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   340                   * In A Step the PMCSR is Cpu Endinit protected
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   341                   * in B step it is by safety endinit*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   342                  uint16          password;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   343                  uint32          wdtCon0_Val;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   344                  Ifx_SCU_WDTCPU *watchdog;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   345                  watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];    /* FIXME access to the watchdog of an other CPU, this might not work! */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   346                  password = IfxScuWdt_getCpuWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   347                  IfxScuWdt_clearCpuEndinit(password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   348                  /*  password access   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   349                  watchdog->CON0.U                                        = (password << 2U) | 0x1U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   350                  /* modify access, E=0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   351                  watchdog->CON0.U                                        = (password << 2U) | 0x2U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   352                  /* password access in advance */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   353                  watchdog->CON0.U                                        = (password << 2U) | 0x1U;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   354                  /* prepare write value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   355                  wdtCon0_Val                                             = ((0x0000U) << 16U) | (password << 2U) | (0x3U);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   356                  MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = modeSet;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   357                  /* modify access, E=1, reload WDT */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   358                  watchdog->CON0.U                                        = wdtCon0_Val;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   359                  IfxScuWdt_setCpuEndinit(password);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   360              }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   361          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   362      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   363  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   364      return RetVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   365  #else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   366      uint8              reqslp;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   367      boolean            retValue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   368      IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
	mov	d15,d4
	call	IfxCpu_getIndex
.L239:
	mov	d8,d2
.L243:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   369  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   370      /*Modes such as HALT, SLEEP and STBY are not handled at CPU level */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   371      retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
	jeq	d15,#0,.L26
.L296:
	jeq	d15,#3,.L27
.L297:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   372                  || (mode == IfxCpu_CoreMode_stby)) ? FALSE : TRUE;
	jne	d15,#4,.L28
.L27:
.L26:
	mov	d9,#0
	j	.L29
.L28:
	mov	d9,#1
.L29:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   373  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   374      reqslp = (mode == IfxCpu_CoreMode_idle) ? IfxScu_PMCSR_REQSLP_Idle : IfxScu_PMCSR_REQSLP_Run;
	eq	d10,d15,#2
.L245:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   375  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   376      if (retValue == TRUE)
	jeq	d9,#0,.L30
.L163:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L164:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   377      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   378          /*Check if the same core is requesting to change the core run mode */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   379          if (IfxCpu_getCoreIndex() != index)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   380          {                       /*Request is for the other core */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   381              /*To access PMCSR of other CPUs handle the safety EndInit protection */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   382              uint16 safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   383              IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   384              MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = reqslp;
	ld.w	d0,.4.cnt
.L166:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L167:
	mov.a	a12,d0
.L170:
	jeq	d15,d8,.L31
.L171:
	call	IfxScuWdt_getSafetyWatchdogPassword
.L242:
	mov	d8,d2
.L244:
	mov	d4,d8
	call	IfxScuWdt_clearSafetyEndinit
.L246:
	mov.aa	a4,a15
.L247:
	call	IfxCpu_getIndex
.L248:
	addsc.a	a2,a12,d2,#2
.L298:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   385              IfxScuWdt_setSafetyEndinit(safetyWdtPw);
	mov	d4,d8
.L249:
	ld.bu	d0,[a2]
	insert	d15,d0,d10,#0,#2
	st.b	[a2],d15
.L299:
	call	IfxScuWdt_setSafetyEndinit
.L250:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   386  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   387              cpu->DBGSR.B.HALT = 2; /*reset the HALT bit, if it is already done it is no harm in writing again */
	movh.a	a3,#1
	add.a	a3,a15
.L300:
	ld.w	d15,[a3]-768
.L301:
	insert	d15,d15,#2,#1,#2
	st.w	[a3]-768,d15
.L172:
	j	.L32
.L31:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   388          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   389          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   390          {                          /*Request is for self, this request normally only for halt, otherwise the core is already running anyway! */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   391              /*To access PMCSR of self handle the cpu EndInit protection */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   392              uint16 cpuWdtPw = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L251:
	mov	d15,d2
.L253:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   393              IfxScuWdt_clearCpuEndinit(cpuWdtPw);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L252:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   394              MODULE_SCU.PMCSR[(uint32)index].B.REQSLP = reqslp;
	addsc.a	a15,a12,d8,#2
.L241:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   395              IfxScuWdt_setCpuEndinit(cpuWdtPw);
	mov	d4,d15
.L254:
	ld.bu	d0,[a15]
.L302:
	insert	d0,d0,d10,#0,#2
	st.b	[a15],d0
.L303:
	call	IfxScuWdt_setCpuEndinit
.L32:
.L30:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   396          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   397      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   398  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   399      return retValue;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   400  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   401  }
	mov	d2,d9
	ret
.L157:
	
__IfxCpu_setCoreMode_function_end:
	.size	IfxCpu_setCoreMode,__IfxCpu_setCoreMode_function_end-IfxCpu_setCoreMode
.L91:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_setProgramCounter',code,cluster('IfxCpu_setProgramCounter')
	.sect	'.text.IfxCpu.IfxCpu_setProgramCounter'
	.align	2
	
	.global	IfxCpu_setProgramCounter

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   402  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   403  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   404  boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
; Function IfxCpu_setProgramCounter
.L63:
IfxCpu_setProgramCounter:	.type	func
	mov.aa	a15,a4
.L255:
	mov	d8,d4
.L256:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   405  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   406      boolean retVal = TRUE;
	mov	d9,#1
.L181:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   679  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   680  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   681  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   682  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   683  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   684      Ifx_CPU_CORE_ID reg;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   685      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L258:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   686      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d4,d15,#7

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   407  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   408      if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
	call	IfxCpu_getAddress
.L182:
	jne.a	a15,a2,.L34
.L308:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   409      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   410          retVal = FALSE;
	mov	d9,#0
	j	.L35
.L34:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   411      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   412      else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   413      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   414          cpu->PC.B.PC = programCounter >> 1;
	movh.a	a3,#1
	add.a	a3,a15
.L309:
	sh	d8,#-1
	ld.w	d15,[+a3]-504
.L257:
	movh.a	a3,#1
	insert	d15,d15,d8,#1,#31
	add.a	a3,a15
	st.w	[+a3]-504,d15
.L35:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   415      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   416  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   417      return retVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   418  }
	mov	d2,d9
	ret
.L176:
	
__IfxCpu_setProgramCounter_function_end:
	.size	IfxCpu_setProgramCounter,__IfxCpu_setProgramCounter_function_end-IfxCpu_setProgramCounter
.L96:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_setSpinLock',code,cluster('IfxCpu_setSpinLock')
	.sect	'.text.IfxCpu.IfxCpu_setSpinLock'
	.align	2
	
	.global	IfxCpu_setSpinLock

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   419  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   420  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   421  boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount)
; Function IfxCpu_setSpinLock
.L65:
IfxCpu_setSpinLock:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   422  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   423      boolean         retVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   424      volatile uint32 spinLockVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   425  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   426      retVal = FALSE;
	mov	d2,#0
	sub.a	a10,#8
.L259:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   427  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   428      do
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   429      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   430          spinLockVal = 1UL;
	mov	d0,#1

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   431          spinLockVal =
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   432              (uint32)__cmpAndSwap(((unsigned int *)lock), spinLockVal, 0);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   433  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   434          /* Check if the SpinLock WAS set before the attempt to acquire spinlock */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   435          if (spinLockVal == 0)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   436          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   437              retVal = TRUE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   438          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   439          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   440          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   441              timeoutCount--;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   442          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   443      } while ((retVal == FALSE) && (timeoutCount > 0));
.L37:
	st.w	[a10],d0
.L337:
	mov	d7,#0
	ld.w	d6,[a10]
	cmpswap.w	[a4]0,e6
.L338:
	st.w	[a10],d6
.L339:
	ld.w	d15,[a10]
.L340:
	jne	d15,#0,.L38
.L341:
	mov	d2,d0
	j	.L39
.L38:
	add	d4,#-1
.L39:
	jne	d2,#0,.L40
.L260:
	jne	d4,#0,.L37
.L40:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   444  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   445      return retVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   446  }
	ret
.L199:
	
__IfxCpu_setSpinLock_function_end:
	.size	IfxCpu_setSpinLock,__IfxCpu_setSpinLock_function_end-IfxCpu_setSpinLock
.L121:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_startCore',code,cluster('IfxCpu_startCore')
	.sect	'.text.IfxCpu.IfxCpu_startCore'
	.align	2
	
	.global	IfxCpu_startCore

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   447  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   448  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   449  boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
; Function IfxCpu_startCore
.L67:
IfxCpu_startCore:	.type	func
	mov.aa	a15,a4
.L262:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   450  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   451      boolean retVal = TRUE;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   452  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   453      /* Set the PC for Core 1 */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   454      retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
	call	IfxCpu_setProgramCounter
.L261:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   455      /* Get the mode for Core 1 and set it to RUNNING */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   456  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   457      /* Core not running already */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   458      if (IfxCpu_getCoreMode(cpu) == IfxCpu_CoreMode_halt)
	mov	d15,d2
	mov.aa	a4,a15
.L264:
	call	IfxCpu_getCoreMode
.L263:
	jne	d2,#0,.L42
.L314:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   459      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   460          retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
	mov	d4,#1
	mov.aa	a4,a15
.L265:
	call	IfxCpu_setCoreMode
.L266:
	and	d15,d2
.L42:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   461      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   462  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   463      return retVal;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.c	   464  }
	mov	d2,d15
	ret
.L184:
	
__IfxCpu_startCore_function_end:
	.size	IfxCpu_startCore,__IfxCpu_startCore_function_end-IfxCpu_startCore
.L101:
	; End of function
	
	.calls	'IfxCpu_getCoreMode','IfxCpu_getIndex'
	.calls	'IfxCpu_getRandomValueWithinRange','IfxCpu_getRandomValue'
	.calls	'IfxCpu_setCoreMode','IfxCpu_getIndex'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxCpu_setCoreMode','IfxScuWdt_setCpuEndinit'
	.calls	'IfxCpu_setProgramCounter','IfxCpu_getAddress'
	.calls	'IfxCpu_startCore','IfxCpu_setProgramCounter'
	.calls	'IfxCpu_startCore','IfxCpu_getCoreMode'
	.calls	'IfxCpu_startCore','IfxCpu_setCoreMode'
	.calls	'IfxCpu_acquireMutex','',8
	.calls	'IfxCpu_getAddress','',0
	.calls	'IfxCpu_getCoreMode','',0
	.calls	'IfxCpu_getIndex','',0
	.calls	'IfxCpu_getRandomValue','',0
	.calls	'IfxCpu_getRandomValueWithinRange','',0
	.calls	'IfxCpu_releaseMutex','',0
	.calls	'IfxCpu_resetSpinLock','',0
	.calls	'IfxCpu_setCoreMode','',0
	.calls	'IfxCpu_setProgramCounter','',0
	.calls	'IfxCpu_setSpinLock','',8
	.extern	IfxCpu_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_clearSafetyEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_setSafetyEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.calls	'IfxCpu_startCore','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L69:
	.word	46100
	.half	3
	.word	.L70
	.byte	4
.L68:
	.byte	1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L71
	.byte	2
	.byte	'__stopPerfCounters',0,3,1,217,1,17,1,1,3,0,4
	.byte	'unsigned long long int',0,8,7,5
	.byte	'void',0,6
	.word	239
	.byte	7
	.byte	'__ld64',0,3,2,110,19
	.word	213
	.byte	1,1,8
	.byte	'addr',0,2,110,32
	.word	245
	.byte	3,0,2
	.byte	'__st64',0,3,2,118,17,1,1,8
	.byte	'addr',0,2,118,30
	.word	245
	.byte	8
	.byte	'value',0,2,118,43
	.word	213
	.byte	3,0
.L220:
	.byte	4
	.byte	'unsigned int',0,4,7,4
	.byte	'int',0,4,5,4
	.byte	'unsigned int',0,4,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,133,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	349
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,4,187,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	365
	.byte	4,2,35,0,0
.L156:
	.byte	4
	.byte	'unsigned char',0,1,8
.L173:
	.byte	4
	.byte	'unsigned short int',0,2,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,142,8,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'IR0',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,4,195,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	540
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,157,8,16,4,10
	.byte	'AE',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	518
	.byte	16,0,2,35,2,0,11,4,203,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	784
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU',0,4,243,13,25,12,12
	.byte	'CON0',0
	.word	461
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	744
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	975
	.byte	4,2,35,8,0,13
	.word	1015
	.byte	6
	.word	1078
	.byte	2
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,130,3,17,1,1,8
	.byte	'watchdog',0,3,130,3,65
	.word	1083
	.byte	8
	.byte	'password',0,3,130,3,82
	.word	518
	.byte	3,0,2
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,222,3,17,1,1,8
	.byte	'watchdog',0,3,222,3,63
	.word	1083
	.byte	8
	.byte	'password',0,3,222,3,80
	.word	518
	.byte	3,0,7
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,187,3,19
	.word	518
	.byte	1,1,8
	.byte	'watchdog',0,3,187,3,74
	.word	1083
	.byte	3,0
.L134:
	.byte	14,6,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_none',0,1,0
.L144:
	.byte	7
	.byte	'IfxCpu_getCoreIndex',0,3,5,170,5,31
	.word	1313
	.byte	1,1
.L147:
	.byte	3,0,7
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,185,4,20
	.word	501
	.byte	1,1,3,0
.L178:
	.byte	4
	.byte	'unsigned long int',0,4,7,7
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,190,5,19
	.word	1444
	.byte	1,1,8
	.byte	'address',0,5,190,5,55
	.word	1444
	.byte	3,0,7
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,198,5,20
	.word	501
	.byte	1,1,8
	.byte	'address',0,5,198,5,70
	.word	1444
	.byte	3,0,2
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,153,7,17,1,1,8
	.byte	'address',0,5,153,7,56
	.word	1444
	.byte	8
	.byte	'count',0,5,153,7,72
	.word	1444
	.byte	3,0,13
	.word	326
	.byte	6
	.word	326
	.byte	16
	.byte	'__cmpswapw',0
	.word	1673
	.byte	1,1,1,1,17
	.byte	'p',0
	.word	1678
	.byte	17
	.byte	'value',0
	.word	326
	.byte	17
	.byte	'compare',0
	.word	326
	.byte	0,13
	.word	342
	.byte	16
	.byte	'__mfcr',0
	.word	1735
	.byte	1,1,1,1,18
	.word	342
	.byte	0,19
	.word	184
	.byte	3,0,19
	.word	250
	.byte	20
	.word	268
	.byte	3,0,19
	.word	283
	.byte	20
	.word	297
	.byte	20
	.word	310
	.byte	3,0,19
	.word	1088
	.byte	20
	.word	1128
	.byte	20
	.word	1146
	.byte	3,0,19
	.word	1166
	.byte	20
	.word	1204
	.byte	20
	.word	1222
	.byte	3,0,21
	.byte	'IfxScuWdt_clearCpuEndinit',0,3,187,1,17,1,1,1,1,8
	.byte	'password',0,3,187,1,50
	.word	518
	.byte	0,21
	.byte	'IfxScuWdt_clearSafetyEndinit',0,3,199,1,17,1,1,1,1,8
	.byte	'password',0,3,199,1,53
	.word	518
	.byte	0,21
	.byte	'IfxScuWdt_setCpuEndinit',0,3,209,1,17,1,1,1,1,8
	.byte	'password',0,3,209,1,48
	.word	518
	.byte	0,21
	.byte	'IfxScuWdt_setSafetyEndinit',0,3,219,1,17,1,1,1,1,8
	.byte	'password',0,3,219,1,51
	.word	518
	.byte	0,19
	.word	1242
	.byte	20
	.word	1293
	.byte	3,0,22
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,221,2,19
	.word	518
	.byte	1,1,1,1,22
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,3,230,2,19
	.word	518
	.byte	1,1,1,1,19
	.word	1368
	.byte	3,0,23,176,32
	.word	501
	.byte	24,175,32,0,9
	.byte	'_Ifx_CPU_SEGEN_Bits',0,7,150,4,16,4,10
	.byte	'ADFLIP',0,4
	.word	349
	.byte	8,24,2,35,0,10
	.byte	'ADTYPE',0,4
	.word	349
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	349
	.byte	21,1,2,35,0,10
	.byte	'AE',0,4
	.word	349
	.byte	1,0,2,35,0,0,11,7,239,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2175
	.byte	4,2,35,0,0,23,208,223,1
	.word	501
	.byte	24,207,223,1,0,9
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,7,234,4,16,4,10
	.byte	'ASI',0,4
	.word	349
	.byte	5,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	349
	.byte	27,0,2,35,0,0,11,7,191,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2328
	.byte	4,2,35,0,0,23,248,1
	.word	501
	.byte	24,247,1,0,9
	.byte	'_Ifx_CPU_PMA0_Bits',0,7,224,3,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	13,19,2,35,0,10
	.byte	'DAC',0,4
	.word	349
	.byte	3,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,7,199,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2446
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PMA1_Bits',0,7,232,3,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	14,18,2,35,0,10
	.byte	'CAC',0,4
	.word	349
	.byte	2,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,7,207,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2572
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PMA2_Bits',0,7,240,3,16,4,10
	.byte	'PSI',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,7,215,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2698
	.byte	4,2,35,0,0,23,244,29
	.word	501
	.byte	24,243,29,0,9
	.byte	'_Ifx_CPU_DCON2_Bits',0,7,195,1,16,4,10
	.byte	'DCACHE_SZE',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'DSCRATCH_SZE',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,7,191,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2813
	.byte	4,2,35,0,0,23,8
	.word	501
	.byte	24,7,0,9
	.byte	'_Ifx_CPU_SMACON_Bits',0,7,159,4,16,4,10
	.byte	'PC',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'PT',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	5,24,2,35,0,10
	.byte	'DC',0,4
	.word	349
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	349
	.byte	1,22,2,35,0,10
	.byte	'DT',0,4
	.word	349
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	349
	.byte	13,8,2,35,0,10
	.byte	'IODT',0,4
	.word	349
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	349
	.byte	7,0,2,35,0,0,11,7,247,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2935
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DSTR_Bits',0,7,143,2,16,4,10
	.byte	'SRE',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'GAE',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'LBE',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	3,26,2,35,0,10
	.byte	'CRE',0,4
	.word	349
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	349
	.byte	7,18,2,35,0,10
	.byte	'DTME',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'LOE',0,4
	.word	349
	.byte	1,16,2,35,0,10
	.byte	'SDE',0,4
	.word	349
	.byte	1,15,2,35,0,10
	.byte	'SCE',0,4
	.word	349
	.byte	1,14,2,35,0,10
	.byte	'CAC',0,4
	.word	349
	.byte	1,13,2,35,0,10
	.byte	'MPE',0,4
	.word	349
	.byte	1,12,2,35,0,10
	.byte	'CLE',0,4
	.word	349
	.byte	1,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	349
	.byte	3,8,2,35,0,10
	.byte	'ALN',0,4
	.word	349
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	349
	.byte	7,0,2,35,0,0,11,7,143,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3187
	.byte	4,2,35,0,0,23,4
	.word	501
	.byte	24,3,0,9
	.byte	'_Ifx_CPU_DATR_Bits',0,7,152,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'SBE',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'reserved_4',0,4
	.word	349
	.byte	5,23,2,35,0,10
	.byte	'CWE',0,4
	.word	349
	.byte	1,22,2,35,0,10
	.byte	'CFE',0,4
	.word	349
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	349
	.byte	3,18,2,35,0,10
	.byte	'SOE',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'SME',0,4
	.word	349
	.byte	1,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,7,159,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3533
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DEADD_Bits',0,7,209,1,16,4,10
	.byte	'ERROR_ADDRESS',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,207,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3764
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DIEAR_Bits',0,7,215,1,16,4,10
	.byte	'TA',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,215,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3856
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DIETR_Bits',0,7,221,1,16,4,10
	.byte	'IED',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	349
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	349
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	349
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	349
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	349
	.byte	18,0,2,35,0,0,11,7,223,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3937
	.byte	4,2,35,0,0,23,24
	.word	501
	.byte	24,23,0,9
	.byte	'_Ifx_CPU_DCON0_Bits',0,7,187,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'DCBYP',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	349
	.byte	30,0,2,35,0,0,11,7,183,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4187
	.byte	4,2,35,0,0,23,188,3
	.word	501
	.byte	24,187,3,0,9
	.byte	'_Ifx_CPU_PSTR_Bits',0,7,247,3,16,4,10
	.byte	'FRE',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'FBE',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	9,20,2,35,0,10
	.byte	'FPE',0,4
	.word	349
	.byte	1,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	349
	.byte	1,18,2,35,0,10
	.byte	'FME',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	349
	.byte	17,0,2,35,0,0,11,7,223,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4326
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PCON1_Bits',0,7,178,3,16,4,10
	.byte	'PCINV',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'PBINV',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	349
	.byte	30,0,2,35,0,0,11,7,159,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4542
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PCON2_Bits',0,7,186,3,16,4,10
	.byte	'PCACHE_SZE',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'PSCRATCH_SZE',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,7,167,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4665
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PCON0_Bits',0,7,170,3,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'PCBYP',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	349
	.byte	30,0,2,35,0,0,11,7,151,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4778
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PIEAR_Bits',0,7,203,3,16,4,10
	.byte	'TA',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,183,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4906
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PIETR_Bits',0,7,209,3,16,4,10
	.byte	'IED',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	349
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	349
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	349
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	349
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	349
	.byte	18,0,2,35,0,0,11,7,191,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4987
	.byte	4,2,35,0,0,23,232,3
	.word	501
	.byte	24,231,3,0,9
	.byte	'_Ifx_CPU_COMPAT_Bits',0,7,83,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'RM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'SP',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	349
	.byte	27,0,2,35,0,0,11,7,215,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5239
	.byte	4,2,35,0,0,23,252,23
	.word	501
	.byte	24,251,23,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,7,183,2,16,4,10
	.byte	'TST',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'TCL',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	349
	.byte	6,24,2,35,0,10
	.byte	'RM',0,4
	.word	349
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	349
	.byte	8,14,2,35,0,10
	.byte	'FXE',0,4
	.word	349
	.byte	1,13,2,35,0,10
	.byte	'FUE',0,4
	.word	349
	.byte	1,12,2,35,0,10
	.byte	'FZE',0,4
	.word	349
	.byte	1,11,2,35,0,10
	.byte	'FVE',0,4
	.word	349
	.byte	1,10,2,35,0,10
	.byte	'FIE',0,4
	.word	349
	.byte	1,9,2,35,0,10
	.byte	'reserved_23',0,4
	.word	349
	.byte	3,6,2,35,0,10
	.byte	'FX',0,4
	.word	349
	.byte	1,5,2,35,0,10
	.byte	'FU',0,4
	.word	349
	.byte	1,4,2,35,0,10
	.byte	'FZ',0,4
	.word	349
	.byte	1,3,2,35,0,10
	.byte	'FV',0,4
	.word	349
	.byte	1,2,2,35,0,10
	.byte	'FI',0,4
	.word	349
	.byte	1,1,2,35,0,10
	.byte	'reserved_31',0,4
	.word	349
	.byte	1,0,2,35,0,0,11,7,167,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5389
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,7,215,2,16,4,10
	.byte	'PC',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,183,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5743
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,7,205,2,16,4,10
	.byte	'OPC',0,4
	.word	349
	.byte	8,24,2,35,0,10
	.byte	'FMT',0,4
	.word	349
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	349
	.byte	7,16,2,35,0,10
	.byte	'DREG',0,4
	.word	349
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	349
	.byte	12,0,2,35,0,0,11,7,175,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5830
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,7,221,2,16,4,10
	.byte	'SRC1',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,191,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5995
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,7,227,2,16,4,10
	.byte	'SRC2',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,199,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6086
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,7,233,2,16,4,10
	.byte	'SRC3',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,207,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6177
	.byte	4,2,35,0,0,23,228,63
	.word	501
	.byte	24,227,63,0,9
	.byte	'_Ifx_CPU_DPR_L_Bits',0,7,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	349
	.byte	29,0,2,35,0,0,11,7,239,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6279
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DPR_U_Bits',0,7,250,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	349
	.byte	29,0,2,35,0,0,11,7,247,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6386
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DPR',0,7,254,9,25,8,12
	.byte	'L',0
	.word	6346
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	6453
	.byte	4,2,35,4,0,23,128,1
	.word	6493
	.byte	24,15,0,13
	.word	6535
	.byte	23,128,31
	.word	501
	.byte	24,255,30,0,9
	.byte	'_Ifx_CPU_CPR_L_Bits',0,7,99,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	349
	.byte	29,0,2,35,0,0,11,7,231,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6561
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CPR_U_Bits',0,7,106,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	349
	.byte	29,0,2,35,0,0,11,7,239,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6667
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CPR',0,7,247,9,25,8,12
	.byte	'L',0
	.word	6627
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	6733
	.byte	4,2,35,4,0,23,64
	.word	6773
	.byte	24,7,0,13
	.word	6815
	.byte	23,192,31
	.word	501
	.byte	24,191,31,0,9
	.byte	'_Ifx_CPU_CPXE_Bits',0,7,121,16,4,10
	.byte	'XE',0,4
	.word	349
	.byte	8,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,11,7,255,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6840
	.byte	4,2,35,0,0,23,16
	.word	6901
	.byte	24,3,0,9
	.byte	'_Ifx_CPU_DPRE_Bits',0,7,129,2,16,4,10
	.byte	'RE',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,7,255,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6950
	.byte	4,2,35,0,0,23,16
	.word	7013
	.byte	24,3,0,9
	.byte	'_Ifx_CPU_DPWE_Bits',0,7,136,2,16,4,10
	.byte	'WE',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,7,135,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7062
	.byte	4,2,35,0,0,23,16
	.word	7125
	.byte	24,3,0,23,208,7
	.word	501
	.byte	24,207,7,0,9
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,7,241,4,16,4,10
	.byte	'TEXP0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'TEXP1',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'TEXP2',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	13,16,2,35,0,10
	.byte	'TTRAP',0,4
	.word	349
	.byte	1,15,2,35,0,10
	.byte	'reserved_17',0,4
	.word	349
	.byte	15,0,2,35,0,0,11,7,199,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7185
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,7,252,4,16,4,10
	.byte	'Timer',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,207,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7367
	.byte	4,2,35,0,0,23,12
	.word	7415
	.byte	24,2,0,9
	.byte	'_Ifx_CPU_TPS',0,7,142,10,25,16,12
	.byte	'CON',0
	.word	7327
	.byte	4,2,35,0,12
	.byte	'TIMER',0
	.word	7455
	.byte	12,2,35,4,0,13
	.word	7464
	.byte	23,240,23
	.word	501
	.byte	24,239,23,0,9
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,7,136,5,16,4,10
	.byte	'EVTA',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	349
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	4,20,2,35,0,10
	.byte	'TYP',0,4
	.word	349
	.byte	1,19,2,35,0,10
	.byte	'RNG',0,4
	.word	349
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'ASI_EN',0,4
	.word	349
	.byte	1,16,2,35,0,10
	.byte	'ASI',0,4
	.word	349
	.byte	5,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	349
	.byte	6,5,2,35,0,10
	.byte	'AST',0,4
	.word	349
	.byte	1,4,2,35,0,10
	.byte	'ALD',0,4
	.word	349
	.byte	1,3,2,35,0,10
	.byte	'reserved_29',0,4
	.word	349
	.byte	3,0,2,35,0,0,11,7,223,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7528
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,7,130,5,16,4,10
	.byte	'ADDR',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,215,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7857
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_TR',0,7,149,10,25,8,12
	.byte	'EVT',0
	.word	7817
	.byte	4,2,35,0,12
	.byte	'ADR',0
	.word	7901
	.byte	4,2,35,4,0,23,64
	.word	7941
	.byte	24,7,0,13
	.word	7986
	.byte	23,192,23
	.word	501
	.byte	24,191,23,0,9
	.byte	'_Ifx_CPU_CCTRL_Bits',0,7,72,16,4,10
	.byte	'CM',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'CE',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'M1',0,4
	.word	349
	.byte	3,27,2,35,0,10
	.byte	'M2',0,4
	.word	349
	.byte	3,24,2,35,0,10
	.byte	'M3',0,4
	.word	349
	.byte	3,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	349
	.byte	21,0,2,35,0,0,11,7,207,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8011
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CCNT_Bits',0,7,65,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,11,7,199,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8170
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_ICNT_Bits',0,7,239,2,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,11,7,215,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8273
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_M1CNT_Bits',0,7,142,3,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,11,7,247,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8377
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_M2CNT_Bits',0,7,149,3,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,11,7,255,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8482
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_M3CNT_Bits',0,7,156,3,16,4,10
	.byte	'CountValue',0,4
	.word	349
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	349
	.byte	1,0,2,35,0,0,11,7,135,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8587
	.byte	4,2,35,0,0,23,232,1
	.word	501
	.byte	24,231,1,0,9
	.byte	'_Ifx_CPU_DBGSR_Bits',0,7,166,1,16,4,10
	.byte	'DE',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'HALT',0,4
	.word	349
	.byte	2,29,2,35,0,10
	.byte	'SIH',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'PREVSUSP',0,4
	.word	349
	.byte	1,25,2,35,0,10
	.byte	'PEVT',0,4
	.word	349
	.byte	1,24,2,35,0,10
	.byte	'EVTSRC',0,4
	.word	349
	.byte	5,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	349
	.byte	19,0,2,35,0,0
.L141:
	.byte	11,7,167,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8703
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_EXEVT_Bits',0,7,164,2,16,4,10
	.byte	'EVTA',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	349
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,11,7,151,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8930
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CREVT_Bits',0,7,128,1,16,4,10
	.byte	'EVTA',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	349
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,11,7,135,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9096
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_SWEVT_Bits',0,7,212,4,16,4,10
	.byte	'EVTA',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	349
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,11,7,175,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9262
	.byte	4,2,35,0,0,23,28
	.word	501
	.byte	24,27,0,9
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,7,156,5,16,4,10
	.byte	'T0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'T1',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'T2',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'T3',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'T4',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'T5',0,4
	.word	349
	.byte	1,26,2,35,0,10
	.byte	'T6',0,4
	.word	349
	.byte	1,25,2,35,0,10
	.byte	'T7',0,4
	.word	349
	.byte	1,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	349
	.byte	24,0,2,35,0,0,11,7,231,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9437
	.byte	4,2,35,0,0,23,12
	.word	501
	.byte	24,11,0,9
	.byte	'_Ifx_CPU_DMS_Bits',0,7,236,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'DMSValue',0,4
	.word	349
	.byte	31,0,2,35,0,0,11,7,231,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9650
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DCX_Bits',0,7,202,1,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	6,26,2,35,0,10
	.byte	'DCXValue',0,4
	.word	349
	.byte	26,0,2,35,0,0,11,7,199,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9757
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,7,180,1,16,4,10
	.byte	'DTA',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	349
	.byte	31,0,2,35,0,0,11,7,175,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9864
	.byte	4,2,35,0,0,23,180,1
	.word	501
	.byte	24,179,1,0,9
	.byte	'_Ifx_CPU_PCXI_Bits',0,7,193,3,16,4,10
	.byte	'PCXO',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'PCXS',0,4
	.word	349
	.byte	4,12,2,35,0,10
	.byte	'UL',0,4
	.word	349
	.byte	1,11,2,35,0,10
	.byte	'PIE',0,4
	.word	349
	.byte	1,10,2,35,0,10
	.byte	'PCPN',0,4
	.word	349
	.byte	10,0,2,35,0,0,11,7,175,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9980
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PSW_Bits',0,7,132,4,16,4,10
	.byte	'CDC',0,4
	.word	349
	.byte	7,25,2,35,0,10
	.byte	'CDE',0,4
	.word	349
	.byte	1,24,2,35,0,10
	.byte	'GW',0,4
	.word	349
	.byte	1,23,2,35,0,10
	.byte	'IS',0,4
	.word	349
	.byte	1,22,2,35,0,10
	.byte	'IO',0,4
	.word	349
	.byte	2,20,2,35,0,10
	.byte	'PRS',0,4
	.word	349
	.byte	2,18,2,35,0,10
	.byte	'S',0,4
	.word	349
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	349
	.byte	12,5,2,35,0,10
	.byte	'SAV',0,4
	.word	349
	.byte	1,4,2,35,0,10
	.byte	'AV',0,4
	.word	349
	.byte	1,3,2,35,0,10
	.byte	'SV',0,4
	.word	349
	.byte	1,2,2,35,0,10
	.byte	'V',0,4
	.word	349
	.byte	1,1,2,35,0,10
	.byte	'C',0,4
	.word	349
	.byte	1,0,2,35,0,0,11,7,231,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10123
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_PC_Bits',0,7,163,3,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'PC',0,4
	.word	349
	.byte	31,0,2,35,0,0,11,7,143,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10380
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_SYSCON_Bits',0,7,223,4,16,4,10
	.byte	'FCDSF',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'PROTEN',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'TPROTEN',0,4
	.word	349
	.byte	1,29,2,35,0,10
	.byte	'IS',0,4
	.word	349
	.byte	1,28,2,35,0,10
	.byte	'IT',0,4
	.word	349
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	349
	.byte	27,0,2,35,0,0,11,7,183,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10480
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,7,113,16,4,10
	.byte	'MODREV',0,4
	.word	349
	.byte	8,24,2,35,0,10
	.byte	'MOD_32B',0,4
	.word	349
	.byte	8,16,2,35,0,10
	.byte	'MOD',0,4
	.word	349
	.byte	16,0,2,35,0,0,11,7,247,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10652
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,7,92,16,4,10
	.byte	'CORE_ID',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	29,0,2,35,0,0
.L148:
	.byte	11,7,223,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10771
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_BIV_Bits',0,7,51,16,4,10
	.byte	'VSS',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'BIV',0,4
	.word	349
	.byte	31,0,2,35,0,0,11,7,183,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10880
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_BTV_Bits',0,7,58,16,4,10
	.byte	'reserved_0',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'BTV',0,4
	.word	349
	.byte	31,0,2,35,0,0,11,7,191,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10974
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_ISP_Bits',0,7,128,3,16,4,10
	.byte	'ISP',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,231,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11075
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_ICR_Bits',0,7,246,2,16,4,10
	.byte	'CCPN',0,4
	.word	349
	.byte	10,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	349
	.byte	5,17,2,35,0,10
	.byte	'IE',0,4
	.word	349
	.byte	1,16,2,35,0,10
	.byte	'PIPN',0,4
	.word	349
	.byte	10,6,2,35,0,10
	.byte	'reserved_26',0,4
	.word	349
	.byte	6,0,2,35,0,0,11,7,223,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11155
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_FCX_Bits',0,7,175,2,16,4,10
	.byte	'FCXO',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'FCXS',0,4
	.word	349
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	349
	.byte	12,0,2,35,0,0,11,7,159,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11312
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_CPU_LCX_Bits',0,7,134,3,16,4,10
	.byte	'LCXO',0,4
	.word	349
	.byte	16,16,2,35,0,10
	.byte	'LCXS',0,4
	.word	349
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	349
	.byte	12,0,2,35,0,0,11,7,239,7,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11432
	.byte	4,2,35,0,0,23,16
	.word	501
	.byte	24,15,0,9
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,7,139,1,16,4,10
	.byte	'CID',0,4
	.word	349
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	349
	.byte	29,0,2,35,0,0,11,7,143,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11561
	.byte	4,2,35,0,0,23,172,1
	.word	501
	.byte	24,171,1,0,9
	.byte	'_Ifx_CPU_D_Bits',0,7,146,1,16,4,10
	.byte	'DATA',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,151,6,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11677
	.byte	4,2,35,0,0,23,64
	.word	11716
	.byte	24,15,0,23,64
	.word	501
	.byte	24,63,0,9
	.byte	'_Ifx_CPU_A_Bits',0,7,45,16,4,10
	.byte	'ADDR',0,4
	.word	349
	.byte	32,0,2,35,0,0,11,7,175,5,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11774
	.byte	4,2,35,0,0,23,64
	.word	11812
	.byte	24,15,0,9
	.byte	'_Ifx_CPU',0,7,166,10,25,128,128,4,12
	.byte	'reserved_0',0
	.word	2164
	.byte	176,32,2,35,0,12
	.byte	'SEGEN',0
	.word	2275
	.byte	4,3,35,176,32,12
	.byte	'reserved_1034',0
	.word	2315
	.byte	208,223,1,3,35,180,32,12
	.byte	'TASK_ASI',0
	.word	2395
	.byte	4,4,35,132,128,2,12
	.byte	'reserved_8008',0
	.word	2435
	.byte	248,1,4,35,136,128,2,12
	.byte	'PMA0',0
	.word	2532
	.byte	4,4,35,128,130,2,12
	.byte	'PMA1',0
	.word	2658
	.byte	4,4,35,132,130,2,12
	.byte	'PMA2',0
	.word	2762
	.byte	4,4,35,136,130,2,12
	.byte	'reserved_810C',0
	.word	2802
	.byte	244,29,4,35,140,130,2,12
	.byte	'DCON2',0
	.word	2886
	.byte	4,4,35,128,160,2,12
	.byte	'reserved_9004',0
	.word	2926
	.byte	8,4,35,132,160,2,12
	.byte	'SMACON',0
	.word	3147
	.byte	4,4,35,140,160,2,12
	.byte	'DSTR',0
	.word	3484
	.byte	4,4,35,144,160,2,12
	.byte	'reserved_9014',0
	.word	3524
	.byte	4,4,35,148,160,2,12
	.byte	'DATR',0
	.word	3724
	.byte	4,4,35,152,160,2,12
	.byte	'DEADD',0
	.word	3816
	.byte	4,4,35,156,160,2,12
	.byte	'DIEAR',0
	.word	3897
	.byte	4,4,35,160,160,2,12
	.byte	'DIETR',0
	.word	4138
	.byte	4,4,35,164,160,2,12
	.byte	'reserved_9028',0
	.word	4178
	.byte	24,4,35,168,160,2,12
	.byte	'DCON0',0
	.word	4275
	.byte	4,4,35,192,160,2,12
	.byte	'reserved_9044',0
	.word	4315
	.byte	188,3,4,35,196,160,2,12
	.byte	'PSTR',0
	.word	4502
	.byte	4,4,35,128,164,2,12
	.byte	'PCON1',0
	.word	4625
	.byte	4,4,35,132,164,2,12
	.byte	'PCON2',0
	.word	4738
	.byte	4,4,35,136,164,2,12
	.byte	'PCON0',0
	.word	4866
	.byte	4,4,35,140,164,2,12
	.byte	'PIEAR',0
	.word	4947
	.byte	4,4,35,144,164,2,12
	.byte	'PIETR',0
	.word	5188
	.byte	4,4,35,148,164,2,12
	.byte	'reserved_9218',0
	.word	5228
	.byte	232,3,4,35,152,164,2,12
	.byte	'COMPAT',0
	.word	5338
	.byte	4,4,35,128,168,2,12
	.byte	'reserved_9404',0
	.word	5378
	.byte	252,23,4,35,132,168,2,12
	.byte	'FPU_TRAP_CON',0
	.word	5703
	.byte	4,4,35,128,192,2,12
	.byte	'FPU_TRAP_PC',0
	.word	5790
	.byte	4,4,35,132,192,2,12
	.byte	'FPU_TRAP_OPC',0
	.word	5955
	.byte	4,4,35,136,192,2,12
	.byte	'reserved_A00C',0
	.word	3524
	.byte	4,4,35,140,192,2,12
	.byte	'FPU_TRAP_SRC1',0
	.word	6046
	.byte	4,4,35,144,192,2,12
	.byte	'FPU_TRAP_SRC2',0
	.word	6137
	.byte	4,4,35,148,192,2,12
	.byte	'FPU_TRAP_SRC3',0
	.word	6228
	.byte	4,4,35,152,192,2,12
	.byte	'reserved_A01C',0
	.word	6268
	.byte	228,63,4,35,156,192,2,12
	.byte	'DPR',0
	.word	6545
	.byte	128,1,4,35,128,128,3,12
	.byte	'reserved_C080',0
	.word	6550
	.byte	128,31,4,35,128,129,3,12
	.byte	'CPR',0
	.word	6824
	.byte	64,4,35,128,160,3,12
	.byte	'reserved_D040',0
	.word	6829
	.byte	192,31,4,35,192,160,3,12
	.byte	'CPXE',0
	.word	6941
	.byte	16,4,35,128,192,3,12
	.byte	'DPRE',0
	.word	7053
	.byte	16,4,35,144,192,3,12
	.byte	'DPWE',0
	.word	7165
	.byte	16,4,35,160,192,3,12
	.byte	'reserved_E030',0
	.word	7174
	.byte	208,7,4,35,176,192,3,12
	.byte	'TPS',0
	.word	7512
	.byte	16,4,35,128,200,3,12
	.byte	'reserved_E410',0
	.word	7517
	.byte	240,23,4,35,144,200,3,12
	.byte	'TR',0
	.word	7995
	.byte	64,4,35,128,224,3,12
	.byte	'reserved_F040',0
	.word	8000
	.byte	192,23,4,35,192,224,3,12
	.byte	'CCTRL',0
	.word	8130
	.byte	4,4,35,128,248,3,12
	.byte	'CCNT',0
	.word	8233
	.byte	4,4,35,132,248,3,12
	.byte	'ICNT',0
	.word	8337
	.byte	4,4,35,136,248,3,12
	.byte	'M1CNT',0
	.word	8442
	.byte	4,4,35,140,248,3,12
	.byte	'M2CNT',0
	.word	8547
	.byte	4,4,35,144,248,3,12
	.byte	'M3CNT',0
	.word	8652
	.byte	4,4,35,148,248,3,12
	.byte	'reserved_FC18',0
	.word	8692
	.byte	232,1,4,35,152,248,3,12
	.byte	'DBGSR',0
	.word	8890
	.byte	4,4,35,128,250,3,12
	.byte	'reserved_FD04',0
	.word	3524
	.byte	4,4,35,132,250,3,12
	.byte	'EXEVT',0
	.word	9056
	.byte	4,4,35,136,250,3,12
	.byte	'CREVT',0
	.word	9222
	.byte	4,4,35,140,250,3,12
	.byte	'SWEVT',0
	.word	9388
	.byte	4,4,35,144,250,3,12
	.byte	'reserved_FD14',0
	.word	9428
	.byte	28,4,35,148,250,3,12
	.byte	'TRIG_ACC',0
	.word	9601
	.byte	4,4,35,176,250,3,12
	.byte	'reserved_FD34',0
	.word	9641
	.byte	12,4,35,180,250,3,12
	.byte	'DMS',0
	.word	9717
	.byte	4,4,35,192,250,3,12
	.byte	'DCX',0
	.word	9824
	.byte	4,4,35,196,250,3,12
	.byte	'DBGTCR',0
	.word	9929
	.byte	4,4,35,200,250,3,12
	.byte	'reserved_FD4C',0
	.word	9969
	.byte	180,1,4,35,204,250,3,12
	.byte	'PCXI',0
	.word	10083
	.byte	4,4,35,128,252,3,12
	.byte	'PSW',0
	.word	10340
	.byte	4,4,35,132,252,3,12
	.byte	'PC',0
	.word	10440
	.byte	4,4,35,136,252,3,12
	.byte	'reserved_FE0C',0
	.word	2926
	.byte	8,4,35,140,252,3,12
	.byte	'SYSCON',0
	.word	10612
	.byte	4,4,35,148,252,3,12
	.byte	'CPU_ID',0
	.word	10731
	.byte	4,4,35,152,252,3,12
	.byte	'CORE_ID',0
	.word	10840
	.byte	4,4,35,156,252,3,12
	.byte	'BIV',0
	.word	10934
	.byte	4,4,35,160,252,3,12
	.byte	'BTV',0
	.word	11035
	.byte	4,4,35,164,252,3,12
	.byte	'ISP',0
	.word	11115
	.byte	4,4,35,168,252,3,12
	.byte	'ICR',0
	.word	11272
	.byte	4,4,35,172,252,3,12
	.byte	'reserved_FE30',0
	.word	2926
	.byte	8,4,35,176,252,3,12
	.byte	'FCX',0
	.word	11392
	.byte	4,4,35,184,252,3,12
	.byte	'LCX',0
	.word	11512
	.byte	4,4,35,188,252,3,12
	.byte	'reserved_FE40',0
	.word	11552
	.byte	16,4,35,192,252,3,12
	.byte	'CUS_ID',0
	.word	11626
	.byte	4,4,35,208,252,3,12
	.byte	'reserved_FE54',0
	.word	11666
	.byte	172,1,4,35,212,252,3,12
	.byte	'D',0
	.word	11756
	.byte	64,4,35,128,254,3,12
	.byte	'reserved_FF40',0
	.word	11765
	.byte	64,4,35,192,254,3,12
	.byte	'A',0
	.word	11852
	.byte	64,4,35,128,255,3,12
	.byte	'reserved_FFC0',0
	.word	11765
	.byte	64,4,35,192,255,3,0,13
	.word	11861
.L132:
	.byte	6
	.word	13652
.L137:
	.byte	14,5,106,9,1,15
	.byte	'IfxCpu_CoreMode_halt',0,0,15
	.byte	'IfxCpu_CoreMode_run',0,1,15
	.byte	'IfxCpu_CoreMode_idle',0,2,15
	.byte	'IfxCpu_CoreMode_sleep',0,3,15
	.byte	'IfxCpu_CoreMode_stby',0,4,15
	.byte	'IfxCpu_CoreMode_unknown',0,5,0,9
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,138,6,16,4,10
	.byte	'REQSLP',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'SMUSLP',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	501
	.byte	5,0,2,35,0,10
	.byte	'PMST',0,1
	.word	501
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	326
	.byte	21,0,2,35,0,0,11,4,171,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13809
	.byte	4,2,35,0,0
.L151:
	.byte	6
	.word	13933
	.byte	19
	.word	1402
	.byte	3,0,19
	.word	1465
	.byte	20
	.word	1506
	.byte	3,0,19
	.word	1525
	.byte	20
	.word	1580
	.byte	3,0,19
	.word	1599
	.byte	20
	.word	1639
	.byte	20
	.word	1656
	.byte	3,0
.L189:
	.byte	6
	.word	326
.L192:
	.byte	13
	.word	1444
.L197:
	.byte	6
	.word	326
.L203:
	.byte	13
	.word	1444
.L206:
	.byte	6
	.word	1444
	.byte	4
	.byte	'short int',0,2,5,25
	.byte	'__wchar_t',0,8,1,1
	.word	14051
	.byte	25
	.byte	'__size_t',0,8,1,1
	.word	326
	.byte	25
	.byte	'__ptrdiff_t',0,8,1,1
	.word	342
	.byte	26,1,6
	.word	14119
	.byte	25
	.byte	'__codeptr',0,8,1,1
	.word	14121
	.byte	25
	.byte	'__intptr_t',0,8,1,1
	.word	342
	.byte	25
	.byte	'__uintptr_t',0,8,1,1
	.word	326
	.byte	25
	.byte	'_iob_flag_t',0,9,82,25
	.word	518
	.byte	25
	.byte	'uint8',0,10,89,24
	.word	501
	.byte	25
	.byte	'sint16',0,10,90,24
	.word	14051
	.byte	25
	.byte	'uint16',0,10,91,24
	.word	518
	.byte	4
	.byte	'long int',0,4,5,25
	.byte	'sint32',0,10,92,24
	.word	14247
	.byte	25
	.byte	'uint32',0,10,93,24
	.word	1444
	.byte	4
	.byte	'float',0,4,4,25
	.byte	'float32',0,10,94,24
	.word	14289
	.byte	25
	.byte	'boolean',0,10,104,24
	.word	501
	.byte	4
	.byte	'long long int',0,8,5,25
	.byte	'sint64',0,11,36,28
	.word	14330
	.byte	25
	.byte	'uint64',0,11,37,28
	.word	213
	.byte	25
	.byte	'pvoid',0,11,40,28
	.word	245
	.byte	25
	.byte	'Ifx_TickTime',0,11,43,28
	.word	14330
	.byte	13
	.word	239
	.byte	6
	.word	14412
	.byte	27,11,107,9,8,12
	.byte	'module',0
	.word	14417
	.byte	4,2,35,0,12
	.byte	'index',0
	.word	14247
	.byte	4,2,35,4,0,25
	.byte	'IfxModule_IndexMap',0,11,111,3
	.word	14422
	.byte	25
	.byte	'Ifx_CPU_A_Bits',0,7,48,3
	.word	11774
	.byte	25
	.byte	'Ifx_CPU_BIV_Bits',0,7,55,3
	.word	10880
	.byte	25
	.byte	'Ifx_CPU_BTV_Bits',0,7,62,3
	.word	10974
	.byte	25
	.byte	'Ifx_CPU_CCNT_Bits',0,7,69,3
	.word	8170
	.byte	25
	.byte	'Ifx_CPU_CCTRL_Bits',0,7,80,3
	.word	8011
	.byte	25
	.byte	'Ifx_CPU_COMPAT_Bits',0,7,89,3
	.word	5239
	.byte	25
	.byte	'Ifx_CPU_CORE_ID_Bits',0,7,96,3
	.word	10771
	.byte	25
	.byte	'Ifx_CPU_CPR_L_Bits',0,7,103,3
	.word	6561
	.byte	25
	.byte	'Ifx_CPU_CPR_U_Bits',0,7,110,3
	.word	6667
	.byte	25
	.byte	'Ifx_CPU_CPU_ID_Bits',0,7,118,3
	.word	10652
	.byte	25
	.byte	'Ifx_CPU_CPXE_Bits',0,7,125,3
	.word	6840
	.byte	25
	.byte	'Ifx_CPU_CREVT_Bits',0,7,136,1,3
	.word	9096
	.byte	25
	.byte	'Ifx_CPU_CUS_ID_Bits',0,7,143,1,3
	.word	11561
	.byte	25
	.byte	'Ifx_CPU_D_Bits',0,7,149,1,3
	.word	11677
	.byte	25
	.byte	'Ifx_CPU_DATR_Bits',0,7,163,1,3
	.word	3533
	.byte	25
	.byte	'Ifx_CPU_DBGSR_Bits',0,7,177,1,3
	.word	8703
	.byte	25
	.byte	'Ifx_CPU_DBGTCR_Bits',0,7,184,1,3
	.word	9864
	.byte	25
	.byte	'Ifx_CPU_DCON0_Bits',0,7,192,1,3
	.word	4187
	.byte	25
	.byte	'Ifx_CPU_DCON2_Bits',0,7,199,1,3
	.word	2813
	.byte	25
	.byte	'Ifx_CPU_DCX_Bits',0,7,206,1,3
	.word	9757
	.byte	25
	.byte	'Ifx_CPU_DEADD_Bits',0,7,212,1,3
	.word	3764
	.byte	25
	.byte	'Ifx_CPU_DIEAR_Bits',0,7,218,1,3
	.word	3856
	.byte	25
	.byte	'Ifx_CPU_DIETR_Bits',0,7,233,1,3
	.word	3937
	.byte	25
	.byte	'Ifx_CPU_DMS_Bits',0,7,240,1,3
	.word	9650
	.byte	25
	.byte	'Ifx_CPU_DPR_L_Bits',0,7,247,1,3
	.word	6279
	.byte	25
	.byte	'Ifx_CPU_DPR_U_Bits',0,7,254,1,3
	.word	6386
	.byte	25
	.byte	'Ifx_CPU_DPRE_Bits',0,7,133,2,3
	.word	6950
	.byte	25
	.byte	'Ifx_CPU_DPWE_Bits',0,7,140,2,3
	.word	7062
	.byte	25
	.byte	'Ifx_CPU_DSTR_Bits',0,7,161,2,3
	.word	3187
	.byte	25
	.byte	'Ifx_CPU_EXEVT_Bits',0,7,172,2,3
	.word	8930
	.byte	25
	.byte	'Ifx_CPU_FCX_Bits',0,7,180,2,3
	.word	11312
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,7,202,2,3
	.word	5389
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,7,212,2,3
	.word	5830
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,7,218,2,3
	.word	5743
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,7,224,2,3
	.word	5995
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,7,230,2,3
	.word	6086
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,7,236,2,3
	.word	6177
	.byte	25
	.byte	'Ifx_CPU_ICNT_Bits',0,7,243,2,3
	.word	8273
	.byte	25
	.byte	'Ifx_CPU_ICR_Bits',0,7,253,2,3
	.word	11155
	.byte	25
	.byte	'Ifx_CPU_ISP_Bits',0,7,131,3,3
	.word	11075
	.byte	25
	.byte	'Ifx_CPU_LCX_Bits',0,7,139,3,3
	.word	11432
	.byte	25
	.byte	'Ifx_CPU_M1CNT_Bits',0,7,146,3,3
	.word	8377
	.byte	25
	.byte	'Ifx_CPU_M2CNT_Bits',0,7,153,3,3
	.word	8482
	.byte	25
	.byte	'Ifx_CPU_M3CNT_Bits',0,7,160,3,3
	.word	8587
	.byte	25
	.byte	'Ifx_CPU_PC_Bits',0,7,167,3,3
	.word	10380
	.byte	25
	.byte	'Ifx_CPU_PCON0_Bits',0,7,175,3,3
	.word	4778
	.byte	25
	.byte	'Ifx_CPU_PCON1_Bits',0,7,183,3,3
	.word	4542
	.byte	25
	.byte	'Ifx_CPU_PCON2_Bits',0,7,190,3,3
	.word	4665
	.byte	25
	.byte	'Ifx_CPU_PCXI_Bits',0,7,200,3,3
	.word	9980
	.byte	25
	.byte	'Ifx_CPU_PIEAR_Bits',0,7,206,3,3
	.word	4906
	.byte	25
	.byte	'Ifx_CPU_PIETR_Bits',0,7,221,3,3
	.word	4987
	.byte	25
	.byte	'Ifx_CPU_PMA0_Bits',0,7,229,3,3
	.word	2446
	.byte	25
	.byte	'Ifx_CPU_PMA1_Bits',0,7,237,3,3
	.word	2572
	.byte	25
	.byte	'Ifx_CPU_PMA2_Bits',0,7,244,3,3
	.word	2698
	.byte	25
	.byte	'Ifx_CPU_PSTR_Bits',0,7,129,4,3
	.word	4326
	.byte	25
	.byte	'Ifx_CPU_PSW_Bits',0,7,147,4,3
	.word	10123
	.byte	25
	.byte	'Ifx_CPU_SEGEN_Bits',0,7,156,4,3
	.word	2175
	.byte	25
	.byte	'Ifx_CPU_SMACON_Bits',0,7,171,4,3
	.word	2935
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,7,174,4,16,4,10
	.byte	'EN',0,4
	.word	326
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,7,177,4,3
	.word	16109
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,7,180,4,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,7,183,4,3
	.word	16192
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,7,186,4,16,4,10
	.byte	'EN',0,4
	.word	326
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,7,189,4,3
	.word	16283
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,7,192,4,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,7,195,4,3
	.word	16374
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,7,198,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	326
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,7,202,4,3
	.word	16473
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,7,205,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	326
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,7,209,4,3
	.word	16580
	.byte	25
	.byte	'Ifx_CPU_SWEVT_Bits',0,7,220,4,3
	.word	9262
	.byte	25
	.byte	'Ifx_CPU_SYSCON_Bits',0,7,231,4,3
	.word	10480
	.byte	25
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,7,238,4,3
	.word	2328
	.byte	25
	.byte	'Ifx_CPU_TPS_CON_Bits',0,7,249,4,3
	.word	7185
	.byte	25
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,7,255,4,3
	.word	7367
	.byte	25
	.byte	'Ifx_CPU_TR_ADR_Bits',0,7,133,5,3
	.word	7857
	.byte	25
	.byte	'Ifx_CPU_TR_EVT_Bits',0,7,153,5,3
	.word	7528
	.byte	25
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,7,167,5,3
	.word	9437
	.byte	25
	.byte	'Ifx_CPU_A',0,7,180,5,3
	.word	11812
	.byte	25
	.byte	'Ifx_CPU_BIV',0,7,188,5,3
	.word	10934
	.byte	25
	.byte	'Ifx_CPU_BTV',0,7,196,5,3
	.word	11035
	.byte	25
	.byte	'Ifx_CPU_CCNT',0,7,204,5,3
	.word	8233
	.byte	25
	.byte	'Ifx_CPU_CCTRL',0,7,212,5,3
	.word	8130
	.byte	25
	.byte	'Ifx_CPU_COMPAT',0,7,220,5,3
	.word	5338
	.byte	25
	.byte	'Ifx_CPU_CORE_ID',0,7,228,5,3
	.word	10840
	.byte	25
	.byte	'Ifx_CPU_CPR_L',0,7,236,5,3
	.word	6627
	.byte	25
	.byte	'Ifx_CPU_CPR_U',0,7,244,5,3
	.word	6733
	.byte	25
	.byte	'Ifx_CPU_CPU_ID',0,7,252,5,3
	.word	10731
	.byte	25
	.byte	'Ifx_CPU_CPXE',0,7,132,6,3
	.word	6901
	.byte	25
	.byte	'Ifx_CPU_CREVT',0,7,140,6,3
	.word	9222
	.byte	25
	.byte	'Ifx_CPU_CUS_ID',0,7,148,6,3
	.word	11626
	.byte	25
	.byte	'Ifx_CPU_D',0,7,156,6,3
	.word	11716
	.byte	25
	.byte	'Ifx_CPU_DATR',0,7,164,6,3
	.word	3724
	.byte	25
	.byte	'Ifx_CPU_DBGSR',0,7,172,6,3
	.word	8890
	.byte	25
	.byte	'Ifx_CPU_DBGTCR',0,7,180,6,3
	.word	9929
	.byte	25
	.byte	'Ifx_CPU_DCON0',0,7,188,6,3
	.word	4275
	.byte	25
	.byte	'Ifx_CPU_DCON2',0,7,196,6,3
	.word	2886
	.byte	25
	.byte	'Ifx_CPU_DCX',0,7,204,6,3
	.word	9824
	.byte	25
	.byte	'Ifx_CPU_DEADD',0,7,212,6,3
	.word	3816
	.byte	25
	.byte	'Ifx_CPU_DIEAR',0,7,220,6,3
	.word	3897
	.byte	25
	.byte	'Ifx_CPU_DIETR',0,7,228,6,3
	.word	4138
	.byte	25
	.byte	'Ifx_CPU_DMS',0,7,236,6,3
	.word	9717
	.byte	25
	.byte	'Ifx_CPU_DPR_L',0,7,244,6,3
	.word	6346
	.byte	25
	.byte	'Ifx_CPU_DPR_U',0,7,252,6,3
	.word	6453
	.byte	25
	.byte	'Ifx_CPU_DPRE',0,7,132,7,3
	.word	7013
	.byte	25
	.byte	'Ifx_CPU_DPWE',0,7,140,7,3
	.word	7125
	.byte	25
	.byte	'Ifx_CPU_DSTR',0,7,148,7,3
	.word	3484
	.byte	25
	.byte	'Ifx_CPU_EXEVT',0,7,156,7,3
	.word	9056
	.byte	25
	.byte	'Ifx_CPU_FCX',0,7,164,7,3
	.word	11392
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,7,172,7,3
	.word	5703
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,7,180,7,3
	.word	5955
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,7,188,7,3
	.word	5790
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,7,196,7,3
	.word	6046
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,7,204,7,3
	.word	6137
	.byte	25
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,7,212,7,3
	.word	6228
	.byte	25
	.byte	'Ifx_CPU_ICNT',0,7,220,7,3
	.word	8337
	.byte	25
	.byte	'Ifx_CPU_ICR',0,7,228,7,3
	.word	11272
	.byte	25
	.byte	'Ifx_CPU_ISP',0,7,236,7,3
	.word	11115
	.byte	25
	.byte	'Ifx_CPU_LCX',0,7,244,7,3
	.word	11512
	.byte	25
	.byte	'Ifx_CPU_M1CNT',0,7,252,7,3
	.word	8442
	.byte	25
	.byte	'Ifx_CPU_M2CNT',0,7,132,8,3
	.word	8547
	.byte	25
	.byte	'Ifx_CPU_M3CNT',0,7,140,8,3
	.word	8652
	.byte	25
	.byte	'Ifx_CPU_PC',0,7,148,8,3
	.word	10440
	.byte	25
	.byte	'Ifx_CPU_PCON0',0,7,156,8,3
	.word	4866
	.byte	25
	.byte	'Ifx_CPU_PCON1',0,7,164,8,3
	.word	4625
	.byte	25
	.byte	'Ifx_CPU_PCON2',0,7,172,8,3
	.word	4738
	.byte	25
	.byte	'Ifx_CPU_PCXI',0,7,180,8,3
	.word	10083
	.byte	25
	.byte	'Ifx_CPU_PIEAR',0,7,188,8,3
	.word	4947
	.byte	25
	.byte	'Ifx_CPU_PIETR',0,7,196,8,3
	.word	5188
	.byte	25
	.byte	'Ifx_CPU_PMA0',0,7,204,8,3
	.word	2532
	.byte	25
	.byte	'Ifx_CPU_PMA1',0,7,212,8,3
	.word	2658
	.byte	25
	.byte	'Ifx_CPU_PMA2',0,7,220,8,3
	.word	2762
	.byte	25
	.byte	'Ifx_CPU_PSTR',0,7,228,8,3
	.word	4502
	.byte	25
	.byte	'Ifx_CPU_PSW',0,7,236,8,3
	.word	10340
	.byte	25
	.byte	'Ifx_CPU_SEGEN',0,7,244,8,3
	.word	2275
	.byte	25
	.byte	'Ifx_CPU_SMACON',0,7,252,8,3
	.word	3147
	.byte	11,7,255,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16109
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENA',0,7,132,9,3
	.word	18270
	.byte	11,7,135,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16192
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENB',0,7,140,9,3
	.word	18340
	.byte	11,7,143,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16283
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,7,148,9,3
	.word	18410
	.byte	11,7,151,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16374
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,7,156,9,3
	.word	18484
	.byte	11,7,159,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16473
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,7,164,9,3
	.word	18558
	.byte	11,7,167,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16580
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,7,172,9,3
	.word	18628
	.byte	25
	.byte	'Ifx_CPU_SWEVT',0,7,180,9,3
	.word	9388
	.byte	25
	.byte	'Ifx_CPU_SYSCON',0,7,188,9,3
	.word	10612
	.byte	25
	.byte	'Ifx_CPU_TASK_ASI',0,7,196,9,3
	.word	2395
	.byte	25
	.byte	'Ifx_CPU_TPS_CON',0,7,204,9,3
	.word	7327
	.byte	25
	.byte	'Ifx_CPU_TPS_TIMER',0,7,212,9,3
	.word	7415
	.byte	25
	.byte	'Ifx_CPU_TR_ADR',0,7,220,9,3
	.word	7901
	.byte	25
	.byte	'Ifx_CPU_TR_EVT',0,7,228,9,3
	.word	7817
	.byte	25
	.byte	'Ifx_CPU_TRIG_ACC',0,7,236,9,3
	.word	9601
	.byte	13
	.word	6773
	.byte	25
	.byte	'Ifx_CPU_CPR',0,7,251,9,3
	.word	18897
	.byte	13
	.word	6493
	.byte	25
	.byte	'Ifx_CPU_DPR',0,7,130,10,3
	.word	18923
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN',0,7,133,10,25,16,12
	.byte	'LA',0
	.word	18558
	.byte	4,2,35,0,12
	.byte	'UA',0
	.word	18628
	.byte	4,2,35,4,12
	.byte	'ACCENA',0
	.word	18410
	.byte	4,2,35,8,12
	.byte	'ACCENB',0
	.word	18484
	.byte	4,2,35,12,0,13
	.word	18949
	.byte	25
	.byte	'Ifx_CPU_SPROT_RGN',0,7,139,10,3
	.word	19031
	.byte	13
	.word	7464
	.byte	25
	.byte	'Ifx_CPU_TPS',0,7,146,10,3
	.word	19063
	.byte	13
	.word	7941
	.byte	25
	.byte	'Ifx_CPU_TR',0,7,153,10,3
	.word	19089
	.byte	13
	.word	11861
	.byte	25
	.byte	'Ifx_CPU',0,7,130,11,3
	.word	19114
	.byte	25
	.byte	'IfxCpu_ResourceCpu',0,6,87,3
	.word	1313
	.byte	23,8
	.word	14422
	.byte	24,0,0,28
	.word	19163
	.byte	29
	.byte	'IfxCpu_cfg_indexMap',0,6,93,37
	.word	19172
	.byte	1,1,9
	.byte	'_Ifx_SRC_SRCR_Bits',0,12,45,16,4,10
	.byte	'SRPN',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'ECC',0,1
	.word	501
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	3,0,2,35,2,10
	.byte	'SRR',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SRC_SRCR_Bits',0,12,62,3
	.word	19207
	.byte	11,12,70,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	19207
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SRC_SRCR',0,12,75,3
	.word	19523
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,12,86,25,12,12
	.byte	'TX',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	19523
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	19523
	.byte	4,2,35,8,0,13
	.word	19583
	.byte	25
	.byte	'Ifx_SRC_ASCLIN',0,12,91,3
	.word	19642
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,12,94,25,4,12
	.byte	'SBSRC',0
	.word	19523
	.byte	4,2,35,0,0,13
	.word	19670
	.byte	25
	.byte	'Ifx_SRC_BCUSPB',0,12,97,3
	.word	19707
	.byte	23,64
	.word	19523
	.byte	24,15,0,9
	.byte	'_Ifx_SRC_CAN',0,12,100,25,64,12
	.byte	'INT',0
	.word	19735
	.byte	64,2,35,0,0,13
	.word	19744
	.byte	25
	.byte	'Ifx_SRC_CAN',0,12,103,3
	.word	19776
	.byte	23,32
	.word	19523
	.byte	24,7,0,9
	.byte	'_Ifx_SRC_CAN1',0,12,106,25,32,12
	.byte	'INT',0
	.word	19801
	.byte	32,2,35,0,0,13
	.word	19810
	.byte	25
	.byte	'Ifx_SRC_CAN1',0,12,109,3
	.word	19843
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,12,112,25,16,12
	.byte	'SR0',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19523
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	19523
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	19523
	.byte	4,2,35,12,0,13
	.word	19869
	.byte	25
	.byte	'Ifx_SRC_CCU6',0,12,118,3
	.word	19941
	.byte	23,8
	.word	19523
	.byte	24,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,12,121,25,8,12
	.byte	'SR',0
	.word	19967
	.byte	8,2,35,0,0,13
	.word	19976
	.byte	25
	.byte	'Ifx_SRC_CERBERUS',0,12,124,3
	.word	20012
	.byte	9
	.byte	'_Ifx_SRC_CPU',0,12,127,25,32,12
	.byte	'SBSRC',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	9428
	.byte	28,2,35,4,0,13
	.word	20042
	.byte	25
	.byte	'Ifx_SRC_CPU',0,12,131,1,3
	.word	20096
	.byte	9
	.byte	'_Ifx_SRC_DMA',0,12,134,1,25,80,12
	.byte	'ERR',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	9641
	.byte	12,2,35,4,12
	.byte	'CH',0
	.word	19735
	.byte	64,2,35,16,0,13
	.word	20122
	.byte	25
	.byte	'Ifx_SRC_DMA',0,12,139,1,3
	.word	20187
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,12,142,1,25,4,12
	.byte	'SR',0
	.word	19523
	.byte	4,2,35,0,0,13
	.word	20213
	.byte	25
	.byte	'Ifx_SRC_EMEM',0,12,145,1,3
	.word	20246
	.byte	23,40
	.word	501
	.byte	24,39,0,9
	.byte	'_Ifx_SRC_ERAY',0,12,148,1,25,80,12
	.byte	'INT',0
	.word	19967
	.byte	8,2,35,0,12
	.byte	'TINT',0
	.word	19967
	.byte	8,2,35,8,12
	.byte	'NDAT',0
	.word	19967
	.byte	8,2,35,16,12
	.byte	'MBSC',0
	.word	19967
	.byte	8,2,35,24,12
	.byte	'OBUSY',0
	.word	19523
	.byte	4,2,35,32,12
	.byte	'IBUSY',0
	.word	19523
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	20273
	.byte	40,2,35,40,0,13
	.word	20282
	.byte	25
	.byte	'Ifx_SRC_ERAY',0,12,157,1,3
	.word	20409
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,12,160,1,25,4,12
	.byte	'SR',0
	.word	19523
	.byte	4,2,35,0,0,13
	.word	20436
	.byte	25
	.byte	'Ifx_SRC_ETH',0,12,163,1,3
	.word	20468
	.byte	9
	.byte	'_Ifx_SRC_EVR',0,12,166,1,25,8,12
	.byte	'WUT',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'SCDC',0
	.word	19523
	.byte	4,2,35,4,0,13
	.word	20494
	.byte	25
	.byte	'Ifx_SRC_EVR',0,12,170,1,3
	.word	20541
	.byte	9
	.byte	'_Ifx_SRC_FFT',0,12,173,1,25,12,12
	.byte	'DONE',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'ERR',0
	.word	19523
	.byte	4,2,35,4,12
	.byte	'RFS',0
	.word	19523
	.byte	4,2,35,8,0,13
	.word	20567
	.byte	25
	.byte	'Ifx_SRC_FFT',0,12,178,1,3
	.word	20627
	.byte	23,240,11
	.word	501
	.byte	24,239,11,0,9
	.byte	'_Ifx_SRC_GPSR',0,12,181,1,25,128,12,12
	.byte	'SR0',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19523
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	19523
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	19523
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	20653
	.byte	240,11,2,35,16,0,13
	.word	20664
	.byte	25
	.byte	'Ifx_SRC_GPSR',0,12,188,1,3
	.word	20760
	.byte	9
	.byte	'_Ifx_SRC_GPT12',0,12,191,1,25,48,12
	.byte	'CIRQ',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'T2',0
	.word	19523
	.byte	4,2,35,4,12
	.byte	'T3',0
	.word	19523
	.byte	4,2,35,8,12
	.byte	'T4',0
	.word	19523
	.byte	4,2,35,12,12
	.byte	'T5',0
	.word	19523
	.byte	4,2,35,16,12
	.byte	'T6',0
	.word	19523
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	4178
	.byte	24,2,35,24,0,13
	.word	20787
	.byte	25
	.byte	'Ifx_SRC_GPT12',0,12,200,1,3
	.word	20904
	.byte	23,236,2
	.word	501
	.byte	24,235,2,0,23,32
	.word	19801
	.byte	24,0,0,23,224,7
	.word	501
	.byte	24,223,7,0,23,64
	.word	19801
	.byte	24,1,0,9
	.byte	'_Ifx_SRC_GTM',0,12,203,1,25,192,11,12
	.byte	'AEIIRQ',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	20932
	.byte	236,2,2,35,4,12
	.byte	'ERR',0
	.word	19523
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	9641
	.byte	12,3,35,244,2,12
	.byte	'TIM',0
	.word	20943
	.byte	32,3,35,128,3,12
	.byte	'reserved_1A0',0
	.word	20952
	.byte	224,7,3,35,160,3,12
	.byte	'TOM',0
	.word	20963
	.byte	64,3,35,128,11,0,13
	.word	20972
	.byte	25
	.byte	'Ifx_SRC_GTM',0,12,212,1,3
	.word	21119
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,12,215,1,25,8,12
	.byte	'HSM',0
	.word	19967
	.byte	8,2,35,0,0,13
	.word	21145
	.byte	25
	.byte	'Ifx_SRC_HSM',0,12,218,1,3
	.word	21178
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,12,221,1,25,4,12
	.byte	'SR',0
	.word	19523
	.byte	4,2,35,0,0,13
	.word	21204
	.byte	25
	.byte	'Ifx_SRC_LMU',0,12,224,1,3
	.word	21236
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,12,227,1,25,4,12
	.byte	'SR',0
	.word	19523
	.byte	4,2,35,0,0,13
	.word	21262
	.byte	25
	.byte	'Ifx_SRC_PMU',0,12,230,1,3
	.word	21294
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,12,233,1,25,24,12
	.byte	'TX',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	19523
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	19523
	.byte	4,2,35,8,12
	.byte	'PT',0
	.word	19523
	.byte	4,2,35,12,12
	.byte	'HC',0
	.word	19523
	.byte	4,2,35,16,12
	.byte	'U',0
	.word	19523
	.byte	4,2,35,20,0,13
	.word	21320
	.byte	25
	.byte	'Ifx_SRC_QSPI',0,12,241,1,3
	.word	21413
	.byte	23,16
	.word	19523
	.byte	24,3,0,9
	.byte	'_Ifx_SRC_SCU',0,12,244,1,25,20,12
	.byte	'DTS',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'ERU',0
	.word	21440
	.byte	16,2,35,4,0,13
	.word	21449
	.byte	25
	.byte	'Ifx_SRC_SCU',0,12,248,1,3
	.word	21495
	.byte	9
	.byte	'_Ifx_SRC_SENT',0,12,251,1,25,16,12
	.byte	'SR',0
	.word	21440
	.byte	16,2,35,0,0,13
	.word	21521
	.byte	25
	.byte	'Ifx_SRC_SENT',0,12,254,1,3
	.word	21554
	.byte	23,12
	.word	19523
	.byte	24,2,0,9
	.byte	'_Ifx_SRC_SMU',0,12,129,2,25,12,12
	.byte	'SR',0
	.word	21581
	.byte	12,2,35,0,0,13
	.word	21590
	.byte	25
	.byte	'Ifx_SRC_SMU',0,12,132,2,3
	.word	21622
	.byte	23,88
	.word	501
	.byte	24,87,0,9
	.byte	'_Ifx_SRC_STM',0,12,135,2,25,96,12
	.byte	'SR0',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19523
	.byte	4,2,35,4,12
	.byte	'reserved_8',0
	.word	21648
	.byte	88,2,35,8,0,13
	.word	21657
	.byte	25
	.byte	'Ifx_SRC_STM',0,12,140,2,3
	.word	21723
	.byte	23,176,2
	.word	501
	.byte	24,175,2,0,9
	.byte	'_Ifx_SRC_VADCCG',0,12,143,2,25,192,2,12
	.byte	'SR0',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19523
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	19523
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	19523
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	21749
	.byte	176,2,2,35,16,0,13
	.word	21760
	.byte	25
	.byte	'Ifx_SRC_VADCCG',0,12,150,2,3
	.word	21858
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,12,153,2,25,16,12
	.byte	'SR0',0
	.word	19523
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	19523
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	19523
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	19523
	.byte	4,2,35,12,0,13
	.word	21887
	.byte	25
	.byte	'Ifx_SRC_VADCG',0,12,159,2,3
	.word	21961
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,12,162,2,25,4,12
	.byte	'SRC',0
	.word	19523
	.byte	4,2,35,0,0,13
	.word	21989
	.byte	25
	.byte	'Ifx_SRC_XBAR',0,12,165,2,3
	.word	22023
	.byte	23,24
	.word	19583
	.byte	24,1,0,13
	.word	22050
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,12,178,2,25,24,12
	.byte	'ASCLIN',0
	.word	22059
	.byte	24,2,35,0,0,13
	.word	22064
	.byte	25
	.byte	'Ifx_SRC_GASCLIN',0,12,181,2,3
	.word	22104
	.byte	13
	.word	19670
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,12,184,2,25,4,12
	.byte	'SPB',0
	.word	22134
	.byte	4,2,35,0,0,13
	.word	22139
	.byte	25
	.byte	'Ifx_SRC_GBCU',0,12,187,2,3
	.word	22173
	.byte	23,64
	.word	19744
	.byte	24,0,0,13
	.word	22200
	.byte	23,32
	.word	19810
	.byte	24,0,0,13
	.word	22214
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,12,190,2,25,96,12
	.byte	'CAN',0
	.word	22209
	.byte	64,2,35,0,12
	.byte	'CAN1',0
	.word	22223
	.byte	32,2,35,64,0,13
	.word	22228
	.byte	25
	.byte	'Ifx_SRC_GCAN',0,12,194,2,3
	.word	22276
	.byte	23,32
	.word	19869
	.byte	24,1,0,13
	.word	22303
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,12,197,2,25,32,12
	.byte	'CCU6',0
	.word	22312
	.byte	32,2,35,0,0,13
	.word	22317
	.byte	25
	.byte	'Ifx_SRC_GCCU6',0,12,200,2,3
	.word	22353
	.byte	13
	.word	19976
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,12,203,2,25,8,12
	.byte	'CERBERUS',0
	.word	22381
	.byte	8,2,35,0,0,13
	.word	22386
	.byte	25
	.byte	'Ifx_SRC_GCERBERUS',0,12,206,2,3
	.word	22430
	.byte	23,32
	.word	20042
	.byte	24,0,0,13
	.word	22462
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,12,209,2,25,32,12
	.byte	'CPU',0
	.word	22471
	.byte	32,2,35,0,0,13
	.word	22476
	.byte	25
	.byte	'Ifx_SRC_GCPU',0,12,212,2,3
	.word	22510
	.byte	23,80
	.word	20122
	.byte	24,0,0,13
	.word	22537
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,12,215,2,25,80,12
	.byte	'DMA',0
	.word	22546
	.byte	80,2,35,0,0,13
	.word	22551
	.byte	25
	.byte	'Ifx_SRC_GDMA',0,12,218,2,3
	.word	22585
	.byte	23,4
	.word	20213
	.byte	24,0,0,13
	.word	22612
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,12,221,2,25,4,12
	.byte	'EMEM',0
	.word	22621
	.byte	4,2,35,0,0,13
	.word	22626
	.byte	25
	.byte	'Ifx_SRC_GEMEM',0,12,224,2,3
	.word	22662
	.byte	23,80
	.word	20282
	.byte	24,0,0,13
	.word	22690
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,12,227,2,25,80,12
	.byte	'ERAY',0
	.word	22699
	.byte	80,2,35,0,0,13
	.word	22704
	.byte	25
	.byte	'Ifx_SRC_GERAY',0,12,230,2,3
	.word	22740
	.byte	23,4
	.word	20436
	.byte	24,0,0,13
	.word	22768
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,12,233,2,25,4,12
	.byte	'ETH',0
	.word	22777
	.byte	4,2,35,0,0,13
	.word	22782
	.byte	25
	.byte	'Ifx_SRC_GETH',0,12,236,2,3
	.word	22816
	.byte	23,8
	.word	20494
	.byte	24,0,0,13
	.word	22843
	.byte	9
	.byte	'_Ifx_SRC_GEVR',0,12,239,2,25,8,12
	.byte	'EVR',0
	.word	22852
	.byte	8,2,35,0,0,13
	.word	22857
	.byte	25
	.byte	'Ifx_SRC_GEVR',0,12,242,2,3
	.word	22891
	.byte	23,12
	.word	20567
	.byte	24,0,0,13
	.word	22918
	.byte	9
	.byte	'_Ifx_SRC_GFFT',0,12,245,2,25,12,12
	.byte	'FFT',0
	.word	22927
	.byte	12,2,35,0,0,13
	.word	22932
	.byte	25
	.byte	'Ifx_SRC_GFFT',0,12,248,2,3
	.word	22966
	.byte	23,128,12
	.word	20664
	.byte	24,0,0,13
	.word	22993
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,12,251,2,25,128,12,12
	.byte	'GPSR',0
	.word	23003
	.byte	128,12,2,35,0,0,13
	.word	23008
	.byte	25
	.byte	'Ifx_SRC_GGPSR',0,12,254,2,3
	.word	23046
	.byte	23,48
	.word	20787
	.byte	24,0,0,13
	.word	23074
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,12,129,3,25,48,12
	.byte	'GPT12',0
	.word	23083
	.byte	48,2,35,0,0,13
	.word	23088
	.byte	25
	.byte	'Ifx_SRC_GGPT12',0,12,132,3,3
	.word	23126
	.byte	23,192,11
	.word	20972
	.byte	24,0,0,13
	.word	23155
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,12,135,3,25,192,11,12
	.byte	'GTM',0
	.word	23165
	.byte	192,11,2,35,0,0,13
	.word	23170
	.byte	25
	.byte	'Ifx_SRC_GGTM',0,12,138,3,3
	.word	23206
	.byte	23,8
	.word	21145
	.byte	24,0,0,13
	.word	23233
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,12,141,3,25,8,12
	.byte	'HSM',0
	.word	23242
	.byte	8,2,35,0,0,13
	.word	23247
	.byte	25
	.byte	'Ifx_SRC_GHSM',0,12,144,3,3
	.word	23281
	.byte	23,4
	.word	21204
	.byte	24,0,0,13
	.word	23308
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,12,147,3,25,4,12
	.byte	'LMU',0
	.word	23317
	.byte	4,2,35,0,0,13
	.word	23322
	.byte	25
	.byte	'Ifx_SRC_GLMU',0,12,150,3,3
	.word	23356
	.byte	23,8
	.word	21262
	.byte	24,1,0,13
	.word	23383
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,12,153,3,25,8,12
	.byte	'PMU',0
	.word	23392
	.byte	8,2,35,0,0,13
	.word	23397
	.byte	25
	.byte	'Ifx_SRC_GPMU',0,12,156,3,3
	.word	23431
	.byte	23,96
	.word	21320
	.byte	24,3,0,13
	.word	23458
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,12,159,3,25,96,12
	.byte	'QSPI',0
	.word	23467
	.byte	96,2,35,0,0,13
	.word	23472
	.byte	25
	.byte	'Ifx_SRC_GQSPI',0,12,162,3,3
	.word	23508
	.byte	13
	.word	21449
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,12,165,3,25,20,12
	.byte	'SCU',0
	.word	23536
	.byte	20,2,35,0,0,13
	.word	23541
	.byte	25
	.byte	'Ifx_SRC_GSCU',0,12,168,3,3
	.word	23575
	.byte	23,16
	.word	21521
	.byte	24,0,0,13
	.word	23602
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,12,171,3,25,16,12
	.byte	'SENT',0
	.word	23611
	.byte	16,2,35,0,0,13
	.word	23616
	.byte	25
	.byte	'Ifx_SRC_GSENT',0,12,174,3,3
	.word	23652
	.byte	23,12
	.word	21590
	.byte	24,0,0,13
	.word	23680
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,12,177,3,25,12,12
	.byte	'SMU',0
	.word	23689
	.byte	12,2,35,0,0,13
	.word	23694
	.byte	25
	.byte	'Ifx_SRC_GSMU',0,12,180,3,3
	.word	23728
	.byte	23,96
	.word	21657
	.byte	24,0,0,13
	.word	23755
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,12,183,3,25,96,12
	.byte	'STM',0
	.word	23764
	.byte	96,2,35,0,0,13
	.word	23769
	.byte	25
	.byte	'Ifx_SRC_GSTM',0,12,186,3,3
	.word	23803
	.byte	23,64
	.word	21887
	.byte	24,3,0,13
	.word	23830
	.byte	23,224,1
	.word	501
	.byte	24,223,1,0,23,192,2
	.word	21760
	.byte	24,0,0,13
	.word	23855
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,12,189,3,25,224,4,12
	.byte	'G',0
	.word	23839
	.byte	64,2,35,0,12
	.byte	'reserved_40',0
	.word	23844
	.byte	224,1,2,35,64,12
	.byte	'CG',0
	.word	23865
	.byte	192,2,3,35,160,2,0,13
	.word	23870
	.byte	25
	.byte	'Ifx_SRC_GVADC',0,12,194,3,3
	.word	23940
	.byte	13
	.word	21989
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,12,197,3,25,4,12
	.byte	'XBAR',0
	.word	23968
	.byte	4,2,35,0,0,13
	.word	23973
	.byte	25
	.byte	'Ifx_SRC_GXBAR',0,12,200,3,3
	.word	24009
	.byte	9
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,10
	.byte	'EN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	24037
	.byte	9
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	24594
	.byte	9
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,10
	.byte	'STM0DIS',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'STM1DIS',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'STM2DIS',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	326
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	24671
	.byte	9
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'BAUD2DIV',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'SRIDIV',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'LPDIV',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'SPBDIV',0,1
	.word	501
	.byte	4,4,2,35,2,10
	.byte	'FSI2DIV',0,1
	.word	501
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'FSIDIV',0,1
	.word	501
	.byte	2,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	2,4,2,35,3,10
	.byte	'CLKSEL',0,1
	.word	501
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	24807
	.byte	9
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,10
	.byte	'CANDIV',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'ERAYDIV',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'STMDIV',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'GTMDIV',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'ETHDIV',0,1
	.word	501
	.byte	4,4,2,35,2,10
	.byte	'ASCLINFDIV',0,1
	.word	501
	.byte	4,0,2,35,2,10
	.byte	'ASCLINSDIV',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'INSEL',0,1
	.word	501
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	25089
	.byte	9
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,10
	.byte	'BBBDIV',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	25327
	.byte	9
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,10
	.byte	'PLLDIV',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'PLLSEL',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'PLLERAYDIV',0,1
	.word	501
	.byte	6,2,2,35,1,10
	.byte	'PLLERAYSEL',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'SRIDIV',0,1
	.word	501
	.byte	6,2,2,35,2,10
	.byte	'SRISEL',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,149,1,3
	.word	25455
	.byte	9
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,152,1,16,4,10
	.byte	'SPBDIV',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'SPBSEL',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'GTMDIV',0,1
	.word	501
	.byte	6,2,2,35,1,10
	.byte	'GTMSEL',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'STMDIV',0,1
	.word	501
	.byte	6,2,2,35,2,10
	.byte	'STMSEL',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,163,1,3
	.word	25682
	.byte	9
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,166,1,16,4,10
	.byte	'MAXDIV',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,172,1,3
	.word	25901
	.byte	9
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,175,1,16,4,10
	.byte	'CPU0DIV',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	326
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,179,1,3
	.word	26029
	.byte	9
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,182,1,16,4,10
	.byte	'CHREV',0,1
	.word	501
	.byte	6,2,2,35,0,10
	.byte	'CHTEC',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'CHID',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'EEA',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'UCODE',0,1
	.word	501
	.byte	7,0,2,35,2,10
	.byte	'FSIZE',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'SP',0,1
	.word	501
	.byte	2,2,2,35,3,10
	.byte	'SEC',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,193,1,3
	.word	26129
	.byte	9
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,196,1,16,4,10
	.byte	'PWD',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'START',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'CAL',0,4
	.word	326
	.byte	22,6,2,35,0,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	5,1,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,204,1,3
	.word	26337
	.byte	9
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,207,1,16,4,10
	.byte	'LOWER',0,2
	.word	518
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	501
	.byte	5,1,2,35,1,10
	.byte	'LLU',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'UPPER',0,2
	.word	518
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	4,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'UOF',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,216,1,3
	.word	26502
	.byte	9
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,219,1,16,4,10
	.byte	'RESULT',0,2
	.word	518
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	501
	.byte	4,2,2,35,1,10
	.byte	'RDY',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'BUSY',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,226,1,3
	.word	26685
	.byte	9
	.byte	'_Ifx_SCU_EICR_Bits',0,4,229,1,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'EXIS0',0,1
	.word	501
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'FEN0',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'REN0',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'LDEN0',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'EIEN0',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'INP0',0,1
	.word	501
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	326
	.byte	5,12,2,35,0,10
	.byte	'EXIS1',0,1
	.word	501
	.byte	3,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'FEN1',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'REN1',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'LDEN1',0,1
	.word	501
	.byte	1,5,2,35,3,10
	.byte	'EIEN1',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'INP1',0,1
	.word	501
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EICR_Bits',0,4,248,1,3
	.word	26839
	.byte	9
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,251,1,16,4,10
	.byte	'INTF0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'INTF1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'INTF2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'INTF3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'INTF4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'INTF5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'INTF6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'INTF7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_EIFR_Bits',0,4,134,2,3
	.word	27203
	.byte	9
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,137,2,16,4,10
	.byte	'POL',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'MODE',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'ENON',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PSEL',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	518
	.byte	12,0,2,35,0,10
	.byte	'EMSF',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'SEMSF',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	6,0,2,35,2,10
	.byte	'EMSFM',0,1
	.word	501
	.byte	2,6,2,35,3,10
	.byte	'SEMSFM',0,1
	.word	501
	.byte	2,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_EMSR_Bits',0,4,150,2,3
	.word	27414
	.byte	9
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,153,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	7,1,2,35,0,10
	.byte	'EDCON',0,2
	.word	518
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	326
	.byte	23,0,2,35,0,0,25
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,158,2,3
	.word	27666
	.byte	9
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,161,2,16,4,10
	.byte	'ARI',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ARC',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,166,2,3
	.word	27784
	.byte	9
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,169,2,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	28,4,2,35,0,10
	.byte	'EVR13OFF',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'BPEVR13OFF',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,176,2,3
	.word	27895
	.byte	9
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,179,2,16,4,10
	.byte	'ADC13V',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'ADCSWDV',0,1
	.word	501
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,186,2,3
	.word	28058
	.byte	9
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,189,2,16,4,10
	.byte	'EVR13OVMOD',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'EVR13UVMOD',0,1
	.word	501
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	518
	.byte	10,0,2,35,0,10
	.byte	'SWDOVMOD',0,1
	.word	501
	.byte	2,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	2,4,2,35,2,10
	.byte	'SWDUVMOD',0,1
	.word	501
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	518
	.byte	8,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,201,2,3
	.word	28220
	.byte	9
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,204,2,16,4,10
	.byte	'EVR13OVVAL',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'SWDOVVAL',0,1
	.word	501
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,212,2,3
	.word	28498
	.byte	9
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,215,2,16,4,10
	.byte	'reserved_0',0,4
	.word	326
	.byte	28,4,2,35,0,10
	.byte	'RSTSWDOFF',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'BPRSTSWDOFF',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,222,2,3
	.word	28677
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,225,2,16,4,10
	.byte	'SD33P',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'SD33I',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	326
	.byte	19,1,2,35,0,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,232,2,3
	.word	28837
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,235,2,16,4,10
	.byte	'SDFREQSPRD',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'TON',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'TOFF',0,1
	.word	501
	.byte	8,0,2,35,2,10
	.byte	'SDSTEP',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'SYNCDIV',0,1
	.word	501
	.byte	3,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,244,2,3
	.word	28998
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,247,2,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'STBS',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'STSP',0,1
	.word	501
	.byte	2,4,2,35,1,10
	.byte	'NS',0,1
	.word	501
	.byte	2,2,2,35,1,10
	.byte	'OL',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'PIAD',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'ADCMODE',0,1
	.word	501
	.byte	4,4,2,35,2,10
	.byte	'ADCLPF',0,1
	.word	501
	.byte	2,2,2,35,2,10
	.byte	'ADCLSB',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'SDLUT',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,134,3,3
	.word	29190
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,137,3,16,4,10
	.byte	'SDOLCON',0,1
	.word	501
	.byte	7,1,2,35,0,10
	.byte	'MODSEL',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'MODLOW',0,1
	.word	501
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'SDVOKLVL',0,1
	.word	501
	.byte	6,2,2,35,2,10
	.byte	'MODMAN',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'MODHIGH',0,1
	.word	501
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,147,3,3
	.word	29486
	.byte	9
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,150,3,16,4,10
	.byte	'EVR13',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'OV13',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'OVSWD',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'UV13',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'UVSWD',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'BGPROK',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'SCMOD',0,1
	.word	501
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	326
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,164,3,3
	.word	29701
	.byte	9
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,167,3,16,4,10
	.byte	'EVR13UVVAL',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'SWDUVVAL',0,1
	.word	501
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,175,3,3
	.word	29990
	.byte	9
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,178,3,16,4,10
	.byte	'EN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'SEL0',0,1
	.word	501
	.byte	4,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	518
	.byte	10,0,2,35,0,10
	.byte	'EN1',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'NSEL',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'SEL1',0,1
	.word	501
	.byte	4,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	501
	.byte	2,0,2,35,2,10
	.byte	'DIV1',0,1
	.word	501
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,189,3,3
	.word	30169
	.byte	9
	.byte	'_Ifx_SCU_FDR_Bits',0,4,192,3,16,4,10
	.byte	'STEP',0,2
	.word	518
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	501
	.byte	4,2,2,35,1,10
	.byte	'DM',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'RESULT',0,2
	.word	518
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	5,1,2,35,3,10
	.byte	'DISCLK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_FDR_Bits',0,4,200,3,3
	.word	30387
	.byte	9
	.byte	'_Ifx_SCU_FMR_Bits',0,4,203,3,16,4,10
	.byte	'FS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'FS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'FS2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'FS3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'FS4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'FS5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'FS6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'FS7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'FC0',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'FC1',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'FC2',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'FC3',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'FC4',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'FC5',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'FC6',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'FC7',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_SCU_FMR_Bits',0,4,223,3,3
	.word	30550
	.byte	9
	.byte	'_Ifx_SCU_ID_Bits',0,4,226,3,16,4,10
	.byte	'MODREV',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_ID_Bits',0,4,231,3,3
	.word	30886
	.byte	9
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,234,3,16,4,10
	.byte	'IPEN00',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'IPEN01',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'IPEN02',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'IPEN03',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'IPEN04',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IPEN05',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'IPEN06',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'IPEN07',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	5,3,2,35,1,10
	.byte	'GEEN0',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'IGP0',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'IPEN10',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'IPEN11',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'IPEN12',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'IPEN13',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'IPEN14',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'IPEN15',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'IPEN16',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'IPEN17',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	5,3,2,35,3,10
	.byte	'GEEN1',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'IGP1',0,1
	.word	501
	.byte	2,0,2,35,3,0,25
	.byte	'Ifx_SCU_IGCR_Bits',0,4,130,4,3
	.word	30993
	.byte	9
	.byte	'_Ifx_SCU_IN_Bits',0,4,133,4,16,4,10
	.byte	'P0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_IN_Bits',0,4,138,4,3
	.word	31445
	.byte	9
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,141,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	4,4,2,35,0,10
	.byte	'PC0',0,1
	.word	501
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'PC1',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_IOCR_Bits',0,4,148,4,3
	.word	31544
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,151,4,16,4,10
	.byte	'LBISTREQ',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'LBISTREQP',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PATTERNS',0,2
	.word	518
	.byte	14,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,157,4,3
	.word	31694
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,160,4,16,4,10
	.byte	'SEED',0,4
	.word	326
	.byte	23,9,2,35,0,10
	.byte	'reserved_23',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'SPLITSH',0,1
	.word	501
	.byte	3,5,2,35,3,10
	.byte	'BODY',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'LBISTFREQU',0,1
	.word	501
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,167,4,3
	.word	31843
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,170,4,16,4,10
	.byte	'SIGNATURE',0,4
	.word	326
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	7,1,2,35,3,10
	.byte	'LBISTDONE',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,175,4,3
	.word	32004
	.byte	9
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,178,4,16,4,10
	.byte	'reserved_0',0,2
	.word	518
	.byte	16,0,2,35,0,10
	.byte	'LS',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	518
	.byte	14,1,2,35,2,10
	.byte	'LSEN',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,184,4,3
	.word	32134
	.byte	9
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,187,4,16,4,10
	.byte	'LCLT0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'LCLT1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,192,4,3
	.word	32268
	.byte	9
	.byte	'_Ifx_SCU_MANID_Bits',0,4,195,4,16,4,10
	.byte	'DEPT',0,1
	.word	501
	.byte	5,3,2,35,0,10
	.byte	'MANUF',0,2
	.word	518
	.byte	11,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_MANID_Bits',0,4,200,4,3
	.word	32383
	.byte	9
	.byte	'_Ifx_SCU_OMR_Bits',0,4,203,4,16,4,10
	.byte	'PS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	518
	.byte	14,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	518
	.byte	14,0,2,35,2,0,25
	.byte	'Ifx_SCU_OMR_Bits',0,4,211,4,3
	.word	32494
	.byte	9
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,214,4,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PLLLV',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'OSCRES',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'GAINSEL',0,1
	.word	501
	.byte	2,3,2,35,0,10
	.byte	'MODE',0,1
	.word	501
	.byte	2,1,2,35,0,10
	.byte	'SHBY',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'PLLHV',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'X1D',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'X1DEN',0,1
	.word	501
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'OSCVAL',0,1
	.word	501
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	2,1,2,35,2,10
	.byte	'APREN',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,231,4,3
	.word	32652
	.byte	9
	.byte	'_Ifx_SCU_OUT_Bits',0,4,234,4,16,4,10
	.byte	'P0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_OUT_Bits',0,4,239,4,3
	.word	32992
	.byte	9
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,242,4,16,4,10
	.byte	'CSEL0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'CSEL1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'CSEL2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	518
	.byte	13,0,2,35,0,10
	.byte	'OVSTRT',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'OVSTP',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'DCINVAL',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'OVCONF',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'POVCONF',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	6,0,2,35,3,0,25
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,255,4,3
	.word	33093
	.byte	9
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,130,5,16,4,10
	.byte	'OVEN0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'OVEN1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'OVEN2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	326
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,136,5,3
	.word	33360
	.byte	9
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,139,5,16,4,10
	.byte	'PDIS0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_PDISC_Bits',0,4,144,5,3
	.word	33496
	.byte	9
	.byte	'_Ifx_SCU_PDR_Bits',0,4,147,5,16,4,10
	.byte	'PD0',0,1
	.word	501
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	501
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_PDR_Bits',0,4,154,5,3
	.word	33607
	.byte	9
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,157,5,16,4,10
	.byte	'PDR0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PDR1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PDR2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PDR3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PDR4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PDR5',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PDR6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PDR7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_PDRR_Bits',0,4,168,5,3
	.word	33740
	.byte	9
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,171,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'MODEN',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	518
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,188,5,3
	.word	33943
	.byte	9
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,191,5,16,4,10
	.byte	'K2DIV',0,1
	.word	501
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	501
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	501
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	518
	.byte	9,0,2,35,2,0,25
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,199,5,3
	.word	34299
	.byte	9
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,202,5,16,4,10
	.byte	'MODCFG',0,2
	.word	518
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,206,5,3
	.word	34477
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,209,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	518
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	501
	.byte	5,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	501
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,226,5,3
	.word	34577
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,229,5,16,4,10
	.byte	'K2DIV',0,1
	.word	501
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	501
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	501
	.byte	4,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	501
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	518
	.byte	9,0,2,35,2,0,25
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,237,5,3
	.word	34947
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,240,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'PWDSTAT',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	326
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,249,5,3
	.word	35133
	.byte	9
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,252,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'MODRUN',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	326
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,135,6,3
	.word	35331
	.byte	25
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,145,6,3
	.word	13809
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,148,6,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1WKEN',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'PINAWKEN',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'PINBWKEN',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'ESR0DFEN',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'ESR0EDCON',0,1
	.word	501
	.byte	2,1,2,35,0,10
	.byte	'ESR1DFEN',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'ESR1EDCON',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'PINADFEN',0,1
	.word	501
	.byte	1,5,2,35,1,10
	.byte	'PINAEDCON',0,1
	.word	501
	.byte	2,3,2,35,1,10
	.byte	'PINBDFEN',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'PINBEDCON',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'STBYRAMSEL',0,1
	.word	501
	.byte	2,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	2,1,2,35,2,10
	.byte	'PORSTDF',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'DCDCSYNC',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	3,3,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,174,6,3
	.word	35592
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,177,6,16,4,10
	.byte	'reserved_0',0,2
	.word	518
	.byte	12,4,2,35,0,10
	.byte	'IRADIS',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	326
	.byte	14,5,2,35,0,10
	.byte	'STBYEVEN',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'STBYEV',0,1
	.word	501
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,185,6,3
	.word	36151
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR3_Bits',0,4,188,6,16,4,10
	.byte	'WUTREL',0,4
	.word	326
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	4,4,2,35,3,10
	.byte	'WUTDIV',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWCR3_Bits',0,4,196,6,3
	.word	36334
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,199,6,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKP',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUN',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PINAWKP',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUN',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PINBWKP',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUN',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'PORSTDF',0,1
	.word	501
	.byte	1,6,2,35,1,10
	.byte	'HWCFGEVR',0,1
	.word	501
	.byte	3,3,2,35,1,10
	.byte	'STBYRAM',0,1
	.word	501
	.byte	2,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'WUTWKP',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUN',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'ESR1WKEN',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'PINAWKEN',0,1
	.word	501
	.byte	1,2,2,35,2,10
	.byte	'PINBWKEN',0,1
	.word	501
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	518
	.byte	4,5,2,35,2,10
	.byte	'ESR0TRIST',0,1
	.word	501
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	501
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	501
	.byte	1,1,2,35,3,10
	.byte	'WUTRUN',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,226,6,3
	.word	36503
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,229,6,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKPCLR',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUNCLR',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'PINAWKPCLR',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUNCLR',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'PINBWKPCLR',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUNCLR',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'WUTWKPCLR',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUNCLR',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	518
	.byte	14,0,2,35,2,0,25
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,242,6,3
	.word	37070
	.byte	9
	.byte	'_Ifx_SCU_PMSWUTCNT_Bits',0,4,245,6,16,4,10
	.byte	'WUTCNT',0,4
	.word	326
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	501
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	501
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWUTCNT_Bits',0,4,250,6,3
	.word	37386
	.byte	9
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,253,6,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'CLRC',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	518
	.byte	10,4,2,35,0,10
	.byte	'CSS0',0,1
	.word	501
	.byte	1,3,2,35,1,10
	.byte	'CSS1',0,1
	.word	501
	.byte	1,2,2,35,1,10
	.byte	'CSS2',0,1
	.word	501
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'USRINFO',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,135,7,3
	.word	37505
	.byte	9
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,138,7,16,4,10
	.byte	'ESR0',0,1
	.word	501
	.byte	2,6,2,35,0,10
	.byte	'ESR1',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	2,2,2,35,0,10
	.byte	'SMU',0,1
	.word	501
	.byte	2,0,2,35,0,10
	.byte	'SW',0,1
	.word	501
	.byte	2,6,2,35,1,10
	.byte	'STM0',0,1
	.word	501
	.byte	2,4,2,35,1,10
	.byte	'STM1',0,1
	.word	501
	.byte	2,2,2,35,1,10
	.byte	'STM2',0,1
	.word	501
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,149,7,3
	.word	37714
	.byte	9
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,152,7,16,4,10
	.byte	'ESR0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMU',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'SW',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'STM0',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'STM1',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'STM2',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	501
	.byte	8,0,2,35,1,10
	.byte	'PORST',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'CB0',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'CB1',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'CB3',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	2,1,2,35,2,10
	.byte	'EVR13',0,1
	.word	501
	.byte	1,0,2,35,2,10
	.byte	'EVR33',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'SWD',0,1
	.word	501
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	501
	.byte	2,4,2,35,3,10
	.byte	'STBYR',0,1
	.word	501
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	501
	.byte	3,0,2,35,3,0,25
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,175,7,3
	.word	37925
	.byte	9
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,178,7,16,4,10
	.byte	'HBT',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	326
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,182,7,3
	.word	38357
	.byte	9
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,185,7,16,4,10
	.byte	'HWCFG',0,1
	.word	501
	.byte	8,0,2,35,0,10
	.byte	'FTM',0,1
	.word	501
	.byte	7,1,2,35,1,10
	.byte	'MODE',0,1
	.word	501
	.byte	1,0,2,35,1,10
	.byte	'FCBAE',0,1
	.word	501
	.byte	1,7,2,35,2,10
	.byte	'LUDIS',0,1
	.word	501
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	501
	.byte	1,5,2,35,2,10
	.byte	'TRSTL',0,1
	.word	501
	.byte	1,4,2,35,2,10
	.byte	'SPDEN',0,1
	.word	501
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	501
	.byte	3,0,2,35,2,10
	.byte	'RAMINT',0,1
	.word	501
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	501
	.byte	7,0,2,35,3,0,25
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,198,7,3
	.word	38453
	.byte	9
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,201,7,16,4,10
	.byte	'reserved_0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'SWRSTREQ',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	326
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,206,7,3
	.word	38713
	.byte	9
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,209,7,16,4,10
	.byte	'CCTRIG0',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'RAMINTM',0,1
	.word	501
	.byte	2,4,2,35,0,10
	.byte	'SETLUDIS',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	501
	.byte	3,0,2,35,0,10
	.byte	'DATM',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	326
	.byte	23,0,2,35,0,0,25
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,218,7,3
	.word	38838
	.byte	9
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,221,7,16,4,10
	.byte	'ESR0T',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,228,7,3
	.word	39035
	.byte	9
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,231,7,16,4,10
	.byte	'ESR0T',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,238,7,3
	.word	39188
	.byte	9
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,241,7,16,4,10
	.byte	'ESR0T',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,248,7,3
	.word	39341
	.byte	9
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,251,7,16,4,10
	.byte	'ESR0T',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	326
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,130,8,3
	.word	39494
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,139,8,3
	.word	365
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,154,8,3
	.word	540
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,170,8,3
	.word	784
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,173,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	349
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	349
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	349
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	349
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,179,8,3
	.word	39749
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,182,8,16,4,10
	.byte	'CLRIRF',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'IR0',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,195,8,3
	.word	39875
	.byte	9
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,198,8,16,4,10
	.byte	'AE',0,1
	.word	501
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	501
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	501
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	501
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	501
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	501
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	501
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	501
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	501
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	501
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	518
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,211,8,3
	.word	40127
	.byte	11,4,219,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24037
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ACCEN0',0,4,224,8,3
	.word	40346
	.byte	11,4,227,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24594
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ACCEN1',0,4,232,8,3
	.word	40410
	.byte	11,4,235,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24671
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ARSTDIS',0,4,240,8,3
	.word	40474
	.byte	11,4,243,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24807
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON0',0,4,248,8,3
	.word	40539
	.byte	11,4,251,8,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25089
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON1',0,4,128,9,3
	.word	40604
	.byte	11,4,131,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25327
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON2',0,4,136,9,3
	.word	40669
	.byte	11,4,139,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25455
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON3',0,4,144,9,3
	.word	40734
	.byte	11,4,147,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25682
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON4',0,4,152,9,3
	.word	40799
	.byte	11,4,155,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25901
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON5',0,4,160,9,3
	.word	40864
	.byte	11,4,163,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26029
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON6',0,4,168,9,3
	.word	40929
	.byte	11,4,171,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26129
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CHIPID',0,4,176,9,3
	.word	40994
	.byte	11,4,179,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26337
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_DTSCON',0,4,184,9,3
	.word	41058
	.byte	11,4,187,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26502
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_DTSLIM',0,4,192,9,3
	.word	41122
	.byte	11,4,195,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26685
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_DTSSTAT',0,4,200,9,3
	.word	41186
	.byte	11,4,203,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26839
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EICR',0,4,208,9,3
	.word	41251
	.byte	11,4,211,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27203
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EIFR',0,4,216,9,3
	.word	41313
	.byte	11,4,219,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27414
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EMSR',0,4,224,9,3
	.word	41375
	.byte	11,4,227,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27666
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ESRCFG',0,4,232,9,3
	.word	41437
	.byte	11,4,235,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27784
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ESROCFG',0,4,240,9,3
	.word	41501
	.byte	11,4,243,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27895
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVR13CON',0,4,248,9,3
	.word	41566
	.byte	11,4,251,9,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28058
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,128,10,3
	.word	41632
	.byte	11,4,131,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28220
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,136,10,3
	.word	41700
	.byte	11,4,139,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28498
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVROVMON',0,4,144,10,3
	.word	41768
	.byte	11,4,147,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28677
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRRSTCON',0,4,152,10,3
	.word	41834
	.byte	11,4,155,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28837
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,160,10,3
	.word	41901
	.byte	11,4,163,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28998
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,168,10,3
	.word	41970
	.byte	11,4,171,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29190
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,176,10,3
	.word	42038
	.byte	11,4,179,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29486
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,184,10,3
	.word	42106
	.byte	11,4,187,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29701
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSTAT',0,4,192,10,3
	.word	42174
	.byte	11,4,195,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29990
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRUVMON',0,4,200,10,3
	.word	42239
	.byte	11,4,203,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30169
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EXTCON',0,4,208,10,3
	.word	42305
	.byte	11,4,211,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30387
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_FDR',0,4,216,10,3
	.word	42369
	.byte	11,4,219,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30550
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_FMR',0,4,224,10,3
	.word	42430
	.byte	11,4,227,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30886
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ID',0,4,232,10,3
	.word	42491
	.byte	11,4,235,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30993
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_IGCR',0,4,240,10,3
	.word	42551
	.byte	11,4,243,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31445
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_IN',0,4,248,10,3
	.word	42613
	.byte	11,4,251,10,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31544
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_IOCR',0,4,128,11,3
	.word	42673
	.byte	11,4,131,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31694
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,136,11,3
	.word	42735
	.byte	11,4,139,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31843
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,144,11,3
	.word	42803
	.byte	11,4,147,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32004
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,152,11,3
	.word	42871
	.byte	11,4,155,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32134
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LCLCON0',0,4,160,11,3
	.word	42939
	.byte	11,4,163,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32268
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LCLTEST',0,4,168,11,3
	.word	43004
	.byte	11,4,171,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32383
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_MANID',0,4,176,11,3
	.word	43069
	.byte	11,4,179,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32494
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OMR',0,4,184,11,3
	.word	43132
	.byte	11,4,187,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32652
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OSCCON',0,4,192,11,3
	.word	43193
	.byte	11,4,195,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32992
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OUT',0,4,200,11,3
	.word	43257
	.byte	11,4,203,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33093
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OVCCON',0,4,208,11,3
	.word	43318
	.byte	11,4,211,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33360
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OVCENABLE',0,4,216,11,3
	.word	43382
	.byte	11,4,219,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33496
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PDISC',0,4,224,11,3
	.word	43449
	.byte	11,4,227,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33607
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PDR',0,4,232,11,3
	.word	43512
	.byte	11,4,235,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33740
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PDRR',0,4,240,11,3
	.word	43573
	.byte	11,4,243,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33943
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLCON0',0,4,248,11,3
	.word	43635
	.byte	11,4,251,11,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34299
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLCON1',0,4,128,12,3
	.word	43700
	.byte	11,4,131,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34477
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLCON2',0,4,136,12,3
	.word	43765
	.byte	11,4,139,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34577
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,144,12,3
	.word	43830
	.byte	11,4,147,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34947
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,152,12,3
	.word	43899
	.byte	11,4,155,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35133
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,160,12,3
	.word	43968
	.byte	11,4,163,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35331
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLSTAT',0,4,168,12,3
	.word	44037
	.byte	25
	.byte	'Ifx_SCU_PMCSR',0,4,176,12,3
	.word	13933
	.byte	11,4,179,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35592
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWCR0',0,4,184,12,3
	.word	44125
	.byte	11,4,187,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36151
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWCR1',0,4,192,12,3
	.word	44190
	.byte	11,4,195,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36334
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWCR3',0,4,200,12,3
	.word	44255
	.byte	11,4,203,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36503
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWSTAT',0,4,208,12,3
	.word	44320
	.byte	11,4,211,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37070
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,216,12,3
	.word	44386
	.byte	11,4,219,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37386
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWUTCNT',0,4,224,12,3
	.word	44455
	.byte	11,4,227,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37714
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_RSTCON',0,4,232,12,3
	.word	44522
	.byte	11,4,235,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37505
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_RSTCON2',0,4,240,12,3
	.word	44586
	.byte	11,4,243,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37925
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_RSTSTAT',0,4,248,12,3
	.word	44651
	.byte	11,4,251,12,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38357
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_SAFECON',0,4,128,13,3
	.word	44716
	.byte	11,4,131,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38453
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_STSTAT',0,4,136,13,3
	.word	44781
	.byte	11,4,139,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38713
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_SWRSTCON',0,4,144,13,3
	.word	44845
	.byte	11,4,147,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38838
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_SYSCON',0,4,152,13,3
	.word	44911
	.byte	11,4,155,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39035
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPCLR',0,4,160,13,3
	.word	44975
	.byte	11,4,163,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39188
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPDIS',0,4,168,13,3
	.word	45040
	.byte	11,4,171,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39341
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSET',0,4,176,13,3
	.word	45105
	.byte	11,4,179,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39494
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSTAT',0,4,184,13,3
	.word	45170
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,192,13,3
	.word	461
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,200,13,3
	.word	744
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,208,13,3
	.word	975
	.byte	11,4,211,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39749
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_CON0',0,4,216,13,3
	.word	45321
	.byte	11,4,219,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39875
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_CON1',0,4,224,13,3
	.word	45388
	.byte	11,4,227,13,9,4,12
	.byte	'U',0
	.word	326
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	342
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40127
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_SR',0,4,232,13,3
	.word	45455
	.byte	13
	.word	1015
	.byte	25
	.byte	'Ifx_SCU_WDTCPU',0,4,248,13,3
	.word	45520
	.byte	9
	.byte	'_Ifx_SCU_WDTS',0,4,251,13,25,12,12
	.byte	'CON0',0
	.word	45321
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	45388
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	45455
	.byte	4,2,35,8,0,13
	.word	45549
	.byte	25
	.byte	'Ifx_SCU_WDTS',0,4,128,14,3
	.word	45610
	.byte	14,13,153,10,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,25
	.byte	'IfxScu_WDTCON1_IR',0,13,158,10,3
	.word	45637
	.byte	25
	.byte	'IfxCpu_spinLock',0,5,92,22
	.word	326
	.byte	25
	.byte	'IfxCpu_mutexLock',0,5,96,22
	.word	326
	.byte	25
	.byte	'IfxCpu_CoreMode',0,5,114,3
	.word	13662
	.byte	14,5,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,25
	.byte	'IfxCpu_CounterMode',0,5,122,3
	.word	45832
	.byte	27,5,132,1,9,6,12
	.byte	'counter',0
	.word	1444
	.byte	4,2,35,0,12
	.byte	'overlfow',0
	.word	501
	.byte	1,2,35,4,0,25
	.byte	'IfxCpu_Counter',0,5,136,1,3
	.word	45919
	.byte	27,5,144,1,9,32,12
	.byte	'instruction',0
	.word	45919
	.byte	6,2,35,0,12
	.byte	'clock',0
	.word	45919
	.byte	6,2,35,6,12
	.byte	'counter1',0
	.word	45919
	.byte	6,2,35,12,12
	.byte	'counter2',0
	.word	45919
	.byte	6,2,35,18,12
	.byte	'counter3',0
	.word	45919
	.byte	6,2,35,24,0,25
	.byte	'IfxCpu_Perf',0,5,151,1,3
	.word	45985
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L70:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,36,0,3,8,11,15,62,15,0,0,5,59,0,3,8,0,0,6,15,0,73,19,0,0,7,46,1,3,8,32,13,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,0,0,8,5,0,3,8,58,15,59,15,57,15,73,19,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,11,23,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,13,53,0,73,19,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,46,1,3,8,73,19,54
	.byte	15,39,12,63,12,60,12,0,0,17,5,0,3,8,73,19,0,0,18,5,0,73,19,0,0,19,46,1,49,19,0,0,20,5,0,49,19,0,0,21,46
	.byte	1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,22,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63
	.byte	12,60,12,0,0,23,1,1,11,15,73,19,0,0,24,33,0,47,15,0,0,25,22,0,3,8,58,15,59,15,57,15,73,19,0,0,26,21,0
	.byte	54,15,0,0,27,19,1,58,15,59,15,57,15,11,15,0,0,28,38,0,73,19,0,0,29,52,0,3,8,58,15,59,15,57,15,73,19,63
	.byte	12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L71:
	.word	.L268-.L267
.L267:
	.half	3
	.word	.L270-.L269
.L269:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Reg',0
	.byte	'C:\\TASKING\\TriCore v6.2r2\\ctc\\include\\',0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxCpu_cfg.h',0
	.byte	0,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'stdio.h',0,2,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Platform_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Ifx_Types.h',0
	.byte	0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxScu_cfg.h',0
	.byte	0,0,0,0
.L270:
.L268:
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_info'
.L72:
	.word	277
	.half	3
	.word	.L73
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L75,.L74
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_getAddress',0,1,57,10
	.word	.L132
	.byte	1,1,1
	.word	.L47,.L133,.L46
	.byte	4
	.byte	'cpu',0,1,57,47
	.word	.L134,.L135
	.byte	5
	.word	.L47,.L133
	.byte	6
	.byte	'module',0,1,59,14
	.word	.L132,.L136
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_abbrev'
.L73:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_line'
.L74:
	.word	.L272-.L271
.L271:
	.half	3
	.word	.L274-.L273
.L273:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L274:
	.byte	5,5,7,0,5,2
	.word	.L47
	.byte	3,60,1,5,53,7,9
	.half	.L275-.L47
	.byte	3,2,1,5,1,9
	.half	.L224-.L275
	.byte	3,8,1,5,16,7,9
	.half	.L4-.L224
	.byte	3,124,1,5,1,9
	.half	.L225-.L4
	.byte	3,4,1,7,9
	.half	.L76-.L225
	.byte	0,1,1
.L272:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_ranges'
.L75:
	.word	-1,.L47,0,.L76-.L47,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_info'
.L77:
	.word	392
	.half	3
	.word	.L78
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L80,.L79
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_getCoreMode',0,1,74,17
	.word	.L137
	.byte	1,1,1
	.word	.L49,.L138,.L48
	.byte	4
	.byte	'cpu',0,1,74,45
	.word	.L132,.L139
	.byte	5
	.word	.L49,.L138
	.byte	6
	.byte	'cpuMode',0,1,76,24
	.word	.L137,.L140
	.byte	6
	.byte	'dbgsr',0,1,77,24
	.word	.L141,.L142
	.byte	6
	.byte	'index',0,1,78,24
	.word	.L134,.L143
	.byte	7
	.word	.L144,.L145,.L146
	.byte	8
	.word	.L147,.L145,.L146
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L148,.L149
	.byte	0,0,5
	.word	.L150,.L10
	.byte	6
	.byte	'pmcsr_val',0,1,102,28
	.word	.L151,.L152
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_abbrev'
.L78:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_line'
.L79:
	.word	.L277-.L276
.L276:
	.half	3
	.word	.L279-.L278
.L278:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L279:
	.byte	5,17,7,0,5,2
	.word	.L49
	.byte	3,201,0,1,5,48,9
	.half	.L227-.L49
	.byte	3,4,1,5,13,9
	.half	.L226-.L227
	.byte	3,2,1,4,2,5,19,9
	.half	.L145-.L226
	.byte	3,221,4,1,5,37,9
	.half	.L229-.L145
	.byte	3,1,1,4,1,5,5,9
	.half	.L146-.L229
	.byte	3,166,123,1,5,20,7,9
	.half	.L280-.L146
	.byte	3,2,1,5,27,9
	.half	.L230-.L280
	.byte	1,5,25,9
	.half	.L7-.L230
	.byte	3,4,1,5,16,9
	.half	.L8-.L7
	.byte	3,4,1,5,5,9
	.half	.L231-.L8
	.byte	1,5,17,7,9
	.half	.L281-.L231
	.byte	3,2,1,5,39,1,5,9,9
	.half	.L9-.L281
	.byte	3,4,1,5,53,7,9
	.half	.L150-.L9
	.byte	3,4,1,5,59,9
	.half	.L228-.L150
	.byte	1,5,29,9
	.half	.L232-.L228
	.byte	3,2,1,5,13,9
	.half	.L282-.L232
	.byte	1,5,25,7,9
	.half	.L283-.L282
	.byte	3,2,1,5,46,1,5,17,9
	.half	.L12-.L283
	.byte	3,4,1,5,29,7,9
	.half	.L284-.L12
	.byte	3,2,1,5,5,9
	.half	.L10-.L284
	.byte	3,10,1,5,1,3,1,1,7,9
	.half	.L81-.L10
	.byte	0,1,1
.L277:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_ranges'
.L80:
	.word	-1,.L49,0,.L81-.L49,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_info'
.L82:
	.word	278
	.half	3
	.word	.L83
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L85,.L84
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_getIndex',0,1,128,1,20
	.word	.L134
	.byte	1,1,1
	.word	.L51,.L153,.L50
	.byte	4
	.byte	'cpu',0,1,128,1,45
	.word	.L132,.L154
	.byte	5
	.word	.L51,.L153
	.byte	6
	.byte	'result',0,1,130,1,24
	.word	.L134,.L155
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_abbrev'
.L83:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_line'
.L84:
	.word	.L286-.L285
.L285:
	.half	3
	.word	.L288-.L287
.L287:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L288:
	.byte	5,39,7,0,5,2
	.word	.L51
	.byte	3,135,1,1,5,12,9
	.half	.L289-.L51
	.byte	3,124,1,5,9,9
	.half	.L233-.L289
	.byte	3,4,1,5,68,7,9
	.half	.L290-.L233
	.byte	3,2,1,5,22,9
	.half	.L291-.L290
	.byte	1,5,1,9
	.half	.L17-.L291
	.byte	3,6,1,7,9
	.half	.L86-.L17
	.byte	0,1,1
.L286:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_ranges'
.L85:
	.word	-1,.L51,0,.L86-.L51,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_info'
.L87:
	.word	457
	.half	3
	.word	.L88
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L90,.L89
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_setCoreMode',0,1,135,2,9
	.word	.L156
	.byte	1,1,1
	.word	.L61,.L157,.L60
	.byte	4
	.byte	'cpu',0,1,135,2,37
	.word	.L132,.L158
	.byte	4
	.byte	'mode',0,1,135,2,58
	.word	.L137,.L159
	.byte	5
	.word	.L61,.L157
	.byte	6
	.byte	'reqslp',0,1,238,2,24
	.word	.L156,.L160
	.byte	6
	.byte	'retValue',0,1,239,2,24
	.word	.L156,.L161
	.byte	6
	.byte	'index',0,1,240,2,24
	.word	.L134,.L162
	.byte	7
	.word	.L144,.L163,.L164
	.byte	8
	.word	.L147,.L165
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L148,.L168
	.byte	0,0,9
	.word	.L169
	.byte	6
	.byte	'safetyWdtPw',0,1,254,2,20
	.word	.L173,.L174
	.byte	0,10
	.word	.L144,.L166,.L167
	.byte	5
	.word	.L31,.L30
	.byte	6
	.byte	'cpuWdtPw',0,1,136,3,20
	.word	.L173,.L175
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_abbrev'
.L88:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,85,6,0,0,9,11,1,85,6
	.byte	0,0,10,29,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_line'
.L89:
	.word	.L293-.L292
.L292:
	.half	3
	.word	.L295-.L294
.L294:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L295:
	.byte	5,9,7,0,5,2
	.word	.L61
	.byte	3,134,2,1,5,48,9
	.half	.L240-.L61
	.byte	3,233,0,1,5,30,9
	.half	.L239-.L240
	.byte	1,5,17,9
	.half	.L243-.L239
	.byte	3,3,1,5,57,7,9
	.half	.L296-.L243
	.byte	1,5,26,7,9
	.half	.L297-.L296
	.byte	3,1,1,5,52,7,9
	.half	.L26-.L297
	.byte	1,5,60,1,5,52,9
	.half	.L28-.L26
	.byte	1,5,20,9
	.half	.L29-.L28
	.byte	3,2,1,5,5,9
	.half	.L245-.L29
	.byte	3,2,1,4,2,5,19,7,9
	.half	.L163-.L245
	.byte	3,181,2,1,4,1,5,23,9
	.half	.L164-.L163
	.byte	3,211,125,1,4,2,5,37,9
	.half	.L166-.L164
	.byte	3,174,2,1,5,32,9
	.half	.L167-.L166
	.byte	3,127,1,4,1,5,9,9
	.half	.L170-.L167
	.byte	3,206,125,1,5,69,7,9
	.half	.L171-.L170
	.byte	3,3,1,5,32,9
	.half	.L242-.L171
	.byte	1,5,42,9
	.half	.L244-.L242
	.byte	3,1,1,5,54,9
	.half	.L246-.L244
	.byte	3,1,1,5,29,9
	.half	.L248-.L246
	.byte	1,5,40,9
	.half	.L298-.L248
	.byte	3,1,1,5,69,9
	.half	.L249-.L298
	.byte	3,127,1,5,40,9
	.half	.L299-.L249
	.byte	3,1,1,5,16,9
	.half	.L250-.L299
	.byte	3,2,1,5,25,9
	.half	.L300-.L250
	.byte	1,5,31,9
	.half	.L301-.L300
	.byte	1,5,32,9
	.half	.L172-.L301
	.byte	3,123,1,5,63,9
	.half	.L31-.L172
	.byte	3,10,1,5,29,9
	.half	.L251-.L31
	.byte	1,5,39,9
	.half	.L253-.L251
	.byte	3,1,1,5,29,9
	.half	.L252-.L253
	.byte	3,1,1,5,37,9
	.half	.L241-.L252
	.byte	3,1,1,5,46,9
	.half	.L254-.L241
	.byte	3,127,1,5,54,9
	.half	.L302-.L254
	.byte	1,5,37,9
	.half	.L303-.L302
	.byte	3,1,1,5,5,9
	.half	.L30-.L303
	.byte	3,4,1,5,1,3,2,1,7,9
	.half	.L91-.L30
	.byte	0,1,1
.L293:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_ranges'
.L90:
	.word	-1,.L61,0,.L91-.L61,0,0
.L165:
	.word	-1,.L61,.L163-.L61,.L164-.L61,.L166-.L61,.L167-.L61,0,0
.L169:
	.word	-1,.L61,.L164-.L61,.L166-.L61,.L167-.L61,.L170-.L61,.L171-.L61,.L172-.L61,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_info'
.L92:
	.word	360
	.half	3
	.word	.L93
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L95,.L94
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_setProgramCounter',0,1,148,3,9
	.word	.L156
	.byte	1,1,1
	.word	.L63,.L176,.L62
	.byte	4
	.byte	'cpu',0,1,148,3,43
	.word	.L132,.L177
	.byte	4
	.byte	'programCounter',0,1,148,3,55
	.word	.L178,.L179
	.byte	5
	.word	.L63,.L176
	.byte	6
	.byte	'retVal',0,1,150,3,13
	.word	.L156,.L180
	.byte	7
	.word	.L144,.L181,.L182
	.byte	8
	.word	.L147,.L181,.L182
	.byte	6
	.byte	'reg',0,2,172,5,21
	.word	.L148,.L183
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_abbrev'
.L93:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_line'
.L94:
	.word	.L305-.L304
.L304:
	.half	3
	.word	.L307-.L306
.L306:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L307:
	.byte	5,9,7,0,5,2
	.word	.L63
	.byte	3,147,3,1,5,20,9
	.half	.L256-.L63
	.byte	3,2,1,4,2,5,19,9
	.half	.L181-.L256
	.byte	3,151,2,1,5,37,9
	.half	.L258-.L181
	.byte	3,1,1,4,1,5,53,3,234,125,1,5,5,9
	.half	.L182-.L258
	.byte	1,5,16,7,9
	.half	.L308-.L182
	.byte	3,2,1,5,23,1,5,18,9
	.half	.L34-.L308
	.byte	3,4,1,5,39,9
	.half	.L309-.L34
	.byte	1,5,18,1,5,22,9
	.half	.L257-.L309
	.byte	1,5,5,9
	.half	.L35-.L257
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L96-.L35
	.byte	0,1,1
.L305:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_ranges'
.L95:
	.word	-1,.L63,0,.L96-.L63,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_info'
.L97:
	.word	307
	.half	3
	.word	.L98
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L100,.L99
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_startCore',0,1,193,3,9
	.word	.L156
	.byte	1,1,1
	.word	.L67,.L184,.L66
	.byte	4
	.byte	'cpu',0,1,193,3,35
	.word	.L132,.L185
	.byte	4
	.byte	'programCounter',0,1,193,3,47
	.word	.L178,.L186
	.byte	5
	.word	.L67,.L184
	.byte	6
	.byte	'retVal',0,1,195,3,13
	.word	.L156,.L187
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_abbrev'
.L98:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_line'
.L99:
	.word	.L311-.L310
.L310:
	.half	3
	.word	.L313-.L312
.L312:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L313:
	.byte	5,9,7,0,5,2
	.word	.L67
	.byte	3,192,3,1,5,45,9
	.half	.L262-.L67
	.byte	3,5,1,5,12,9
	.half	.L261-.L262
	.byte	1,5,28,3,4,1,5,5,9
	.half	.L263-.L261
	.byte	1,5,43,7,9
	.half	.L314-.L263
	.byte	3,2,1,5,16,9
	.half	.L266-.L314
	.byte	1,5,5,9
	.half	.L42-.L266
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L101-.L42
	.byte	0,1,1
.L311:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_ranges'
.L100:
	.word	-1,.L67,0,.L101-.L67,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_info'
.L102:
	.word	304
	.half	3
	.word	.L103
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L105,.L104
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_acquireMutex',0,1,36,9
	.word	.L156
	.byte	1,1,1
	.word	.L45,.L188,.L44
	.byte	4
	.byte	'lock',0,1,36,47
	.word	.L189,.L190
	.byte	5
	.word	.L45,.L188
	.byte	6
	.byte	'retVal',0,1,38,21
	.word	.L156,.L191
	.byte	6
	.byte	'spinLockVal',0,1,39,21
	.word	.L192,.L193
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_abbrev'
.L103:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_line'
.L104:
	.word	.L316-.L315
.L315:
	.half	3
	.word	.L318-.L317
.L317:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L318:
	.byte	5,19,7,0,5,2
	.word	.L45
	.byte	3,42,1,5,9,3,121,1,5,17,9
	.half	.L222-.L45
	.byte	3,7,1,9
	.half	.L319-.L222
	.byte	3,126,1,9
	.half	.L223-.L319
	.byte	3,4,1,9
	.half	.L320-.L223
	.byte	3,127,1,5,9,9
	.half	.L321-.L320
	.byte	3,4,1,5,16,9
	.half	.L322-.L321
	.byte	3,2,1,5,1,3,4,1,7,9
	.half	.L106-.L322
	.byte	0,1,1
.L316:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_ranges'
.L105:
	.word	-1,.L45,0,.L106-.L45,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_info'
.L107:
	.word	258
	.half	3
	.word	.L108
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L110,.L109
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_releaseMutex',0,1,249,1,6,1,1,1
	.word	.L57,.L194,.L56
	.byte	4
	.byte	'lock',0,1,249,1,44
	.word	.L189,.L195
	.byte	5
	.word	.L57,.L194
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_abbrev'
.L108:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_line'
.L109:
	.word	.L324-.L323
.L323:
	.half	3
	.word	.L326-.L325
.L325:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L326:
	.byte	5,13,7,0,5,2
	.word	.L57
	.byte	3,251,1,1,5,11,1,5,1,9
	.half	.L327-.L57
	.byte	3,1,1,7,9
	.half	.L111-.L327
	.byte	0,1,1
.L324:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_ranges'
.L110:
	.word	-1,.L57,0,.L111-.L57,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_info'
.L112:
	.word	259
	.half	3
	.word	.L113
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L115,.L114
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_resetSpinLock',0,1,128,2,6,1,1,1
	.word	.L59,.L196,.L58
	.byte	4
	.byte	'lock',0,1,128,2,44
	.word	.L197,.L198
	.byte	5
	.word	.L59,.L196
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_abbrev'
.L113:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_line'
.L114:
	.word	.L329-.L328
.L328:
	.half	3
	.word	.L331-.L330
.L330:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L331:
	.byte	5,13,7,0,5,2
	.word	.L59
	.byte	3,130,2,1,5,11,1,5,1,9
	.half	.L332-.L59
	.byte	3,1,1,7,9
	.half	.L116-.L332
	.byte	0,1,1
.L329:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_ranges'
.L115:
	.word	-1,.L59,0,.L116-.L59,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_info'
.L117:
	.word	333
	.half	3
	.word	.L118
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L120,.L119
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_setSpinLock',0,1,165,3,9
	.word	.L156
	.byte	1,1,1
	.word	.L65,.L199,.L64
	.byte	4
	.byte	'lock',0,1,165,3,45
	.word	.L197,.L200
	.byte	4
	.byte	'timeoutCount',0,1,165,3,58
	.word	.L178,.L201
	.byte	5
	.word	.L65,.L199
	.byte	6
	.byte	'retVal',0,1,167,3,21
	.word	.L156,.L202
	.byte	6
	.byte	'spinLockVal',0,1,168,3,21
	.word	.L203,.L204
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_abbrev'
.L118:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_line'
.L119:
	.word	.L334-.L333
.L333:
	.half	3
	.word	.L336-.L335
.L335:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L336:
	.byte	5,12,7,0,5,2
	.word	.L65
	.byte	3,169,3,1,5,9,3,123,1,5,23,9
	.half	.L259-.L65
	.byte	3,9,1,5,21,9
	.half	.L37-.L259
	.byte	1,9
	.half	.L337-.L37
	.byte	3,2,1,9
	.half	.L338-.L337
	.byte	3,127,1,5,13,9
	.half	.L339-.L338
	.byte	3,4,1,5,9,9
	.half	.L340-.L339
	.byte	1,5,20,7,9
	.half	.L341-.L340
	.byte	3,2,1,5,26,1,5,25,9
	.half	.L38-.L341
	.byte	3,4,1,5,14,9
	.half	.L39-.L38
	.byte	3,2,1,5,49,7,9
	.half	.L260-.L39
	.byte	1,5,1,7,9
	.half	.L40-.L260
	.byte	3,3,1,7,9
	.half	.L121-.L40
	.byte	0,1,1
.L334:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_ranges'
.L120:
	.word	-1,.L65,0,.L121-.L65,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_info'
.L122:
	.word	306
	.half	3
	.word	.L123
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L125,.L124
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_getRandomValue',0,1,147,1,8
	.word	.L178
	.byte	1,1,1
	.word	.L53,.L205,.L52
	.byte	4
	.byte	'seed',0,1,147,1,38
	.word	.L206,.L207
	.byte	5
	.word	.L53,.L205
	.byte	6
	.byte	'x',0,1,159,1,12
	.word	.L178,.L208
	.byte	7
	.word	.L209
	.byte	6
	.byte	'result',0,1,169,1,12
	.word	.L178,.L213
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_abbrev'
.L123:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_line'
.L124:
	.word	.L343-.L342
.L342:
	.half	3
	.word	.L345-.L344
.L344:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L345:
	.byte	5,16,7,0,5,2
	.word	.L53
	.byte	3,158,1,1,5,47,9
	.half	.L210-.L53
	.byte	3,43,1,5,31,1,5,11,9
	.half	.L211-.L210
	.byte	3,90,1,5,6,9
	.half	.L212-.L211
	.byte	3,28,1,5,12,9
	.half	.L346-.L212
	.byte	3,28,1,5,1,9
	.half	.L347-.L346
	.byte	3,3,1,7,9
	.half	.L126-.L347
	.byte	0,1,1
.L343:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_ranges'
.L125:
	.word	-1,.L53,0,.L126-.L53,0,0
.L209:
	.word	-1,.L53,.L210-.L53,.L211-.L53,.L212-.L53,.L205-.L53,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_info'
.L127:
	.word	361
	.half	3
	.word	.L128
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L130,.L129
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxCpu_getRandomValueWithinRange',0,1,226,1,8
	.word	.L178
	.byte	1,1,1
	.word	.L55,.L214,.L54
	.byte	4
	.byte	'seed',0,1,226,1,49
	.word	.L206,.L215
	.byte	4
	.byte	'min',0,1,226,1,62
	.word	.L178,.L216
	.byte	4
	.byte	'max',0,1,226,1,74
	.word	.L178,.L217
	.byte	5
	.word	.L55,.L214
	.byte	6
	.byte	'new_value',0,1,228,1,12
	.word	.L178,.L218
	.byte	5
	.word	.L219,.L21
	.byte	6
	.byte	'swap',0,1,233,1,18
	.word	.L220,.L221
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_abbrev'
.L128:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_line'
.L129:
	.word	.L349-.L348
.L348:
	.half	3
	.word	.L351-.L350
.L350:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L351:
	.byte	5,8,7,0,5,2
	.word	.L55
	.byte	3,225,1,1,5,46,9
	.half	.L236-.L55
	.byte	3,2,1,5,5,9
	.half	.L235-.L236
	.byte	3,3,1,5,23,7,9
	.half	.L219-.L235
	.byte	3,2,1,5,13,9
	.half	.L238-.L219
	.byte	3,1,1,9
	.half	.L352-.L238
	.byte	3,1,1,5,9,9
	.half	.L21-.L352
	.byte	3,4,1,5,28,7,9
	.half	.L353-.L21
	.byte	1,5,26,7,9
	.half	.L22-.L353
	.byte	3,6,1,5,23,9
	.half	.L354-.L22
	.byte	1,5,42,9
	.half	.L355-.L354
	.byte	1,5,1,9
	.half	.L24-.L355
	.byte	3,1,1,7,9
	.half	.L131-.L24
	.byte	0,1,1
.L349:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_ranges'
.L130:
	.word	-1,.L55,0,.L131-.L55,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_loc'
.L44:
	.word	-1,.L45,0,.L222-.L45
	.half	2
	.byte	138,0
	.word	.L222-.L45,.L188-.L45
	.half	2
	.byte	138,8
	.word	.L188-.L45,.L188-.L45
	.half	2
	.byte	138,0
	.word	0,0
.L190:
	.word	-1,.L45,0,.L188-.L45
	.half	1
	.byte	100
	.word	0,0
.L191:
	.word	-1,.L45,.L223-.L45,.L188-.L45
	.half	1
	.byte	82
	.word	0,0
.L193:
	.word	-1,.L45,0,.L188-.L45
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_loc'
.L46:
	.word	-1,.L47,0,.L133-.L47
	.half	2
	.byte	138,0
	.word	0,0
.L135:
	.word	-1,.L47,0,.L133-.L47
	.half	1
	.byte	84
	.word	0,0
.L136:
	.word	-1,.L47,.L224-.L47,.L4-.L47
	.half	1
	.byte	98
	.word	.L225-.L47,.L133-.L47
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_loc'
.L48:
	.word	-1,.L49,0,.L138-.L49
	.half	2
	.byte	138,0
	.word	0,0
.L139:
	.word	-1,.L49,0,.L226-.L49
	.half	1
	.byte	100
	.word	.L227-.L49,.L228-.L49
	.half	1
	.byte	111
	.word	0,0
.L140:
	.word	-1,.L49,.L145-.L49,.L138-.L49
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L142:
	.word	-1,.L49,.L230-.L49,.L7-.L49
	.half	1
	.byte	95
	.word	.L8-.L49,.L231-.L49
	.half	1
	.byte	95
	.word	0,0
.L143:
	.word	-1,.L49,.L226-.L49,.L138-.L49
	.half	1
	.byte	82
	.word	0,0
.L152:
	.word	-1,.L49,.L232-.L49,.L10-.L49
	.half	1
	.byte	111
	.word	0,0
.L149:
	.word	-1,.L49,.L229-.L49,.L146-.L49
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_loc'
.L50:
	.word	-1,.L51,0,.L153-.L51
	.half	2
	.byte	138,0
	.word	0,0
.L154:
	.word	-1,.L51,0,.L153-.L51
	.half	1
	.byte	100
	.word	0,0
.L155:
	.word	-1,.L51,.L233-.L51,.L153-.L51
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_loc'
.L52:
	.word	-1,.L53,0,.L205-.L53
	.half	2
	.byte	138,0
	.word	0,0
.L213:
	.word	-1,.L53,.L234-.L53,.L205-.L53
	.half	1
	.byte	82
	.word	0,0
.L207:
	.word	-1,.L53,0,.L205-.L53
	.half	1
	.byte	100
	.word	0,0
.L208:
	.word	-1,.L53,.L210-.L53,.L205-.L53
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_loc'
.L54:
	.word	-1,.L55,0,.L214-.L55
	.half	2
	.byte	138,0
	.word	0,0
.L217:
	.word	-1,.L55,0,.L235-.L55
	.half	1
	.byte	85
	.word	.L235-.L55,.L237-.L55
	.half	1
	.byte	95
	.word	0,0
.L216:
	.word	-1,.L55,0,.L235-.L55
	.half	1
	.byte	84
	.word	.L236-.L55,.L214-.L55
	.half	1
	.byte	88
	.word	0,0
.L218:
	.word	-1,.L55,.L235-.L55,.L24-.L55
	.half	1
	.byte	82
	.word	0,0
.L215:
	.word	-1,.L55,0,.L235-.L55
	.half	1
	.byte	100
	.word	0,0
.L221:
	.word	-1,.L55,.L238-.L55,.L21-.L55
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_loc'
.L56:
	.word	-1,.L57,0,.L194-.L57
	.half	2
	.byte	138,0
	.word	0,0
.L195:
	.word	-1,.L57,0,.L194-.L57
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_loc'
.L58:
	.word	-1,.L59,0,.L196-.L59
	.half	2
	.byte	138,0
	.word	0,0
.L198:
	.word	-1,.L59,0,.L196-.L59
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_loc'
.L60:
	.word	-1,.L61,0,.L157-.L61
	.half	2
	.byte	138,0
	.word	0,0
.L158:
	.word	-1,.L61,0,.L239-.L61
	.half	1
	.byte	100
	.word	.L240-.L61,.L241-.L61
	.half	1
	.byte	111
	.word	.L247-.L61,.L248-.L61
	.half	1
	.byte	100
	.word	0,0
.L175:
	.word	-1,.L61,.L251-.L61,.L252-.L61
	.half	1
	.byte	82
	.word	.L253-.L61,.L30-.L61
	.half	1
	.byte	95
	.word	.L254-.L61,.L30-.L61
	.half	1
	.byte	84
	.word	0,0
.L162:
	.word	-1,.L61,.L239-.L61,.L242-.L61
	.half	1
	.byte	82
	.word	.L243-.L61,.L244-.L61
	.half	1
	.byte	88
	.word	.L31-.L61,.L30-.L61
	.half	1
	.byte	88
	.word	.L31-.L61,.L251-.L61
	.half	1
	.byte	82
	.word	0,0
.L159:
	.word	-1,.L61,0,.L239-.L61
	.half	1
	.byte	84
	.word	.L239-.L61,.L164-.L61
	.half	1
	.byte	95
	.word	0,0
.L168:
	.word	-1,.L61,.L164-.L61,.L167-.L61
	.half	1
	.byte	95
	.word	0,0
.L160:
	.word	-1,.L61,.L245-.L61,.L157-.L61
	.half	1
	.byte	90
	.word	0,0
.L161:
	.word	-1,.L61,.L29-.L61,.L157-.L61
	.half	1
	.byte	89
	.word	0,0
.L174:
	.word	-1,.L61,.L242-.L61,.L246-.L61
	.half	1
	.byte	82
	.word	.L244-.L61,.L31-.L61
	.half	1
	.byte	88
	.word	.L249-.L61,.L250-.L61
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_loc'
.L62:
	.word	-1,.L63,0,.L176-.L63
	.half	2
	.byte	138,0
	.word	0,0
.L177:
	.word	-1,.L63,0,.L182-.L63
	.half	1
	.byte	100
	.word	.L255-.L63,.L176-.L63
	.half	1
	.byte	111
	.word	0,0
.L179:
	.word	-1,.L63,0,.L182-.L63
	.half	1
	.byte	84
	.word	.L256-.L63,.L257-.L63
	.half	1
	.byte	88
	.word	0,0
.L183:
	.word	-1,.L63,.L258-.L63,.L257-.L63
	.half	1
	.byte	95
	.word	0,0
.L180:
	.word	-1,.L63,.L181-.L63,.L176-.L63
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_loc'
.L64:
	.word	-1,.L65,0,.L259-.L65
	.half	2
	.byte	138,0
	.word	.L259-.L65,.L199-.L65
	.half	2
	.byte	138,8
	.word	.L199-.L65,.L199-.L65
	.half	2
	.byte	138,0
	.word	0,0
.L200:
	.word	-1,.L65,0,.L199-.L65
	.half	1
	.byte	100
	.word	0,0
.L202:
	.word	-1,.L65,.L259-.L65,.L37-.L65
	.half	1
	.byte	82
	.word	.L37-.L65,.L199-.L65
	.half	5
	.byte	144,32,157,32,0
	.word	.L39-.L65,.L260-.L65
	.half	1
	.byte	82
	.word	0,0
.L204:
	.word	-1,.L65,0,.L199-.L65
	.half	2
	.byte	145,120
	.word	0,0
.L201:
	.word	-1,.L65,0,.L199-.L65
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_loc'
.L66:
	.word	-1,.L67,0,.L184-.L67
	.half	2
	.byte	138,0
	.word	0,0
.L185:
	.word	-1,.L67,0,.L261-.L67
	.half	1
	.byte	100
	.word	.L262-.L67,.L184-.L67
	.half	1
	.byte	111
	.word	.L264-.L67,.L263-.L67
	.half	1
	.byte	100
	.word	.L265-.L67,.L266-.L67
	.half	1
	.byte	100
	.word	0,0
.L186:
	.word	-1,.L67,0,.L261-.L67
	.half	1
	.byte	84
	.word	0,0
.L187:
	.word	-1,.L67,.L261-.L67,.L263-.L67
	.half	1
	.byte	82
	.word	.L264-.L67,.L184-.L67
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L356:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_frame'
	.word	44
	.word	.L356,.L45,.L188-.L45
	.byte	8,18,8,19,8,21,8,22,8,23,4
	.word	(.L222-.L45)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L188-.L222)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L356,.L47,.L133-.L47
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L356,.L49,.L138-.L49
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_frame'
	.word	24
	.word	.L356,.L51,.L153-.L51
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_frame'
	.word	24
	.word	.L356,.L53,.L205-.L53
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_frame'
	.word	12
	.word	.L356,.L55,.L214-.L55
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_frame'
	.word	24
	.word	.L356,.L57,.L194-.L57
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_frame'
	.word	24
	.word	.L356,.L59,.L196-.L59
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L356,.L61,.L157-.L61
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_frame'
	.word	12
	.word	.L356,.L63,.L176-.L63
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_frame'
	.word	44
	.word	.L356,.L65,.L199-.L65
	.byte	8,18,8,19,8,21,8,22,8,23,4
	.word	(.L259-.L65)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L199-.L259)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_frame'
	.word	12
	.word	.L356,.L67,.L184-.L67


	; Module end
