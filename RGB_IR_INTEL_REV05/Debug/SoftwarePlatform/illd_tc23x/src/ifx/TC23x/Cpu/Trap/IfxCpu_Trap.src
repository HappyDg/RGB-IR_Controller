	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 07918494"
	.compiler_invocation	"ctc -f cc24344a --dep-file=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\.IfxCpu_Trap.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc23x -D__CPU_TC23X__ --core=tc1.6.x --fp-model=+float -DNDEBUG -D__SWPLATFORM__ -DIFX_CFG_USE_COMPILER_DEFAULT_LINKER -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05 -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\APP\\inc -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Configuration -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Scu/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Stm/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x/_Reg -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/SrvSw -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -g2 --no-warnings=542 --make-target=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.src ..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c"
	.compiler_name		"ctc"
	;source	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c'

	
$TC16X
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_memoryManagementError',code,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_memoryManagementError'
	.align	2
	
	.global	IfxCpu_Trap_memoryManagementError

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	     2   * \file IfxCpu_Trap.c
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	     3   * \brief This file contains the APIs for Trap related functions.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	     4   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	     5   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	     6   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	     7   * \copyright Copyright (c) 2012 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	     9   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    10   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    12   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    15   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    16   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    17   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    23   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    24   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    25   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    26  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    27  /*******************************************************************************
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    28  **                      Includes                                              **
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    29  *******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    30  #include "IfxCpu_Trap.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    31  #include "Cpu/Std/IfxCpu.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    32  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    33  #include "IfxCpu_reg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    34  #include "Ifx_Cfg.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    35  #ifdef IFX_CFG_EXTEND_TRAP_HOOKS
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    36  #include "Ifx_Cfg_Trap.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    37  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    38  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    39  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    40  /*                           Macros                                           */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    41  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    42  /** \brief Configuration for CpuX enable.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    43   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    44   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    45  #ifndef IFX_CFG_CPU_TRAP_TSR_HOOK
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    46  #   define IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch)          /**< By default macro is empty*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    47  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    48  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    49  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch) /**< By default macro is empty*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    50  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    51  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    52  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch) /**< By default macro is empty*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    53  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    54  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    55  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch) /**< By default macro is empty*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    56  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    57  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    58  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK(trapWatch) /**< By default macro is empty*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    59  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    60  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU4_HOOK
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    61  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU4_HOOK(trapWatch) /**< By default macro is empty*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    62  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    63  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU5_HOOK
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    64  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU5_HOOK(trapWatch) /**< By default macro is empty*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    65  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    66  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    67  #if defined(__TASKING__) && !defined(__NO_ILDD_TRAP_ALIASES__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    68  #pragma alias _trapassertion		IfxCpu_Trap_assertion
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    69  #pragma alias _trapbus			IfxCpu_Trap_busError
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    70  #pragma alias _trapcontext		IfxCpu_Trap_contextManagementError
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    71  #pragma alias _trapinstruction		IfxCpu_Trap_instructionError
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    72  #pragma alias _trapmmu			IfxCpu_Trap_memoryManagementError
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    73  #pragma alias _trapnmi			IfxCpu_Trap_nonMaskableInterrupt
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    74  #pragma alias _trapprotection		IfxCpu_Trap_internalProtectionError
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    75  #pragma alias _trapsystem		IfxCpu_Trap_systemCall_Cpu0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    76  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    77  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    78  /*******************************************************************************
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    79  **                      variables                                     **
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    80  *******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    81  IfxCpu_Trap trapWatch;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    82  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    83  /*******************************************************************************
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    84  **                      Function definitions                          **
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    85  *******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    86  IFX_INLINE IfxCpu_Trap IfxCpu_Trap_extractTrapInfo(uint8 trapClass, uint32 tin)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    87  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    88      IfxCpu_Trap trapInfo;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    89      trapInfo.tAddr  = (unsigned int)__getA11();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    90      trapInfo.tClass = trapClass;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    91      trapInfo.tId    = tin;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    92      trapInfo.tCpu   = IfxCpu_getCoreId();
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    93      return trapInfo;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    94  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    95  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    96  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    97  void IfxCpu_Trap_memoryManagementError(uint32 tin)
; Function IfxCpu_Trap_memoryManagementError
.L3:
IfxCpu_Trap_memoryManagementError:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L268:
	
.L301:
	mov.d	d0,a15
.L133:
	insert	d1,d1,#0,#8,#8
.L302:
	insert	d1,d1,d4,#0,#8
.L138:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L265:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L124:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    98  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	    99      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_memoryManagement, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   100      IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   101      __debug();
	debug
.L303:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   102      __asm("rfe");
	rfe
.L304:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   103  }
	ret
.L120:
	
__IfxCpu_Trap_memoryManagementError_function_end:
	.size	IfxCpu_Trap_memoryManagementError,__IfxCpu_Trap_memoryManagementError_function_end-IfxCpu_Trap_memoryManagementError
.L42:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxCpu_Trap..cocofun_4'
	.align	2
; Function .cocofun_4
.L5:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	extr.u	d2,d1,#16,#8
.L400:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L266:
	insert	d15,d2,d15,#0,#3
.L401:
	insert	d1,d1,d15,#16,#8
	st.d	trapWatch,e0
.L267:
	fret
.L112:
	; End of function
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_internalProtectionError',code,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_internalProtectionError'
	.align	2
	
	.global	IfxCpu_Trap_internalProtectionError

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   104  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   105  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   106  void IfxCpu_Trap_internalProtectionError(uint32 tin)
; Function IfxCpu_Trap_internalProtectionError
.L7:
IfxCpu_Trap_internalProtectionError:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L270:
	
.L309:
	mov.d	d0,a15
.L149:
	insert	d1,d1,#1,#8,#8
.L310:
	insert	d1,d1,d4,#0,#8
.L151:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L269:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L145:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   107  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   108      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_internalProtection, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   109      IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   110      __debug();
	debug
.L311:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   111      __asm("rfe");
	rfe
.L312:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   112  }
	ret
.L143:
	
__IfxCpu_Trap_internalProtectionError_function_end:
	.size	IfxCpu_Trap_internalProtectionError,__IfxCpu_Trap_internalProtectionError_function_end-IfxCpu_Trap_internalProtectionError
.L47:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_instructionError',code,cluster('IfxCpu_Trap_instructionError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_instructionError'
	.align	2
	
	.global	IfxCpu_Trap_instructionError

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   113  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   114  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   115  void IfxCpu_Trap_instructionError(uint32 tin)
; Function IfxCpu_Trap_instructionError
.L9:
IfxCpu_Trap_instructionError:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L272:
	
.L317:
	mov.d	d0,a15
.L159:
	insert	d1,d1,#2,#8,#8
.L318:
	insert	d1,d1,d4,#0,#8
.L161:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L271:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L155:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   116  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   117      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_instructionErrors, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   118      IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   119      __debug();
	debug
.L319:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   120      __asm("rfe");
	rfe
.L320:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   121  }
	ret
.L153:
	
__IfxCpu_Trap_instructionError_function_end:
	.size	IfxCpu_Trap_instructionError,__IfxCpu_Trap_instructionError_function_end-IfxCpu_Trap_instructionError
.L52:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_contextManagementError',code,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_contextManagementError'
	.align	2
	
	.global	IfxCpu_Trap_contextManagementError

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   122  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   123  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   124  void IfxCpu_Trap_contextManagementError(uint32 tin)
; Function IfxCpu_Trap_contextManagementError
.L11:
IfxCpu_Trap_contextManagementError:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L274:
	
.L325:
	mov.d	d0,a15
.L169:
	insert	d1,d1,#3,#8,#8
.L326:
	insert	d1,d1,d4,#0,#8
.L171:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L273:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L165:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   125  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   126      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_contextManagement, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   127      IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   128      __debug();
	debug
.L327:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   129      __asm("rfe");
	rfe
.L328:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   130  }
	ret
.L163:
	
__IfxCpu_Trap_contextManagementError_function_end:
	.size	IfxCpu_Trap_contextManagementError,__IfxCpu_Trap_contextManagementError_function_end-IfxCpu_Trap_contextManagementError
.L57:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_busError',code,cluster('IfxCpu_Trap_busError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_busError'
	.align	2
	
	.global	IfxCpu_Trap_busError

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   131  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   132  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   133  void IfxCpu_Trap_busError(uint32 tin)
; Function IfxCpu_Trap_busError
.L13:
IfxCpu_Trap_busError:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L276:
	
.L333:
	mov.d	d0,a15
.L179:
	insert	d1,d1,#4,#8,#8
.L334:
	insert	d1,d1,d4,#0,#8
.L181:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L275:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L175:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   134  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   135      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_bus, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   136      IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   137      __debug();
	debug
.L335:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   138      __asm("rfe");
	rfe
.L336:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   139  }
	ret
.L173:
	
__IfxCpu_Trap_busError_function_end:
	.size	IfxCpu_Trap_busError,__IfxCpu_Trap_busError_function_end-IfxCpu_Trap_busError
.L62:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_assertion',code,cluster('IfxCpu_Trap_assertion')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_assertion'
	.align	2
	
	.global	IfxCpu_Trap_assertion

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   140  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   141  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   142  void IfxCpu_Trap_assertion(uint32 tin)
; Function IfxCpu_Trap_assertion
.L15:
IfxCpu_Trap_assertion:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L278:
	
.L341:
	mov.d	d0,a15
.L189:
	insert	d1,d1,#5,#8,#8
.L342:
	insert	d1,d1,d4,#0,#8
.L191:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L277:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L185:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   143  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   144      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_assertion, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   145      IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   146      __debug();
	debug
.L343:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   147      __asm("rfe");
	rfe
.L344:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   148  }
	ret
.L183:
	
__IfxCpu_Trap_assertion_function_end:
	.size	IfxCpu_Trap_assertion,__IfxCpu_Trap_assertion_function_end-IfxCpu_Trap_assertion
.L67:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu0',code,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu0'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu0

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   149  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   150  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   151  void IfxCpu_Trap_systemCall_Cpu0(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu0
.L17:
IfxCpu_Trap_systemCall_Cpu0:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L279:
	
.L200:
	fcall	.cocofun_5
.L202:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L349:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L195:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   152  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   153      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   154      IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   155      __asm("rfe");
	rfe
.L350:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   156  }
	ret
.L193:
	
__IfxCpu_Trap_systemCall_Cpu0_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu0,__IfxCpu_Trap_systemCall_Cpu0_function_end-IfxCpu_Trap_systemCall_Cpu0
.L72:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxCpu_Trap..cocofun_5'
	.align	2
; Function .cocofun_5
.L19:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	insert	d1,d1,#6,#8,#8
	mov.d	d0,a15
.L280:
	insert	d1,d1,d4,#0,#8
	fret
.L117:
	; End of function
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu1',code,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu1'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu1

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   157  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   158  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   159  void IfxCpu_Trap_systemCall_Cpu1(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu1
.L21:
IfxCpu_Trap_systemCall_Cpu1:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L282:
	
.L210:
	fcall	.cocofun_5
.L212:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L281:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L206:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   160  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   161      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   162      IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   163      __asm("rfe");
	rfe
.L355:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   164  }
	ret
.L204:
	
__IfxCpu_Trap_systemCall_Cpu1_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu1,__IfxCpu_Trap_systemCall_Cpu1_function_end-IfxCpu_Trap_systemCall_Cpu1
.L77:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu2',code,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu2'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu2

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   165  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   166  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   167  void IfxCpu_Trap_systemCall_Cpu2(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu2
.L23:
IfxCpu_Trap_systemCall_Cpu2:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L284:
	
.L220:
	fcall	.cocofun_5
.L222:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L283:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L216:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   168  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   169      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   170      IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   171      __asm("rfe");
	rfe
.L360:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   172  }
	ret
.L214:
	
__IfxCpu_Trap_systemCall_Cpu2_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu2,__IfxCpu_Trap_systemCall_Cpu2_function_end-IfxCpu_Trap_systemCall_Cpu2
.L82:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu3',code,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu3'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu3

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   173  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   174  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   175  void IfxCpu_Trap_systemCall_Cpu3(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu3
.L25:
IfxCpu_Trap_systemCall_Cpu3:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L286:
	
.L230:
	fcall	.cocofun_5
.L232:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L285:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L226:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   176  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   177      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   178      IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   179      __asm("rfe");
	rfe
.L365:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   180  }
	ret
.L224:
	
__IfxCpu_Trap_systemCall_Cpu3_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu3,__IfxCpu_Trap_systemCall_Cpu3_function_end-IfxCpu_Trap_systemCall_Cpu3
.L87:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu4',code,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu4'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu4

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   181  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   182  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   183  void IfxCpu_Trap_systemCall_Cpu4(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu4
.L27:
IfxCpu_Trap_systemCall_Cpu4:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L288:
	
.L240:
	fcall	.cocofun_5
.L242:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L287:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L236:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   184  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   185      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   186      IFX_CFG_CPU_TRAP_SYSCALL_CPU4_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   187      __asm("rfe");
	rfe
.L370:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   188  }
	ret
.L234:
	
__IfxCpu_Trap_systemCall_Cpu4_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu4,__IfxCpu_Trap_systemCall_Cpu4_function_end-IfxCpu_Trap_systemCall_Cpu4
.L92:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu5',code,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu5'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu5

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   189  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   190  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   191  void IfxCpu_Trap_systemCall_Cpu5(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu5
.L29:
IfxCpu_Trap_systemCall_Cpu5:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L290:
	
.L250:
	fcall	.cocofun_5
.L252:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L289:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L246:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   192  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   193      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   194      IFX_CFG_CPU_TRAP_SYSCALL_CPU5_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   195      __asm("rfe");
	rfe
.L375:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   196  }
	ret
.L244:
	
__IfxCpu_Trap_systemCall_Cpu5_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu5,__IfxCpu_Trap_systemCall_Cpu5_function_end-IfxCpu_Trap_systemCall_Cpu5
.L97:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_nonMaskableInterrupt',code,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_nonMaskableInterrupt'
	.align	2
	
	.global	IfxCpu_Trap_nonMaskableInterrupt

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   197  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   198  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   199  void IfxCpu_Trap_nonMaskableInterrupt(uint32 tin)
; Function IfxCpu_Trap_nonMaskableInterrupt
.L31:
IfxCpu_Trap_nonMaskableInterrupt:	.type	func

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm__ volatile ("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L292:
	
.L380:
	mov.d	d0,a15
.L260:
	insert	d1,d1,#7,#8,#8
.L381:
	insert	d1,d1,d4,#0,#8
.L262:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    24   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    25   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    26   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    27   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    28   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    29   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    30   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    31   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    32   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    33   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    34   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    35   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    36   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    37   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    38   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    39   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    40   * \ingroup IfxLld_Cpu_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    41   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    42  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    43  #ifndef IFXCPU_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    44  #define IFXCPU_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    45  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    46  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    47  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    48  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    49  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    50  #include "_Impl/IfxCpu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    51  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    52  #include "IfxScu_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    53  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    54  #include "_Impl/IfxScu_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    55  #include "_Utilities/Ifx_Assert.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    58  /*-----------------------------------Macros-----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    61  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    62   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    63   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    64   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    65   * Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    66   *  \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    67   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    68   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    69   *  \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    70   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    71  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    72  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    73  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    74   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    75   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    76   * the CPU number.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    77   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    78   *   Example usage:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    79   *   \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    80   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    81   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    82   *   \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    84  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    85  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    86  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    87  /*------------------------------Type Definitions------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    88  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    89  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    90  /** \brief Lock type Spin lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    91   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    92  typedef unsigned int IfxCpu_spinLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    93  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    94  /** \brief Lock type Mutex lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    95   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    96  typedef unsigned int IfxCpu_mutexLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    97  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    98  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	    99  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   100  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   101  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   102  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   103   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   104  /** \brief Enumeration for the Cpu mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   105   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   106  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   107  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   108      IfxCpu_CoreMode_halt,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   109      IfxCpu_CoreMode_run,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   110      IfxCpu_CoreMode_idle,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   111      IfxCpu_CoreMode_sleep,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   112      IfxCpu_CoreMode_stby,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   113      IfxCpu_CoreMode_unknown
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   114  } IfxCpu_CoreMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   115  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   116  /** \brief Performance conunter modes
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   117   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   118  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   119  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   120      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   121      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   122  } IfxCpu_CounterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   123  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   124  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   125  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   127  /*-----------------------------Data Structures--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   128  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   129  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   130  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   131   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   132  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   133  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   134      uint32  counter;      /**< \brief Counter value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   135      boolean overlfow;     /**< \brief sticky overlfow */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   136  } IfxCpu_Counter;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   137  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   138  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   140  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   141   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   142  /** \brief Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   143   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   144  typedef struct
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   145  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   146      IfxCpu_Counter instruction;     /**< \brief Instruction counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   147      IfxCpu_Counter clock;           /**< \brief CPU clock counter */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   148      IfxCpu_Counter counter1;        /**< \brief Multi counter 1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   149      IfxCpu_Counter counter2;        /**< \brief Multi counter 2 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   150      IfxCpu_Counter counter3;        /**< \brief Multi counter 3 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   151  } IfxCpu_Perf;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   152  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   153  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   155  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   156   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   158  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   160  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   161  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   162  /** \brief API to get core id of the CPU of the caller.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   163   * Caution: Core id of the cpus may not be continguous and shouldn't be used to index cpu.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   164   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   165   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   166   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   167  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   169  /** \brief API to get cpu index of the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   170   * Note: This api can be used whereever cpu no/index is needed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   171   * \return Resource index of the CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   172   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   173  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   175  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   176   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   177   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   178   * shall not be used to initialize the CSA of another CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   179   * \param csaBegin Pointer to start of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   180   * \param csaEnd Pointer to end of context save area
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   181   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   182   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   183  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   184  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   185  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   186   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   187   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   188  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   189  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   190  /** \brief Triggers Software Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   191   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   192   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   193  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   194  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   195  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   196  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   197  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   199  /** \brief API to get the address for CPU HW module register memory map
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   200   * \param cpu Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   201   * \return CPU module register address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   202   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   203  IFX_EXTERN Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   205  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   206   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   207   * \return Current mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   208   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   209  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   211  /** \brief API to get current mode of CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   212   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   213   * \return Resource index of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   214   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   215  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   217  /** \brief API to set mode of the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   218   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   219   * \param mode CPU mode to be set by this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   220   * \return Success status of the activity (setting the core mode).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   221   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   222   * \retval FALSE: If the activity can't be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   223   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   224  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   225  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   226  /** \brief API to set the program counter for the CPU specified.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   227   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   228   * \param programCounter Program counter value to be set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   229   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   230   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   231   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   232   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   233  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   235  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   236   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   237   * \param programCounter Program counter value to start the CPU
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   238   * \return success status of the activity (setting program counter value).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   239   * \retval TRUE: If the activity successfully be performed.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   240   * \retval FALSE: If the activity can't be performed
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   241   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   242  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   244  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   245  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   246  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   247   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   249  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   250  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   251  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   253  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   254   * This API provides the status of CPU where this API is called
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   255   * \return Status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   256   * \retval TRUE: Global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   257   * \retval FALSE: Global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   258   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   259  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   260  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   261  /** \brief API to disable global interrupt and return the previous status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   262   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   263   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   264   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   265   * \return Previous status of global interrupt enable bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   266   * \retval TRUE: Previously, global interrupts enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   267   * \retval FALSE: Previously, global interrupts disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   268   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   269  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   271  /** \brief API to enable global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   272   * This API simply enables the global interrupt.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   273   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   274   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   275  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   276  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   277  /** \brief Disable the Global Interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   278   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   279   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   280  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   281  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   282  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   283   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   284   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   285   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   286   * \param enabled Previous status of the global interrupt enable bit
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   287   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   288   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   289  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   290  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   291  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   292  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   293  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   294   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   296  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   297  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   298  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   299  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   300  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   301   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   302   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   303   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   304   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   305   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   306   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   307  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   308  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   309  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   310   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   311   * \note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   312   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   313   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   314   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   315   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   316  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   318  /** \brief API to invalidate the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   319   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   321  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   323  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   324   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   325   * \return Status TRUE/FALSE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   326   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   327  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   329  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   330   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   331   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   332   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   333   * \param enable Command to enable or bypass the data cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   334   * TRUE: Enable the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   335   * FALSE: Bypass the data cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   337   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   338  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   339  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   340  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   341   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   342   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   343   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   344   * \param enable Command to enable or bypass the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   345   * TRUE: Enable the program cache.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   346   * FALSE: Bypass the program cache
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   348   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   350  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   351  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   353  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   354   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   356  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   357  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   358  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   359  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   360  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   361   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   362   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   363   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   364   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   365   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   366  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   368  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   370   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   371   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   372   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   373   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   374   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   375   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   376   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   377   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   378   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   379  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   380  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   381  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   382   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   383   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   384   * used for this activity towards other CPUs
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   385   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   386   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   387  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   388  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   389  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   390   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   391   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   392   * It cannot be used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   393   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   394   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   395   * reading the counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   396   * \return Status of sticky overflow bit.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   397   * \retval TRUE: Sticky overflow bit is set.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   398   * \retval FALSE: Sticky overflow bit is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   399   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   400  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   401  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   402  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   403   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   404   * \return counter value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   405   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   406  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   407  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   408  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   409   * This is generic function to get sticky overflow bit of any performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   410   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   411   * \return Status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   412   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   413  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint32 address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   414  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   415  /** \brief Reset and start instruction, clock and multi counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   416   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   417   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   418   * \param mode Counter mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   419   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   420   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   421  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   422  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   423  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   424   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   425   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   426   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   427   * \param enable enable Command to enable or disable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   428   * TRUE: Enable the performance counter.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   429   * FALSE: Disable the performance counter
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   430   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   431   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   432  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   433  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   434  /** \brief Stop instruction and clock counters, return their values
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   435   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   436   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   437   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   438   * \return Performance counter result
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   439   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   440  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   441  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   442  /** \brief API to update clock counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   443   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   444   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   445   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   446   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   448   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   450  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   451  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   452   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   453   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   455   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   456   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   457   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   458  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   459  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   460  /** \brief API to update performance counter for the CPU which calls this API.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   461   * This is generic function to update any of the performance counters
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   462   * \param address Address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   463   * \param count Count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   464   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   465   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   466  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   468  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   469  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   470  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   471   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   472  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   474  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   475  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   476  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   477  /** \brief API to acquire the mutex (binary semaphore).
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   478   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   479   * This API can be used to acquire/get the mutex.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   480   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   481   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   482   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   483   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   484   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   485   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   486   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   487   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   488   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   489   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   490   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   491   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   492   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   493  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   494  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   495  /** \brief API to unlock the mutex .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   496   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   497   * This API can be used to unlock the previously acquired mutex
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   498   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   501   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   502   *    IfxCpu_mutexLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   503   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   504   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   505   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   506   *      IfxCpu_releaseMutex(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   507   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   508   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   509   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   510   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   511  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   512  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   513  /** \brief API to unlock the resource .
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   514   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   515   * This API can be used to unlock the previously acquired lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   516   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   517   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   518   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   519  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   520  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   521  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   522   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   523   * This API can be used to spin lock for the lock for the given timeout period.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   524   * \param lock lock pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   525   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   526   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   527   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   528   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   529   *    IfxCpu_spinLock resourceLock;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   530   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   531   *    if (flag){
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   532   *      // critical section
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   533   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   534   *    }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   535   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   536   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   537   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   538  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   539  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   540  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   541  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   542  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   543   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   544  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   545  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   546  /*-------------------------Global Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   547  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   548  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   549  /** \brief API to get random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   550   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   551   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   552   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   553  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   554  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   555  /** \brief API to get random value with in the range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   556   * \param seed Pointer to seed value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   557   * \param min minimum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   558   * \param max maximum range value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   559   * \return random value
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   560   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   561  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   562  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   563  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   564  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   565  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   566  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   567  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   568  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   569  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   570  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   571      Ifx_CPU_ICR reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   572      reg.U = __mfcr(CPU_ICR);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   573      return reg.B.IE != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   574  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   575  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   576  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   577  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   578  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   579      boolean enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   580      enabled = IfxCpu_areInterruptsEnabled();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   581      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   582      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   583      return enabled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   584  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   586  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   587  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   588  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   589      __enable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   590  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   591  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   592  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   593  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   594  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   595      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   596      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   597      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   598      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   599  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   600      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   601      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   602      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xC);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   603  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   604      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   605      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   606          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   607      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   608  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   609      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   610  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   611      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   612  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   613      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   614      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   615      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   616      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   617      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   618      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   619      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   620      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   621  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   622  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   623  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   624  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   625  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   626      uint32 cpu_pmaVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   627      uint16 checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   628      uint32 coreId      = IfxCpu_getCoreIndex();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   629      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreId]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   630  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   631      /*resolve the restrictions*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   632      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   633      checkRestrictionMask = ((uint16)1 << (7 - coreId)) | ((uint16)1 << 0xD);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   634  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   635      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   636      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   637          segmentNumberMask |= checkRestrictionMask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   638      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   639  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   640      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   641  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   642      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   643  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   644      /*The CPU_PMA registers are ENDINIT protected*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   645      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   646      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   647      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   648      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   649      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   650      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   651      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreId], wdtPassword);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   652  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   653  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   654  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   655  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   656  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   657      __disable();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   658      __nop();
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   659  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   660  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   661  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   662  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   663  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   664      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   665  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   666  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   667  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   668  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   669  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   670      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   671  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   672  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   674  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreId(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   675  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   676      Ifx_CPU_CORE_ID reg;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   677      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L291:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Std\IfxCpu.h	   678      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	fcall	.cocofun_4
.L256:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   200  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   201      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_nonMaskableInterrupt, tin);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   202      IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   203      __debug();
	debug
.L382:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   204      __asm("rfe");
	rfe
.L383:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   205  }
	ret
.L254:
	
__IfxCpu_Trap_nonMaskableInterrupt_function_end:
	.size	IfxCpu_Trap_nonMaskableInterrupt,__IfxCpu_Trap_nonMaskableInterrupt_function_end-IfxCpu_Trap_nonMaskableInterrupt
.L102:
	; End of function
	
	.sdecl	'.text.traptab_cpu0',code,cluster('IfxCpu_Trap_vectorTable0'),protect
	.sect	'.text.traptab_cpu0'
	.align	2
	
	.global	IfxCpu_Trap_vectorTable0

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   206  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   207  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   208  #if defined(__GNUC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   209  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   210  #pragma section ".traptab_cpu0" awx
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   211  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   212  #if defined(__DCC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   213  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   214  #pragma section CODE ".traptab_cpu0" X
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   215  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   216  #if defined(__TASKING__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   217  #pragma protect on
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   218  #pragma section code "traptab_cpu0"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   219  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   220  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   221  void IfxCpu_Trap_vectorTable0(void)
; Function IfxCpu_Trap_vectorTable0
.L33:
IfxCpu_Trap_vectorTable0:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   222  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   223      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_memoryManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_memoryManagementError)
	
	mov	d4,d15
	ji	a15
	rfe

	
.L388:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   224      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_internalProtectionError)
	lea	a15,[a15]@los(IfxCpu_Trap_internalProtectionError)
	
	mov	d4,d15
	ji	a15
	rfe

	
.L389:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   225      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_instructionError)
	lea	a15,[a15]@los(IfxCpu_Trap_instructionError)
	
	mov	d4,d15
	ji	a15
	rfe

	
.L390:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   226      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_contextManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_contextManagementError)
	
	mov	d4,d15
	ji	a15
	rfe

	
.L391:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   227      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_busError)
	lea	a15,[a15]@los(IfxCpu_Trap_busError)
	
	mov	d4,d15
	ji	a15
	rfe

	
.L392:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   228      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_assertion)
	lea	a15,[a15]@los(IfxCpu_Trap_assertion)
	
	mov	d4,d15
	ji	a15
	rfe

	
.L393:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   229      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_systemCall_Cpu0)
	lea	a15,[a15]@los(IfxCpu_Trap_systemCall_Cpu0)
	
	mov	d4,d15
	ji	a15
	rfe

	
.L394:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   230      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_nonMaskableInterrupt)
	lea	a15,[a15]@los(IfxCpu_Trap_nonMaskableInterrupt)
	
	mov	d4,d15
	ji	a15
	rfe

	
.L395:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   231  }
	ret
.L264:
	
__IfxCpu_Trap_vectorTable0_function_end:
	.size	IfxCpu_Trap_vectorTable0,__IfxCpu_Trap_vectorTable0_function_end-IfxCpu_Trap_vectorTable0
.L107:
	; End of function
	
	.sdecl	'.zbss.IfxCpu_Trap.trapWatch',data,cluster('trapWatch')
	.sect	'.zbss.IfxCpu_Trap.trapWatch'
	.global	trapWatch
	.align	4
trapWatch:	.type	object
	.size	trapWatch,8
	.space	8
	.calls	'__INDIRECT__','IfxCpu_Trap_memoryManagementError'
	.calls	'__INDIRECT__','IfxCpu_Trap_internalProtectionError'
	.calls	'__INDIRECT__','IfxCpu_Trap_instructionError'
	.calls	'__INDIRECT__','IfxCpu_Trap_contextManagementError'
	.calls	'__INDIRECT__','IfxCpu_Trap_busError'
	.calls	'__INDIRECT__','IfxCpu_Trap_assertion'
	.calls	'__INDIRECT__','IfxCpu_Trap_systemCall_Cpu0'
	.calls	'__INDIRECT__','IfxCpu_Trap_nonMaskableInterrupt'
	.calls	'__INDIRECT__','_trapassertion'
	.calls	'__INDIRECT__','_trapbus'
	.calls	'__INDIRECT__','_trapcontext'
	.calls	'__INDIRECT__','_trapinstruction'
	.calls	'__INDIRECT__','_trapmmu'
	.calls	'__INDIRECT__','_trapnmi'
	.calls	'__INDIRECT__','_trapprotection'
	.calls	'__INDIRECT__','_trapsystem'
	.calls	'IfxCpu_Trap_memoryManagementError','.cocofun_4'
	.calls	'IfxCpu_Trap_internalProtectionError','.cocofun_4'
	.calls	'IfxCpu_Trap_instructionError','.cocofun_4'
	.calls	'IfxCpu_Trap_contextManagementError','.cocofun_4'
	.calls	'IfxCpu_Trap_busError','.cocofun_4'
	.calls	'IfxCpu_Trap_assertion','.cocofun_4'
	.calls	'IfxCpu_Trap_systemCall_Cpu0','.cocofun_5'
	.calls	'IfxCpu_Trap_systemCall_Cpu0','.cocofun_4'
	.calls	'IfxCpu_Trap_systemCall_Cpu1','.cocofun_5'
	.calls	'IfxCpu_Trap_systemCall_Cpu1','.cocofun_4'
	.calls	'IfxCpu_Trap_systemCall_Cpu2','.cocofun_5'
	.calls	'IfxCpu_Trap_systemCall_Cpu2','.cocofun_4'
	.calls	'IfxCpu_Trap_systemCall_Cpu3','.cocofun_5'
	.calls	'IfxCpu_Trap_systemCall_Cpu3','.cocofun_4'
	.calls	'IfxCpu_Trap_systemCall_Cpu4','.cocofun_5'
	.calls	'IfxCpu_Trap_systemCall_Cpu4','.cocofun_4'
	.calls	'IfxCpu_Trap_systemCall_Cpu5','.cocofun_5'
	.calls	'IfxCpu_Trap_systemCall_Cpu5','.cocofun_4'
	.calls	'IfxCpu_Trap_nonMaskableInterrupt','.cocofun_4'
	.calls	'IfxCpu_Trap_memoryManagementError','',0
	.calls	'.cocofun_4','',0
	.calls	'IfxCpu_Trap_internalProtectionError','',0
	.calls	'IfxCpu_Trap_instructionError','',0
	.calls	'IfxCpu_Trap_contextManagementError','',0
	.calls	'IfxCpu_Trap_busError','',0
	.calls	'IfxCpu_Trap_assertion','',0
	.calls	'IfxCpu_Trap_systemCall_Cpu0','',0
	.calls	'.cocofun_5','',0
	.calls	'IfxCpu_Trap_systemCall_Cpu1','',0
	.calls	'IfxCpu_Trap_systemCall_Cpu2','',0
	.calls	'IfxCpu_Trap_systemCall_Cpu3','',0
	.calls	'IfxCpu_Trap_systemCall_Cpu4','',0
	.calls	'IfxCpu_Trap_systemCall_Cpu5','',0
	.calls	'IfxCpu_Trap_nonMaskableInterrupt','',0
_trapassertion	.equ	IfxCpu_Trap_assertion
	.global	_trapassertion
_trapbus	.equ	IfxCpu_Trap_busError
	.global	_trapbus
_trapcontext	.equ	IfxCpu_Trap_contextManagementError
	.global	_trapcontext
_trapinstruction	.equ	IfxCpu_Trap_instructionError
	.global	_trapinstruction
_trapmmu	.equ	IfxCpu_Trap_memoryManagementError
	.global	_trapmmu
_trapnmi	.equ	IfxCpu_Trap_nonMaskableInterrupt
	.global	_trapnmi
_trapprotection	.equ	IfxCpu_Trap_internalProtectionError
	.global	_trapprotection
_trapsystem	.equ	IfxCpu_Trap_systemCall_Cpu0
	.global	_trapsystem
	.extern	__INDIRECT__
	.calls	'IfxCpu_Trap_vectorTable0','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L35:
	.word	45513
	.half	3
	.word	.L36
	.byte	4
.L34:
	.byte	1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L37
	.byte	2
	.byte	'__stopPerfCounters',0,3,1,217,1,17,1,1,3,0,4
	.byte	'void',0,5
	.word	219
.L132:
	.byte	6
	.byte	'__getA11',0,3,1,137,2,18
	.word	225
	.byte	1,1
.L134:
	.byte	3,0,7
	.byte	'unsigned long long int',0,8,7,6
	.byte	'__ld64',0,3,2,110,19
	.word	253
	.byte	1,1,8
	.byte	'addr',0,2,110,32
	.word	225
	.byte	3,0,2
	.byte	'__st64',0,3,2,118,17,1,1,8
	.byte	'addr',0,2,118,30
	.word	225
	.byte	8
	.byte	'value',0,2,118,43
	.word	253
	.byte	3,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,133,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	378
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	378
	.byte	16,0,2,35,0,0,11,4,187,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	394
	.byte	4,2,35,0,0,7
	.byte	'unsigned char',0,1,8,7
	.byte	'unsigned short int',0,2,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,142,8,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	2,6,2,35,0,10
	.byte	'IR0',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	530
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	530
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	547
	.byte	16,0,2,35,2,0,11,4,195,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	569
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,157,8,16,4,10
	.byte	'AE',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	530
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	530
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	547
	.byte	16,0,2,35,2,0,11,4,203,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	813
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU',0,4,243,13,25,12,12
	.byte	'CON0',0
	.word	490
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	773
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	1004
	.byte	4,2,35,8,0,13
	.word	1044
	.byte	5
	.word	1107
	.byte	2
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,130,3,17,1,1,8
	.byte	'watchdog',0,3,130,3,65
	.word	1112
	.byte	8
	.byte	'password',0,3,130,3,82
	.word	547
	.byte	3,0,2
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,222,3,17,1,1,8
	.byte	'watchdog',0,3,222,3,63
	.word	1112
	.byte	8
	.byte	'password',0,3,222,3,80
	.word	547
	.byte	3,0,6
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,187,3,19
	.word	547
	.byte	1,1,8
	.byte	'watchdog',0,3,187,3,74
	.word	1112
	.byte	3,0,14,6,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_none',0,1,0
.L137:
	.byte	6
	.byte	'IfxCpu_getCoreId',0,3,5,162,5,31
	.word	1342
	.byte	1,1
.L139:
	.byte	3,0,6
	.byte	'IfxCpu_getCoreIndex',0,3,5,170,5,31
	.word	1342
	.byte	1,1,3,0,6
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,185,4,20
	.word	530
	.byte	1,1,3,0
.L121:
	.byte	7
	.byte	'unsigned long int',0,4,7,6
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,190,5,19
	.word	1504
	.byte	1,1,8
	.byte	'address',0,5,190,5,55
	.word	1504
	.byte	3,0,6
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,198,5,20
	.word	530
	.byte	1,1,8
	.byte	'address',0,5,198,5,70
	.word	1504
	.byte	3,0,2
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,153,7,17,1,1,8
	.byte	'address',0,5,153,7,56
	.word	1504
	.byte	8
	.byte	'count',0,5,153,7,72
	.word	1504
	.byte	3,0
.L130:
	.byte	16,8,166,1,9,8,12
	.byte	'tAddr',0
	.word	355
	.byte	4,2,35,0,10
	.byte	'tId',0,1
	.word	530
	.byte	8,0,2,35,4,10
	.byte	'tClass',0,1
	.word	530
	.byte	8,0,2,35,5,10
	.byte	'tCpu',0,1
	.word	530
	.byte	3,5,2,35,6,0
.L123:
	.byte	6
	.byte	'IfxCpu_Trap_extractTrapInfo',0,3,7,86,24
	.word	1733
	.byte	1,1
.L125:
	.byte	8
	.byte	'trapClass',0,7,86,58
	.word	530
.L127:
	.byte	8
	.byte	'tin',0,7,86,76
	.word	1504
.L129:
	.byte	17,3,3,0,0,13
	.word	371
	.byte	18
	.byte	'__mfcr',0
	.word	1878
	.byte	1,1,1,1,19
	.word	371
	.byte	0,20
	.byte	'__debug',0,1,1,1,1,21
	.word	190
	.byte	3,0,21
	.word	230
	.byte	3,0,21
	.word	279
	.byte	22
	.word	297
	.byte	3,0,21
	.word	312
	.byte	22
	.word	326
	.byte	22
	.word	339
	.byte	3,0,21
	.word	1117
	.byte	22
	.word	1157
	.byte	22
	.word	1175
	.byte	3,0,21
	.word	1195
	.byte	22
	.word	1233
	.byte	22
	.word	1251
	.byte	3,0,21
	.word	1271
	.byte	22
	.word	1322
	.byte	3,0,21
	.word	1397
	.byte	3,0,21
	.word	1428
	.byte	3,0,21
	.word	1462
	.byte	3,0,21
	.word	1525
	.byte	22
	.word	1566
	.byte	3,0,21
	.word	1585
	.byte	22
	.word	1640
	.byte	3,0,21
	.word	1659
	.byte	22
	.word	1699
	.byte	22
	.word	1716
	.byte	3,0,21
	.word	1804
	.byte	22
	.word	1843
	.byte	22
	.word	1861
	.byte	17,23
	.word	230
	.byte	24
	.word	251
	.byte	0,3,23
	.word	1397
	.byte	24
	.word	1426
	.byte	0,3,0,0
.L135:
	.byte	5
	.word	1504
	.byte	9
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,9,92,16,4,10
	.byte	'CORE_ID',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	378
	.byte	29,0,2,35,0,0
.L141:
	.byte	11,9,223,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2116
	.byte	4,2,35,0,0,25
	.byte	'__INDIRECT__',0,7,1,1,1,1,1,7
	.byte	'short int',0,2,5,26
	.byte	'__wchar_t',0,7,1,1
	.word	2245
	.byte	26
	.byte	'__size_t',0,7,1,1
	.word	355
	.byte	26
	.byte	'__ptrdiff_t',0,7,1,1
	.word	371
	.byte	27,1,5
	.word	2313
	.byte	26
	.byte	'__codeptr',0,7,1,1
	.word	2315
	.byte	26
	.byte	'__intptr_t',0,7,1,1
	.word	371
	.byte	26
	.byte	'__uintptr_t',0,7,1,1
	.word	355
	.byte	26
	.byte	'_iob_flag_t',0,10,82,25
	.word	547
	.byte	26
	.byte	'uint8',0,11,89,24
	.word	530
	.byte	26
	.byte	'sint16',0,11,90,24
	.word	2245
	.byte	26
	.byte	'uint16',0,11,91,24
	.word	547
	.byte	7
	.byte	'long int',0,4,5,26
	.byte	'sint32',0,11,92,24
	.word	2441
	.byte	26
	.byte	'uint32',0,11,93,24
	.word	1504
	.byte	7
	.byte	'float',0,4,4,26
	.byte	'float32',0,11,94,24
	.word	2483
	.byte	26
	.byte	'boolean',0,11,104,24
	.word	530
	.byte	7
	.byte	'long long int',0,8,5,26
	.byte	'sint64',0,12,36,28
	.word	2524
	.byte	26
	.byte	'uint64',0,12,37,28
	.word	253
	.byte	26
	.byte	'pvoid',0,12,40,28
	.word	225
	.byte	26
	.byte	'Ifx_TickTime',0,12,43,28
	.word	2524
	.byte	14,8,69,9,1,15
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressFill',0,0,15
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressProtection',0,1,0,26
	.byte	'IfxCpu_Trap_MemoryManagement_Id',0,8,73,3
	.word	2606
	.byte	14,8,78,9,1,15
	.byte	'IfxCpu_Trap_InternalProtection_Id_privilegeViolation',0,1,15
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionRead',0,2,15
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionWrite',0,3,15
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionExecute',0,4,15
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionPeripheralAccess',0,5,15
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionNullAddress',0,6,15
	.byte	'IfxCpu_Trap_InternalProtection_Id_globalRegisterWriteProtection',0,7,0,26
	.byte	'IfxCpu_Trap_InternalProtection_Id',0,8,87,3
	.word	2764
	.byte	14,8,92,9,1,15
	.byte	'IfxCpu_Trap_InstructionErrors_Id_illegalOpcode',0,1,15
	.byte	'IfxCpu_Trap_InstructionErrors_Id_unimplementedOpcode',0,2,15
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidOperand',0,3,15
	.byte	'IfxCpu_Trap_InstructionErrors_Id_dataAddressAlignment',0,4,15
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidMemoryAddress',0,5,0,26
	.byte	'IfxCpu_Trap_InstructionErrors_Id',0,8,99,3
	.word	3241
	.byte	14,8,104,9,1,15
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListDepletion',0,1,15
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthOverflow',0,2,15
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthUnderflow',0,3,15
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListUnderflow',0,4,15
	.byte	'IfxCpu_Trap_ContextManagement_Id_callStackUnderflow',0,5,15
	.byte	'IfxCpu_Trap_ContextManagement_Id_contextType',0,6,15
	.byte	'IfxCpu_Trap_ContextManagement_Id_nestingError',0,7,0,26
	.byte	'IfxCpu_Trap_ContextManagement_Id',0,8,113,3
	.word	3554
	.byte	14,8,118,9,1,15
	.byte	'IfxCpu_Trap_Bus_Id_programFetchSynchronousError',0,1,15
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessSynchronousError',0,2,15
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessAsynchronousError',0,3,15
	.byte	'IfxCpu_Trap_Bus_Id_CoprocessorTrapAsynchronousError',0,4,15
	.byte	'IfxCpu_Trap_Bus_Id_programMemoryIntegrityError',0,5,15
	.byte	'IfxCpu_Trap_Bus_Id_dataMemoryIntegrityError',0,6,15
	.byte	'IfxCpu_Trap_Bus_Id_temporalAsynchronousError',0,7,0,26
	.byte	'IfxCpu_Trap_Bus_Id',0,8,127,3
	.word	3977
	.byte	14,8,132,1,9,1,15
	.byte	'IfxCpu_Trap_Assertion_Id_arithmeticOverflow',0,1,15
	.byte	'IfxCpu_Trap_Assertion_Id_stickyArithmeticOverflow',0,2,0,26
	.byte	'IfxCpu_Trap_Assertion_Id',0,8,136,1,3
	.word	4353
	.byte	26
	.byte	'IfxCpu_Trap_SystemCall_Id',0,8,141,1,16
	.word	2441
	.byte	26
	.byte	'IfxCpu_Trap_NonMaskableInterrupt_Id',0,8,146,1,16
	.word	2441
	.byte	26
	.byte	'IfxCpu_Trap',0,8,172,1,3
	.word	1733
	.byte	9
	.byte	'_Ifx_CPU_A_Bits',0,9,45,16,4,10
	.byte	'ADDR',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_A_Bits',0,9,48,3
	.word	4593
	.byte	9
	.byte	'_Ifx_CPU_BIV_Bits',0,9,51,16,4,10
	.byte	'VSS',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'BIV',0,4
	.word	378
	.byte	31,0,2,35,0,0,26
	.byte	'Ifx_CPU_BIV_Bits',0,9,55,3
	.word	4654
	.byte	9
	.byte	'_Ifx_CPU_BTV_Bits',0,9,58,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'BTV',0,4
	.word	378
	.byte	31,0,2,35,0,0,26
	.byte	'Ifx_CPU_BTV_Bits',0,9,62,3
	.word	4733
	.byte	9
	.byte	'_Ifx_CPU_CCNT_Bits',0,9,65,16,4,10
	.byte	'CountValue',0,4
	.word	378
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	378
	.byte	1,0,2,35,0,0,26
	.byte	'Ifx_CPU_CCNT_Bits',0,9,69,3
	.word	4819
	.byte	9
	.byte	'_Ifx_CPU_CCTRL_Bits',0,9,72,16,4,10
	.byte	'CM',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'CE',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'M1',0,4
	.word	378
	.byte	3,27,2,35,0,10
	.byte	'M2',0,4
	.word	378
	.byte	3,24,2,35,0,10
	.byte	'M3',0,4
	.word	378
	.byte	3,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	378
	.byte	21,0,2,35,0,0,26
	.byte	'Ifx_CPU_CCTRL_Bits',0,9,80,3
	.word	4908
	.byte	9
	.byte	'_Ifx_CPU_COMPAT_Bits',0,9,83,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'RM',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'SP',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	378
	.byte	27,0,2,35,0,0,26
	.byte	'Ifx_CPU_COMPAT_Bits',0,9,89,3
	.word	5054
	.byte	26
	.byte	'Ifx_CPU_CORE_ID_Bits',0,9,96,3
	.word	2116
	.byte	9
	.byte	'_Ifx_CPU_CPR_L_Bits',0,9,99,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	378
	.byte	29,0,2,35,0,0,26
	.byte	'Ifx_CPU_CPR_L_Bits',0,9,103,3
	.word	5210
	.byte	9
	.byte	'_Ifx_CPU_CPR_U_Bits',0,9,106,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	378
	.byte	29,0,2,35,0,0,26
	.byte	'Ifx_CPU_CPR_U_Bits',0,9,110,3
	.word	5303
	.byte	9
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,9,113,16,4,10
	.byte	'MODREV',0,4
	.word	378
	.byte	8,24,2,35,0,10
	.byte	'MOD_32B',0,4
	.word	378
	.byte	8,16,2,35,0,10
	.byte	'MOD',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_CPU_CPU_ID_Bits',0,9,118,3
	.word	5396
	.byte	9
	.byte	'_Ifx_CPU_CPXE_Bits',0,9,121,16,4,10
	.byte	'XE',0,4
	.word	378
	.byte	8,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	378
	.byte	24,0,2,35,0,0,26
	.byte	'Ifx_CPU_CPXE_Bits',0,9,125,3
	.word	5503
	.byte	9
	.byte	'_Ifx_CPU_CREVT_Bits',0,9,128,1,16,4,10
	.byte	'EVTA',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	378
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	378
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	378
	.byte	24,0,2,35,0,0,26
	.byte	'Ifx_CPU_CREVT_Bits',0,9,136,1,3
	.word	5590
	.byte	9
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,9,139,1,16,4,10
	.byte	'CID',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	378
	.byte	29,0,2,35,0,0,26
	.byte	'Ifx_CPU_CUS_ID_Bits',0,9,143,1,3
	.word	5744
	.byte	9
	.byte	'_Ifx_CPU_D_Bits',0,9,146,1,16,4,10
	.byte	'DATA',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_D_Bits',0,9,149,1,3
	.word	5838
	.byte	9
	.byte	'_Ifx_CPU_DATR_Bits',0,9,152,1,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'SBE',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'reserved_4',0,4
	.word	378
	.byte	5,23,2,35,0,10
	.byte	'CWE',0,4
	.word	378
	.byte	1,22,2,35,0,10
	.byte	'CFE',0,4
	.word	378
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	378
	.byte	3,18,2,35,0,10
	.byte	'SOE',0,4
	.word	378
	.byte	1,17,2,35,0,10
	.byte	'SME',0,4
	.word	378
	.byte	1,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_CPU_DATR_Bits',0,9,163,1,3
	.word	5901
	.byte	9
	.byte	'_Ifx_CPU_DBGSR_Bits',0,9,166,1,16,4,10
	.byte	'DE',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'HALT',0,4
	.word	378
	.byte	2,29,2,35,0,10
	.byte	'SIH',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'SUSP',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	378
	.byte	1,26,2,35,0,10
	.byte	'PREVSUSP',0,4
	.word	378
	.byte	1,25,2,35,0,10
	.byte	'PEVT',0,4
	.word	378
	.byte	1,24,2,35,0,10
	.byte	'EVTSRC',0,4
	.word	378
	.byte	5,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	378
	.byte	19,0,2,35,0,0,26
	.byte	'Ifx_CPU_DBGSR_Bits',0,9,177,1,3
	.word	6119
	.byte	9
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,9,180,1,16,4,10
	.byte	'DTA',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	378
	.byte	31,0,2,35,0,0,26
	.byte	'Ifx_CPU_DBGTCR_Bits',0,9,184,1,3
	.word	6334
	.byte	9
	.byte	'_Ifx_CPU_DCON0_Bits',0,9,187,1,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'DCBYP',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	378
	.byte	30,0,2,35,0,0,26
	.byte	'Ifx_CPU_DCON0_Bits',0,9,192,1,3
	.word	6428
	.byte	9
	.byte	'_Ifx_CPU_DCON2_Bits',0,9,195,1,16,4,10
	.byte	'DCACHE_SZE',0,4
	.word	378
	.byte	16,16,2,35,0,10
	.byte	'DSCRATCH_SZE',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_CPU_DCON2_Bits',0,9,199,1,3
	.word	6544
	.byte	9
	.byte	'_Ifx_CPU_DCX_Bits',0,9,202,1,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	6,26,2,35,0,10
	.byte	'DCXValue',0,4
	.word	378
	.byte	26,0,2,35,0,0,26
	.byte	'Ifx_CPU_DCX_Bits',0,9,206,1,3
	.word	6645
	.byte	9
	.byte	'_Ifx_CPU_DEADD_Bits',0,9,209,1,16,4,10
	.byte	'ERROR_ADDRESS',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_DEADD_Bits',0,9,212,1,3
	.word	6738
	.byte	9
	.byte	'_Ifx_CPU_DIEAR_Bits',0,9,215,1,16,4,10
	.byte	'TA',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_DIEAR_Bits',0,9,218,1,3
	.word	6818
	.byte	9
	.byte	'_Ifx_CPU_DIETR_Bits',0,9,221,1,16,4,10
	.byte	'IED',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	378
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	378
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	378
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	378
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	378
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	378
	.byte	18,0,2,35,0,0,26
	.byte	'Ifx_CPU_DIETR_Bits',0,9,233,1,3
	.word	6887
	.byte	9
	.byte	'_Ifx_CPU_DMS_Bits',0,9,236,1,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'DMSValue',0,4
	.word	378
	.byte	31,0,2,35,0,0,26
	.byte	'Ifx_CPU_DMS_Bits',0,9,240,1,3
	.word	7116
	.byte	9
	.byte	'_Ifx_CPU_DPR_L_Bits',0,9,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	378
	.byte	29,0,2,35,0,0,26
	.byte	'Ifx_CPU_DPR_L_Bits',0,9,247,1,3
	.word	7209
	.byte	9
	.byte	'_Ifx_CPU_DPR_U_Bits',0,9,250,1,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	378
	.byte	29,0,2,35,0,0,26
	.byte	'Ifx_CPU_DPR_U_Bits',0,9,254,1,3
	.word	7304
	.byte	9
	.byte	'_Ifx_CPU_DPRE_Bits',0,9,129,2,16,4,10
	.byte	'RE',0,4
	.word	378
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_CPU_DPRE_Bits',0,9,133,2,3
	.word	7399
	.byte	9
	.byte	'_Ifx_CPU_DPWE_Bits',0,9,136,2,16,4,10
	.byte	'WE',0,4
	.word	378
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_CPU_DPWE_Bits',0,9,140,2,3
	.word	7489
	.byte	9
	.byte	'_Ifx_CPU_DSTR_Bits',0,9,143,2,16,4,10
	.byte	'SRE',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'GAE',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'LBE',0,4
	.word	378
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	378
	.byte	3,26,2,35,0,10
	.byte	'CRE',0,4
	.word	378
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	378
	.byte	7,18,2,35,0,10
	.byte	'DTME',0,4
	.word	378
	.byte	1,17,2,35,0,10
	.byte	'LOE',0,4
	.word	378
	.byte	1,16,2,35,0,10
	.byte	'SDE',0,4
	.word	378
	.byte	1,15,2,35,0,10
	.byte	'SCE',0,4
	.word	378
	.byte	1,14,2,35,0,10
	.byte	'CAC',0,4
	.word	378
	.byte	1,13,2,35,0,10
	.byte	'MPE',0,4
	.word	378
	.byte	1,12,2,35,0,10
	.byte	'CLE',0,4
	.word	378
	.byte	1,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	378
	.byte	3,8,2,35,0,10
	.byte	'ALN',0,4
	.word	378
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	378
	.byte	7,0,2,35,0,0,26
	.byte	'Ifx_CPU_DSTR_Bits',0,9,161,2,3
	.word	7579
	.byte	9
	.byte	'_Ifx_CPU_EXEVT_Bits',0,9,164,2,16,4,10
	.byte	'EVTA',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	378
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	378
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	378
	.byte	24,0,2,35,0,0,26
	.byte	'Ifx_CPU_EXEVT_Bits',0,9,172,2,3
	.word	7903
	.byte	9
	.byte	'_Ifx_CPU_FCX_Bits',0,9,175,2,16,4,10
	.byte	'FCXO',0,4
	.word	378
	.byte	16,16,2,35,0,10
	.byte	'FCXS',0,4
	.word	378
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	378
	.byte	12,0,2,35,0,0,26
	.byte	'Ifx_CPU_FCX_Bits',0,9,180,2,3
	.word	8057
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,9,183,2,16,4,10
	.byte	'TST',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'TCL',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	378
	.byte	6,24,2,35,0,10
	.byte	'RM',0,4
	.word	378
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	378
	.byte	8,14,2,35,0,10
	.byte	'FXE',0,4
	.word	378
	.byte	1,13,2,35,0,10
	.byte	'FUE',0,4
	.word	378
	.byte	1,12,2,35,0,10
	.byte	'FZE',0,4
	.word	378
	.byte	1,11,2,35,0,10
	.byte	'FVE',0,4
	.word	378
	.byte	1,10,2,35,0,10
	.byte	'FIE',0,4
	.word	378
	.byte	1,9,2,35,0,10
	.byte	'reserved_23',0,4
	.word	378
	.byte	3,6,2,35,0,10
	.byte	'FX',0,4
	.word	378
	.byte	1,5,2,35,0,10
	.byte	'FU',0,4
	.word	378
	.byte	1,4,2,35,0,10
	.byte	'FZ',0,4
	.word	378
	.byte	1,3,2,35,0,10
	.byte	'FV',0,4
	.word	378
	.byte	1,2,2,35,0,10
	.byte	'FI',0,4
	.word	378
	.byte	1,1,2,35,0,10
	.byte	'reserved_31',0,4
	.word	378
	.byte	1,0,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,9,202,2,3
	.word	8163
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,9,205,2,16,4,10
	.byte	'OPC',0,4
	.word	378
	.byte	8,24,2,35,0,10
	.byte	'FMT',0,4
	.word	378
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	378
	.byte	7,16,2,35,0,10
	.byte	'DREG',0,4
	.word	378
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	378
	.byte	12,0,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,9,212,2,3
	.word	8512
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,9,215,2,16,4,10
	.byte	'PC',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,9,218,2,3
	.word	8672
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,9,221,2,16,4,10
	.byte	'SRC1',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,9,224,2,3
	.word	8753
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,9,227,2,16,4,10
	.byte	'SRC2',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,9,230,2,3
	.word	8840
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,9,233,2,16,4,10
	.byte	'SRC3',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,9,236,2,3
	.word	8927
	.byte	9
	.byte	'_Ifx_CPU_ICNT_Bits',0,9,239,2,16,4,10
	.byte	'CountValue',0,4
	.word	378
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	378
	.byte	1,0,2,35,0,0,26
	.byte	'Ifx_CPU_ICNT_Bits',0,9,243,2,3
	.word	9014
	.byte	9
	.byte	'_Ifx_CPU_ICR_Bits',0,9,246,2,16,4,10
	.byte	'CCPN',0,4
	.word	378
	.byte	10,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	378
	.byte	5,17,2,35,0,10
	.byte	'IE',0,4
	.word	378
	.byte	1,16,2,35,0,10
	.byte	'PIPN',0,4
	.word	378
	.byte	10,6,2,35,0,10
	.byte	'reserved_26',0,4
	.word	378
	.byte	6,0,2,35,0,0,26
	.byte	'Ifx_CPU_ICR_Bits',0,9,253,2,3
	.word	9105
	.byte	9
	.byte	'_Ifx_CPU_ISP_Bits',0,9,128,3,16,4,10
	.byte	'ISP',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_ISP_Bits',0,9,131,3,3
	.word	9248
	.byte	9
	.byte	'_Ifx_CPU_LCX_Bits',0,9,134,3,16,4,10
	.byte	'LCXO',0,4
	.word	378
	.byte	16,16,2,35,0,10
	.byte	'LCXS',0,4
	.word	378
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	378
	.byte	12,0,2,35,0,0,26
	.byte	'Ifx_CPU_LCX_Bits',0,9,139,3,3
	.word	9314
	.byte	9
	.byte	'_Ifx_CPU_M1CNT_Bits',0,9,142,3,16,4,10
	.byte	'CountValue',0,4
	.word	378
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	378
	.byte	1,0,2,35,0,0,26
	.byte	'Ifx_CPU_M1CNT_Bits',0,9,146,3,3
	.word	9420
	.byte	9
	.byte	'_Ifx_CPU_M2CNT_Bits',0,9,149,3,16,4,10
	.byte	'CountValue',0,4
	.word	378
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	378
	.byte	1,0,2,35,0,0,26
	.byte	'Ifx_CPU_M2CNT_Bits',0,9,153,3,3
	.word	9513
	.byte	9
	.byte	'_Ifx_CPU_M3CNT_Bits',0,9,156,3,16,4,10
	.byte	'CountValue',0,4
	.word	378
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	378
	.byte	1,0,2,35,0,0,26
	.byte	'Ifx_CPU_M3CNT_Bits',0,9,160,3,3
	.word	9606
	.byte	9
	.byte	'_Ifx_CPU_PC_Bits',0,9,163,3,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'PC',0,4
	.word	378
	.byte	31,0,2,35,0,0,26
	.byte	'Ifx_CPU_PC_Bits',0,9,167,3,3
	.word	9699
	.byte	9
	.byte	'_Ifx_CPU_PCON0_Bits',0,9,170,3,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'PCBYP',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	378
	.byte	30,0,2,35,0,0,26
	.byte	'Ifx_CPU_PCON0_Bits',0,9,175,3,3
	.word	9784
	.byte	9
	.byte	'_Ifx_CPU_PCON1_Bits',0,9,178,3,16,4,10
	.byte	'PCINV',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'PBINV',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	378
	.byte	30,0,2,35,0,0,26
	.byte	'Ifx_CPU_PCON1_Bits',0,9,183,3,3
	.word	9900
	.byte	9
	.byte	'_Ifx_CPU_PCON2_Bits',0,9,186,3,16,4,10
	.byte	'PCACHE_SZE',0,4
	.word	378
	.byte	16,16,2,35,0,10
	.byte	'PSCRATCH_SZE',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_CPU_PCON2_Bits',0,9,190,3,3
	.word	10011
	.byte	9
	.byte	'_Ifx_CPU_PCXI_Bits',0,9,193,3,16,4,10
	.byte	'PCXO',0,4
	.word	378
	.byte	16,16,2,35,0,10
	.byte	'PCXS',0,4
	.word	378
	.byte	4,12,2,35,0,10
	.byte	'UL',0,4
	.word	378
	.byte	1,11,2,35,0,10
	.byte	'PIE',0,4
	.word	378
	.byte	1,10,2,35,0,10
	.byte	'PCPN',0,4
	.word	378
	.byte	10,0,2,35,0,0,26
	.byte	'Ifx_CPU_PCXI_Bits',0,9,200,3,3
	.word	10112
	.byte	9
	.byte	'_Ifx_CPU_PIEAR_Bits',0,9,203,3,16,4,10
	.byte	'TA',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_PIEAR_Bits',0,9,206,3,3
	.word	10242
	.byte	9
	.byte	'_Ifx_CPU_PIETR_Bits',0,9,209,3,16,4,10
	.byte	'IED',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	378
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	378
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	378
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	378
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	378
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	378
	.byte	18,0,2,35,0,0,26
	.byte	'Ifx_CPU_PIETR_Bits',0,9,221,3,3
	.word	10311
	.byte	9
	.byte	'_Ifx_CPU_PMA0_Bits',0,9,224,3,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	13,19,2,35,0,10
	.byte	'DAC',0,4
	.word	378
	.byte	3,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_CPU_PMA0_Bits',0,9,229,3,3
	.word	10540
	.byte	9
	.byte	'_Ifx_CPU_PMA1_Bits',0,9,232,3,16,4,10
	.byte	'reserved_0',0,4
	.word	378
	.byte	14,18,2,35,0,10
	.byte	'CAC',0,4
	.word	378
	.byte	2,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_CPU_PMA1_Bits',0,9,237,3,3
	.word	10653
	.byte	9
	.byte	'_Ifx_CPU_PMA2_Bits',0,9,240,3,16,4,10
	.byte	'PSI',0,4
	.word	378
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_CPU_PMA2_Bits',0,9,244,3,3
	.word	10766
	.byte	9
	.byte	'_Ifx_CPU_PSTR_Bits',0,9,247,3,16,4,10
	.byte	'FRE',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'FBE',0,4
	.word	378
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	378
	.byte	9,20,2,35,0,10
	.byte	'FPE',0,4
	.word	378
	.byte	1,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	378
	.byte	1,18,2,35,0,10
	.byte	'FME',0,4
	.word	378
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	378
	.byte	17,0,2,35,0,0,26
	.byte	'Ifx_CPU_PSTR_Bits',0,9,129,4,3
	.word	10857
	.byte	9
	.byte	'_Ifx_CPU_PSW_Bits',0,9,132,4,16,4,10
	.byte	'CDC',0,4
	.word	378
	.byte	7,25,2,35,0,10
	.byte	'CDE',0,4
	.word	378
	.byte	1,24,2,35,0,10
	.byte	'GW',0,4
	.word	378
	.byte	1,23,2,35,0,10
	.byte	'IS',0,4
	.word	378
	.byte	1,22,2,35,0,10
	.byte	'IO',0,4
	.word	378
	.byte	2,20,2,35,0,10
	.byte	'PRS',0,4
	.word	378
	.byte	2,18,2,35,0,10
	.byte	'S',0,4
	.word	378
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	378
	.byte	12,5,2,35,0,10
	.byte	'SAV',0,4
	.word	378
	.byte	1,4,2,35,0,10
	.byte	'AV',0,4
	.word	378
	.byte	1,3,2,35,0,10
	.byte	'SV',0,4
	.word	378
	.byte	1,2,2,35,0,10
	.byte	'V',0,4
	.word	378
	.byte	1,1,2,35,0,10
	.byte	'C',0,4
	.word	378
	.byte	1,0,2,35,0,0,26
	.byte	'Ifx_CPU_PSW_Bits',0,9,147,4,3
	.word	11060
	.byte	9
	.byte	'_Ifx_CPU_SEGEN_Bits',0,9,150,4,16,4,10
	.byte	'ADFLIP',0,4
	.word	378
	.byte	8,24,2,35,0,10
	.byte	'ADTYPE',0,4
	.word	378
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	378
	.byte	21,1,2,35,0,10
	.byte	'AE',0,4
	.word	378
	.byte	1,0,2,35,0,0,26
	.byte	'Ifx_CPU_SEGEN_Bits',0,9,156,4,3
	.word	11303
	.byte	9
	.byte	'_Ifx_CPU_SMACON_Bits',0,9,159,4,16,4,10
	.byte	'PC',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'PT',0,4
	.word	378
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	378
	.byte	5,24,2,35,0,10
	.byte	'DC',0,4
	.word	378
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	378
	.byte	1,22,2,35,0,10
	.byte	'DT',0,4
	.word	378
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	378
	.byte	13,8,2,35,0,10
	.byte	'IODT',0,4
	.word	378
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	378
	.byte	7,0,2,35,0,0,26
	.byte	'Ifx_CPU_SMACON_Bits',0,9,171,4,3
	.word	11431
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,9,174,4,16,4,10
	.byte	'EN',0,4
	.word	355
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,9,177,4,3
	.word	11672
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,9,180,4,16,4,10
	.byte	'reserved_0',0,4
	.word	355
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,9,183,4,3
	.word	11755
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,9,186,4,16,4,10
	.byte	'EN',0,4
	.word	355
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,9,189,4,3
	.word	11846
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,9,192,4,16,4,10
	.byte	'reserved_0',0,4
	.word	355
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,9,195,4,3
	.word	11937
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,9,198,4,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	355
	.byte	27,0,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,9,202,4,3
	.word	12036
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,9,205,4,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	355
	.byte	27,0,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,9,209,4,3
	.word	12143
	.byte	9
	.byte	'_Ifx_CPU_SWEVT_Bits',0,9,212,4,16,4,10
	.byte	'EVTA',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	378
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	378
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	378
	.byte	24,0,2,35,0,0,26
	.byte	'Ifx_CPU_SWEVT_Bits',0,9,220,4,3
	.word	12250
	.byte	9
	.byte	'_Ifx_CPU_SYSCON_Bits',0,9,223,4,16,4,10
	.byte	'FCDSF',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'PROTEN',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'TPROTEN',0,4
	.word	378
	.byte	1,29,2,35,0,10
	.byte	'IS',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'IT',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	378
	.byte	27,0,2,35,0,0,26
	.byte	'Ifx_CPU_SYSCON_Bits',0,9,231,4,3
	.word	12404
	.byte	9
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,9,234,4,16,4,10
	.byte	'ASI',0,4
	.word	378
	.byte	5,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	378
	.byte	27,0,2,35,0,0,26
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,9,238,4,3
	.word	12565
	.byte	9
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,9,241,4,16,4,10
	.byte	'TEXP0',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'TEXP1',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'TEXP2',0,4
	.word	378
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	378
	.byte	13,16,2,35,0,10
	.byte	'TTRAP',0,4
	.word	378
	.byte	1,15,2,35,0,10
	.byte	'reserved_17',0,4
	.word	378
	.byte	15,0,2,35,0,0,26
	.byte	'Ifx_CPU_TPS_CON_Bits',0,9,249,4,3
	.word	12663
	.byte	9
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,9,252,4,16,4,10
	.byte	'Timer',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,9,255,4,3
	.word	12835
	.byte	9
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,9,130,5,16,4,10
	.byte	'ADDR',0,4
	.word	378
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_CPU_TR_ADR_Bits',0,9,133,5,3
	.word	12915
	.byte	9
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,9,136,5,16,4,10
	.byte	'EVTA',0,4
	.word	378
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	378
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	378
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	378
	.byte	4,20,2,35,0,10
	.byte	'TYP',0,4
	.word	378
	.byte	1,19,2,35,0,10
	.byte	'RNG',0,4
	.word	378
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	378
	.byte	1,17,2,35,0,10
	.byte	'ASI_EN',0,4
	.word	378
	.byte	1,16,2,35,0,10
	.byte	'ASI',0,4
	.word	378
	.byte	5,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	378
	.byte	6,5,2,35,0,10
	.byte	'AST',0,4
	.word	378
	.byte	1,4,2,35,0,10
	.byte	'ALD',0,4
	.word	378
	.byte	1,3,2,35,0,10
	.byte	'reserved_29',0,4
	.word	378
	.byte	3,0,2,35,0,0,26
	.byte	'Ifx_CPU_TR_EVT_Bits',0,9,153,5,3
	.word	12988
	.byte	9
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,9,156,5,16,4,10
	.byte	'T0',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'T1',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'T2',0,4
	.word	378
	.byte	1,29,2,35,0,10
	.byte	'T3',0,4
	.word	378
	.byte	1,28,2,35,0,10
	.byte	'T4',0,4
	.word	378
	.byte	1,27,2,35,0,10
	.byte	'T5',0,4
	.word	378
	.byte	1,26,2,35,0,10
	.byte	'T6',0,4
	.word	378
	.byte	1,25,2,35,0,10
	.byte	'T7',0,4
	.word	378
	.byte	1,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	378
	.byte	24,0,2,35,0,0,26
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,9,167,5,3
	.word	13306
	.byte	11,9,175,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4593
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_A',0,9,180,5,3
	.word	13501
	.byte	11,9,183,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4654
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_BIV',0,9,188,5,3
	.word	13560
	.byte	11,9,191,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4733
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_BTV',0,9,196,5,3
	.word	13621
	.byte	11,9,199,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4819
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_CCNT',0,9,204,5,3
	.word	13682
	.byte	11,9,207,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4908
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_CCTRL',0,9,212,5,3
	.word	13744
	.byte	11,9,215,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5054
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_COMPAT',0,9,220,5,3
	.word	13807
	.byte	26
	.byte	'Ifx_CPU_CORE_ID',0,9,228,5,3
	.word	2185
	.byte	11,9,231,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5210
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_CPR_L',0,9,236,5,3
	.word	13896
	.byte	11,9,239,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5303
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_CPR_U',0,9,244,5,3
	.word	13959
	.byte	11,9,247,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5396
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_CPU_ID',0,9,252,5,3
	.word	14022
	.byte	11,9,255,5,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5503
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_CPXE',0,9,132,6,3
	.word	14086
	.byte	11,9,135,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5590
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_CREVT',0,9,140,6,3
	.word	14148
	.byte	11,9,143,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5744
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_CUS_ID',0,9,148,6,3
	.word	14211
	.byte	11,9,151,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5838
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_D',0,9,156,6,3
	.word	14275
	.byte	11,9,159,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5901
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DATR',0,9,164,6,3
	.word	14334
	.byte	11,9,167,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6119
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DBGSR',0,9,172,6,3
	.word	14396
	.byte	11,9,175,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6334
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DBGTCR',0,9,180,6,3
	.word	14459
	.byte	11,9,183,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6428
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DCON0',0,9,188,6,3
	.word	14523
	.byte	11,9,191,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6544
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DCON2',0,9,196,6,3
	.word	14586
	.byte	11,9,199,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6645
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DCX',0,9,204,6,3
	.word	14649
	.byte	11,9,207,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6738
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DEADD',0,9,212,6,3
	.word	14710
	.byte	11,9,215,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6818
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DIEAR',0,9,220,6,3
	.word	14773
	.byte	11,9,223,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6887
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DIETR',0,9,228,6,3
	.word	14836
	.byte	11,9,231,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7116
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DMS',0,9,236,6,3
	.word	14899
	.byte	11,9,239,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7209
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DPR_L',0,9,244,6,3
	.word	14960
	.byte	11,9,247,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7304
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DPR_U',0,9,252,6,3
	.word	15023
	.byte	11,9,255,6,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7399
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DPRE',0,9,132,7,3
	.word	15086
	.byte	11,9,135,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7489
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DPWE',0,9,140,7,3
	.word	15148
	.byte	11,9,143,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7579
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_DSTR',0,9,148,7,3
	.word	15210
	.byte	11,9,151,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7903
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_EXEVT',0,9,156,7,3
	.word	15272
	.byte	11,9,159,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8057
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_FCX',0,9,164,7,3
	.word	15335
	.byte	11,9,167,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8163
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,9,172,7,3
	.word	15396
	.byte	11,9,175,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8512
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,9,180,7,3
	.word	15466
	.byte	11,9,183,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8672
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,9,188,7,3
	.word	15536
	.byte	11,9,191,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8753
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,9,196,7,3
	.word	15605
	.byte	11,9,199,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8840
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,9,204,7,3
	.word	15676
	.byte	11,9,207,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8927
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,9,212,7,3
	.word	15747
	.byte	11,9,215,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9014
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_ICNT',0,9,220,7,3
	.word	15818
	.byte	11,9,223,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9105
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_ICR',0,9,228,7,3
	.word	15880
	.byte	11,9,231,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9248
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_ISP',0,9,236,7,3
	.word	15941
	.byte	11,9,239,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9314
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_LCX',0,9,244,7,3
	.word	16002
	.byte	11,9,247,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9420
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_M1CNT',0,9,252,7,3
	.word	16063
	.byte	11,9,255,7,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9513
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_M2CNT',0,9,132,8,3
	.word	16126
	.byte	11,9,135,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9606
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_M3CNT',0,9,140,8,3
	.word	16189
	.byte	11,9,143,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9699
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PC',0,9,148,8,3
	.word	16252
	.byte	11,9,151,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9784
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PCON0',0,9,156,8,3
	.word	16312
	.byte	11,9,159,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9900
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PCON1',0,9,164,8,3
	.word	16375
	.byte	11,9,167,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10011
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PCON2',0,9,172,8,3
	.word	16438
	.byte	11,9,175,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10112
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PCXI',0,9,180,8,3
	.word	16501
	.byte	11,9,183,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10242
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PIEAR',0,9,188,8,3
	.word	16563
	.byte	11,9,191,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10311
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PIETR',0,9,196,8,3
	.word	16626
	.byte	11,9,199,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10540
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PMA0',0,9,204,8,3
	.word	16689
	.byte	11,9,207,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10653
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PMA1',0,9,212,8,3
	.word	16751
	.byte	11,9,215,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10766
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PMA2',0,9,220,8,3
	.word	16813
	.byte	11,9,223,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10857
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PSTR',0,9,228,8,3
	.word	16875
	.byte	11,9,231,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11060
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_PSW',0,9,236,8,3
	.word	16937
	.byte	11,9,239,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11303
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SEGEN',0,9,244,8,3
	.word	16998
	.byte	11,9,247,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11431
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SMACON',0,9,252,8,3
	.word	17061
	.byte	11,9,255,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11672
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_ACCENA',0,9,132,9,3
	.word	17125
	.byte	11,9,135,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11755
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_ACCENB',0,9,140,9,3
	.word	17195
	.byte	11,9,143,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11846
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,9,148,9,3
	.word	17265
	.byte	11,9,151,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11937
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,9,156,9,3
	.word	17339
	.byte	11,9,159,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12036
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,9,164,9,3
	.word	17413
	.byte	11,9,167,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12143
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,9,172,9,3
	.word	17483
	.byte	11,9,175,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12250
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SWEVT',0,9,180,9,3
	.word	17553
	.byte	11,9,183,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12404
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_SYSCON',0,9,188,9,3
	.word	17616
	.byte	11,9,191,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12565
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_TASK_ASI',0,9,196,9,3
	.word	17680
	.byte	11,9,199,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12663
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_TPS_CON',0,9,204,9,3
	.word	17746
	.byte	11,9,207,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12835
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_TPS_TIMER',0,9,212,9,3
	.word	17811
	.byte	11,9,215,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12915
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_TR_ADR',0,9,220,9,3
	.word	17878
	.byte	11,9,223,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12988
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_TR_EVT',0,9,228,9,3
	.word	17942
	.byte	11,9,231,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13306
	.byte	4,2,35,0,0,26
	.byte	'Ifx_CPU_TRIG_ACC',0,9,236,9,3
	.word	18006
	.byte	9
	.byte	'_Ifx_CPU_CPR',0,9,247,9,25,8,12
	.byte	'L',0
	.word	13896
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	13959
	.byte	4,2,35,4,0,13
	.word	18072
	.byte	26
	.byte	'Ifx_CPU_CPR',0,9,251,9,3
	.word	18114
	.byte	9
	.byte	'_Ifx_CPU_DPR',0,9,254,9,25,8,12
	.byte	'L',0
	.word	14960
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	15023
	.byte	4,2,35,4,0,13
	.word	18140
	.byte	26
	.byte	'Ifx_CPU_DPR',0,9,130,10,3
	.word	18182
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN',0,9,133,10,25,16,12
	.byte	'LA',0
	.word	17413
	.byte	4,2,35,0,12
	.byte	'UA',0
	.word	17483
	.byte	4,2,35,4,12
	.byte	'ACCENA',0
	.word	17265
	.byte	4,2,35,8,12
	.byte	'ACCENB',0
	.word	17339
	.byte	4,2,35,12,0,13
	.word	18208
	.byte	26
	.byte	'Ifx_CPU_SPROT_RGN',0,9,139,10,3
	.word	18290
	.byte	28,12
	.word	17811
	.byte	29,2,0,9
	.byte	'_Ifx_CPU_TPS',0,9,142,10,25,16,12
	.byte	'CON',0
	.word	17746
	.byte	4,2,35,0,12
	.byte	'TIMER',0
	.word	18322
	.byte	12,2,35,4,0,13
	.word	18331
	.byte	26
	.byte	'Ifx_CPU_TPS',0,9,146,10,3
	.word	18379
	.byte	9
	.byte	'_Ifx_CPU_TR',0,9,149,10,25,8,12
	.byte	'EVT',0
	.word	17942
	.byte	4,2,35,0,12
	.byte	'ADR',0
	.word	17878
	.byte	4,2,35,4,0,13
	.word	18405
	.byte	26
	.byte	'Ifx_CPU_TR',0,9,153,10,3
	.word	18450
	.byte	26
	.byte	'IfxCpu_ResourceCpu',0,6,87,3
	.word	1342
	.byte	9
	.byte	'_Ifx_SRC_SRCR_Bits',0,13,45,16,4,10
	.byte	'SRPN',0,1
	.word	530
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	530
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	530
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	530
	.byte	4,0,2,35,1,10
	.byte	'ECC',0,1
	.word	530
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	530
	.byte	3,0,2,35,2,10
	.byte	'SRR',0,1
	.word	530
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	530
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	530
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	530
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	530
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	530
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SRC_SRCR_Bits',0,13,62,3
	.word	18502
	.byte	11,13,70,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18502
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SRC_SRCR',0,13,75,3
	.word	18818
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,13,86,25,12,12
	.byte	'TX',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	18818
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	18818
	.byte	4,2,35,8,0,13
	.word	18878
	.byte	26
	.byte	'Ifx_SRC_ASCLIN',0,13,91,3
	.word	18937
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,13,94,25,4,12
	.byte	'SBSRC',0
	.word	18818
	.byte	4,2,35,0,0,13
	.word	18965
	.byte	26
	.byte	'Ifx_SRC_BCUSPB',0,13,97,3
	.word	19002
	.byte	28,64
	.word	18818
	.byte	29,15,0,9
	.byte	'_Ifx_SRC_CAN',0,13,100,25,64,12
	.byte	'INT',0
	.word	19030
	.byte	64,2,35,0,0,13
	.word	19039
	.byte	26
	.byte	'Ifx_SRC_CAN',0,13,103,3
	.word	19071
	.byte	28,32
	.word	18818
	.byte	29,7,0,9
	.byte	'_Ifx_SRC_CAN1',0,13,106,25,32,12
	.byte	'INT',0
	.word	19096
	.byte	32,2,35,0,0,13
	.word	19105
	.byte	26
	.byte	'Ifx_SRC_CAN1',0,13,109,3
	.word	19138
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,13,112,25,16,12
	.byte	'SR0',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	18818
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	18818
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	18818
	.byte	4,2,35,12,0,13
	.word	19164
	.byte	26
	.byte	'Ifx_SRC_CCU6',0,13,118,3
	.word	19236
	.byte	28,8
	.word	18818
	.byte	29,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,13,121,25,8,12
	.byte	'SR',0
	.word	19262
	.byte	8,2,35,0,0,13
	.word	19271
	.byte	26
	.byte	'Ifx_SRC_CERBERUS',0,13,124,3
	.word	19307
	.byte	28,28
	.word	530
	.byte	29,27,0,9
	.byte	'_Ifx_SRC_CPU',0,13,127,25,32,12
	.byte	'SBSRC',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	19337
	.byte	28,2,35,4,0,13
	.word	19346
	.byte	26
	.byte	'Ifx_SRC_CPU',0,13,131,1,3
	.word	19400
	.byte	28,12
	.word	530
	.byte	29,11,0,9
	.byte	'_Ifx_SRC_DMA',0,13,134,1,25,80,12
	.byte	'ERR',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	19426
	.byte	12,2,35,4,12
	.byte	'CH',0
	.word	19030
	.byte	64,2,35,16,0,13
	.word	19435
	.byte	26
	.byte	'Ifx_SRC_DMA',0,13,139,1,3
	.word	19500
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,13,142,1,25,4,12
	.byte	'SR',0
	.word	18818
	.byte	4,2,35,0,0,13
	.word	19526
	.byte	26
	.byte	'Ifx_SRC_EMEM',0,13,145,1,3
	.word	19559
	.byte	28,40
	.word	530
	.byte	29,39,0,9
	.byte	'_Ifx_SRC_ERAY',0,13,148,1,25,80,12
	.byte	'INT',0
	.word	19262
	.byte	8,2,35,0,12
	.byte	'TINT',0
	.word	19262
	.byte	8,2,35,8,12
	.byte	'NDAT',0
	.word	19262
	.byte	8,2,35,16,12
	.byte	'MBSC',0
	.word	19262
	.byte	8,2,35,24,12
	.byte	'OBUSY',0
	.word	18818
	.byte	4,2,35,32,12
	.byte	'IBUSY',0
	.word	18818
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	19586
	.byte	40,2,35,40,0,13
	.word	19595
	.byte	26
	.byte	'Ifx_SRC_ERAY',0,13,157,1,3
	.word	19722
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,13,160,1,25,4,12
	.byte	'SR',0
	.word	18818
	.byte	4,2,35,0,0,13
	.word	19749
	.byte	26
	.byte	'Ifx_SRC_ETH',0,13,163,1,3
	.word	19781
	.byte	9
	.byte	'_Ifx_SRC_EVR',0,13,166,1,25,8,12
	.byte	'WUT',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'SCDC',0
	.word	18818
	.byte	4,2,35,4,0,13
	.word	19807
	.byte	26
	.byte	'Ifx_SRC_EVR',0,13,170,1,3
	.word	19854
	.byte	9
	.byte	'_Ifx_SRC_FFT',0,13,173,1,25,12,12
	.byte	'DONE',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'ERR',0
	.word	18818
	.byte	4,2,35,4,12
	.byte	'RFS',0
	.word	18818
	.byte	4,2,35,8,0,13
	.word	19880
	.byte	26
	.byte	'Ifx_SRC_FFT',0,13,178,1,3
	.word	19940
	.byte	28,240,11
	.word	530
	.byte	29,239,11,0,9
	.byte	'_Ifx_SRC_GPSR',0,13,181,1,25,128,12,12
	.byte	'SR0',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	18818
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	18818
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	18818
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	19966
	.byte	240,11,2,35,16,0,13
	.word	19977
	.byte	26
	.byte	'Ifx_SRC_GPSR',0,13,188,1,3
	.word	20073
	.byte	28,24
	.word	530
	.byte	29,23,0,9
	.byte	'_Ifx_SRC_GPT12',0,13,191,1,25,48,12
	.byte	'CIRQ',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'T2',0
	.word	18818
	.byte	4,2,35,4,12
	.byte	'T3',0
	.word	18818
	.byte	4,2,35,8,12
	.byte	'T4',0
	.word	18818
	.byte	4,2,35,12,12
	.byte	'T5',0
	.word	18818
	.byte	4,2,35,16,12
	.byte	'T6',0
	.word	18818
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	20100
	.byte	24,2,35,24,0,13
	.word	20109
	.byte	26
	.byte	'Ifx_SRC_GPT12',0,13,200,1,3
	.word	20226
	.byte	28,236,2
	.word	530
	.byte	29,235,2,0,28,32
	.word	19096
	.byte	29,0,0,28,224,7
	.word	530
	.byte	29,223,7,0,28,64
	.word	19096
	.byte	29,1,0,9
	.byte	'_Ifx_SRC_GTM',0,13,203,1,25,192,11,12
	.byte	'AEIIRQ',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	20254
	.byte	236,2,2,35,4,12
	.byte	'ERR',0
	.word	18818
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	19426
	.byte	12,3,35,244,2,12
	.byte	'TIM',0
	.word	20265
	.byte	32,3,35,128,3,12
	.byte	'reserved_1A0',0
	.word	20274
	.byte	224,7,3,35,160,3,12
	.byte	'TOM',0
	.word	20285
	.byte	64,3,35,128,11,0,13
	.word	20294
	.byte	26
	.byte	'Ifx_SRC_GTM',0,13,212,1,3
	.word	20441
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,13,215,1,25,8,12
	.byte	'HSM',0
	.word	19262
	.byte	8,2,35,0,0,13
	.word	20467
	.byte	26
	.byte	'Ifx_SRC_HSM',0,13,218,1,3
	.word	20500
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,13,221,1,25,4,12
	.byte	'SR',0
	.word	18818
	.byte	4,2,35,0,0,13
	.word	20526
	.byte	26
	.byte	'Ifx_SRC_LMU',0,13,224,1,3
	.word	20558
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,13,227,1,25,4,12
	.byte	'SR',0
	.word	18818
	.byte	4,2,35,0,0,13
	.word	20584
	.byte	26
	.byte	'Ifx_SRC_PMU',0,13,230,1,3
	.word	20616
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,13,233,1,25,24,12
	.byte	'TX',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	18818
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	18818
	.byte	4,2,35,8,12
	.byte	'PT',0
	.word	18818
	.byte	4,2,35,12,12
	.byte	'HC',0
	.word	18818
	.byte	4,2,35,16,12
	.byte	'U',0
	.word	18818
	.byte	4,2,35,20,0,13
	.word	20642
	.byte	26
	.byte	'Ifx_SRC_QSPI',0,13,241,1,3
	.word	20735
	.byte	28,16
	.word	18818
	.byte	29,3,0,9
	.byte	'_Ifx_SRC_SCU',0,13,244,1,25,20,12
	.byte	'DTS',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'ERU',0
	.word	20762
	.byte	16,2,35,4,0,13
	.word	20771
	.byte	26
	.byte	'Ifx_SRC_SCU',0,13,248,1,3
	.word	20817
	.byte	9
	.byte	'_Ifx_SRC_SENT',0,13,251,1,25,16,12
	.byte	'SR',0
	.word	20762
	.byte	16,2,35,0,0,13
	.word	20843
	.byte	26
	.byte	'Ifx_SRC_SENT',0,13,254,1,3
	.word	20876
	.byte	28,12
	.word	18818
	.byte	29,2,0,9
	.byte	'_Ifx_SRC_SMU',0,13,129,2,25,12,12
	.byte	'SR',0
	.word	20903
	.byte	12,2,35,0,0,13
	.word	20912
	.byte	26
	.byte	'Ifx_SRC_SMU',0,13,132,2,3
	.word	20944
	.byte	28,88
	.word	530
	.byte	29,87,0,9
	.byte	'_Ifx_SRC_STM',0,13,135,2,25,96,12
	.byte	'SR0',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	18818
	.byte	4,2,35,4,12
	.byte	'reserved_8',0
	.word	20970
	.byte	88,2,35,8,0,13
	.word	20979
	.byte	26
	.byte	'Ifx_SRC_STM',0,13,140,2,3
	.word	21045
	.byte	28,176,2
	.word	530
	.byte	29,175,2,0,9
	.byte	'_Ifx_SRC_VADCCG',0,13,143,2,25,192,2,12
	.byte	'SR0',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	18818
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	18818
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	18818
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	21071
	.byte	176,2,2,35,16,0,13
	.word	21082
	.byte	26
	.byte	'Ifx_SRC_VADCCG',0,13,150,2,3
	.word	21180
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,13,153,2,25,16,12
	.byte	'SR0',0
	.word	18818
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	18818
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	18818
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	18818
	.byte	4,2,35,12,0,13
	.word	21209
	.byte	26
	.byte	'Ifx_SRC_VADCG',0,13,159,2,3
	.word	21283
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,13,162,2,25,4,12
	.byte	'SRC',0
	.word	18818
	.byte	4,2,35,0,0,13
	.word	21311
	.byte	26
	.byte	'Ifx_SRC_XBAR',0,13,165,2,3
	.word	21345
	.byte	28,24
	.word	18878
	.byte	29,1,0,13
	.word	21372
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,13,178,2,25,24,12
	.byte	'ASCLIN',0
	.word	21381
	.byte	24,2,35,0,0,13
	.word	21386
	.byte	26
	.byte	'Ifx_SRC_GASCLIN',0,13,181,2,3
	.word	21426
	.byte	13
	.word	18965
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,13,184,2,25,4,12
	.byte	'SPB',0
	.word	21456
	.byte	4,2,35,0,0,13
	.word	21461
	.byte	26
	.byte	'Ifx_SRC_GBCU',0,13,187,2,3
	.word	21495
	.byte	28,64
	.word	19039
	.byte	29,0,0,13
	.word	21522
	.byte	28,32
	.word	19105
	.byte	29,0,0,13
	.word	21536
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,13,190,2,25,96,12
	.byte	'CAN',0
	.word	21531
	.byte	64,2,35,0,12
	.byte	'CAN1',0
	.word	21545
	.byte	32,2,35,64,0,13
	.word	21550
	.byte	26
	.byte	'Ifx_SRC_GCAN',0,13,194,2,3
	.word	21598
	.byte	28,32
	.word	19164
	.byte	29,1,0,13
	.word	21625
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,13,197,2,25,32,12
	.byte	'CCU6',0
	.word	21634
	.byte	32,2,35,0,0,13
	.word	21639
	.byte	26
	.byte	'Ifx_SRC_GCCU6',0,13,200,2,3
	.word	21675
	.byte	13
	.word	19271
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,13,203,2,25,8,12
	.byte	'CERBERUS',0
	.word	21703
	.byte	8,2,35,0,0,13
	.word	21708
	.byte	26
	.byte	'Ifx_SRC_GCERBERUS',0,13,206,2,3
	.word	21752
	.byte	28,32
	.word	19346
	.byte	29,0,0,13
	.word	21784
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,13,209,2,25,32,12
	.byte	'CPU',0
	.word	21793
	.byte	32,2,35,0,0,13
	.word	21798
	.byte	26
	.byte	'Ifx_SRC_GCPU',0,13,212,2,3
	.word	21832
	.byte	28,80
	.word	19435
	.byte	29,0,0,13
	.word	21859
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,13,215,2,25,80,12
	.byte	'DMA',0
	.word	21868
	.byte	80,2,35,0,0,13
	.word	21873
	.byte	26
	.byte	'Ifx_SRC_GDMA',0,13,218,2,3
	.word	21907
	.byte	28,4
	.word	19526
	.byte	29,0,0,13
	.word	21934
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,13,221,2,25,4,12
	.byte	'EMEM',0
	.word	21943
	.byte	4,2,35,0,0,13
	.word	21948
	.byte	26
	.byte	'Ifx_SRC_GEMEM',0,13,224,2,3
	.word	21984
	.byte	28,80
	.word	19595
	.byte	29,0,0,13
	.word	22012
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,13,227,2,25,80,12
	.byte	'ERAY',0
	.word	22021
	.byte	80,2,35,0,0,13
	.word	22026
	.byte	26
	.byte	'Ifx_SRC_GERAY',0,13,230,2,3
	.word	22062
	.byte	28,4
	.word	19749
	.byte	29,0,0,13
	.word	22090
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,13,233,2,25,4,12
	.byte	'ETH',0
	.word	22099
	.byte	4,2,35,0,0,13
	.word	22104
	.byte	26
	.byte	'Ifx_SRC_GETH',0,13,236,2,3
	.word	22138
	.byte	28,8
	.word	19807
	.byte	29,0,0,13
	.word	22165
	.byte	9
	.byte	'_Ifx_SRC_GEVR',0,13,239,2,25,8,12
	.byte	'EVR',0
	.word	22174
	.byte	8,2,35,0,0,13
	.word	22179
	.byte	26
	.byte	'Ifx_SRC_GEVR',0,13,242,2,3
	.word	22213
	.byte	28,12
	.word	19880
	.byte	29,0,0,13
	.word	22240
	.byte	9
	.byte	'_Ifx_SRC_GFFT',0,13,245,2,25,12,12
	.byte	'FFT',0
	.word	22249
	.byte	12,2,35,0,0,13
	.word	22254
	.byte	26
	.byte	'Ifx_SRC_GFFT',0,13,248,2,3
	.word	22288
	.byte	28,128,12
	.word	19977
	.byte	29,0,0,13
	.word	22315
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,13,251,2,25,128,12,12
	.byte	'GPSR',0
	.word	22325
	.byte	128,12,2,35,0,0,13
	.word	22330
	.byte	26
	.byte	'Ifx_SRC_GGPSR',0,13,254,2,3
	.word	22368
	.byte	28,48
	.word	20109
	.byte	29,0,0,13
	.word	22396
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,13,129,3,25,48,12
	.byte	'GPT12',0
	.word	22405
	.byte	48,2,35,0,0,13
	.word	22410
	.byte	26
	.byte	'Ifx_SRC_GGPT12',0,13,132,3,3
	.word	22448
	.byte	28,192,11
	.word	20294
	.byte	29,0,0,13
	.word	22477
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,13,135,3,25,192,11,12
	.byte	'GTM',0
	.word	22487
	.byte	192,11,2,35,0,0,13
	.word	22492
	.byte	26
	.byte	'Ifx_SRC_GGTM',0,13,138,3,3
	.word	22528
	.byte	28,8
	.word	20467
	.byte	29,0,0,13
	.word	22555
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,13,141,3,25,8,12
	.byte	'HSM',0
	.word	22564
	.byte	8,2,35,0,0,13
	.word	22569
	.byte	26
	.byte	'Ifx_SRC_GHSM',0,13,144,3,3
	.word	22603
	.byte	28,4
	.word	20526
	.byte	29,0,0,13
	.word	22630
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,13,147,3,25,4,12
	.byte	'LMU',0
	.word	22639
	.byte	4,2,35,0,0,13
	.word	22644
	.byte	26
	.byte	'Ifx_SRC_GLMU',0,13,150,3,3
	.word	22678
	.byte	28,8
	.word	20584
	.byte	29,1,0,13
	.word	22705
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,13,153,3,25,8,12
	.byte	'PMU',0
	.word	22714
	.byte	8,2,35,0,0,13
	.word	22719
	.byte	26
	.byte	'Ifx_SRC_GPMU',0,13,156,3,3
	.word	22753
	.byte	28,96
	.word	20642
	.byte	29,3,0,13
	.word	22780
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,13,159,3,25,96,12
	.byte	'QSPI',0
	.word	22789
	.byte	96,2,35,0,0,13
	.word	22794
	.byte	26
	.byte	'Ifx_SRC_GQSPI',0,13,162,3,3
	.word	22830
	.byte	13
	.word	20771
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,13,165,3,25,20,12
	.byte	'SCU',0
	.word	22858
	.byte	20,2,35,0,0,13
	.word	22863
	.byte	26
	.byte	'Ifx_SRC_GSCU',0,13,168,3,3
	.word	22897
	.byte	28,16
	.word	20843
	.byte	29,0,0,13
	.word	22924
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,13,171,3,25,16,12
	.byte	'SENT',0
	.word	22933
	.byte	16,2,35,0,0,13
	.word	22938
	.byte	26
	.byte	'Ifx_SRC_GSENT',0,13,174,3,3
	.word	22974
	.byte	28,12
	.word	20912
	.byte	29,0,0,13
	.word	23002
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,13,177,3,25,12,12
	.byte	'SMU',0
	.word	23011
	.byte	12,2,35,0,0,13
	.word	23016
	.byte	26
	.byte	'Ifx_SRC_GSMU',0,13,180,3,3
	.word	23050
	.byte	28,96
	.word	20979
	.byte	29,0,0,13
	.word	23077
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,13,183,3,25,96,12
	.byte	'STM',0
	.word	23086
	.byte	96,2,35,0,0,13
	.word	23091
	.byte	26
	.byte	'Ifx_SRC_GSTM',0,13,186,3,3
	.word	23125
	.byte	28,64
	.word	21209
	.byte	29,3,0,13
	.word	23152
	.byte	28,224,1
	.word	530
	.byte	29,223,1,0,28,192,2
	.word	21082
	.byte	29,0,0,13
	.word	23177
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,13,189,3,25,224,4,12
	.byte	'G',0
	.word	23161
	.byte	64,2,35,0,12
	.byte	'reserved_40',0
	.word	23166
	.byte	224,1,2,35,64,12
	.byte	'CG',0
	.word	23187
	.byte	192,2,3,35,160,2,0,13
	.word	23192
	.byte	26
	.byte	'Ifx_SRC_GVADC',0,13,194,3,3
	.word	23262
	.byte	13
	.word	21311
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,13,197,3,25,4,12
	.byte	'XBAR',0
	.word	23290
	.byte	4,2,35,0,0,13
	.word	23295
	.byte	26
	.byte	'Ifx_SRC_GXBAR',0,13,200,3,3
	.word	23331
	.byte	9
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,10
	.byte	'EN0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	530
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	530
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	530
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	530
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	530
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	530
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	530
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	530
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	530
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	530
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	530
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	530
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	530
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	530
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	530
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	530
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	530
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	530
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	530
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	530
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	23359
	.byte	9
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,10
	.byte	'reserved_0',0,4
	.word	355
	.byte	32,0,2,35,0,0,26
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	23916
	.byte	9
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,10
	.byte	'STM0DIS',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'STM1DIS',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'STM2DIS',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	355
	.byte	29,0,2,35,0,0,26
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	23993
	.byte	9
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	4,4,2,35,0,10
	.byte	'BAUD2DIV',0,1
	.word	530
	.byte	4,0,2,35,0,10
	.byte	'SRIDIV',0,1
	.word	530
	.byte	4,4,2,35,1,10
	.byte	'LPDIV',0,1
	.word	530
	.byte	4,0,2,35,1,10
	.byte	'SPBDIV',0,1
	.word	530
	.byte	4,4,2,35,2,10
	.byte	'FSI2DIV',0,1
	.word	530
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	530
	.byte	2,0,2,35,2,10
	.byte	'FSIDIV',0,1
	.word	530
	.byte	2,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	530
	.byte	2,4,2,35,3,10
	.byte	'CLKSEL',0,1
	.word	530
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	24129
	.byte	9
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,10
	.byte	'CANDIV',0,1
	.word	530
	.byte	4,4,2,35,0,10
	.byte	'ERAYDIV',0,1
	.word	530
	.byte	4,0,2,35,0,10
	.byte	'STMDIV',0,1
	.word	530
	.byte	4,4,2,35,1,10
	.byte	'GTMDIV',0,1
	.word	530
	.byte	4,0,2,35,1,10
	.byte	'ETHDIV',0,1
	.word	530
	.byte	4,4,2,35,2,10
	.byte	'ASCLINFDIV',0,1
	.word	530
	.byte	4,0,2,35,2,10
	.byte	'ASCLINSDIV',0,1
	.word	530
	.byte	4,4,2,35,3,10
	.byte	'INSEL',0,1
	.word	530
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	24411
	.byte	9
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,10
	.byte	'BBBDIV',0,1
	.word	530
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	355
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	24649
	.byte	9
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,10
	.byte	'PLLDIV',0,1
	.word	530
	.byte	6,2,2,35,0,10
	.byte	'PLLSEL',0,1
	.word	530
	.byte	2,0,2,35,0,10
	.byte	'PLLERAYDIV',0,1
	.word	530
	.byte	6,2,2,35,1,10
	.byte	'PLLERAYSEL',0,1
	.word	530
	.byte	2,0,2,35,1,10
	.byte	'SRIDIV',0,1
	.word	530
	.byte	6,2,2,35,2,10
	.byte	'SRISEL',0,1
	.word	530
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,149,1,3
	.word	24777
	.byte	9
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,152,1,16,4,10
	.byte	'SPBDIV',0,1
	.word	530
	.byte	6,2,2,35,0,10
	.byte	'SPBSEL',0,1
	.word	530
	.byte	2,0,2,35,0,10
	.byte	'GTMDIV',0,1
	.word	530
	.byte	6,2,2,35,1,10
	.byte	'GTMSEL',0,1
	.word	530
	.byte	2,0,2,35,1,10
	.byte	'STMDIV',0,1
	.word	530
	.byte	6,2,2,35,2,10
	.byte	'STMSEL',0,1
	.word	530
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,163,1,3
	.word	25004
	.byte	9
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,166,1,16,4,10
	.byte	'MAXDIV',0,1
	.word	530
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	355
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,172,1,3
	.word	25223
	.byte	9
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,175,1,16,4,10
	.byte	'CPU0DIV',0,1
	.word	530
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	355
	.byte	26,0,2,35,0,0,26
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,179,1,3
	.word	25351
	.byte	9
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,182,1,16,4,10
	.byte	'CHREV',0,1
	.word	530
	.byte	6,2,2,35,0,10
	.byte	'CHTEC',0,1
	.word	530
	.byte	2,0,2,35,0,10
	.byte	'CHID',0,1
	.word	530
	.byte	8,0,2,35,1,10
	.byte	'EEA',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'UCODE',0,1
	.word	530
	.byte	7,0,2,35,2,10
	.byte	'FSIZE',0,1
	.word	530
	.byte	4,4,2,35,3,10
	.byte	'SP',0,1
	.word	530
	.byte	2,2,2,35,3,10
	.byte	'SEC',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,193,1,3
	.word	25451
	.byte	9
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,196,1,16,4,10
	.byte	'PWD',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'START',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	530
	.byte	2,4,2,35,0,10
	.byte	'CAL',0,4
	.word	355
	.byte	22,6,2,35,0,10
	.byte	'reserved_26',0,1
	.word	530
	.byte	5,1,2,35,3,10
	.byte	'SLCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,204,1,3
	.word	25659
	.byte	9
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,207,1,16,4,10
	.byte	'LOWER',0,2
	.word	547
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	530
	.byte	5,1,2,35,1,10
	.byte	'LLU',0,1
	.word	530
	.byte	1,0,2,35,1,10
	.byte	'UPPER',0,2
	.word	547
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	530
	.byte	4,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'UOF',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,216,1,3
	.word	25824
	.byte	9
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,219,1,16,4,10
	.byte	'RESULT',0,2
	.word	547
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	530
	.byte	4,2,2,35,1,10
	.byte	'RDY',0,1
	.word	530
	.byte	1,1,2,35,1,10
	.byte	'BUSY',0,1
	.word	530
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,226,1,3
	.word	26007
	.byte	9
	.byte	'_Ifx_SCU_EICR_Bits',0,4,229,1,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	4,4,2,35,0,10
	.byte	'EXIS0',0,1
	.word	530
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'FEN0',0,1
	.word	530
	.byte	1,7,2,35,1,10
	.byte	'REN0',0,1
	.word	530
	.byte	1,6,2,35,1,10
	.byte	'LDEN0',0,1
	.word	530
	.byte	1,5,2,35,1,10
	.byte	'EIEN0',0,1
	.word	530
	.byte	1,4,2,35,1,10
	.byte	'INP0',0,1
	.word	530
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	355
	.byte	5,12,2,35,0,10
	.byte	'EXIS1',0,1
	.word	530
	.byte	3,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	530
	.byte	1,0,2,35,2,10
	.byte	'FEN1',0,1
	.word	530
	.byte	1,7,2,35,3,10
	.byte	'REN1',0,1
	.word	530
	.byte	1,6,2,35,3,10
	.byte	'LDEN1',0,1
	.word	530
	.byte	1,5,2,35,3,10
	.byte	'EIEN1',0,1
	.word	530
	.byte	1,4,2,35,3,10
	.byte	'INP1',0,1
	.word	530
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EICR_Bits',0,4,248,1,3
	.word	26161
	.byte	9
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,251,1,16,4,10
	.byte	'INTF0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'INTF1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'INTF2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'INTF3',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'INTF4',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'INTF5',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'INTF6',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'INTF7',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	355
	.byte	24,0,2,35,0,0,26
	.byte	'Ifx_SCU_EIFR_Bits',0,4,134,2,3
	.word	26525
	.byte	9
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,137,2,16,4,10
	.byte	'POL',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'MODE',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'ENON',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'PSEL',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	547
	.byte	12,0,2,35,0,10
	.byte	'EMSF',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'SEMSF',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	530
	.byte	6,0,2,35,2,10
	.byte	'EMSFM',0,1
	.word	530
	.byte	2,6,2,35,3,10
	.byte	'SEMSFM',0,1
	.word	530
	.byte	2,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	530
	.byte	4,0,2,35,3,0,26
	.byte	'Ifx_SCU_EMSR_Bits',0,4,150,2,3
	.word	26736
	.byte	9
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,153,2,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	7,1,2,35,0,10
	.byte	'EDCON',0,2
	.word	547
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	355
	.byte	23,0,2,35,0,0,26
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,158,2,3
	.word	26988
	.byte	9
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,161,2,16,4,10
	.byte	'ARI',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'ARC',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	355
	.byte	30,0,2,35,0,0,26
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,166,2,3
	.word	27106
	.byte	9
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,169,2,16,4,10
	.byte	'reserved_0',0,4
	.word	355
	.byte	28,4,2,35,0,10
	.byte	'EVR13OFF',0,1
	.word	530
	.byte	1,3,2,35,3,10
	.byte	'BPEVR13OFF',0,1
	.word	530
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,176,2,3
	.word	27217
	.byte	9
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,179,2,16,4,10
	.byte	'ADC13V',0,1
	.word	530
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	8,0,2,35,1,10
	.byte	'ADCSWDV',0,1
	.word	530
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,186,2,3
	.word	27380
	.byte	9
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,189,2,16,4,10
	.byte	'EVR13OVMOD',0,1
	.word	530
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	530
	.byte	2,4,2,35,0,10
	.byte	'EVR13UVMOD',0,1
	.word	530
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	547
	.byte	10,0,2,35,0,10
	.byte	'SWDOVMOD',0,1
	.word	530
	.byte	2,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	530
	.byte	2,4,2,35,2,10
	.byte	'SWDUVMOD',0,1
	.word	530
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	547
	.byte	8,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,201,2,3
	.word	27542
	.byte	9
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,204,2,16,4,10
	.byte	'EVR13OVVAL',0,1
	.word	530
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	8,0,2,35,1,10
	.byte	'SWDOVVAL',0,1
	.word	530
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,212,2,3
	.word	27820
	.byte	9
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,215,2,16,4,10
	.byte	'reserved_0',0,4
	.word	355
	.byte	28,4,2,35,0,10
	.byte	'RSTSWDOFF',0,1
	.word	530
	.byte	1,3,2,35,3,10
	.byte	'BPRSTSWDOFF',0,1
	.word	530
	.byte	1,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,222,2,3
	.word	27999
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,225,2,16,4,10
	.byte	'SD33P',0,1
	.word	530
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	530
	.byte	4,0,2,35,0,10
	.byte	'SD33I',0,1
	.word	530
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	355
	.byte	19,1,2,35,0,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,232,2,3
	.word	28159
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,235,2,16,4,10
	.byte	'SDFREQSPRD',0,1
	.word	530
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	530
	.byte	4,0,2,35,0,10
	.byte	'TON',0,1
	.word	530
	.byte	8,0,2,35,1,10
	.byte	'TOFF',0,1
	.word	530
	.byte	8,0,2,35,2,10
	.byte	'SDSTEP',0,1
	.word	530
	.byte	4,4,2,35,3,10
	.byte	'SYNCDIV',0,1
	.word	530
	.byte	3,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,244,2,3
	.word	28320
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,247,2,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	8,0,2,35,0,10
	.byte	'STBS',0,1
	.word	530
	.byte	2,6,2,35,1,10
	.byte	'STSP',0,1
	.word	530
	.byte	2,4,2,35,1,10
	.byte	'NS',0,1
	.word	530
	.byte	2,2,2,35,1,10
	.byte	'OL',0,1
	.word	530
	.byte	1,1,2,35,1,10
	.byte	'PIAD',0,1
	.word	530
	.byte	1,0,2,35,1,10
	.byte	'ADCMODE',0,1
	.word	530
	.byte	4,4,2,35,2,10
	.byte	'ADCLPF',0,1
	.word	530
	.byte	2,2,2,35,2,10
	.byte	'ADCLSB',0,1
	.word	530
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	530
	.byte	1,0,2,35,2,10
	.byte	'SDLUT',0,1
	.word	530
	.byte	6,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,134,3,3
	.word	28512
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,137,3,16,4,10
	.byte	'SDOLCON',0,1
	.word	530
	.byte	7,1,2,35,0,10
	.byte	'MODSEL',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'MODLOW',0,1
	.word	530
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	530
	.byte	1,0,2,35,1,10
	.byte	'SDVOKLVL',0,1
	.word	530
	.byte	6,2,2,35,2,10
	.byte	'MODMAN',0,1
	.word	530
	.byte	2,0,2,35,2,10
	.byte	'MODHIGH',0,1
	.word	530
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,147,3,3
	.word	28808
	.byte	9
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,150,3,16,4,10
	.byte	'EVR13',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'OV13',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	530
	.byte	2,4,2,35,0,10
	.byte	'OVSWD',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'UV13',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'UVSWD',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	2,6,2,35,1,10
	.byte	'BGPROK',0,1
	.word	530
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	530
	.byte	1,4,2,35,1,10
	.byte	'SCMOD',0,1
	.word	530
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	355
	.byte	18,0,2,35,0,0,26
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,164,3,3
	.word	29023
	.byte	9
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,167,3,16,4,10
	.byte	'EVR13UVVAL',0,1
	.word	530
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	8,0,2,35,1,10
	.byte	'SWDUVVAL',0,1
	.word	530
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,175,3,3
	.word	29312
	.byte	9
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,178,3,16,4,10
	.byte	'EN0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'SEL0',0,1
	.word	530
	.byte	4,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	547
	.byte	10,0,2,35,0,10
	.byte	'EN1',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'NSEL',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'SEL1',0,1
	.word	530
	.byte	4,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	530
	.byte	2,0,2,35,2,10
	.byte	'DIV1',0,1
	.word	530
	.byte	8,0,2,35,3,0,26
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,189,3,3
	.word	29491
	.byte	9
	.byte	'_Ifx_SCU_FDR_Bits',0,4,192,3,16,4,10
	.byte	'STEP',0,2
	.word	547
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	530
	.byte	4,2,2,35,1,10
	.byte	'DM',0,1
	.word	530
	.byte	2,0,2,35,1,10
	.byte	'RESULT',0,2
	.word	547
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	530
	.byte	5,1,2,35,3,10
	.byte	'DISCLK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_FDR_Bits',0,4,200,3,3
	.word	29709
	.byte	9
	.byte	'_Ifx_SCU_FMR_Bits',0,4,203,3,16,4,10
	.byte	'FS0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'FS1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'FS2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'FS3',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'FS4',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'FS5',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'FS6',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'FS7',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	8,0,2,35,1,10
	.byte	'FC0',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'FC1',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'FC2',0,1
	.word	530
	.byte	1,5,2,35,2,10
	.byte	'FC3',0,1
	.word	530
	.byte	1,4,2,35,2,10
	.byte	'FC4',0,1
	.word	530
	.byte	1,3,2,35,2,10
	.byte	'FC5',0,1
	.word	530
	.byte	1,2,2,35,2,10
	.byte	'FC6',0,1
	.word	530
	.byte	1,1,2,35,2,10
	.byte	'FC7',0,1
	.word	530
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	8,0,2,35,3,0,26
	.byte	'Ifx_SCU_FMR_Bits',0,4,223,3,3
	.word	29872
	.byte	9
	.byte	'_Ifx_SCU_ID_Bits',0,4,226,3,16,4,10
	.byte	'MODREV',0,1
	.word	530
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	530
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_ID_Bits',0,4,231,3,3
	.word	30208
	.byte	9
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,234,3,16,4,10
	.byte	'IPEN00',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'IPEN01',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'IPEN02',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'IPEN03',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'IPEN04',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'IPEN05',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'IPEN06',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'IPEN07',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	5,3,2,35,1,10
	.byte	'GEEN0',0,1
	.word	530
	.byte	1,2,2,35,1,10
	.byte	'IGP0',0,1
	.word	530
	.byte	2,0,2,35,1,10
	.byte	'IPEN10',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'IPEN11',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'IPEN12',0,1
	.word	530
	.byte	1,5,2,35,2,10
	.byte	'IPEN13',0,1
	.word	530
	.byte	1,4,2,35,2,10
	.byte	'IPEN14',0,1
	.word	530
	.byte	1,3,2,35,2,10
	.byte	'IPEN15',0,1
	.word	530
	.byte	1,2,2,35,2,10
	.byte	'IPEN16',0,1
	.word	530
	.byte	1,1,2,35,2,10
	.byte	'IPEN17',0,1
	.word	530
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	5,3,2,35,3,10
	.byte	'GEEN1',0,1
	.word	530
	.byte	1,2,2,35,3,10
	.byte	'IGP1',0,1
	.word	530
	.byte	2,0,2,35,3,0,26
	.byte	'Ifx_SCU_IGCR_Bits',0,4,130,4,3
	.word	30315
	.byte	9
	.byte	'_Ifx_SCU_IN_Bits',0,4,133,4,16,4,10
	.byte	'P0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	355
	.byte	30,0,2,35,0,0,26
	.byte	'Ifx_SCU_IN_Bits',0,4,138,4,3
	.word	30767
	.byte	9
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,141,4,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	4,4,2,35,0,10
	.byte	'PC0',0,1
	.word	530
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	4,4,2,35,1,10
	.byte	'PC1',0,1
	.word	530
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_IOCR_Bits',0,4,148,4,3
	.word	30866
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,151,4,16,4,10
	.byte	'LBISTREQ',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'LBISTREQP',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'PATTERNS',0,2
	.word	547
	.byte	14,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,157,4,3
	.word	31016
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,160,4,16,4,10
	.byte	'SEED',0,4
	.word	355
	.byte	23,9,2,35,0,10
	.byte	'reserved_23',0,1
	.word	530
	.byte	1,0,2,35,2,10
	.byte	'SPLITSH',0,1
	.word	530
	.byte	3,5,2,35,3,10
	.byte	'BODY',0,1
	.word	530
	.byte	1,4,2,35,3,10
	.byte	'LBISTFREQU',0,1
	.word	530
	.byte	4,0,2,35,3,0,26
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,167,4,3
	.word	31165
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,170,4,16,4,10
	.byte	'SIGNATURE',0,4
	.word	355
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	7,1,2,35,3,10
	.byte	'LBISTDONE',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,175,4,3
	.word	31326
	.byte	9
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,178,4,16,4,10
	.byte	'reserved_0',0,2
	.word	547
	.byte	16,0,2,35,0,10
	.byte	'LS',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	547
	.byte	14,1,2,35,2,10
	.byte	'LSEN',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,184,4,3
	.word	31456
	.byte	9
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,187,4,16,4,10
	.byte	'LCLT0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'LCLT1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	355
	.byte	30,0,2,35,0,0,26
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,192,4,3
	.word	31590
	.byte	9
	.byte	'_Ifx_SCU_MANID_Bits',0,4,195,4,16,4,10
	.byte	'DEPT',0,1
	.word	530
	.byte	5,3,2,35,0,10
	.byte	'MANUF',0,2
	.word	547
	.byte	11,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_MANID_Bits',0,4,200,4,3
	.word	31705
	.byte	9
	.byte	'_Ifx_SCU_OMR_Bits',0,4,203,4,16,4,10
	.byte	'PS0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	547
	.byte	14,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	547
	.byte	14,0,2,35,2,0,26
	.byte	'Ifx_SCU_OMR_Bits',0,4,211,4,3
	.word	31816
	.byte	9
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,214,4,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'PLLLV',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'OSCRES',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'GAINSEL',0,1
	.word	530
	.byte	2,3,2,35,0,10
	.byte	'MODE',0,1
	.word	530
	.byte	2,1,2,35,0,10
	.byte	'SHBY',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'PLLHV',0,1
	.word	530
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	530
	.byte	1,6,2,35,1,10
	.byte	'X1D',0,1
	.word	530
	.byte	1,5,2,35,1,10
	.byte	'X1DEN',0,1
	.word	530
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	530
	.byte	4,0,2,35,1,10
	.byte	'OSCVAL',0,1
	.word	530
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	530
	.byte	2,1,2,35,2,10
	.byte	'APREN',0,1
	.word	530
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	8,0,2,35,3,0,26
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,231,4,3
	.word	31974
	.byte	9
	.byte	'_Ifx_SCU_OUT_Bits',0,4,234,4,16,4,10
	.byte	'P0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	355
	.byte	30,0,2,35,0,0,26
	.byte	'Ifx_SCU_OUT_Bits',0,4,239,4,3
	.word	32314
	.byte	9
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,242,4,16,4,10
	.byte	'CSEL0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'CSEL1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'CSEL2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	547
	.byte	13,0,2,35,0,10
	.byte	'OVSTRT',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'OVSTP',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'DCINVAL',0,1
	.word	530
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	530
	.byte	5,0,2,35,2,10
	.byte	'OVCONF',0,1
	.word	530
	.byte	1,7,2,35,3,10
	.byte	'POVCONF',0,1
	.word	530
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	530
	.byte	6,0,2,35,3,0,26
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,255,4,3
	.word	32415
	.byte	9
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,130,5,16,4,10
	.byte	'OVEN0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'OVEN1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'OVEN2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	355
	.byte	29,0,2,35,0,0,26
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,136,5,3
	.word	32682
	.byte	9
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,139,5,16,4,10
	.byte	'PDIS0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	355
	.byte	30,0,2,35,0,0,26
	.byte	'Ifx_SCU_PDISC_Bits',0,4,144,5,3
	.word	32818
	.byte	9
	.byte	'_Ifx_SCU_PDR_Bits',0,4,147,5,16,4,10
	.byte	'PD0',0,1
	.word	530
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	530
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	355
	.byte	24,0,2,35,0,0,26
	.byte	'Ifx_SCU_PDR_Bits',0,4,154,5,3
	.word	32929
	.byte	9
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,157,5,16,4,10
	.byte	'PDR0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'PDR1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'PDR2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'PDR3',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'PDR4',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'PDR5',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'PDR6',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'PDR7',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	355
	.byte	24,0,2,35,0,0,26
	.byte	'Ifx_SCU_PDRR_Bits',0,4,168,5,3
	.word	33062
	.byte	9
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,171,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'MODEN',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	547
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	530
	.byte	7,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	530
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	530
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	530
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	530
	.byte	4,0,2,35,3,0,26
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,188,5,3
	.word	33265
	.byte	9
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,191,5,16,4,10
	.byte	'K2DIV',0,1
	.word	530
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	530
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	530
	.byte	1,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	530
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	547
	.byte	9,0,2,35,2,0,26
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,199,5,3
	.word	33621
	.byte	9
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,202,5,16,4,10
	.byte	'MODCFG',0,2
	.word	547
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,206,5,3
	.word	33799
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,209,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	530
	.byte	2,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	547
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	530
	.byte	5,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	530
	.byte	2,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	530
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	530
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	530
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	530
	.byte	4,0,2,35,3,0,26
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,226,5,3
	.word	33899
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,229,5,16,4,10
	.byte	'K2DIV',0,1
	.word	530
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	530
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	530
	.byte	4,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	530
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	547
	.byte	9,0,2,35,2,0,26
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,237,5,3
	.word	34269
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,240,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'PWDSTAT',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	355
	.byte	26,0,2,35,0,0,26
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,249,5,3
	.word	34455
	.byte	9
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,252,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'MODRUN',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	355
	.byte	24,0,2,35,0,0,26
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,135,6,3
	.word	34653
	.byte	9
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,138,6,16,4,10
	.byte	'REQSLP',0,1
	.word	530
	.byte	2,6,2,35,0,10
	.byte	'SMUSLP',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	530
	.byte	5,0,2,35,0,10
	.byte	'PMST',0,1
	.word	530
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	355
	.byte	21,0,2,35,0,0,26
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,145,6,3
	.word	34886
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,148,6,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'ESR1WKEN',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'PINAWKEN',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'PINBWKEN',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'ESR0DFEN',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'ESR0EDCON',0,1
	.word	530
	.byte	2,1,2,35,0,10
	.byte	'ESR1DFEN',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'ESR1EDCON',0,1
	.word	530
	.byte	2,6,2,35,1,10
	.byte	'PINADFEN',0,1
	.word	530
	.byte	1,5,2,35,1,10
	.byte	'PINAEDCON',0,1
	.word	530
	.byte	2,3,2,35,1,10
	.byte	'PINBDFEN',0,1
	.word	530
	.byte	1,2,2,35,1,10
	.byte	'PINBEDCON',0,1
	.word	530
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'STBYRAMSEL',0,1
	.word	530
	.byte	2,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	530
	.byte	1,4,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	530
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	530
	.byte	2,1,2,35,2,10
	.byte	'PORSTDF',0,1
	.word	530
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	1,7,2,35,3,10
	.byte	'DCDCSYNC',0,1
	.word	530
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	530
	.byte	3,3,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	530
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,174,6,3
	.word	35038
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,177,6,16,4,10
	.byte	'reserved_0',0,2
	.word	547
	.byte	12,4,2,35,0,10
	.byte	'IRADIS',0,1
	.word	530
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	355
	.byte	14,5,2,35,0,10
	.byte	'STBYEVEN',0,1
	.word	530
	.byte	1,4,2,35,3,10
	.byte	'STBYEV',0,1
	.word	530
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,185,6,3
	.word	35597
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR3_Bits',0,4,188,6,16,4,10
	.byte	'WUTREL',0,4
	.word	355
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	4,4,2,35,3,10
	.byte	'WUTDIV',0,1
	.word	530
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	530
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_PMSWCR3_Bits',0,4,196,6,3
	.word	35780
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,199,6,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKP',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUN',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'PINAWKP',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUN',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'PINBWKP',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUN',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	1,7,2,35,1,10
	.byte	'PORSTDF',0,1
	.word	530
	.byte	1,6,2,35,1,10
	.byte	'HWCFGEVR',0,1
	.word	530
	.byte	3,3,2,35,1,10
	.byte	'STBYRAM',0,1
	.word	530
	.byte	2,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	530
	.byte	1,0,2,35,1,10
	.byte	'WUTWKP',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUN',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	530
	.byte	1,5,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	530
	.byte	1,4,2,35,2,10
	.byte	'ESR1WKEN',0,1
	.word	530
	.byte	1,3,2,35,2,10
	.byte	'PINAWKEN',0,1
	.word	530
	.byte	1,2,2,35,2,10
	.byte	'PINBWKEN',0,1
	.word	530
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	547
	.byte	4,5,2,35,2,10
	.byte	'ESR0TRIST',0,1
	.word	530
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	530
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	530
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	530
	.byte	1,1,2,35,3,10
	.byte	'WUTRUN',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,226,6,3
	.word	35949
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,229,6,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKPCLR',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUNCLR',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'PINAWKPCLR',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUNCLR',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'PINBWKPCLR',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUNCLR',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	8,0,2,35,1,10
	.byte	'WUTWKPCLR',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUNCLR',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	547
	.byte	14,0,2,35,2,0,26
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,242,6,3
	.word	36516
	.byte	9
	.byte	'_Ifx_SCU_PMSWUTCNT_Bits',0,4,245,6,16,4,10
	.byte	'WUTCNT',0,4
	.word	355
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	530
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	530
	.byte	1,0,2,35,3,0,26
	.byte	'Ifx_SCU_PMSWUTCNT_Bits',0,4,250,6,3
	.word	36832
	.byte	9
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,253,6,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'CLRC',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	547
	.byte	10,4,2,35,0,10
	.byte	'CSS0',0,1
	.word	530
	.byte	1,3,2,35,1,10
	.byte	'CSS1',0,1
	.word	530
	.byte	1,2,2,35,1,10
	.byte	'CSS2',0,1
	.word	530
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	530
	.byte	1,0,2,35,1,10
	.byte	'USRINFO',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,135,7,3
	.word	36951
	.byte	9
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,138,7,16,4,10
	.byte	'ESR0',0,1
	.word	530
	.byte	2,6,2,35,0,10
	.byte	'ESR1',0,1
	.word	530
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	530
	.byte	2,2,2,35,0,10
	.byte	'SMU',0,1
	.word	530
	.byte	2,0,2,35,0,10
	.byte	'SW',0,1
	.word	530
	.byte	2,6,2,35,1,10
	.byte	'STM0',0,1
	.word	530
	.byte	2,4,2,35,1,10
	.byte	'STM1',0,1
	.word	530
	.byte	2,2,2,35,1,10
	.byte	'STM2',0,1
	.word	530
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,149,7,3
	.word	37160
	.byte	9
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,152,7,16,4,10
	.byte	'ESR0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'ESR1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'SMU',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'SW',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'STM0',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'STM1',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'STM2',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	530
	.byte	8,0,2,35,1,10
	.byte	'PORST',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'CB0',0,1
	.word	530
	.byte	1,5,2,35,2,10
	.byte	'CB1',0,1
	.word	530
	.byte	1,4,2,35,2,10
	.byte	'CB3',0,1
	.word	530
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	530
	.byte	2,1,2,35,2,10
	.byte	'EVR13',0,1
	.word	530
	.byte	1,0,2,35,2,10
	.byte	'EVR33',0,1
	.word	530
	.byte	1,7,2,35,3,10
	.byte	'SWD',0,1
	.word	530
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	530
	.byte	2,4,2,35,3,10
	.byte	'STBYR',0,1
	.word	530
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	530
	.byte	3,0,2,35,3,0,26
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,175,7,3
	.word	37371
	.byte	9
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,178,7,16,4,10
	.byte	'HBT',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	355
	.byte	31,0,2,35,0,0,26
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,182,7,3
	.word	37803
	.byte	9
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,185,7,16,4,10
	.byte	'HWCFG',0,1
	.word	530
	.byte	8,0,2,35,0,10
	.byte	'FTM',0,1
	.word	530
	.byte	7,1,2,35,1,10
	.byte	'MODE',0,1
	.word	530
	.byte	1,0,2,35,1,10
	.byte	'FCBAE',0,1
	.word	530
	.byte	1,7,2,35,2,10
	.byte	'LUDIS',0,1
	.word	530
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	530
	.byte	1,5,2,35,2,10
	.byte	'TRSTL',0,1
	.word	530
	.byte	1,4,2,35,2,10
	.byte	'SPDEN',0,1
	.word	530
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	530
	.byte	3,0,2,35,2,10
	.byte	'RAMINT',0,1
	.word	530
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	530
	.byte	7,0,2,35,3,0,26
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,198,7,3
	.word	37899
	.byte	9
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,201,7,16,4,10
	.byte	'reserved_0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'SWRSTREQ',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	355
	.byte	30,0,2,35,0,0,26
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,206,7,3
	.word	38159
	.byte	9
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,209,7,16,4,10
	.byte	'CCTRIG0',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'RAMINTM',0,1
	.word	530
	.byte	2,4,2,35,0,10
	.byte	'SETLUDIS',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	530
	.byte	3,0,2,35,0,10
	.byte	'DATM',0,1
	.word	530
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	355
	.byte	23,0,2,35,0,0,26
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,218,7,3
	.word	38284
	.byte	9
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,221,7,16,4,10
	.byte	'ESR0T',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	355
	.byte	28,0,2,35,0,0,26
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,228,7,3
	.word	38481
	.byte	9
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,231,7,16,4,10
	.byte	'ESR0T',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	355
	.byte	28,0,2,35,0,0,26
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,238,7,3
	.word	38634
	.byte	9
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,241,7,16,4,10
	.byte	'ESR0T',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	355
	.byte	28,0,2,35,0,0,26
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,248,7,3
	.word	38787
	.byte	9
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,251,7,16,4,10
	.byte	'ESR0T',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	355
	.byte	28,0,2,35,0,0,26
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,130,8,3
	.word	38940
	.byte	26
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,139,8,3
	.word	394
	.byte	26
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,154,8,3
	.word	569
	.byte	26
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,170,8,3
	.word	813
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,173,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	378
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	378
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	378
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	378
	.byte	16,0,2,35,0,0,26
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,179,8,3
	.word	39195
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,182,8,16,4,10
	.byte	'CLRIRF',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'IR0',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	530
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	530
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,195,8,3
	.word	39321
	.byte	9
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,198,8,16,4,10
	.byte	'AE',0,1
	.word	530
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	530
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	530
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	530
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	530
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	530
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	530
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	530
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	530
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	530
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	547
	.byte	16,0,2,35,2,0,26
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,211,8,3
	.word	39573
	.byte	11,4,219,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23359
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_ACCEN0',0,4,224,8,3
	.word	39792
	.byte	11,4,227,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23916
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_ACCEN1',0,4,232,8,3
	.word	39856
	.byte	11,4,235,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	23993
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_ARSTDIS',0,4,240,8,3
	.word	39920
	.byte	11,4,243,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24129
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_CCUCON0',0,4,248,8,3
	.word	39985
	.byte	11,4,251,8,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24411
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_CCUCON1',0,4,128,9,3
	.word	40050
	.byte	11,4,131,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24649
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_CCUCON2',0,4,136,9,3
	.word	40115
	.byte	11,4,139,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	24777
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_CCUCON3',0,4,144,9,3
	.word	40180
	.byte	11,4,147,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25004
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_CCUCON4',0,4,152,9,3
	.word	40245
	.byte	11,4,155,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25223
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_CCUCON5',0,4,160,9,3
	.word	40310
	.byte	11,4,163,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25351
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_CCUCON6',0,4,168,9,3
	.word	40375
	.byte	11,4,171,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25451
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_CHIPID',0,4,176,9,3
	.word	40440
	.byte	11,4,179,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25659
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_DTSCON',0,4,184,9,3
	.word	40504
	.byte	11,4,187,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	25824
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_DTSLIM',0,4,192,9,3
	.word	40568
	.byte	11,4,195,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26007
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_DTSSTAT',0,4,200,9,3
	.word	40632
	.byte	11,4,203,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26161
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EICR',0,4,208,9,3
	.word	40697
	.byte	11,4,211,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26525
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EIFR',0,4,216,9,3
	.word	40759
	.byte	11,4,219,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26736
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EMSR',0,4,224,9,3
	.word	40821
	.byte	11,4,227,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	26988
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_ESRCFG',0,4,232,9,3
	.word	40883
	.byte	11,4,235,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27106
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_ESROCFG',0,4,240,9,3
	.word	40947
	.byte	11,4,243,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27217
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVR13CON',0,4,248,9,3
	.word	41012
	.byte	11,4,251,9,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27380
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,128,10,3
	.word	41078
	.byte	11,4,131,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27542
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,136,10,3
	.word	41146
	.byte	11,4,139,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27820
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVROVMON',0,4,144,10,3
	.word	41214
	.byte	11,4,147,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	27999
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVRRSTCON',0,4,152,10,3
	.word	41280
	.byte	11,4,155,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28159
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,160,10,3
	.word	41347
	.byte	11,4,163,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28320
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,168,10,3
	.word	41416
	.byte	11,4,171,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28512
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,176,10,3
	.word	41484
	.byte	11,4,179,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	28808
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,184,10,3
	.word	41552
	.byte	11,4,187,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29023
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVRSTAT',0,4,192,10,3
	.word	41620
	.byte	11,4,195,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29312
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EVRUVMON',0,4,200,10,3
	.word	41685
	.byte	11,4,203,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29491
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_EXTCON',0,4,208,10,3
	.word	41751
	.byte	11,4,211,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29709
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_FDR',0,4,216,10,3
	.word	41815
	.byte	11,4,219,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	29872
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_FMR',0,4,224,10,3
	.word	41876
	.byte	11,4,227,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30208
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_ID',0,4,232,10,3
	.word	41937
	.byte	11,4,235,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30315
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_IGCR',0,4,240,10,3
	.word	41997
	.byte	11,4,243,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30767
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_IN',0,4,248,10,3
	.word	42059
	.byte	11,4,251,10,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	30866
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_IOCR',0,4,128,11,3
	.word	42119
	.byte	11,4,131,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31016
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,136,11,3
	.word	42181
	.byte	11,4,139,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31165
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,144,11,3
	.word	42249
	.byte	11,4,147,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31326
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,152,11,3
	.word	42317
	.byte	11,4,155,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31456
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_LCLCON0',0,4,160,11,3
	.word	42385
	.byte	11,4,163,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31590
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_LCLTEST',0,4,168,11,3
	.word	42450
	.byte	11,4,171,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31705
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_MANID',0,4,176,11,3
	.word	42515
	.byte	11,4,179,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31816
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_OMR',0,4,184,11,3
	.word	42578
	.byte	11,4,187,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	31974
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_OSCCON',0,4,192,11,3
	.word	42639
	.byte	11,4,195,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32314
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_OUT',0,4,200,11,3
	.word	42703
	.byte	11,4,203,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32415
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_OVCCON',0,4,208,11,3
	.word	42764
	.byte	11,4,211,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32682
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_OVCENABLE',0,4,216,11,3
	.word	42828
	.byte	11,4,219,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32818
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PDISC',0,4,224,11,3
	.word	42895
	.byte	11,4,227,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	32929
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PDR',0,4,232,11,3
	.word	42958
	.byte	11,4,235,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33062
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PDRR',0,4,240,11,3
	.word	43019
	.byte	11,4,243,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33265
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PLLCON0',0,4,248,11,3
	.word	43081
	.byte	11,4,251,11,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33621
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PLLCON1',0,4,128,12,3
	.word	43146
	.byte	11,4,131,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33799
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PLLCON2',0,4,136,12,3
	.word	43211
	.byte	11,4,139,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33899
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,144,12,3
	.word	43276
	.byte	11,4,147,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34269
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,152,12,3
	.word	43345
	.byte	11,4,155,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34455
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,160,12,3
	.word	43414
	.byte	11,4,163,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34653
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PLLSTAT',0,4,168,12,3
	.word	43483
	.byte	11,4,171,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34886
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PMCSR',0,4,176,12,3
	.word	43548
	.byte	11,4,179,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35038
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PMSWCR0',0,4,184,12,3
	.word	43611
	.byte	11,4,187,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35597
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PMSWCR1',0,4,192,12,3
	.word	43676
	.byte	11,4,195,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35780
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PMSWCR3',0,4,200,12,3
	.word	43741
	.byte	11,4,203,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35949
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PMSWSTAT',0,4,208,12,3
	.word	43806
	.byte	11,4,211,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36516
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,216,12,3
	.word	43872
	.byte	11,4,219,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36832
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_PMSWUTCNT',0,4,224,12,3
	.word	43941
	.byte	11,4,227,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37160
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_RSTCON',0,4,232,12,3
	.word	44008
	.byte	11,4,235,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36951
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_RSTCON2',0,4,240,12,3
	.word	44072
	.byte	11,4,243,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37371
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_RSTSTAT',0,4,248,12,3
	.word	44137
	.byte	11,4,251,12,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37803
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_SAFECON',0,4,128,13,3
	.word	44202
	.byte	11,4,131,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37899
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_STSTAT',0,4,136,13,3
	.word	44267
	.byte	11,4,139,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38159
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_SWRSTCON',0,4,144,13,3
	.word	44331
	.byte	11,4,147,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38284
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_SYSCON',0,4,152,13,3
	.word	44397
	.byte	11,4,155,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38481
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_TRAPCLR',0,4,160,13,3
	.word	44461
	.byte	11,4,163,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38634
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_TRAPDIS',0,4,168,13,3
	.word	44526
	.byte	11,4,171,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38787
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_TRAPSET',0,4,176,13,3
	.word	44591
	.byte	11,4,179,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38940
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_TRAPSTAT',0,4,184,13,3
	.word	44656
	.byte	26
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,192,13,3
	.word	490
	.byte	26
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,200,13,3
	.word	773
	.byte	26
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,208,13,3
	.word	1004
	.byte	11,4,211,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39195
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_WDTS_CON0',0,4,216,13,3
	.word	44807
	.byte	11,4,219,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39321
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_WDTS_CON1',0,4,224,13,3
	.word	44874
	.byte	11,4,227,13,9,4,12
	.byte	'U',0
	.word	355
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	371
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39573
	.byte	4,2,35,0,0,26
	.byte	'Ifx_SCU_WDTS_SR',0,4,232,13,3
	.word	44941
	.byte	13
	.word	1044
	.byte	26
	.byte	'Ifx_SCU_WDTCPU',0,4,248,13,3
	.word	45006
	.byte	9
	.byte	'_Ifx_SCU_WDTS',0,4,251,13,25,12,12
	.byte	'CON0',0
	.word	44807
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	44874
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	44941
	.byte	4,2,35,8,0,13
	.word	45035
	.byte	26
	.byte	'Ifx_SCU_WDTS',0,4,128,14,3
	.word	45096
	.byte	14,14,153,10,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,26
	.byte	'IfxScu_WDTCON1_IR',0,14,158,10,3
	.word	45123
	.byte	14,5,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,26
	.byte	'IfxCpu_CounterMode',0,5,122,3
	.word	45245
	.byte	16,5,132,1,9,6,12
	.byte	'counter',0
	.word	1504
	.byte	4,2,35,0,12
	.byte	'overlfow',0
	.word	530
	.byte	1,2,35,4,0,26
	.byte	'IfxCpu_Counter',0,5,136,1,3
	.word	45332
	.byte	16,5,144,1,9,32,12
	.byte	'instruction',0
	.word	45332
	.byte	6,2,35,0,12
	.byte	'clock',0
	.word	45332
	.byte	6,2,35,6,12
	.byte	'counter1',0
	.word	45332
	.byte	6,2,35,12,12
	.byte	'counter2',0
	.word	45332
	.byte	6,2,35,18,12
	.byte	'counter3',0
	.word	45332
	.byte	6,2,35,24,0,26
	.byte	'IfxCpu_Perf',0,5,151,1,3
	.word	45398
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L36:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,59,0,3,8,0,0,5,15,0,73,19,0,0,6,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,7,36,0
	.byte	3,8,11,15,62,15,0,0,8,5,0,3,8,58,15,59,15,57,15,73,19,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,11,23,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,13,53,0,73,19,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,19,1,58,15,59,15,57
	.byte	15,11,15,0,0,17,11,1,0,0,18,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,19,5,0,73,19,0,0,20,46,0,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,21,46,1,49,19,0,0,22,5,0,49,19,0,0,23,29,1,49,19,0,0,24,11,0,49,19,0,0,25,46
	.byte	0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,26,22,0,3,8,58,15,59,15,57,15,73,19,0,0,27,21,0,54,15,0
	.byte	0,28,1,1,11,15,73,19,0,0,29,33,0,47,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L37:
	.word	.L294-.L293
.L293:
	.half	3
	.word	.L296-.L295
.L295:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Reg',0
	.byte	'C:\\TASKING\\TriCore v6.2r2\\ctc\\include\\',0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxCpu_cfg.h',0
	.byte	0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.h',0,0,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'stdio.h',0,2,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Platform_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Ifx_Types.h',0
	.byte	0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxScu_cfg.h',0
	.byte	0,0,0,0
.L296:
.L294:
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_info'
.L38:
	.word	429
	.half	3
	.word	.L39
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L41,.L40
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_memoryManagementError',0,1,97,6,1,1,1
	.word	.L3,.L120,.L2
	.byte	4
	.byte	'tin',0,1,97,47
	.word	.L121,.L122
	.byte	5
	.word	.L3,.L120
	.byte	6
	.word	.L123,.L3,.L124
	.byte	7
	.word	.L125,.L126
	.byte	7
	.word	.L127,.L128
	.byte	8
	.word	.L129,.L3,.L124
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L131
	.byte	6
	.word	.L132,.L3,.L133
	.byte	8
	.word	.L134,.L3,.L133
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L136
	.byte	0,0,6
	.word	.L137,.L138,.L124
	.byte	10
	.word	.L139,.L140
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L142
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_abbrev'
.L39:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_line'
.L40:
	.word	.L298-.L297
.L297:
	.half	3
	.word	.L300-.L299
.L299:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L300:
	.byte	4,2,5,5,7,0,5,2
	.word	.L3
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L301-.L3
	.byte	3,205,126,1,5,21,9
	.half	.L133-.L301
	.byte	3,1,1,9
	.half	.L302-.L133
	.byte	3,1,1,4,3,5,19,9
	.half	.L138-.L302
	.byte	3,202,4,1,5,37,9
	.half	.L265-.L138
	.byte	3,1,1,4,1,5,12,9
	.half	.L124-.L265
	.byte	3,191,123,1,5,5,9
	.half	.L303-.L124
	.byte	3,1,1,5,1,9
	.half	.L304-.L303
	.byte	3,1,1,7,9
	.half	.L42-.L304
	.byte	0,1,1
.L298:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_ranges'
.L41:
	.word	-1,.L3,0,.L42-.L3,0,0
.L140:
	.word	-1,.L3,.L138-.L3,.L124-.L3,-1,.L5,0,.L112-.L5,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_info'
.L43:
	.word	435
	.half	3
	.word	.L44
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L46,.L45
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_internalProtectionError',0,1,106,6,1,1,1
	.word	.L7,.L143,.L6
	.byte	4
	.byte	'tin',0,1,106,49
	.word	.L121,.L144
	.byte	5
	.word	.L7,.L143
	.byte	6
	.word	.L123,.L7,.L145
	.byte	7
	.word	.L125,.L146
	.byte	7
	.word	.L127,.L147
	.byte	8
	.word	.L129,.L7,.L145
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L148
	.byte	6
	.word	.L132,.L7,.L149
	.byte	8
	.word	.L134,.L7,.L149
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L150
	.byte	0,0,6
	.word	.L137,.L151,.L145
	.byte	8
	.word	.L139,.L151,.L145
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L152
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_abbrev'
.L44:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_line'
.L45:
	.word	.L306-.L305
.L305:
	.half	3
	.word	.L308-.L307
.L307:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L308:
	.byte	4,2,5,5,7,0,5,2
	.word	.L7
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L309-.L7
	.byte	3,205,126,1,5,21,9
	.half	.L149-.L309
	.byte	3,1,1,9
	.half	.L310-.L149
	.byte	3,1,1,4,3,5,19,9
	.half	.L151-.L310
	.byte	3,202,4,1,5,37,9
	.half	.L269-.L151
	.byte	3,1,1,4,1,5,12,9
	.half	.L145-.L269
	.byte	3,200,123,1,5,5,9
	.half	.L311-.L145
	.byte	3,1,1,5,1,9
	.half	.L312-.L311
	.byte	3,1,1,7,9
	.half	.L47-.L312
	.byte	0,1,1
.L306:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_ranges'
.L46:
	.word	-1,.L7,0,.L47-.L7,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_info'
.L48:
	.word	428
	.half	3
	.word	.L49
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L51,.L50
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_instructionError',0,1,115,6,1,1,1
	.word	.L9,.L153,.L8
	.byte	4
	.byte	'tin',0,1,115,42
	.word	.L121,.L154
	.byte	5
	.word	.L9,.L153
	.byte	6
	.word	.L123,.L9,.L155
	.byte	7
	.word	.L125,.L156
	.byte	7
	.word	.L127,.L157
	.byte	8
	.word	.L129,.L9,.L155
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L158
	.byte	6
	.word	.L132,.L9,.L159
	.byte	8
	.word	.L134,.L9,.L159
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L160
	.byte	0,0,6
	.word	.L137,.L161,.L155
	.byte	8
	.word	.L139,.L161,.L155
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L162
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_abbrev'
.L49:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_line'
.L50:
	.word	.L314-.L313
.L313:
	.half	3
	.word	.L316-.L315
.L315:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L316:
	.byte	4,2,5,5,7,0,5,2
	.word	.L9
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L317-.L9
	.byte	3,205,126,1,5,21,9
	.half	.L159-.L317
	.byte	3,1,1,9
	.half	.L318-.L159
	.byte	3,1,1,4,3,5,19,9
	.half	.L161-.L318
	.byte	3,202,4,1,5,37,9
	.half	.L271-.L161
	.byte	3,1,1,4,1,5,12,9
	.half	.L155-.L271
	.byte	3,209,123,1,5,5,9
	.half	.L319-.L155
	.byte	3,1,1,5,1,9
	.half	.L320-.L319
	.byte	3,1,1,7,9
	.half	.L52-.L320
	.byte	0,1,1
.L314:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_ranges'
.L51:
	.word	-1,.L9,0,.L52-.L9,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_info'
.L53:
	.word	434
	.half	3
	.word	.L54
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L56,.L55
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_contextManagementError',0,1,124,6,1,1,1
	.word	.L11,.L163,.L10
	.byte	4
	.byte	'tin',0,1,124,48
	.word	.L121,.L164
	.byte	5
	.word	.L11,.L163
	.byte	6
	.word	.L123,.L11,.L165
	.byte	7
	.word	.L125,.L166
	.byte	7
	.word	.L127,.L167
	.byte	8
	.word	.L129,.L11,.L165
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L168
	.byte	6
	.word	.L132,.L11,.L169
	.byte	8
	.word	.L134,.L11,.L169
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L170
	.byte	0,0,6
	.word	.L137,.L171,.L165
	.byte	8
	.word	.L139,.L171,.L165
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L172
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_abbrev'
.L54:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_line'
.L55:
	.word	.L322-.L321
.L321:
	.half	3
	.word	.L324-.L323
.L323:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L324:
	.byte	4,2,5,5,7,0,5,2
	.word	.L11
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L325-.L11
	.byte	3,205,126,1,5,21,9
	.half	.L169-.L325
	.byte	3,1,1,9
	.half	.L326-.L169
	.byte	3,1,1,4,3,5,19,9
	.half	.L171-.L326
	.byte	3,202,4,1,5,37,9
	.half	.L273-.L171
	.byte	3,1,1,4,1,5,12,9
	.half	.L165-.L273
	.byte	3,218,123,1,5,5,9
	.half	.L327-.L165
	.byte	3,1,1,5,1,9
	.half	.L328-.L327
	.byte	3,1,1,7,9
	.half	.L57-.L328
	.byte	0,1,1
.L322:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_ranges'
.L56:
	.word	-1,.L11,0,.L57-.L11,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_info'
.L58:
	.word	422
	.half	3
	.word	.L59
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L61,.L60
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_busError',0,1,133,1,6,1,1,1
	.word	.L13,.L173,.L12
	.byte	4
	.byte	'tin',0,1,133,1,34
	.word	.L121,.L174
	.byte	5
	.word	.L13,.L173
	.byte	6
	.word	.L123,.L13,.L175
	.byte	7
	.word	.L125,.L176
	.byte	7
	.word	.L127,.L177
	.byte	8
	.word	.L129,.L13,.L175
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L178
	.byte	6
	.word	.L132,.L13,.L179
	.byte	8
	.word	.L134,.L13,.L179
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L180
	.byte	0,0,6
	.word	.L137,.L181,.L175
	.byte	8
	.word	.L139,.L181,.L175
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L182
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_abbrev'
.L59:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_line'
.L60:
	.word	.L330-.L329
.L329:
	.half	3
	.word	.L332-.L331
.L331:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L332:
	.byte	4,2,5,5,7,0,5,2
	.word	.L13
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L333-.L13
	.byte	3,205,126,1,5,21,9
	.half	.L179-.L333
	.byte	3,1,1,9
	.half	.L334-.L179
	.byte	3,1,1,4,3,5,19,9
	.half	.L181-.L334
	.byte	3,202,4,1,5,37,9
	.half	.L275-.L181
	.byte	3,1,1,4,1,5,12,9
	.half	.L175-.L275
	.byte	3,227,123,1,5,5,9
	.half	.L335-.L175
	.byte	3,1,1,5,1,9
	.half	.L336-.L335
	.byte	3,1,1,7,9
	.half	.L62-.L336
	.byte	0,1,1
.L330:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_ranges'
.L61:
	.word	-1,.L13,0,.L62-.L13,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_info'
.L63:
	.word	423
	.half	3
	.word	.L64
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L66,.L65
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_assertion',0,1,142,1,6,1,1,1
	.word	.L15,.L183,.L14
	.byte	4
	.byte	'tin',0,1,142,1,35
	.word	.L121,.L184
	.byte	5
	.word	.L15,.L183
	.byte	6
	.word	.L123,.L15,.L185
	.byte	7
	.word	.L125,.L186
	.byte	7
	.word	.L127,.L187
	.byte	8
	.word	.L129,.L15,.L185
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L188
	.byte	6
	.word	.L132,.L15,.L189
	.byte	8
	.word	.L134,.L15,.L189
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L190
	.byte	0,0,6
	.word	.L137,.L191,.L185
	.byte	8
	.word	.L139,.L191,.L185
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L192
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_abbrev'
.L64:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_line'
.L65:
	.word	.L338-.L337
.L337:
	.half	3
	.word	.L340-.L339
.L339:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L340:
	.byte	4,2,5,5,7,0,5,2
	.word	.L15
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L341-.L15
	.byte	3,205,126,1,5,21,9
	.half	.L189-.L341
	.byte	3,1,1,9
	.half	.L342-.L189
	.byte	3,1,1,4,3,5,19,9
	.half	.L191-.L342
	.byte	3,202,4,1,5,37,9
	.half	.L277-.L191
	.byte	3,1,1,4,1,5,12,9
	.half	.L185-.L277
	.byte	3,236,123,1,5,5,9
	.half	.L343-.L185
	.byte	3,1,1,5,1,9
	.half	.L344-.L343
	.byte	3,1,1,7,9
	.half	.L67-.L344
	.byte	0,1,1
.L338:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_ranges'
.L66:
	.word	-1,.L15,0,.L67-.L15,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_info'
.L68:
	.word	425
	.half	3
	.word	.L69
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L71,.L70
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu0',0,1,151,1,6,1,1,1
	.word	.L17,.L193,.L16
	.byte	4
	.byte	'tin',0,1,151,1,41
	.word	.L121,.L194
	.byte	5
	.word	.L17,.L193
	.byte	6
	.word	.L123,.L17,.L195
	.byte	7
	.word	.L125,.L196
	.byte	7
	.word	.L127,.L197
	.byte	8
	.word	.L129,.L198
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L199
	.byte	6
	.word	.L132,.L17,.L200
	.byte	10
	.word	.L134,.L17,.L200
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L201
	.byte	0,0,6
	.word	.L137,.L202,.L195
	.byte	10
	.word	.L139,.L202,.L195
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L203
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_abbrev'
.L69:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,85,6,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_line'
.L70:
	.word	.L346-.L345
.L345:
	.half	3
	.word	.L348-.L347
.L347:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L348:
	.byte	4,2,5,5,7,0,5,2
	.word	.L17
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L200-.L17
	.byte	3,205,126,1,4,3,5,19,9
	.half	.L202-.L200
	.byte	3,204,4,1,5,37,9
	.half	.L349-.L202
	.byte	3,1,1,4,1,5,5,9
	.half	.L195-.L349
	.byte	3,245,123,1,5,1,9
	.half	.L350-.L195
	.byte	3,1,1,7,9
	.half	.L72-.L350
	.byte	0,1,1
.L346:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_ranges'
.L71:
	.word	-1,.L17,0,.L72-.L17,0,0
.L198:
	.word	-1,.L17,0,.L195-.L17,-1,.L19,0,.L117-.L19,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_info'
.L73:
	.word	429
	.half	3
	.word	.L74
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L76,.L75
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu1',0,1,159,1,6,1,1,1
	.word	.L21,.L204,.L20
	.byte	4
	.byte	'tin',0,1,159,1,41
	.word	.L121,.L205
	.byte	5
	.word	.L21,.L204
	.byte	6
	.word	.L123,.L21,.L206
	.byte	7
	.word	.L125,.L207
	.byte	7
	.word	.L127,.L208
	.byte	8
	.word	.L129,.L21,.L206
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L209
	.byte	6
	.word	.L132,.L21,.L210
	.byte	8
	.word	.L134,.L21,.L210
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L211
	.byte	0,0,6
	.word	.L137,.L212,.L206
	.byte	8
	.word	.L139,.L212,.L206
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L213
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_abbrev'
.L74:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_line'
.L75:
	.word	.L352-.L351
.L351:
	.half	3
	.word	.L354-.L353
.L353:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L354:
	.byte	4,2,5,5,7,0,5,2
	.word	.L21
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L210-.L21
	.byte	3,205,126,1,4,3,5,19,9
	.half	.L212-.L210
	.byte	3,204,4,1,5,37,9
	.half	.L281-.L212
	.byte	3,1,1,4,1,5,5,9
	.half	.L206-.L281
	.byte	3,253,123,1,5,1,9
	.half	.L355-.L206
	.byte	3,1,1,7,9
	.half	.L77-.L355
	.byte	0,1,1
.L352:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_ranges'
.L76:
	.word	-1,.L21,0,.L77-.L21,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_info'
.L78:
	.word	429
	.half	3
	.word	.L79
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L81,.L80
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu2',0,1,167,1,6,1,1,1
	.word	.L23,.L214,.L22
	.byte	4
	.byte	'tin',0,1,167,1,41
	.word	.L121,.L215
	.byte	5
	.word	.L23,.L214
	.byte	6
	.word	.L123,.L23,.L216
	.byte	7
	.word	.L125,.L217
	.byte	7
	.word	.L127,.L218
	.byte	8
	.word	.L129,.L23,.L216
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L219
	.byte	6
	.word	.L132,.L23,.L220
	.byte	8
	.word	.L134,.L23,.L220
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L221
	.byte	0,0,6
	.word	.L137,.L222,.L216
	.byte	8
	.word	.L139,.L222,.L216
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L223
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_abbrev'
.L79:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_line'
.L80:
	.word	.L357-.L356
.L356:
	.half	3
	.word	.L359-.L358
.L358:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L359:
	.byte	4,2,5,5,7,0,5,2
	.word	.L23
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L220-.L23
	.byte	3,205,126,1,4,3,5,19,9
	.half	.L222-.L220
	.byte	3,204,4,1,5,37,9
	.half	.L283-.L222
	.byte	3,1,1,4,1,5,5,9
	.half	.L216-.L283
	.byte	3,133,124,1,5,1,9
	.half	.L360-.L216
	.byte	3,1,1,7,9
	.half	.L82-.L360
	.byte	0,1,1
.L357:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_ranges'
.L81:
	.word	-1,.L23,0,.L82-.L23,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_info'
.L83:
	.word	429
	.half	3
	.word	.L84
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L86,.L85
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu3',0,1,175,1,6,1,1,1
	.word	.L25,.L224,.L24
	.byte	4
	.byte	'tin',0,1,175,1,41
	.word	.L121,.L225
	.byte	5
	.word	.L25,.L224
	.byte	6
	.word	.L123,.L25,.L226
	.byte	7
	.word	.L125,.L227
	.byte	7
	.word	.L127,.L228
	.byte	8
	.word	.L129,.L25,.L226
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L229
	.byte	6
	.word	.L132,.L25,.L230
	.byte	8
	.word	.L134,.L25,.L230
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L231
	.byte	0,0,6
	.word	.L137,.L232,.L226
	.byte	8
	.word	.L139,.L232,.L226
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L233
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_abbrev'
.L84:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_line'
.L85:
	.word	.L362-.L361
.L361:
	.half	3
	.word	.L364-.L363
.L363:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L364:
	.byte	4,2,5,5,7,0,5,2
	.word	.L25
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L230-.L25
	.byte	3,205,126,1,4,3,5,19,9
	.half	.L232-.L230
	.byte	3,204,4,1,5,37,9
	.half	.L285-.L232
	.byte	3,1,1,4,1,5,5,9
	.half	.L226-.L285
	.byte	3,141,124,1,5,1,9
	.half	.L365-.L226
	.byte	3,1,1,7,9
	.half	.L87-.L365
	.byte	0,1,1
.L362:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_ranges'
.L86:
	.word	-1,.L25,0,.L87-.L25,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_info'
.L88:
	.word	429
	.half	3
	.word	.L89
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L91,.L90
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu4',0,1,183,1,6,1,1,1
	.word	.L27,.L234,.L26
	.byte	4
	.byte	'tin',0,1,183,1,41
	.word	.L121,.L235
	.byte	5
	.word	.L27,.L234
	.byte	6
	.word	.L123,.L27,.L236
	.byte	7
	.word	.L125,.L237
	.byte	7
	.word	.L127,.L238
	.byte	8
	.word	.L129,.L27,.L236
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L239
	.byte	6
	.word	.L132,.L27,.L240
	.byte	8
	.word	.L134,.L27,.L240
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L241
	.byte	0,0,6
	.word	.L137,.L242,.L236
	.byte	8
	.word	.L139,.L242,.L236
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L243
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_abbrev'
.L89:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_line'
.L90:
	.word	.L367-.L366
.L366:
	.half	3
	.word	.L369-.L368
.L368:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L369:
	.byte	4,2,5,5,7,0,5,2
	.word	.L27
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L240-.L27
	.byte	3,205,126,1,4,3,5,19,9
	.half	.L242-.L240
	.byte	3,204,4,1,5,37,9
	.half	.L287-.L242
	.byte	3,1,1,4,1,5,5,9
	.half	.L236-.L287
	.byte	3,149,124,1,5,1,9
	.half	.L370-.L236
	.byte	3,1,1,7,9
	.half	.L92-.L370
	.byte	0,1,1
.L367:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_ranges'
.L91:
	.word	-1,.L27,0,.L92-.L27,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_info'
.L93:
	.word	429
	.half	3
	.word	.L94
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L96,.L95
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu5',0,1,191,1,6,1,1,1
	.word	.L29,.L244,.L28
	.byte	4
	.byte	'tin',0,1,191,1,41
	.word	.L121,.L245
	.byte	5
	.word	.L29,.L244
	.byte	6
	.word	.L123,.L29,.L246
	.byte	7
	.word	.L125,.L247
	.byte	7
	.word	.L127,.L248
	.byte	8
	.word	.L129,.L29,.L246
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L249
	.byte	6
	.word	.L132,.L29,.L250
	.byte	8
	.word	.L134,.L29,.L250
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L251
	.byte	0,0,6
	.word	.L137,.L252,.L246
	.byte	8
	.word	.L139,.L252,.L246
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L253
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_abbrev'
.L94:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_line'
.L95:
	.word	.L372-.L371
.L371:
	.half	3
	.word	.L374-.L373
.L373:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L374:
	.byte	4,2,5,5,7,0,5,2
	.word	.L29
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L250-.L29
	.byte	3,205,126,1,4,3,5,19,9
	.half	.L252-.L250
	.byte	3,204,4,1,5,37,9
	.half	.L289-.L252
	.byte	3,1,1,4,1,5,5,9
	.half	.L246-.L289
	.byte	3,157,124,1,5,1,9
	.half	.L375-.L246
	.byte	3,1,1,7,9
	.half	.L97-.L375
	.byte	0,1,1
.L372:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_ranges'
.L96:
	.word	-1,.L29,0,.L97-.L29,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_info'
.L98:
	.word	434
	.half	3
	.word	.L99
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L101,.L100
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_nonMaskableInterrupt',0,1,199,1,6,1,1,1
	.word	.L31,.L254,.L30
	.byte	4
	.byte	'tin',0,1,199,1,46
	.word	.L121,.L255
	.byte	5
	.word	.L31,.L254
	.byte	6
	.word	.L123,.L31,.L256
	.byte	7
	.word	.L125,.L257
	.byte	7
	.word	.L127,.L258
	.byte	8
	.word	.L129,.L31,.L256
	.byte	9
	.byte	'trapInfo',0,1,88,17
	.word	.L130,.L259
	.byte	6
	.word	.L132,.L31,.L260
	.byte	8
	.word	.L134,.L31,.L260
	.byte	9
	.byte	'res',0,2,139,2,13
	.word	.L135,.L261
	.byte	0,0,6
	.word	.L137,.L262,.L256
	.byte	8
	.word	.L139,.L262,.L256
	.byte	9
	.byte	'reg',0,3,164,5,21
	.word	.L141,.L263
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_abbrev'
.L99:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_line'
.L100:
	.word	.L377-.L376
.L376:
	.half	3
	.word	.L379-.L378
.L378:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L379:
	.byte	4,2,5,5,7,0,5,2
	.word	.L31
	.byte	3,139,2,1,4,1,5,45,9
	.half	.L380-.L31
	.byte	3,205,126,1,5,21,9
	.half	.L260-.L380
	.byte	3,1,1,9
	.half	.L381-.L260
	.byte	3,1,1,4,3,5,19,9
	.half	.L262-.L381
	.byte	3,202,4,1,5,37,9
	.half	.L291-.L262
	.byte	3,1,1,4,1,5,12,9
	.half	.L256-.L291
	.byte	3,165,124,1,5,5,9
	.half	.L382-.L256
	.byte	3,1,1,5,1,9
	.half	.L383-.L382
	.byte	3,1,1,7,9
	.half	.L102-.L383
	.byte	0,1,1
.L377:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_ranges'
.L101:
	.word	-1,.L31,0,.L102-.L31,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_info'
.L103:
	.word	251
	.half	3
	.word	.L104
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L106,.L105
	.byte	2
	.word	.L34
	.byte	3
	.byte	'IfxCpu_Trap_vectorTable0',0,1,221,1,6,1,1,1
	.word	.L33,.L264,.L32
	.byte	4
	.word	.L33,.L264
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_abbrev'
.L104:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_line'
.L105:
	.word	.L385-.L384
.L384:
	.half	3
	.word	.L387-.L386
.L386:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L387:
	.byte	5,5,7,0,5,2
	.word	.L33
	.byte	3,222,1,1,9
	.half	.L388-.L33
	.byte	3,1,1,9
	.half	.L389-.L388
	.byte	3,1,1,9
	.half	.L390-.L389
	.byte	3,1,1,9
	.half	.L391-.L390
	.byte	3,1,1,9
	.half	.L392-.L391
	.byte	3,1,1,9
	.half	.L393-.L392
	.byte	3,1,1,9
	.half	.L394-.L393
	.byte	3,1,1,5,1,9
	.half	.L395-.L394
	.byte	3,1,1,7,9
	.half	.L107-.L395
	.byte	0,1,1
.L385:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_ranges'
.L106:
	.word	-1,.L33,0,.L107-.L33,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L108:
	.word	224
	.half	3
	.word	.L109
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L111,.L110
	.byte	2
	.word	.L34
	.byte	3
	.byte	'.cocofun_4',0,1,97,6,1
	.word	.L5,.L112,.L4
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L109:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L110:
	.word	.L397-.L396
.L396:
	.half	3
	.word	.L399-.L398
.L398:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0,0
.L399:
	.byte	5,13,7,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,7,1,9
	.half	.L112-.L401
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,16,1,9
	.half	.L267-.L401
	.byte	3,119,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,25,1,9
	.half	.L267-.L401
	.byte	3,110,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,34,1,9
	.half	.L267-.L401
	.byte	3,101,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,43,1,9
	.half	.L267-.L401
	.byte	3,92,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,52,1,9
	.half	.L267-.L401
	.byte	3,83,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,61,1,9
	.half	.L267-.L401
	.byte	3,74,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,197,0,1,9
	.half	.L267-.L401
	.byte	3,66,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,205,0,1,9
	.half	.L267-.L401
	.byte	3,186,127,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,213,0,1,9
	.half	.L267-.L401
	.byte	3,178,127,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,221,0,1,9
	.half	.L267-.L401
	.byte	3,170,127,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,229,0,1,9
	.half	.L267-.L401
	.byte	3,162,127,1,7,9
	.half	.L112-.L267
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,219,0,1,4,2,5,37,9
	.half	.L400-.L5
	.byte	3,202,4,1,4,1,5,21,9
	.half	.L266-.L400
	.byte	3,182,123,1,5,15,9
	.half	.L401-.L266
	.byte	3,237,0,1,9
	.half	.L267-.L401
	.byte	3,154,127,1,7,9
	.half	.L112-.L267
	.byte	0,1,1
.L397:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L111:
	.word	-1,.L5,0,.L112-.L5,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L113:
	.word	225
	.half	3
	.word	.L114
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L116,.L115
	.byte	2
	.word	.L34
	.byte	3
	.byte	'.cocofun_5',0,1,151,1,6,1
	.word	.L19,.L117,.L18
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L114:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L115:
	.word	.L403-.L402
.L402:
	.half	3
	.word	.L405-.L404
.L404:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L405:
	.byte	5,21,7,0,5,2
	.word	.L19
	.byte	3,217,0,1,5,45,3,127,1,5,21,9
	.half	.L280-.L19
	.byte	3,2,1,9
	.half	.L117-.L280
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,217,0,1,5,45,3,127,1,5,21,9
	.half	.L280-.L19
	.byte	3,2,1,9
	.half	.L117-.L280
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,217,0,1,5,45,3,127,1,5,21,9
	.half	.L280-.L19
	.byte	3,2,1,9
	.half	.L117-.L280
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,217,0,1,5,45,3,127,1,5,21,9
	.half	.L280-.L19
	.byte	3,2,1,9
	.half	.L117-.L280
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,217,0,1,5,45,3,127,1,5,21,9
	.half	.L280-.L19
	.byte	3,2,1,9
	.half	.L117-.L280
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,217,0,1,5,45,3,127,1,5,21,9
	.half	.L280-.L19
	.byte	3,2,1,9
	.half	.L117-.L280
	.byte	0,1,1
.L403:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L116:
	.word	-1,.L19,0,.L117-.L19,0,0
	.sdecl	'.debug_info',debug,cluster('trapWatch')
	.sect	'.debug_info'
.L118:
	.word	213
	.half	3
	.word	.L119
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1,2
	.word	.L34
	.byte	3
	.byte	'trapWatch',0,7,81,13
	.word	.L130
	.byte	1,5,3
	.word	trapWatch
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('trapWatch')
	.sect	'.debug_abbrev'
.L119:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L4:
	.word	-1,.L5,0,.L112-.L5
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L18:
	.word	-1,.L19,0,.L117-.L19
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_loc'
.L14:
	.word	-1,.L15,0,.L183-.L15
	.half	2
	.byte	138,0
	.word	0,0
.L192:
	.word	-1,.L15,.L277-.L15,.L185-.L15
	.half	1
	.byte	95
	.word	.L5-.L15,.L266-.L15
	.half	1
	.byte	95
	.word	0,0
.L190:
	.word	-1,.L15,.L5-.L15,.L112-.L15
	.half	1
	.byte	111
	.word	.L278-.L15,.L183-.L15
	.half	1
	.byte	111
	.word	0,0
.L187:
	.word	0,0
.L184:
	.word	-1,.L15,.L5-.L15,.L112-.L15
	.half	1
	.byte	84
	.word	0,.L183-.L15
	.half	1
	.byte	84
	.word	0,0
.L186:
	.word	0,0
.L188:
	.word	-1,.L15,.L5-.L15,.L112-.L15
	.half	2
	.byte	144,32
	.word	.L189-.L15,.L183-.L15
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_loc'
.L12:
	.word	-1,.L13,0,.L173-.L13
	.half	2
	.byte	138,0
	.word	0,0
.L182:
	.word	-1,.L13,.L275-.L13,.L175-.L13
	.half	1
	.byte	95
	.word	.L5-.L13,.L266-.L13
	.half	1
	.byte	95
	.word	0,0
.L180:
	.word	-1,.L13,.L5-.L13,.L112-.L13
	.half	1
	.byte	111
	.word	.L276-.L13,.L173-.L13
	.half	1
	.byte	111
	.word	0,0
.L177:
	.word	0,0
.L174:
	.word	-1,.L13,.L5-.L13,.L112-.L13
	.half	1
	.byte	84
	.word	0,.L173-.L13
	.half	1
	.byte	84
	.word	0,0
.L176:
	.word	0,0
.L178:
	.word	-1,.L13,.L5-.L13,.L112-.L13
	.half	2
	.byte	144,32
	.word	.L179-.L13,.L173-.L13
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_loc'
.L10:
	.word	-1,.L11,0,.L163-.L11
	.half	2
	.byte	138,0
	.word	0,0
.L172:
	.word	-1,.L11,.L273-.L11,.L165-.L11
	.half	1
	.byte	95
	.word	.L5-.L11,.L266-.L11
	.half	1
	.byte	95
	.word	0,0
.L170:
	.word	-1,.L11,.L5-.L11,.L112-.L11
	.half	1
	.byte	111
	.word	.L274-.L11,.L163-.L11
	.half	1
	.byte	111
	.word	0,0
.L167:
	.word	0,0
.L164:
	.word	-1,.L11,.L5-.L11,.L112-.L11
	.half	1
	.byte	84
	.word	0,.L163-.L11
	.half	1
	.byte	84
	.word	0,0
.L166:
	.word	0,0
.L168:
	.word	-1,.L11,.L5-.L11,.L112-.L11
	.half	2
	.byte	144,32
	.word	.L169-.L11,.L163-.L11
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_loc'
.L8:
	.word	-1,.L9,0,.L153-.L9
	.half	2
	.byte	138,0
	.word	0,0
.L162:
	.word	-1,.L9,.L271-.L9,.L155-.L9
	.half	1
	.byte	95
	.word	.L5-.L9,.L266-.L9
	.half	1
	.byte	95
	.word	0,0
.L160:
	.word	-1,.L9,.L5-.L9,.L112-.L9
	.half	1
	.byte	111
	.word	.L272-.L9,.L153-.L9
	.half	1
	.byte	111
	.word	0,0
.L157:
	.word	0,0
.L154:
	.word	-1,.L9,.L5-.L9,.L112-.L9
	.half	1
	.byte	84
	.word	0,.L153-.L9
	.half	1
	.byte	84
	.word	0,0
.L156:
	.word	0,0
.L158:
	.word	-1,.L9,.L5-.L9,.L112-.L9
	.half	2
	.byte	144,32
	.word	.L159-.L9,.L153-.L9
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_loc'
.L6:
	.word	-1,.L7,0,.L143-.L7
	.half	2
	.byte	138,0
	.word	0,0
.L152:
	.word	-1,.L7,.L269-.L7,.L145-.L7
	.half	1
	.byte	95
	.word	.L5-.L7,.L266-.L7
	.half	1
	.byte	95
	.word	0,0
.L150:
	.word	-1,.L7,.L5-.L7,.L112-.L7
	.half	1
	.byte	111
	.word	.L270-.L7,.L143-.L7
	.half	1
	.byte	111
	.word	0,0
.L147:
	.word	0,0
.L144:
	.word	-1,.L7,.L5-.L7,.L112-.L7
	.half	1
	.byte	84
	.word	0,.L143-.L7
	.half	1
	.byte	84
	.word	0,0
.L146:
	.word	0,0
.L148:
	.word	-1,.L7,.L5-.L7,.L112-.L7
	.half	2
	.byte	144,32
	.word	.L149-.L7,.L143-.L7
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_loc'
.L2:
	.word	-1,.L3,0,.L120-.L3
	.half	2
	.byte	138,0
	.word	0,0
.L142:
	.word	-1,.L3,.L265-.L3,.L124-.L3
	.half	1
	.byte	95
	.word	.L5-.L3,.L266-.L3
	.half	1
	.byte	95
	.word	0,0
.L136:
	.word	-1,.L3,.L5-.L3,.L267-.L3
	.half	1
	.byte	111
	.word	.L268-.L3,.L120-.L3
	.half	1
	.byte	111
	.word	0,0
.L128:
	.word	0,0
.L122:
	.word	-1,.L3,.L5-.L3,.L267-.L3
	.half	1
	.byte	84
	.word	0,.L120-.L3
	.half	1
	.byte	84
	.word	0,0
.L126:
	.word	0,0
.L131:
	.word	-1,.L3,.L5-.L3,.L267-.L3
	.half	2
	.byte	144,32
	.word	.L133-.L3,.L120-.L3
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_loc'
.L30:
	.word	-1,.L31,0,.L254-.L31
	.half	2
	.byte	138,0
	.word	0,0
.L263:
	.word	-1,.L31,.L291-.L31,.L256-.L31
	.half	1
	.byte	95
	.word	.L5-.L31,.L266-.L31
	.half	1
	.byte	95
	.word	0,0
.L261:
	.word	-1,.L31,.L5-.L31,.L112-.L31
	.half	1
	.byte	111
	.word	.L292-.L31,.L254-.L31
	.half	1
	.byte	111
	.word	0,0
.L258:
	.word	0,0
.L255:
	.word	-1,.L31,.L5-.L31,.L112-.L31
	.half	1
	.byte	84
	.word	0,.L254-.L31
	.half	1
	.byte	84
	.word	0,0
.L257:
	.word	0,0
.L259:
	.word	-1,.L31,.L5-.L31,.L112-.L31
	.half	2
	.byte	144,32
	.word	.L260-.L31,.L254-.L31
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_loc'
.L16:
	.word	-1,.L17,0,.L193-.L17
	.half	2
	.byte	138,0
	.word	0,0
.L203:
	.word	-1,.L17,.L280-.L17,.L117-.L17
	.half	1
	.byte	95
	.word	.L5-.L17,.L266-.L17
	.half	1
	.byte	95
	.word	0,0
.L201:
	.word	-1,.L17,.L279-.L17,.L202-.L17
	.half	1
	.byte	111
	.word	.L19-.L17,.L117-.L17
	.half	1
	.byte	111
	.word	.L5-.L17,.L112-.L17
	.half	1
	.byte	111
	.word	.L195-.L17,.L193-.L17
	.half	1
	.byte	111
	.word	0,0
.L197:
	.word	0,0
.L194:
	.word	-1,.L17,0,.L202-.L17
	.half	1
	.byte	84
	.word	.L19-.L17,.L117-.L17
	.half	1
	.byte	84
	.word	.L5-.L17,.L112-.L17
	.half	1
	.byte	84
	.word	.L195-.L17,.L193-.L17
	.half	1
	.byte	84
	.word	0,0
.L196:
	.word	0,0
.L199:
	.word	-1,.L17,.L280-.L17,.L117-.L17
	.half	2
	.byte	144,32
	.word	.L5-.L17,.L112-.L17
	.half	2
	.byte	144,32
	.word	.L195-.L17,.L193-.L17
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_loc'
.L20:
	.word	-1,.L21,0,.L204-.L21
	.half	2
	.byte	138,0
	.word	0,0
.L213:
	.word	-1,.L21,.L281-.L21,.L206-.L21
	.half	1
	.byte	95
	.word	.L5-.L21,.L266-.L21
	.half	1
	.byte	95
	.word	0,0
.L211:
	.word	-1,.L21,.L19-.L21,.L117-.L21
	.half	1
	.byte	111
	.word	.L5-.L21,.L112-.L21
	.half	1
	.byte	111
	.word	.L282-.L21,.L204-.L21
	.half	1
	.byte	111
	.word	0,0
.L208:
	.word	0,0
.L205:
	.word	-1,.L21,.L19-.L21,.L117-.L21
	.half	1
	.byte	84
	.word	.L5-.L21,.L112-.L21
	.half	1
	.byte	84
	.word	0,.L204-.L21
	.half	1
	.byte	84
	.word	0,0
.L207:
	.word	0,0
.L209:
	.word	-1,.L21,.L280-.L21,.L117-.L21
	.half	2
	.byte	144,32
	.word	.L5-.L21,.L112-.L21
	.half	2
	.byte	144,32
	.word	.L212-.L21,.L204-.L21
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_loc'
.L22:
	.word	-1,.L23,0,.L214-.L23
	.half	2
	.byte	138,0
	.word	0,0
.L223:
	.word	-1,.L23,.L283-.L23,.L216-.L23
	.half	1
	.byte	95
	.word	.L5-.L23,.L266-.L23
	.half	1
	.byte	95
	.word	0,0
.L221:
	.word	-1,.L23,.L19-.L23,.L117-.L23
	.half	1
	.byte	111
	.word	.L5-.L23,.L112-.L23
	.half	1
	.byte	111
	.word	.L284-.L23,.L214-.L23
	.half	1
	.byte	111
	.word	0,0
.L218:
	.word	0,0
.L215:
	.word	-1,.L23,.L19-.L23,.L117-.L23
	.half	1
	.byte	84
	.word	.L5-.L23,.L112-.L23
	.half	1
	.byte	84
	.word	0,.L214-.L23
	.half	1
	.byte	84
	.word	0,0
.L217:
	.word	0,0
.L219:
	.word	-1,.L23,.L280-.L23,.L117-.L23
	.half	2
	.byte	144,32
	.word	.L5-.L23,.L112-.L23
	.half	2
	.byte	144,32
	.word	.L222-.L23,.L214-.L23
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_loc'
.L24:
	.word	-1,.L25,0,.L224-.L25
	.half	2
	.byte	138,0
	.word	0,0
.L233:
	.word	-1,.L25,.L285-.L25,.L226-.L25
	.half	1
	.byte	95
	.word	.L5-.L25,.L266-.L25
	.half	1
	.byte	95
	.word	0,0
.L231:
	.word	-1,.L25,.L19-.L25,.L117-.L25
	.half	1
	.byte	111
	.word	.L5-.L25,.L112-.L25
	.half	1
	.byte	111
	.word	.L286-.L25,.L224-.L25
	.half	1
	.byte	111
	.word	0,0
.L228:
	.word	0,0
.L225:
	.word	-1,.L25,.L19-.L25,.L117-.L25
	.half	1
	.byte	84
	.word	.L5-.L25,.L112-.L25
	.half	1
	.byte	84
	.word	0,.L224-.L25
	.half	1
	.byte	84
	.word	0,0
.L227:
	.word	0,0
.L229:
	.word	-1,.L25,.L280-.L25,.L117-.L25
	.half	2
	.byte	144,32
	.word	.L5-.L25,.L112-.L25
	.half	2
	.byte	144,32
	.word	.L232-.L25,.L224-.L25
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_loc'
.L26:
	.word	-1,.L27,0,.L234-.L27
	.half	2
	.byte	138,0
	.word	0,0
.L243:
	.word	-1,.L27,.L287-.L27,.L236-.L27
	.half	1
	.byte	95
	.word	.L5-.L27,.L266-.L27
	.half	1
	.byte	95
	.word	0,0
.L241:
	.word	-1,.L27,.L19-.L27,.L117-.L27
	.half	1
	.byte	111
	.word	.L5-.L27,.L112-.L27
	.half	1
	.byte	111
	.word	.L288-.L27,.L234-.L27
	.half	1
	.byte	111
	.word	0,0
.L238:
	.word	0,0
.L235:
	.word	-1,.L27,.L19-.L27,.L117-.L27
	.half	1
	.byte	84
	.word	.L5-.L27,.L112-.L27
	.half	1
	.byte	84
	.word	0,.L234-.L27
	.half	1
	.byte	84
	.word	0,0
.L237:
	.word	0,0
.L239:
	.word	-1,.L27,.L280-.L27,.L117-.L27
	.half	2
	.byte	144,32
	.word	.L5-.L27,.L112-.L27
	.half	2
	.byte	144,32
	.word	.L242-.L27,.L234-.L27
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_loc'
.L28:
	.word	-1,.L29,0,.L244-.L29
	.half	2
	.byte	138,0
	.word	0,0
.L253:
	.word	-1,.L29,.L289-.L29,.L246-.L29
	.half	1
	.byte	95
	.word	.L5-.L29,.L266-.L29
	.half	1
	.byte	95
	.word	0,0
.L251:
	.word	-1,.L29,.L19-.L29,.L117-.L29
	.half	1
	.byte	111
	.word	.L5-.L29,.L112-.L29
	.half	1
	.byte	111
	.word	.L290-.L29,.L244-.L29
	.half	1
	.byte	111
	.word	0,0
.L248:
	.word	0,0
.L245:
	.word	-1,.L29,.L19-.L29,.L117-.L29
	.half	1
	.byte	84
	.word	.L5-.L29,.L112-.L29
	.half	1
	.byte	84
	.word	0,.L244-.L29
	.half	1
	.byte	84
	.word	0,0
.L247:
	.word	0,0
.L249:
	.word	-1,.L29,.L280-.L29,.L117-.L29
	.half	2
	.byte	144,32
	.word	.L5-.L29,.L112-.L29
	.half	2
	.byte	144,32
	.word	.L252-.L29,.L244-.L29
	.half	2
	.byte	144,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_loc'
.L32:
	.word	-1,.L33,0,.L264-.L33
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L406:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L3,.L120-.L3
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L7,.L143-.L7
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L9,.L153-.L9
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L11,.L163-.L11
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L13,.L173-.L13
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L15,.L183-.L15
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L17,.L193-.L17
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L21,.L204-.L21
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L23,.L214-.L23
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L25,.L224-.L25
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L27,.L234-.L27
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L29,.L244-.L29
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L31,.L254-.L31
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_frame'
	.word	24
	.word	.L406,.L33,.L264-.L33
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L407:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L407,.L5,.L112-.L5
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L407,.L19,.L117-.L19
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   232  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   233  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   234  #if IFXCPU_NUM_MODULES >= 2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   235  #if defined(__GNUC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   236  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   237  #pragma section ".traptab_cpu1" awx
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   238  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   239  #if defined(__DCC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   240  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   241  #pragma section CODE ".traptab_cpu1" X
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   242  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   243  #if defined(__TASKING__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   244  #pragma section code "traptab_cpu1"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   245  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   246  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   247  void IfxCpu_Trap_vectorTable1(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   248  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   249      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   250      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   251      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   252      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   253      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   254      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   255      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   256      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   257  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   258  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   259  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   260  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   261  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   262  #if IFXCPU_NUM_MODULES >= 3
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   263  #if defined(__GNUC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   264  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   265  #pragma section ".traptab_cpu2" awx
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   266  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   267  #if defined(__DCC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   268  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   269  #pragma section CODE ".traptab_cpu2" X
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   270  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   271  #if defined(__TASKING__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   272  #pragma section code "traptab_cpu2"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   273  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   274  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   275  void IfxCpu_Trap_vectorTable2(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   276  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   277      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   278      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   279      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   280      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   281      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   282      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   283      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   284      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   285  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   286  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   287  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   288  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   289  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   290  #if IFXCPU_NUM_MODULES >= 4
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   291  #if defined(__GNUC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   292  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   293  #pragma section ".traptab_cpu3" awx
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   294  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   295  #if defined(__DCC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   296  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   297  #pragma section CODE ".traptab_cpu3" X
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   298  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   299  #if defined(__TASKING__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   300  #pragma section code "traptab_cpu3"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   301  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   302  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   303  void IfxCpu_Trap_vectorTable3(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   304  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   305      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   306      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   307      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   308      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   309      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   310      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   311      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu3);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   312      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   313  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   314  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   315  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   316  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   317  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   318  #if IFXCPU_NUM_MODULES >= 5
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   319  #if defined(__GNUC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   320  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   321  #pragma section ".traptab_cpu4" awx
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   322  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   323  #if defined(__DCC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   324  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   325  #pragma section CODE ".traptab_cpu4" X
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   326  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   327  #if defined(__TASKING__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   328  #pragma section code "traptab_cpu4"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   329  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   330  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   331  void IfxCpu_Trap_vectorTable4(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   332  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   333      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   334      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   335      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   336      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   337      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   338      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   339      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu4);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   340      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   341  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   342  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   343  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   344  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   345  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   346  #if IFXCPU_NUM_MODULES >= 6
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   347  #if defined(__GNUC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   348  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   349  #pragma section ".traptab_cpu5" awx
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   350  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   351  #if defined(__DCC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   352  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   353  #pragma section CODE ".traptab_cpu5" X
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   354  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   355  #if defined(__TASKING__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   356  #pragma section code "traptab_cpu5"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   357  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   358  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   359  void IfxCpu_Trap_vectorTable5(void)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   360  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   361      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   362      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   363      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   364      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   365      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   366      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   367      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu5);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   368      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   369  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   370  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   371  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   372  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   373  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   374  #if defined(__GNUC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   375  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   376  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   377  #if defined(__DCC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   378  #pragma section
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   379  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   380  #if defined(__DCC__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   381  #pragma interrupt IfxInterruptEx
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   382  #endif
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   383  #if defined(__TASKING__)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   384  #pragma endprotect
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Cpu\Trap\IfxCpu_Trap.c	   385  #endif

	; Module end
