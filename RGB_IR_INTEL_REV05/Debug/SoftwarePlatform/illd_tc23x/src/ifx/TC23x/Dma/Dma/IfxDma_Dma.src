	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 07918494"
	.compiler_invocation	"ctc -f cc18476a --dep-file=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\.IfxDma_Dma.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc23x -D__CPU_TC23X__ --core=tc1.6.x --fp-model=+float -DNDEBUG -D__SWPLATFORM__ -DIFX_CFG_USE_COMPILER_DEFAULT_LINKER -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05 -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\APP\\inc -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Configuration -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Scu/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/Stm/Std/InitApi -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/TC23x/_Reg -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_tc23x/src/ifx/SrvSw -ID:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05/SoftwarePlatform/illd_common/ifx_cfg/include -g2 --no-warnings=542 --make-target=SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.src ..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c"
	.compiler_name		"ctc"
	;source	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c'

	
$TC16X
	.sdecl	'.zrodata.IfxDma..5.cnt',data,rom
	.sect	'.zrodata.IfxDma..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268204800
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_configureTransactionSet',code,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_configureTransactionSet'
	.align	2
	

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	     1  /**
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	     2   * \file IfxDma_Dma.c
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	     3   * \brief DMA DMA details
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	     4   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	     5   * \version iLLD_1_0_0_11_0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	     7   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	     8   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	     9   *                                 IMPORTANT NOTICE
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    10   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    11   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    15   * products.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    16   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    22   *
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    23   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    24  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    25  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    26  /*----------------------------------Includes----------------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    27  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    28  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    29  #include "IfxDma_Dma.h"
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    30  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    31  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    32  /*-----------------------Private Function Prototypes--------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    33  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    34  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    35  /** \brief local function to copy a transaction set into DMA channel SFRs or memory location (for linked lists)
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    36   * \param channel Specifies the pointer to DMA channel registers
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    37   * \param config pointer to the DMA default channel configuration structure
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    38   * \return None
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    39   */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    40  static void IfxDma_Dma_configureTransactionSet(Ifx_DMA_CH *channel, const IfxDma_Dma_ChannelConfig *config);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    41  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    42  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    43  /*-------------------------Function Implementations---------------------------*/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    44  /******************************************************************************/
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    45  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    46  static void IfxDma_Dma_configureTransactionSet(Ifx_DMA_CH *channel, const IfxDma_Dma_ChannelConfig *config)
; Function IfxDma_Dma_configureTransactionSet
.L10:
IfxDma_Dma_configureTransactionSet:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    47  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    48      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    49          Ifx_DMA_CH_CHCFGR chcfgr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    50          chcfgr.U          = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    51          chcfgr.B.TREL     = config->transferCount;
	mov	d15,#0
	ld.hu	d0,[a5]26
.L143:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    52          chcfgr.B.BLKM     = config->blockMode;
	insert	d15,d15,d0,#0,#14
	ld.bu	d0,[a5]28
.L210:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    53          chcfgr.B.RROAT    = config->requestMode;
	insert	d15,d15,d0,#16,#3
	ld.bu	d0,[a5]29
.L211:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    54          chcfgr.B.CHMODE   = config->operationMode;
	insert	d15,d15,d0,#19,#1
	ld.bu	d0,[a5]30
.L212:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    55          chcfgr.B.CHDW     = config->moveSize;
	insert	d15,d15,d0,#20,#1
	ld.bu	d0,[a5]31
.L213:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    56          chcfgr.B.PRSEL    = config->requestSource;
	insert	d15,d15,d0,#21,#3
	ld.bu	d0,[a5]33
.L214:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    57          chcfgr.B.PATSEL   = config->pattern;
	insert	d15,d15,d0,#28,#1
	ld.bu	d0,[a5]32
.L215:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    58  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    59          channel->CHCFGR.U = chcfgr.U;
	insert	d15,d15,d0,#24,#3
	st.w	[a4]20,d15
.L137:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    60      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    61  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    62      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    63          Ifx_DMA_CH_ADICR adicr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    64          adicr.U       = 0;
	mov	d15,#0
.L144:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    65          adicr.B.SMF   = config->sourceAddressIncrementStep;
	ld.bu	d0,[a5]36
.L216:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    66          adicr.B.INCS  = config->sourceAddressIncrementDirection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    67          adicr.B.CBLS  = config->sourceAddressCircularRange;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    68          adicr.B.SCBE  = config->sourceCircularBufferEnabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    69          adicr.B.DMF   = config->destinationAddressIncrementStep;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    70          adicr.B.INCD  = config->destinationAddressIncrementDirection;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    71          adicr.B.CBLD  = config->destinationAddressCircularRange;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    72          adicr.B.DCBE  = config->destinationCircularBufferEnabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    73          adicr.B.SHCT  = config->shadowControl;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    74          adicr.B.STAMP = config->timestampEnabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    75          adicr.B.WRPSE = config->wrapSourceInterruptEnabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    76          adicr.B.WRPDE = config->wrapDestinationInterruptEnabled;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    77          adicr.B.INTCT = (config->channelInterruptEnabled ? 2 : 0) | (config->channelInterruptControl ? 1 : 0);
	ld.bu	d1,[a5]49
.L217:
	insert	d15,d15,d0,#0,#3
	ld.bu	d0,[a5]37
.L218:
	ne	d1,d1,#0
.L219:
	insert	d15,d15,d0,#3,#1
	ld.bu	d0,[a5]38
.L220:
	insert	d15,d15,d0,#8,#4
	ld.bu	d0,[a5]43
.L221:
	insert	d15,d15,d0,#20,#1
	ld.bu	d0,[a5]39
.L222:
	insert	d15,d15,d0,#4,#3
	ld.bu	d0,[a5]40
.L223:
	insert	d15,d15,d0,#7,#1
	ld.bu	d0,[a5]41
.L224:
	insert	d15,d15,d0,#12,#4
	ld.bu	d0,[a5]44
.L225:
	insert	d15,d15,d0,#21,#1
	ld.bu	d0,[a5]42
.L226:
	insert	d15,d15,d0,#16,#4
	ld.bu	d0,[a5]45
.L227:
	insert	d15,d15,d0,#22,#1
	ld.bu	d0,[a5]46
.L228:
	insert	d15,d15,d0,#24,#1
	ld.bu	d0,[a5]47
.L229:
	insert	d15,d15,d0,#25,#1
	ld.bu	d0,[a5]48
.L230:
	ne	d0,d0,#0
	sha	d0,#1
.L231:
	or	d0,d1
.L232:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    78          adicr.B.IRDV  = config->interruptRaiseThreshold;
	insert	d15,d15,d0,#26,#2
	ld.bu	d0,[a5]50
.L233:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    79          adicr.B.ETRL  = config->transactionRequestLostInterruptEnabled;
	insert	d15,d15,d0,#28,#4
	ld.bu	d0,[a5]51
.L234:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    80          //enter also the circular buffer enable bits
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    81  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    82          channel->ADICR.U = adicr.U;
	insert	d15,d15,d0,#23,#1
	st.w	[a4]16,d15
.L140:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    83      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    84  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    85      channel->SADR.U   = config->sourceAddress;
	ld.w	d15,[a5]6
.L145:
	st.w	[a4]8,d15
.L235:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    86      channel->DADR.U   = config->destinationAddress;
	ld.w	d15,[a5]10
.L236:
	st.w	[a4]12,d15
.L237:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    87      channel->SDCRCR.U = config->sourceDestinationAddressCrc;
	ld.w	d15,[a5]22
.L238:
	st.w	[a4]4,d15
.L239:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    88      channel->RDCRCR.U = config->readDataCrc;
	ld.w	d15,[a5]18
.L240:
	st.w	[a4],d15
.L241:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    89  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    90      // write not allowed if SHCT=1 or SHCT=2
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    91      if ((config->shadowControl != IfxDma_ChannelShadow_none) &&
	ld.bu	d15,[a5]42
.L242:
	jeq	d15,#0,.L2
.L243:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    92          (config->shadowControl != IfxDma_ChannelShadow_src) &&
	jeq	d15,#1,.L3
.L244:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    93          (config->shadowControl != IfxDma_ChannelShadow_dst))
	jeq	d15,#2,.L4
.L245:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    94      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    95          channel->SHADR.U = config->shadowAddress;
	ld.w	d15,[a5]14
.L246:
	st.w	[a4]24,d15
.L4:
.L3:
.L2:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    96      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    97  }
	ret
.L133:
	
__IfxDma_Dma_configureTransactionSet_function_end:
	.size	IfxDma_Dma_configureTransactionSet,__IfxDma_Dma_configureTransactionSet_function_end-IfxDma_Dma_configureTransactionSet
.L68:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_createModuleHandle',code,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_createModuleHandle'
	.align	2
	
	.global	IfxDma_Dma_createModuleHandle

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    98  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	    99  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   100  void IfxDma_Dma_createModuleHandle(IfxDma_Dma *dmaHandle, Ifx_DMA *dma)
; Function IfxDma_Dma_createModuleHandle
.L12:
IfxDma_Dma_createModuleHandle:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   101  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   102      dmaHandle->dma = dma;
	st.a	[a4],a5
.L163:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   103  }
	ret
.L69:
	
__IfxDma_Dma_createModuleHandle_function_end:
	.size	IfxDma_Dma_createModuleHandle,__IfxDma_Dma_createModuleHandle_function_end-IfxDma_Dma_createModuleHandle
.L33:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_deInitModule',code,cluster('IfxDma_Dma_deInitModule')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_deInitModule'
	.align	2
	
	.global	IfxDma_Dma_deInitModule

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   104  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   105  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   106  void IfxDma_Dma_deInitModule(IfxDma_Dma *dma)
; Function IfxDma_Dma_deInitModule
.L14:
IfxDma_Dma_deInitModule:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   107  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   108      //TODO
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   109  }
	ret
.L74:
	
__IfxDma_Dma_deInitModule_function_end:
	.size	IfxDma_Dma_deInitModule,__IfxDma_Dma_deInitModule_function_end-IfxDma_Dma_deInitModule
.L38:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initChannel',code,cluster('IfxDma_Dma_initChannel')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initChannel'
	.align	2
	
	.global	IfxDma_Dma_initChannel

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   110  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   111  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   112  void IfxDma_Dma_initChannel(IfxDma_Dma_Channel *channel, const IfxDma_Dma_ChannelConfig *config)
; Function IfxDma_Dma_initChannel
.L16:
IfxDma_Dma_initChannel:	.type	func
	mov.aa	a13,a5
.L147:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   113  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   114      Ifx_DMA *dma = config->module->dma;
	ld.a	a2,[a13]
.L183:
	mov.aa	a15,a4
.L148:
	ld.a	a12,[a2]
.L149:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   115  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   116      channel->dma       = dma;
	st.a	[a15],a12
.L184:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   117      channel->channelId = config->channelId;
	ld.bu	d15,[a13]4
.L185:
	st.b	[a15]4,d15
.L186:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   118      channel->channel   = &dma->CH[config->channelId];
	ld.b	d15,[a13]4
	sha	d15,#5
.L187:
	addsc.a	a2,a12,d15,#0
	lea	a4,[a2]8192
.L146:
	st.a	[a15]8,a4
.L188:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   119  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   120      IfxDma_Dma_configureTransactionSet(channel->channel, config);
	call	IfxDma_Dma_configureTransactionSet
.L90:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   121  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   122      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   123          Ifx_DMA_TSR tsr;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   124          tsr.U = 0;
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   125  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   126          if (config->hardwareRequestEnabled)
	ld.bu	d15,[a13]35
.L189:
	mov	d0,#0
.L150:
	jeq	d15,#0,.L5
.L190:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   127          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   128              tsr.B.ECH = 1;
	insert	d0,d0,#1,#16,#1
	j	.L6
.L5:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   129          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   130          else
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   131          {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   132              tsr.B.DCH = 1;
	insert	d0,d0,#1,#17,#1
.L6:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   133          }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   134  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   135          dma->TSR[channel->channelId].U = tsr.U;
	ld.b	d15,[a15]4
.L191:
	addsc.a	a2,a12,d15,#2
.L192:
	st.w	[a2]7680,d0
.L91:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   136      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   137  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   138      if (config->channelInterruptPriority > 0)
	ld.hu	d0,[a13]52
.L151:
	jeq	d0,#0,.L7
.L94:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    24   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    25   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    26   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    27   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    28   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    29   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    30   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    31   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    32   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    33   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    34   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    35   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    36   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    37   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    38   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    39   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    40   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    41  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    42  #ifndef IFXDMA_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    43  #define IFXDMA_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    44  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    45  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    46  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    47  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    48  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    49  #include "_Impl/IfxDma_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    50  #include "IfxDma_bf.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    51  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    52  #include "IfxDma_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    53  #include "Src/Std/IfxSrc.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    54  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    55  #include "Scu/Std/IfxScuCcu.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    58  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    61  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    62   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    63  /** \brief Bus Master Mode definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    64   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    65   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    66  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    67  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    68      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    69      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    70  } IfxDma_BusMasterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    71  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    72  /** \brief Channel Bus Priority definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    73   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    74  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    75  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    76      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    77      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    78      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    79  } IfxDma_ChannelBusPriority;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    80  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    81  /** \brief DMA circular buffer (wrap around) definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    82   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    84  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    85  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    86      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    87      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    88      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    89      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    90      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    91      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    92      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    93      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    94      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    95      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    96      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    97      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    98      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    99      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   100      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   101      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   102  } IfxDma_ChannelIncrementCircular;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   103  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   104  /** \brief DMA incrementation direction definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   105   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   106   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   107  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   108  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   111  } IfxDma_ChannelIncrementDirection;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   112  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   113  /** \brief DMA incrementation definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   114   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   115   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   116  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   117  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   122      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   123      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   124      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   125      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   126  } IfxDma_ChannelIncrementStep;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   127  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   128  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   129   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   130   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   131  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   132  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   133      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   134      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   135  } IfxDma_ChannelInterruptControl;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   136  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   137  /** \brief DMA transfer definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   138   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   139   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   140  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   141  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   142      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   143      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   144      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   145      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   146      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   147      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   148      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   149      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   150  } IfxDma_ChannelMove;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   151  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   152  /** \brief DMA move size definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   153   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   154   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   155  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   156  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   157      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   158      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   163  } IfxDma_ChannelMoveSize;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   164  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   165  /** \brief DMA operation mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   166   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   167   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   168  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   169  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   170      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   171      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   172  } IfxDma_ChannelOperationMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   173  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   174  /** \brief Pattern detection selection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   175   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   176   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   177  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   178  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   179      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   180      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   181      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   182      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   183      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   184      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   185      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   186      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   187  } IfxDma_ChannelPattern;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   188  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   189  /** \brief Channel Priority definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   190   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   191  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   192  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   193      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   194      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   195      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   196  } IfxDma_ChannelPriority;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   197  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   198  /** \brief DMA request mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   199   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   200   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   201  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   202  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   203      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   204      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   205  } IfxDma_ChannelRequestMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   206  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   207  /** \brief DMA request selection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   208   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   209   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   210  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   211  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   212      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   213      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   214  } IfxDma_ChannelRequestSource;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   215  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   216  /** \brief shadow definition definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   217   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   218   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   219  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   220  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   221      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   222      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   223      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   224      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   225      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   226      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   227      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   228      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   229      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   230      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   231      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   232      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   233      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelShadow;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   235  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   236  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   237  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   238      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   239      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   240      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   241      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   242  } IfxDma_HardwareResourcePartition;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   244  /** \brief DMA move engine definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   245   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   246  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   247  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   248      IfxDma_MoveEngine_0 = 0  /**< \brief first move engine */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   249  } IfxDma_MoveEngine;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   250  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   251  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   252   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   253   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   254  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   255  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   256      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   257      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   258  } IfxDma_SleepMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   260  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   261  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   262  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   263   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   264  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   265  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   266  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   267  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   268  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   269  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   270   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   271   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   272   * \return TRUE if the channel is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   273   * FALSE if the channel is not reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   274   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   275   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   276   *     // check whether the channel is reset or not and also the hardware trigger disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   277   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   278   *     if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   279   *         (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   280   *         // Dma is out of RESET and there is no hardware request enabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   281   *         IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   282   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   283   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   284   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   285   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   286  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   287  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   288  /** \brief Reset the channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   291   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   292   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   293   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   294   *     // Apply reset to the channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   295   *     IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   296   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   297   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   298   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   299  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   300  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   301  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   302  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   303  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   304   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   305  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   306  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   308  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   309  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   310  /** \brief Clear the channel transaction request lost flag status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   313   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   314   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   315   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   316   *     // Clear the channel transaction request lost flag status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   317   *     IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   318   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   319   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   323  /** \brief Disable a DMA channel hardware transaction request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   324   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   325   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   326   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   327   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   328   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   329   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   330   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   331  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   332  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   333  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   334   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   335   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   337   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   338   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   339   *     // Disable the transaction request lost interrupt for given channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   340   *     IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   341   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   342   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   343   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   344  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   345  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   346  /** \brief Enable a DMA channel hardware transaction request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   347   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   348   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   349   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   350   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   351   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   352   *     unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   353   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   354   *         IfxSrc_setRequest(src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   355   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   356   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   357   *     // Do not restrict the hardware triggering to only one transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   358   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   359   *     IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   360   *     IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   361   *     IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   362   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   363   *     // Check for end of transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   364   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   365   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   366   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   367   *     // Enable the hardware trigger for channel 3
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   368   *     IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   370   *     // Disable the hardware trigger for channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   371   *     IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   372   *     // Hardware triggers for second time
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   373   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   374   *     unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   375   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   376   *         IfxSrc_setRequest(src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   377   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   378   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   379   *     // Restrict the hardware triggering to only one transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   380   *     IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   381   *     IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   382   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   383   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   384   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   385  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   386  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   387  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   388   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   389   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   390   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   391   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   392   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   393   *     // Enable the transaction request lost interrupt for given channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   394   *     IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   395   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   396   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   397   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   398  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   399  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   400  /** \brief Check the channel transaction request lost flag status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   401   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   402   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   403   * \return TRUE if the TRL is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   404   * FALSE if the TRL is not set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   405   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   406   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   407   *     boolean trlFlag;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   408   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   409   *     // Check whether the channel transaction request lost flag is set or not
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   410   *     trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   411   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   412   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   413   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   414  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   415  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   416  /** \brief Converts DMA circular range to circular code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   417   * \param range DMA circular range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   418   * \return DMA circular code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   419   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   420  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   421  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   422  /** \brief Return the hardware transaction request status of a DMA channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   425   * \return TRUE if the hardware transaction request is enabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   426   * FALSE if the hardware transaction request is disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   427   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   428   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   429   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   430   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   431  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   432  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   433  /** \brief Return the status of a DMA channel (transaction pending)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   434   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   435   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   436   * \return TRUE if a transaction request for the given channel is pending
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   437   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   438   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   439   *     // check for the channel request pending with the channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   440   *     if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   441   *         // There is channel request pending for channel 0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   442   *         result |= 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   443   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   444   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   445   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   446   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   447  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   448  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   449  /** \brief Sets the sensitivity of the module to sleep signal
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   450   * \param dma pointer to DMA registers
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   451   * \param mode mode selection (enable/disable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   452   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   453   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   454  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   455  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   456  /** \brief Request a DMA channel transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   457   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   458   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   459   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   460   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   461   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   462   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   463   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   464  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   465  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   466  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   468  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   469   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   470  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   471  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   472  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   474  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   475  /** \brief Clear the DMA error status flags
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   477   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   478   * \param mask value holds the bits to clear or mask
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   479   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   480   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   481   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   482   *     // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   483   *     IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   484   *                           IFXDMA_ERROR_S |    // move engine source error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   485   *                           IFXDMA_ERROR_D |    // move engine destination error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   486   *                           IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   487   *                           IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   488   *                           IFXDMA_ERROR_RAM |  // RAM error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   489   *                           IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   490   *                           IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   491   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   492   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   493   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   494  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   495  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   496  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   497   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   498   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   501   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   502   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   503   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   504  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   505  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   506  /** \brief Disable the generation of a Move engine source error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   507   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   508   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   509   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   510   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   511   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   512   *     // Disable the move engine source and destination move errors
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   513   *     IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   514   *     IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   515   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   516   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   517   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   518  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   519  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   520  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   521   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   522   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   523   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   524   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   525   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   526   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   527   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   528  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   529  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   530  /** \brief Enable the generation of a Move engine source error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   531   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   532   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   533   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   534   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   535   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   536   *     // Enable the move engine source and destination move errors
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   537   *     IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   538   *     IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   539   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   540   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   541   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   542  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   543  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   544  /** \brief Return the DMA error status flags
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   545   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   546   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   547   * \return the content of the DMA.ERRSR register
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   548   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   549   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   550   *     uint32 errorFlags = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   551   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   552   *     // Get the status of the error flags of move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   553   *     errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   554   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   555   *     if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   556   *         }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   557   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   558   *     if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   559   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   560   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   561   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   562   *     if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   563   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   564   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   565   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   566   *     if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   567   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   568   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   569   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   570   *     if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   571   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   572   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   573   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   574   *     if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   575   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   576   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   577   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   578   *     if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   579   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   580   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   581   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   582   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   583   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   584  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   586  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   587  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   588  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   589   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   590  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   591  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   592  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   593  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   594  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   595  /** \brief Get a channel source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   596   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   597   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   598   * \return Actual channel destination address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   599   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   600   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   601   *     uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   602   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   603   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   604   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   605   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   607  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   608  /** \brief Get a channel source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   609   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   610   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   611   * \return Actual channel source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   612   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   613   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   614   *     uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   615   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   616   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   617   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   618  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   619  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   620  /** \brief Return remaining DMA transfer count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   621   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   622   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   623   * \return Remaining DMA transfer count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   624   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   625   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   626   *     // Wait till transfer count (TCOUNT) becomes 0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   627   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   628   *     bool notFinished;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   629   *     do {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   630   *         notFinished = false;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   631   *             if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   632   *                 notFinished = true;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   633   *                 break;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   634   *             }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   635   *     } while( notFinished );
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   636   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   637   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   638   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   639  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   640  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   641  /** \brief get the time stamp
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   642   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   643   * \return the current time stamp
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   644   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   645   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   646   *     uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   647   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   648   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   649   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   650  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   651  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   652  /** \brief Configure the move count for each DMA channel transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   653   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   654   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   655   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   656   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   657   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   658   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   659   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   660   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   661  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   662  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   663  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   664   * After a transaction, the hardware request transaction remain enabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   665   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   666   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   667   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   668   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   669   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   670   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   671   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   672  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   674  /** \brief Configure the destination address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   675   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   676   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   677   * \param address is the Initial address of the destination pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   678   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   679   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   680   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   681   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   682   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   683  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   684  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   685  /** \brief Configure a DMA channel destination pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   686   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   687   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   688   * \param incStep Specifies the pointer incrementation step
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   689   * \param direction Specifies the incrementation direction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   690   * \param size Specifies the size of the circular buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   691   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   692   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   693   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   694   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   695   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   696  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   697  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   698  /** \brief Configure a DMA channel move
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   699   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   700   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   701   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   702   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   703   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   704   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   705   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   706   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   707  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   708  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   709  /** \brief Configure a DMA channel shadow pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   710   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   711   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   712   * \param shadow Specifies the shadow pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   713   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   714   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   715   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   716   *     // Push the shadow mode into double buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   717   *     IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   718   *     IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   719   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   720   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   721   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   723  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel to "single transaction mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   725   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   726   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   727   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   728   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   729   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   731   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   732   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   734  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel to "single transaction mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   736   * One transfer request starts a complete DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   737   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   738   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   739   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   740   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   741   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   742   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   743   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   744  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   745  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   746  /** \brief Configure a DMA channel to "single transfer mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   747   * A transfer request is required for each transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   748   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   749   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   750   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   751   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   752   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   753   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   754   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   755  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   756  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   757  /** \brief Configure the source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   758   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   759   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   760   * \param address is the Initial address of the source pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   761   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   762   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   763   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   764   *     // Check for the end of current transaction and before trigger the channel request for
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   765   *     // for another channel, re configure the source and destination addresses
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   766   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   767   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   768   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   769   *     // Re-Program the source address for the channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   770   *     IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   771   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   772   *     // Re-Program the destination address for channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   773   *     IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   774   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   775   *     // Start DMA transaction for channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   776   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   777   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   778   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   779   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   780  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   781  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   782  /** \brief Configure a DMA channel source pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   783   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   784   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   785   * \param incStep Specifies the pointer incrementation step
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   786   * \param direction Specifies the incrementation direction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   787   * \param size Specifies the size of the circular buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   788   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   789   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   790   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   791   *     // Re-program the source and destination circular buffer control fields
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   792   *     IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   793   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   794   *     IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   795   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   796   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   797   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   798  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   799  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   800  /** \brief Configure the move count of a DMA channel transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   801   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   802   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   803   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   804   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   805   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   806   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   807   *     // Start DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   808   *     IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   809   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   810   *     // Wait till end of transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   811   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   812   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   813   *     // Change the TREL configuration for channel 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   814   *     IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   815   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   816   *     // Change the BLKM configuration for channel 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   817   *     IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   818   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   819   *     // Change the Move size configuration for channel 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   820   *     IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   821   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   822   *     // Pull down the channel pending request after the first transfer is initiated
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   823   *     IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   824   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   825   *     // Pull down the channel pending request after the transaction gets over
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   826   *     IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   827   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   828   *     // Start DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   829   *     IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   830   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   831   *     // Start DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   832   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   833   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   834   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   835   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   836  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   837  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   838  /** \brief Configure the shadow pointer register to read only
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   839   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   840   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   841   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   842   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   843   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   844   *     // Disable the shadow mode to come out of double buffer mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   845   *     IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   846   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   847   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   848   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   849  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   850  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   851  /** \brief Configure the shadow pointer register to write-able
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   852   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   853   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   854   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   855   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   856   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   857   *     // Enable the shadow mode to come out of double buffer mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   858   *     IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   859   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   860   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   861   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   862  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   863  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   864  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   865  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   866  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   867   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   868  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   869  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   870  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   871  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   872  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   873  /** \brief Clear channel halt request and aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   874   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   875   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   876   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   877   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   878   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   879   *     // Quit the halt mode of operation
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   880   *     IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   881   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   882   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   883   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   884  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   885  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   886  /** \brief Get channel halt aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   887   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   888   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   889   * \return halt aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   890   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   891   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   892   *     // Check for the channel halt aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   893   *     while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   894   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   895   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   896   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   897  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   898  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   899  /** \brief setting channel halt request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   900   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   901   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   902   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   903   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   904   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   905   *     // Halt the channel processing
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   906   *     IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   907   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   908   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   909   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   910  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   911  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   912  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   913  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   914  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   915   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   916  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   917  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   918  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   919  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   920  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   921  /** \brief get information on buffer being read by software and clear the notification flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   922   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   923   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   924   * \return TRUE  if one of the buffers is being read by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   925   * FALSE if one of the buffers is already read by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   926   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   927   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   928   *     // Check the buffer being read (Double buffer operation mode)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   929   *     while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   930   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   931   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   932   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   933  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   934  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   935  /** \brief get Double buffer selection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   936   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   937   * \param channelId channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   938   * \return TRUE if buffer 1 is being filled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   939   * FALSE if buffer 0 is being filled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   940   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   941   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   942   *     boolean buffer_being_filled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   943   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   944   *     // Check the buffer being filled (Double buffer operation mode)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   945   *     buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   946   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   947   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   948   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   949  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   950  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   951  /** \brief keeps the double buffer active
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   952   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   953   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   954   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   955   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   956   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   957   *     IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   958   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   959   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   960   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   961  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   962  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   963  /** \brief Double buffer switch application
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   964   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   965   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   966   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   967   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   968   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   969   *     // Apply software buffer switch
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   970   *     IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   971   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   972   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   973   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   974  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   975  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   976  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   977  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   978  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   979   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   980  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   981  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   982  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   983  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   984  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   985  /** \brief Clear a channel transfer interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   987   * \param channelId channel for which the interrupt flag should be cleared
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   988   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   989   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   990   * see Dma.INTSR
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   991   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   992   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   993  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   994  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   995  /** \brief Disable channel interrupt trigger
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   996   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   997   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   998   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   999   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1000   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1001   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1002   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1003   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1004   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1005  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1006  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1007  /** \brief Enable channel interrupt trigger
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1008   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1009   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1010   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1011   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1012   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1013   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1014   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1015   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1016   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1017  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1018  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1019  /** \brief Return and clear a channel transfer interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1020   * The flag is automatically cleared with the call to this function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1021   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1022   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1023   * \return TRUE if the interrupt flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1024   * FALSE if the interrupt flag is not set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1025   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1026   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1027   *     // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1028   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1029   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1030   *     // Wait till end of the transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1031   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1032   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1033   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1034   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1035  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1036  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1037  /** \brief Returns and clears the pattern detection interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1038   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1039   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1040   * \return TRUE  if pattern detection for a given channel is found
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1041   * FALSE if pattern detection for a given channel is not found
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1042   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1043   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1044   *     // wait till pattern match is found for given channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1045   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1046   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1047   *     // Wait for the pattern detection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1048   *     while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1049   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1050   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1051   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1052  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1053  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1054  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1057   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1058   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1059   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1060   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1061   *     // wait for the destination buffer wrap interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1062   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1063   *     boolean destinationWrapFlag;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1064   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1065   *     destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1067   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1068   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1070  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1074   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1075   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1076   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1077   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1078   *     // wait for the source buffer wrap interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1079   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1080   *     boolean sourceWrapFlag;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1081   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1082   *     sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1084   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1085   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1087  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1088  /** \brief Return a channel transfer interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1090   * \param channelId channel for which the interrupt flag should be returned
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1091   * \return TRUE if the interrupt flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1092   * FALSE if the interrupt flag is not set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1093   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1094   * see Dma.INTSR
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1095   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1096   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1097  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1098  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1099  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1100   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1101   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1102   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1103   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1104   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1105   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1106   *     boolean patternDetectOldVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1107   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1108   *     // Check the old value of the pattern detection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1109   *     patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1110   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1111   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1112   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1113  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1114  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1115  /** \brief Returns the SRC pointer for given DMA channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1116   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1117   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1118   * \return SRC pointer for given DMA channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1119   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1120   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1121   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1122   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1123   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1124   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1125  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1126  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1127  /** \brief Setting of channel interrupt service request by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1128   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1129   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1130   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1131   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1132   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1133   *     // Set the channel interrupt service request through software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1134   *     IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1135   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1136   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1137   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1138  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1140  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1141  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1142  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1143  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1144  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1145  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1146  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1147  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1148      dma->TSR[channelId].B.HLTCLR = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1149  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1150  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1151  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1152  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1153  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1154      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1155  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1156  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1158  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1159  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1160      dma->TSR[channelId].B.CTL = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1161  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1162  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1163  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1164  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1165  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1166      dma->BLK0.CLRE.U = mask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1167  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1169  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1170  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1171  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1172      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1173  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1175  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1176  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1177  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1178      dma->TSR[channelId].B.DCH = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1179  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1180  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1181  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1182  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1183  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1184      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1185  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1186  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1187  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1188  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1189  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1190      dma->BLK0.EER.B.EDER = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1191  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1192  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1193  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1194  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1195  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1196      dma->BLK0.EER.B.ESER = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1197  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1199  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1200  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1201  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1202      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1203  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1205  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1206  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1207  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1208      dma->TSR[channelId].B.ECH = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1209  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1211  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1212  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1213  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1214      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1215  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1217  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1218  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1219  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1220      dma->BLK0.EER.B.EDER = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1221  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1222  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1223  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1224  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1225  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1226      dma->BLK0.EER.B.ESER = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1227  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1228  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1230  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1231  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1232      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1233  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1234      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1235  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1236      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1237      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1238          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1239      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1241      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1242  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1244  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1245  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1246  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1247      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1249      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1250  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1251      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1252      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1253          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1254      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1255  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1256      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1257  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1258  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1260  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1261  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1262      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1263  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1264      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1265  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1266      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1267      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1268          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1269      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1271      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1272  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1273  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1274  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1275  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1276  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1277      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1278  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1279      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1280  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1281      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1282      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1283          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1284      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1285  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1286      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1287  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1288  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1289  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1290  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1291  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1292      return dma->CH[channelId].DADR.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1293  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1294  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1296  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1297  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1298      return dma->TSR[channelId].B.HLTACK != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1299  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1300  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1301  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1302  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1303  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1304      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1305  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1306      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1307  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1308      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1309  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1310  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1311  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1312  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1313  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1314      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1315  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1316  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1318  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1319  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1320      return dma->CH[channelId].SADR.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1321  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1323  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1324  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1325  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1326      return dma->TSR[channelId].B.TRL != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1327  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1329  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1330  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1331  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1332      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1333  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1334  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1335  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1336  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1337  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1338      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1339  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1340  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1341  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1342  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1343  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1344      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1345  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1346      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1347  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1348      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1349      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1350          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1351      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1353      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1354  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1356  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1357  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1358  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1359      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1360  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1361  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1362  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1363  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1364  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1365      return dma->BLK0.ERRSR.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1366  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1368  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1369  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1370  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1371      // only a single DMA available, therefore no check for the dma pointer required
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1372      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	ld.w	d1,.5.cnt
.L96:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   139      {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   140          volatile Ifx_SRC_SRCR *src = IfxDma_getSrcPointer(channel->dma, channel->channelId);
	ld.b	d15,[a15]4
.L103:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    24   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    25   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    26   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    27   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    28   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    29   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    30   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    31   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    32   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    33   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    34   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    35   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    36   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    37   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    38   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    39   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    40   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    41  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    42  #ifndef IFXDMA_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    43  #define IFXDMA_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    44  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    45  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    46  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    47  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    48  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    49  #include "_Impl/IfxDma_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    50  #include "IfxDma_bf.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    51  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    52  #include "IfxDma_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    53  #include "Src/Std/IfxSrc.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    54  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    55  #include "Scu/Std/IfxScuCcu.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    58  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    61  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    62   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    63  /** \brief Bus Master Mode definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    64   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    65   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    66  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    67  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    68      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    69      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    70  } IfxDma_BusMasterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    71  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    72  /** \brief Channel Bus Priority definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    73   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    74  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    75  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    76      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    77      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    78      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    79  } IfxDma_ChannelBusPriority;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    80  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    81  /** \brief DMA circular buffer (wrap around) definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    82   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    84  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    85  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    86      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    87      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    88      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    89      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    90      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    91      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    92      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    93      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    94      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    95      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    96      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    97      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    98      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    99      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   100      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   101      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   102  } IfxDma_ChannelIncrementCircular;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   103  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   104  /** \brief DMA incrementation direction definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   105   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   106   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   107  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   108  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   111  } IfxDma_ChannelIncrementDirection;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   112  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   113  /** \brief DMA incrementation definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   114   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   115   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   116  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   117  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   122      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   123      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   124      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   125      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   126  } IfxDma_ChannelIncrementStep;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   127  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   128  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   129   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   130   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   131  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   132  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   133      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   134      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   135  } IfxDma_ChannelInterruptControl;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   136  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   137  /** \brief DMA transfer definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   138   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   139   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   140  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   141  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   142      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   143      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   144      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   145      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   146      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   147      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   148      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   149      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   150  } IfxDma_ChannelMove;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   151  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   152  /** \brief DMA move size definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   153   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   154   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   155  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   156  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   157      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   158      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   163  } IfxDma_ChannelMoveSize;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   164  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   165  /** \brief DMA operation mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   166   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   167   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   168  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   169  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   170      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   171      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   172  } IfxDma_ChannelOperationMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   173  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   174  /** \brief Pattern detection selection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   175   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   176   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   177  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   178  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   179      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   180      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   181      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   182      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   183      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   184      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   185      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   186      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   187  } IfxDma_ChannelPattern;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   188  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   189  /** \brief Channel Priority definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   190   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   191  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   192  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   193      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   194      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   195      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   196  } IfxDma_ChannelPriority;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   197  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   198  /** \brief DMA request mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   199   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   200   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   201  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   202  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   203      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   204      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   205  } IfxDma_ChannelRequestMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   206  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   207  /** \brief DMA request selection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   208   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   209   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   210  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   211  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   212      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   213      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   214  } IfxDma_ChannelRequestSource;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   215  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   216  /** \brief shadow definition definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   217   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   218   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   219  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   220  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   221      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   222      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   223      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   224      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   225      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   226      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   227      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   228      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   229      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   230      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   231      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   232      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   233      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelShadow;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   235  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   236  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   237  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   238      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   239      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   240      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   241      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   242  } IfxDma_HardwareResourcePartition;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   244  /** \brief DMA move engine definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   245   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   246  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   247  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   248      IfxDma_MoveEngine_0 = 0  /**< \brief first move engine */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   249  } IfxDma_MoveEngine;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   250  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   251  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   252   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   253   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   254  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   255  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   256      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   257      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   258  } IfxDma_SleepMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   260  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   261  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   262  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   263   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   264  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   265  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   266  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   267  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   268  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   269  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   270   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   271   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   272   * \return TRUE if the channel is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   273   * FALSE if the channel is not reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   274   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   275   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   276   *     // check whether the channel is reset or not and also the hardware trigger disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   277   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   278   *     if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   279   *         (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   280   *         // Dma is out of RESET and there is no hardware request enabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   281   *         IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   282   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   283   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   284   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   285   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   286  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   287  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   288  /** \brief Reset the channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   291   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   292   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   293   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   294   *     // Apply reset to the channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   295   *     IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   296   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   297   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   298   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   299  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   300  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   301  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   302  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   303  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   304   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   305  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   306  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   308  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   309  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   310  /** \brief Clear the channel transaction request lost flag status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   313   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   314   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   315   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   316   *     // Clear the channel transaction request lost flag status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   317   *     IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   318   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   319   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   323  /** \brief Disable a DMA channel hardware transaction request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   324   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   325   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   326   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   327   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   328   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   329   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   330   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   331  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   332  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   333  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   334   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   335   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   337   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   338   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   339   *     // Disable the transaction request lost interrupt for given channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   340   *     IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   341   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   342   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   343   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   344  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   345  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   346  /** \brief Enable a DMA channel hardware transaction request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   347   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   348   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   349   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   350   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   351   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   352   *     unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   353   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   354   *         IfxSrc_setRequest(src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   355   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   356   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   357   *     // Do not restrict the hardware triggering to only one transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   358   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   359   *     IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   360   *     IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   361   *     IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   362   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   363   *     // Check for end of transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   364   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   365   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   366   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   367   *     // Enable the hardware trigger for channel 3
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   368   *     IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   370   *     // Disable the hardware trigger for channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   371   *     IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   372   *     // Hardware triggers for second time
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   373   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   374   *     unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   375   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   376   *         IfxSrc_setRequest(src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   377   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   378   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   379   *     // Restrict the hardware triggering to only one transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   380   *     IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   381   *     IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   382   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   383   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   384   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   385  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   386  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   387  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   388   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   389   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   390   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   391   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   392   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   393   *     // Enable the transaction request lost interrupt for given channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   394   *     IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   395   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   396   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   397   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   398  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   399  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   400  /** \brief Check the channel transaction request lost flag status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   401   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   402   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   403   * \return TRUE if the TRL is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   404   * FALSE if the TRL is not set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   405   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   406   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   407   *     boolean trlFlag;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   408   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   409   *     // Check whether the channel transaction request lost flag is set or not
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   410   *     trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   411   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   412   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   413   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   414  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   415  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   416  /** \brief Converts DMA circular range to circular code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   417   * \param range DMA circular range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   418   * \return DMA circular code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   419   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   420  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   421  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   422  /** \brief Return the hardware transaction request status of a DMA channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   425   * \return TRUE if the hardware transaction request is enabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   426   * FALSE if the hardware transaction request is disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   427   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   428   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   429   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   430   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   431  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   432  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   433  /** \brief Return the status of a DMA channel (transaction pending)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   434   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   435   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   436   * \return TRUE if a transaction request for the given channel is pending
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   437   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   438   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   439   *     // check for the channel request pending with the channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   440   *     if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   441   *         // There is channel request pending for channel 0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   442   *         result |= 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   443   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   444   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   445   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   446   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   447  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   448  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   449  /** \brief Sets the sensitivity of the module to sleep signal
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   450   * \param dma pointer to DMA registers
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   451   * \param mode mode selection (enable/disable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   452   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   453   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   454  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   455  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   456  /** \brief Request a DMA channel transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   457   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   458   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   459   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   460   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   461   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   462   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   463   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   464  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   465  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   466  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   468  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   469   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   470  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   471  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   472  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   474  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   475  /** \brief Clear the DMA error status flags
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   477   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   478   * \param mask value holds the bits to clear or mask
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   479   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   480   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   481   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   482   *     // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   483   *     IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   484   *                           IFXDMA_ERROR_S |    // move engine source error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   485   *                           IFXDMA_ERROR_D |    // move engine destination error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   486   *                           IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   487   *                           IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   488   *                           IFXDMA_ERROR_RAM |  // RAM error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   489   *                           IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   490   *                           IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   491   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   492   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   493   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   494  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   495  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   496  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   497   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   498   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   501   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   502   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   503   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   504  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   505  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   506  /** \brief Disable the generation of a Move engine source error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   507   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   508   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   509   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   510   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   511   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   512   *     // Disable the move engine source and destination move errors
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   513   *     IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   514   *     IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   515   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   516   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   517   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   518  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   519  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   520  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   521   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   522   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   523   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   524   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   525   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   526   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   527   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   528  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   529  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   530  /** \brief Enable the generation of a Move engine source error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   531   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   532   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   533   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   534   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   535   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   536   *     // Enable the move engine source and destination move errors
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   537   *     IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   538   *     IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   539   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   540   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   541   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   542  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   543  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   544  /** \brief Return the DMA error status flags
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   545   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   546   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   547   * \return the content of the DMA.ERRSR register
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   548   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   549   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   550   *     uint32 errorFlags = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   551   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   552   *     // Get the status of the error flags of move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   553   *     errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   554   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   555   *     if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   556   *         }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   557   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   558   *     if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   559   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   560   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   561   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   562   *     if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   563   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   564   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   565   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   566   *     if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   567   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   568   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   569   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   570   *     if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   571   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   572   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   573   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   574   *     if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   575   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   576   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   577   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   578   *     if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   579   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   580   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   581   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   582   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   583   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   584  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   586  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   587  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   588  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   589   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   590  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   591  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   592  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   593  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   594  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   595  /** \brief Get a channel source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   596   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   597   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   598   * \return Actual channel destination address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   599   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   600   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   601   *     uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   602   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   603   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   604   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   605   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   607  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   608  /** \brief Get a channel source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   609   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   610   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   611   * \return Actual channel source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   612   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   613   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   614   *     uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   615   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   616   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   617   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   618  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   619  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   620  /** \brief Return remaining DMA transfer count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   621   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   622   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   623   * \return Remaining DMA transfer count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   624   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   625   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   626   *     // Wait till transfer count (TCOUNT) becomes 0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   627   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   628   *     bool notFinished;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   629   *     do {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   630   *         notFinished = false;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   631   *             if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   632   *                 notFinished = true;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   633   *                 break;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   634   *             }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   635   *     } while( notFinished );
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   636   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   637   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   638   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   639  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   640  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   641  /** \brief get the time stamp
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   642   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   643   * \return the current time stamp
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   644   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   645   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   646   *     uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   647   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   648   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   649   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   650  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   651  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   652  /** \brief Configure the move count for each DMA channel transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   653   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   654   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   655   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   656   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   657   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   658   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   659   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   660   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   661  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   662  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   663  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   664   * After a transaction, the hardware request transaction remain enabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   665   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   666   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   667   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   668   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   669   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   670   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   671   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   672  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   674  /** \brief Configure the destination address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   675   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   676   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   677   * \param address is the Initial address of the destination pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   678   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   679   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   680   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   681   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   682   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   683  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   684  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   685  /** \brief Configure a DMA channel destination pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   686   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   687   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   688   * \param incStep Specifies the pointer incrementation step
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   689   * \param direction Specifies the incrementation direction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   690   * \param size Specifies the size of the circular buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   691   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   692   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   693   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   694   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   695   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   696  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   697  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   698  /** \brief Configure a DMA channel move
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   699   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   700   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   701   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   702   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   703   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   704   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   705   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   706   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   707  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   708  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   709  /** \brief Configure a DMA channel shadow pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   710   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   711   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   712   * \param shadow Specifies the shadow pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   713   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   714   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   715   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   716   *     // Push the shadow mode into double buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   717   *     IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   718   *     IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   719   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   720   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   721   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   723  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel to "single transaction mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   725   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   726   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   727   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   728   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   729   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   731   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   732   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   734  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel to "single transaction mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   736   * One transfer request starts a complete DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   737   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   738   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   739   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   740   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   741   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   742   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   743   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   744  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   745  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   746  /** \brief Configure a DMA channel to "single transfer mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   747   * A transfer request is required for each transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   748   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   749   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   750   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   751   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   752   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   753   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   754   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   755  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   756  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   757  /** \brief Configure the source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   758   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   759   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   760   * \param address is the Initial address of the source pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   761   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   762   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   763   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   764   *     // Check for the end of current transaction and before trigger the channel request for
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   765   *     // for another channel, re configure the source and destination addresses
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   766   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   767   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   768   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   769   *     // Re-Program the source address for the channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   770   *     IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   771   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   772   *     // Re-Program the destination address for channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   773   *     IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   774   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   775   *     // Start DMA transaction for channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   776   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   777   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   778   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   779   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   780  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   781  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   782  /** \brief Configure a DMA channel source pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   783   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   784   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   785   * \param incStep Specifies the pointer incrementation step
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   786   * \param direction Specifies the incrementation direction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   787   * \param size Specifies the size of the circular buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   788   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   789   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   790   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   791   *     // Re-program the source and destination circular buffer control fields
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   792   *     IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   793   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   794   *     IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   795   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   796   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   797   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   798  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   799  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   800  /** \brief Configure the move count of a DMA channel transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   801   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   802   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   803   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   804   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   805   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   806   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   807   *     // Start DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   808   *     IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   809   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   810   *     // Wait till end of transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   811   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   812   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   813   *     // Change the TREL configuration for channel 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   814   *     IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   815   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   816   *     // Change the BLKM configuration for channel 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   817   *     IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   818   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   819   *     // Change the Move size configuration for channel 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   820   *     IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   821   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   822   *     // Pull down the channel pending request after the first transfer is initiated
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   823   *     IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   824   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   825   *     // Pull down the channel pending request after the transaction gets over
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   826   *     IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   827   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   828   *     // Start DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   829   *     IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   830   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   831   *     // Start DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   832   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   833   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   834   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   835   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   836  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   837  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   838  /** \brief Configure the shadow pointer register to read only
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   839   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   840   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   841   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   842   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   843   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   844   *     // Disable the shadow mode to come out of double buffer mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   845   *     IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   846   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   847   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   848   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   849  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   850  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   851  /** \brief Configure the shadow pointer register to write-able
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   852   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   853   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   854   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   855   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   856   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   857   *     // Enable the shadow mode to come out of double buffer mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   858   *     IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   859   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   860   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   861   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   862  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   863  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   864  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   865  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   866  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   867   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   868  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   869  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   870  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   871  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   872  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   873  /** \brief Clear channel halt request and aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   874   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   875   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   876   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   877   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   878   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   879   *     // Quit the halt mode of operation
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   880   *     IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   881   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   882   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   883   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   884  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   885  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   886  /** \brief Get channel halt aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   887   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   888   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   889   * \return halt aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   890   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   891   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   892   *     // Check for the channel halt aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   893   *     while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   894   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   895   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   896   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   897  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   898  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   899  /** \brief setting channel halt request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   900   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   901   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   902   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   903   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   904   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   905   *     // Halt the channel processing
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   906   *     IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   907   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   908   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   909   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   910  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   911  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   912  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   913  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   914  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   915   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   916  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   917  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   918  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   919  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   920  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   921  /** \brief get information on buffer being read by software and clear the notification flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   922   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   923   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   924   * \return TRUE  if one of the buffers is being read by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   925   * FALSE if one of the buffers is already read by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   926   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   927   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   928   *     // Check the buffer being read (Double buffer operation mode)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   929   *     while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   930   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   931   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   932   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   933  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   934  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   935  /** \brief get Double buffer selection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   936   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   937   * \param channelId channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   938   * \return TRUE if buffer 1 is being filled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   939   * FALSE if buffer 0 is being filled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   940   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   941   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   942   *     boolean buffer_being_filled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   943   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   944   *     // Check the buffer being filled (Double buffer operation mode)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   945   *     buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   946   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   947   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   948   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   949  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   950  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   951  /** \brief keeps the double buffer active
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   952   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   953   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   954   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   955   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   956   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   957   *     IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   958   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   959   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   960   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   961  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   962  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   963  /** \brief Double buffer switch application
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   964   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   965   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   966   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   967   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   968   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   969   *     // Apply software buffer switch
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   970   *     IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   971   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   972   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   973   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   974  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   975  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   976  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   977  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   978  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   979   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   980  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   981  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   982  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   983  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   984  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   985  /** \brief Clear a channel transfer interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   987   * \param channelId channel for which the interrupt flag should be cleared
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   988   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   989   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   990   * see Dma.INTSR
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   991   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   992   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   993  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   994  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   995  /** \brief Disable channel interrupt trigger
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   996   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   997   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   998   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   999   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1000   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1001   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1002   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1003   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1004   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1005  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1006  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1007  /** \brief Enable channel interrupt trigger
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1008   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1009   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1010   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1011   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1012   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1013   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1014   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1015   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1016   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1017  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1018  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1019  /** \brief Return and clear a channel transfer interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1020   * The flag is automatically cleared with the call to this function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1021   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1022   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1023   * \return TRUE if the interrupt flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1024   * FALSE if the interrupt flag is not set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1025   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1026   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1027   *     // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1028   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1029   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1030   *     // Wait till end of the transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1031   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1032   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1033   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1034   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1035  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1036  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1037  /** \brief Returns and clears the pattern detection interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1038   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1039   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1040   * \return TRUE  if pattern detection for a given channel is found
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1041   * FALSE if pattern detection for a given channel is not found
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1042   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1043   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1044   *     // wait till pattern match is found for given channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1045   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1046   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1047   *     // Wait for the pattern detection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1048   *     while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1049   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1050   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1051   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1052  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1053  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1054  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1057   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1058   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1059   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1060   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1061   *     // wait for the destination buffer wrap interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1062   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1063   *     boolean destinationWrapFlag;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1064   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1065   *     destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1067   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1068   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1070  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1074   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1075   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1076   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1077   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1078   *     // wait for the source buffer wrap interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1079   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1080   *     boolean sourceWrapFlag;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1081   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1082   *     sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1084   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1085   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1087  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1088  /** \brief Return a channel transfer interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1090   * \param channelId channel for which the interrupt flag should be returned
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1091   * \return TRUE if the interrupt flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1092   * FALSE if the interrupt flag is not set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1093   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1094   * see Dma.INTSR
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1095   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1096   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1097  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1098  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1099  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1100   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1101   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1102   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1103   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1104   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1105   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1106   *     boolean patternDetectOldVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1107   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1108   *     // Check the old value of the pattern detection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1109   *     patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1110   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1111   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1112   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1113  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1114  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1115  /** \brief Returns the SRC pointer for given DMA channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1116   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1117   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1118   * \return SRC pointer for given DMA channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1119   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1120   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1121   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1122   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1123   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1124   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1125  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1126  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1127  /** \brief Setting of channel interrupt service request by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1128   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1129   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1130   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1131   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1132   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1133   *     // Set the channel interrupt service request through software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1134   *     IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1135   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1136   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1137   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1138  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1140  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1141  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1142  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1143  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1144  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1145  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1146  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1147  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1148      dma->TSR[channelId].B.HLTCLR = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1149  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1150  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1151  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1152  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1153  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1154      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1155  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1156  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1158  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1159  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1160      dma->TSR[channelId].B.CTL = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1161  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1162  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1163  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1164  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1165  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1166      dma->BLK0.CLRE.U = mask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1167  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1169  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1170  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1171  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1172      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1173  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1175  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1176  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1177  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1178      dma->TSR[channelId].B.DCH = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1179  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1180  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1181  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1182  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1183  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1184      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1185  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1186  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1187  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1188  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1189  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1190      dma->BLK0.EER.B.EDER = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1191  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1192  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1193  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1194  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1195  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1196      dma->BLK0.EER.B.ESER = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1197  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1199  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1200  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1201  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1202      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1203  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1205  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1206  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1207  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1208      dma->TSR[channelId].B.ECH = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1209  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1211  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1212  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1213  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1214      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1215  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1217  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1218  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1219  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1220      dma->BLK0.EER.B.EDER = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1221  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1222  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1223  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1224  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1225  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1226      dma->BLK0.EER.B.ESER = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1227  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1228  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1230  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1231  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1232      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1233  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1234      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1235  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1236      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1237      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1238          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1239      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1241      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1242  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1244  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1245  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1246  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1247      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1249      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1250  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1251      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1252      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1253          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1254      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1255  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1256      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1257  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1258  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1260  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1261  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1262      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1263  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1264      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1265  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1266      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1267      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1268          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1269      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1271      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1272  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1273  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1274  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1275  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1276  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1277      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1278  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1279      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1280  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1281      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1282      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1283          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1284      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1285  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1286      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1287  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1288  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1289  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1290  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1291  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1292      return dma->CH[channelId].DADR.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1293  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1294  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1296  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1297  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1298      return dma->TSR[channelId].B.HLTACK != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1299  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1300  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1301  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1302  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1303  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1304      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1305  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1306      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1307  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1308      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1309  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1310  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1311  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1312  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1313  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1314      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1315  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1316  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1318  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1319  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1320      return dma->CH[channelId].SADR.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1321  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1323  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1324  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1325  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1326      return dma->TSR[channelId].B.TRL != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1327  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1329  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1330  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1331  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1332      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1333  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1334  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1335  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1336  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1337  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1338      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1339  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1340  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1341  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1342  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1343  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1344      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1345  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1346      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1347  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1348      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1349      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1350          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1351      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1353      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1354  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1356  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1357  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1358  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1359      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1360  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1361  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1362  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1363  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1364  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1365      return dma->BLK0.ERRSR.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1366  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1368  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1369  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1370  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1371      // only a single DMA available, therefore no check for the dma pointer required
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1372      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	mov.a	a15,d1
.L104:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   141          IfxSrc_init(src, config->channelInterruptTypeOfService, config->channelInterruptPriority);
	ld.bu	d1,[a13]54
.L105:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    24   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    25   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    26   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    27   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    28   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    29   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    30   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    31   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    32   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    33   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    34   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    35   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    36   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    37   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    38   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    39   * \ingroup IfxLld_Dma_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    40   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    41  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    42  #ifndef IFXDMA_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    43  #define IFXDMA_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    44  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    45  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    46  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    47  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    48  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    49  #include "_Impl/IfxDma_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    50  #include "IfxDma_bf.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    51  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    52  #include "IfxDma_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    53  #include "Src/Std/IfxSrc.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    54  #include "Scu/Std/IfxScuWdt.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    55  #include "Scu/Std/IfxScuCcu.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    56  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    57  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    58  /*--------------------------------Enumerations--------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    59  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    60  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    61  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    62   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    63  /** \brief Bus Master Mode definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    64   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    65   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    66  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    67  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    68      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    69      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    70  } IfxDma_BusMasterMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    71  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    72  /** \brief Channel Bus Priority definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    73   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    74  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    75  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    76      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    77      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    78      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    79  } IfxDma_ChannelBusPriority;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    80  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    81  /** \brief DMA circular buffer (wrap around) definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    82   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    83   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    84  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    85  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    86      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    87      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    88      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    89      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    90      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    91      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    92      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    93      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    94      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    95      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    96      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    97      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    98      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	    99      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   100      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   101      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   102  } IfxDma_ChannelIncrementCircular;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   103  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   104  /** \brief DMA incrementation direction definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   105   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   106   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   107  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   108  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   111  } IfxDma_ChannelIncrementDirection;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   112  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   113  /** \brief DMA incrementation definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   114   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   115   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   116  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   117  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   122      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   123      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   124      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   125      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   126  } IfxDma_ChannelIncrementStep;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   127  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   128  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   129   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   130   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   131  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   132  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   133      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   134      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   135  } IfxDma_ChannelInterruptControl;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   136  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   137  /** \brief DMA transfer definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   138   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   139   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   140  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   141  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   142      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   143      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   144      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   145      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   146      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   147      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   148      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   149      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   150  } IfxDma_ChannelMove;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   151  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   152  /** \brief DMA move size definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   153   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   154   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   155  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   156  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   157      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   158      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   163  } IfxDma_ChannelMoveSize;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   164  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   165  /** \brief DMA operation mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   166   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   167   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   168  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   169  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   170      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   171      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   172  } IfxDma_ChannelOperationMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   173  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   174  /** \brief Pattern detection selection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   175   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   176   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   177  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   178  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   179      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   180      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   181      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   182      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   183      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   184      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   185      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   186      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   187  } IfxDma_ChannelPattern;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   188  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   189  /** \brief Channel Priority definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   190   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   191  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   192  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   193      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   194      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   195      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   196  } IfxDma_ChannelPriority;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   197  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   198  /** \brief DMA request mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   199   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   200   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   201  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   202  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   203      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   204      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   205  } IfxDma_ChannelRequestMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   206  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   207  /** \brief DMA request selection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   208   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   209   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   210  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   211  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   212      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   213      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   214  } IfxDma_ChannelRequestSource;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   215  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   216  /** \brief shadow definition definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   217   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   218   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   219  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   220  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   221      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   222      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   223      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   224      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   225      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   226      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   227      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   228      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   229      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   230      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   231      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   232      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   233      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelShadow;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   235  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   236  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   237  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   238      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   239      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   240      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   241      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   242  } IfxDma_HardwareResourcePartition;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   244  /** \brief DMA move engine definition
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   245   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   246  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   247  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   248      IfxDma_MoveEngine_0 = 0  /**< \brief first move engine */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   249  } IfxDma_MoveEngine;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   250  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   251  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   252   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   253   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   254  typedef enum
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   255  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   256      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   257      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   258  } IfxDma_SleepMode;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   260  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   261  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   262  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   263   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   264  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   265  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   266  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   267  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   268  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   269  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   270   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   271   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   272   * \return TRUE if the channel is reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   273   * FALSE if the channel is not reset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   274   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   275   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   276   *     // check whether the channel is reset or not and also the hardware trigger disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   277   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   278   *     if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   279   *         (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   280   *         // Dma is out of RESET and there is no hardware request enabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   281   *         IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   282   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   283   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   284   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   285   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   286  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   287  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   288  /** \brief Reset the channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   291   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   292   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   293   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   294   *     // Apply reset to the channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   295   *     IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   296   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   297   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   298   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   299  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   300  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   301  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   302  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   303  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   304   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   305  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   306  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   308  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   309  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   310  /** \brief Clear the channel transaction request lost flag status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   313   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   314   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   315   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   316   *     // Clear the channel transaction request lost flag status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   317   *     IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   318   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   319   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   320   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   323  /** \brief Disable a DMA channel hardware transaction request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   324   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   325   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   326   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   327   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   328   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   329   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   330   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   331  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   332  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   333  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   334   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   335   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   336   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   337   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   338   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   339   *     // Disable the transaction request lost interrupt for given channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   340   *     IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   341   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   342   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   343   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   344  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   345  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   346  /** \brief Enable a DMA channel hardware transaction request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   347   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   348   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   349   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   350   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   351   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   352   *     unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   353   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   354   *         IfxSrc_setRequest(src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   355   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   356   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   357   *     // Do not restrict the hardware triggering to only one transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   358   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   359   *     IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   360   *     IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   361   *     IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   362   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   363   *     // Check for end of transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   364   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   365   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   366   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   367   *     // Enable the hardware trigger for channel 3
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   368   *     IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   369   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   370   *     // Disable the hardware trigger for channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   371   *     IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   372   *     // Hardware triggers for second time
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   373   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   374   *     unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   375   *     for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   376   *         IfxSrc_setRequest(src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   377   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   378   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   379   *     // Restrict the hardware triggering to only one transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   380   *     IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   381   *     IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   382   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   383   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   384   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   385  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   386  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   387  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   388   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   389   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   390   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   391   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   392   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   393   *     // Enable the transaction request lost interrupt for given channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   394   *     IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   395   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   396   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   397   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   398  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   399  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   400  /** \brief Check the channel transaction request lost flag status
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   401   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   402   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   403   * \return TRUE if the TRL is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   404   * FALSE if the TRL is not set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   405   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   406   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   407   *     boolean trlFlag;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   408   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   409   *     // Check whether the channel transaction request lost flag is set or not
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   410   *     trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   411   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   412   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   413   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   414  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   415  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   416  /** \brief Converts DMA circular range to circular code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   417   * \param range DMA circular range
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   418   * \return DMA circular code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   419   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   420  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   421  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   422  /** \brief Return the hardware transaction request status of a DMA channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   425   * \return TRUE if the hardware transaction request is enabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   426   * FALSE if the hardware transaction request is disabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   427   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   428   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   429   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   430   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   431  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   432  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   433  /** \brief Return the status of a DMA channel (transaction pending)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   434   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   435   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   436   * \return TRUE if a transaction request for the given channel is pending
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   437   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   438   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   439   *     // check for the channel request pending with the channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   440   *     if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   441   *         // There is channel request pending for channel 0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   442   *         result |= 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   443   *     }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   444   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   445   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   446   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   447  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   448  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   449  /** \brief Sets the sensitivity of the module to sleep signal
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   450   * \param dma pointer to DMA registers
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   451   * \param mode mode selection (enable/disable)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   452   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   453   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   454  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   455  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   456  /** \brief Request a DMA channel transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   457   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   458   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   459   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   460   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   461   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   462   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   463   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   464  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   465  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   466  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   467  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   468  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   469   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   470  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   471  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   472  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   473  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   474  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   475  /** \brief Clear the DMA error status flags
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   477   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   478   * \param mask value holds the bits to clear or mask
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   479   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   480   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   481   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   482   *     // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   483   *     IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   484   *                           IFXDMA_ERROR_S |    // move engine source error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   485   *                           IFXDMA_ERROR_D |    // move engine destination error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   486   *                           IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   487   *                           IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   488   *                           IFXDMA_ERROR_RAM |  // RAM error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   489   *                           IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   490   *                           IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   491   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   492   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   493   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   494  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   495  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   496  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   497   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   498   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   499   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   500   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   501   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   502   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   503   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   504  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   505  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   506  /** \brief Disable the generation of a Move engine source error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   507   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   508   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   509   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   510   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   511   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   512   *     // Disable the move engine source and destination move errors
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   513   *     IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   514   *     IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   515   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   516   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   517   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   518  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   519  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   520  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   521   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   522   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   523   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   524   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   525   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   526   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   527   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   528  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   529  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   530  /** \brief Enable the generation of a Move engine source error interrupt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   531   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   532   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   533   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   534   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   535   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   536   *     // Enable the move engine source and destination move errors
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   537   *     IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   538   *     IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   539   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   540   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   541   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   542  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   543  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   544  /** \brief Return the DMA error status flags
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   545   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   546   * \param moveEngine pointer to the DMA move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   547   * \return the content of the DMA.ERRSR register
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   548   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   549   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   550   *     uint32 errorFlags = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   551   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   552   *     // Get the status of the error flags of move engine
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   553   *     errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   554   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   555   *     if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   556   *         }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   557   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   558   *     if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   559   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   560   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   561   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   562   *     if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   563   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   564   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   565   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   566   *     if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   567   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   568   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   569   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   570   *     if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   571   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   572   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   573   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   574   *     if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   575   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   576   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   577   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   578   *     if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   579   *        // ...
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   580   *        }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   581   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   582   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   583   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   584  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   585  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   586  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   587  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   588  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   589   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   590  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   591  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   592  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   593  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   594  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   595  /** \brief Get a channel source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   596   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   597   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   598   * \return Actual channel destination address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   599   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   600   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   601   *     uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   602   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   603   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   604   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   605   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   607  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   608  /** \brief Get a channel source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   609   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   610   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   611   * \return Actual channel source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   612   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   613   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   614   *     uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   615   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   616   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   617   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   618  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   619  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   620  /** \brief Return remaining DMA transfer count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   621   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   622   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   623   * \return Remaining DMA transfer count
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   624   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   625   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   626   *     // Wait till transfer count (TCOUNT) becomes 0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   627   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   628   *     bool notFinished;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   629   *     do {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   630   *         notFinished = false;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   631   *             if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   632   *                 notFinished = true;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   633   *                 break;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   634   *             }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   635   *     } while( notFinished );
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   636   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   637   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   638   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   639  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   640  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   641  /** \brief get the time stamp
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   642   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   643   * \return the current time stamp
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   644   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   645   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   646   *     uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   647   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   648   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   649   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   650  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   651  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   652  /** \brief Configure the move count for each DMA channel transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   653   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   654   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   655   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   656   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   657   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   658   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   659   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   660   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   661  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   662  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   663  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   664   * After a transaction, the hardware request transaction remain enabled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   665   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   666   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   667   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   668   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   669   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   670   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   671   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   672  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   673  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   674  /** \brief Configure the destination address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   675   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   676   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   677   * \param address is the Initial address of the destination pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   678   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   679   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   680   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   681   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   682   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   683  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   684  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   685  /** \brief Configure a DMA channel destination pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   686   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   687   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   688   * \param incStep Specifies the pointer incrementation step
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   689   * \param direction Specifies the incrementation direction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   690   * \param size Specifies the size of the circular buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   691   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   692   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   693   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   694   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   695   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   696  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   697  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   698  /** \brief Configure a DMA channel move
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   699   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   700   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   701   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   702   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   703   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   704   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   705   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   706   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   707  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   708  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   709  /** \brief Configure a DMA channel shadow pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   710   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   711   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   712   * \param shadow Specifies the shadow pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   713   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   714   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   715   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   716   *     // Push the shadow mode into double buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   717   *     IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   718   *     IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   719   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   720   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   721   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   723  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel to "single transaction mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   725   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   726   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   727   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   728   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   729   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   731   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   732   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   734  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel to "single transaction mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   736   * One transfer request starts a complete DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   737   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   738   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   739   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   740   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   741   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   742   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   743   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   744  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   745  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   746  /** \brief Configure a DMA channel to "single transfer mode"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   747   * A transfer request is required for each transfer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   748   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   749   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   750   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   751   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   752   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   753   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   754   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   755  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   756  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   757  /** \brief Configure the source address
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   758   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   759   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   760   * \param address is the Initial address of the source pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   761   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   762   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   763   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   764   *     // Check for the end of current transaction and before trigger the channel request for
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   765   *     // for another channel, re configure the source and destination addresses
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   766   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   767   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   768   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   769   *     // Re-Program the source address for the channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   770   *     IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   771   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   772   *     // Re-Program the destination address for channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   773   *     IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   774   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   775   *     // Start DMA transaction for channel 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   776   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   777   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   778   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   779   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   780  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   781  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   782  /** \brief Configure a DMA channel source pointer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   783   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   784   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   785   * \param incStep Specifies the pointer incrementation step
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   786   * \param direction Specifies the incrementation direction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   787   * \param size Specifies the size of the circular buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   788   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   789   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   790   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   791   *     // Re-program the source and destination circular buffer control fields
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   792   *     IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   793   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   794   *     IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   795   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   796   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   797   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   798  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   799  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   800  /** \brief Configure the move count of a DMA channel transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   801   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   802   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   803   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   804   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   805   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   806   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   807   *     // Start DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   808   *     IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   809   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   810   *     // Wait till end of transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   811   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   812   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   813   *     // Change the TREL configuration for channel 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   814   *     IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   815   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   816   *     // Change the BLKM configuration for channel 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   817   *     IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   818   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   819   *     // Change the Move size configuration for channel 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   820   *     IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   821   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   822   *     // Pull down the channel pending request after the first transfer is initiated
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   823   *     IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   824   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   825   *     // Pull down the channel pending request after the transaction gets over
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   826   *     IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   827   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   828   *     // Start DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   829   *     IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   830   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   831   *     // Start DMA transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   832   *     IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   833   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   834   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   835   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   836  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   837  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   838  /** \brief Configure the shadow pointer register to read only
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   839   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   840   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   841   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   842   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   843   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   844   *     // Disable the shadow mode to come out of double buffer mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   845   *     IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   846   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   847   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   848   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   849  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   850  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   851  /** \brief Configure the shadow pointer register to write-able
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   852   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   853   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   854   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   855   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   856   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   857   *     // Enable the shadow mode to come out of double buffer mode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   858   *     IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   859   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   860   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   861   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   862  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   863  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   864  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   865  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   866  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   867   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   868  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   869  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   870  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   871  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   872  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   873  /** \brief Clear channel halt request and aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   874   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   875   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   876   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   877   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   878   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   879   *     // Quit the halt mode of operation
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   880   *     IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   881   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   882   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   883   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   884  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   885  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   886  /** \brief Get channel halt aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   887   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   888   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   889   * \return halt aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   890   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   891   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   892   *     // Check for the channel halt aknowledgement
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   893   *     while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   894   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   895   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   896   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   897  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   898  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   899  /** \brief setting channel halt request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   900   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   901   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   902   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   903   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   904   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   905   *     // Halt the channel processing
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   906   *     IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   907   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   908   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   909   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   910  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   911  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   912  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   913  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   914  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   915   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   916  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   917  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   918  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   919  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   920  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   921  /** \brief get information on buffer being read by software and clear the notification flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   922   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   923   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   924   * \return TRUE  if one of the buffers is being read by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   925   * FALSE if one of the buffers is already read by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   926   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   927   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   928   *     // Check the buffer being read (Double buffer operation mode)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   929   *     while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   930   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   931   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   932   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   933  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   934  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   935  /** \brief get Double buffer selection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   936   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   937   * \param channelId channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   938   * \return TRUE if buffer 1 is being filled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   939   * FALSE if buffer 0 is being filled
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   940   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   941   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   942   *     boolean buffer_being_filled;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   943   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   944   *     // Check the buffer being filled (Double buffer operation mode)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   945   *     buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   946   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   947   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   948   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   949  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   950  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   951  /** \brief keeps the double buffer active
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   952   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   953   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   954   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   955   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   956   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   957   *     IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   958   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   959   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   960   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   961  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   962  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   963  /** \brief Double buffer switch application
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   964   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   965   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   966   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   967   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   968   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   969   *     // Apply software buffer switch
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   970   *     IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   971   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   972   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   973   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   974  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   975  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   976  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   977  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   978  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   979   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   980  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   981  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   982  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   983  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   984  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   985  /** \brief Clear a channel transfer interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   987   * \param channelId channel for which the interrupt flag should be cleared
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   988   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   989   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   990   * see Dma.INTSR
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   991   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   992   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   993  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   994  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   995  /** \brief Disable channel interrupt trigger
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   996   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   997   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   998   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	   999   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1000   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1001   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1002   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1003   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1004   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1005  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1006  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1007  /** \brief Enable channel interrupt trigger
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1008   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1009   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1010   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1011   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1012   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1013   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1014   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1015   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1016   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1017  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1018  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1019  /** \brief Return and clear a channel transfer interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1020   * The flag is automatically cleared with the call to this function
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1021   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1022   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1023   * \return TRUE if the interrupt flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1024   * FALSE if the interrupt flag is not set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1025   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1026   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1027   *     // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1028   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1029   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1030   *     // Wait till end of the transaction
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1031   *     while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1032   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1033   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1034   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1035  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1036  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1037  /** \brief Returns and clears the pattern detection interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1038   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1039   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1040   * \return TRUE  if pattern detection for a given channel is found
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1041   * FALSE if pattern detection for a given channel is not found
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1042   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1043   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1044   *     // wait till pattern match is found for given channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1045   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1046   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1047   *     // Wait for the pattern detection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1048   *     while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1049   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1050   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1051   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1052  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1053  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1054  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1057   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1058   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1059   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1060   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1061   *     // wait for the destination buffer wrap interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1062   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1063   *     boolean destinationWrapFlag;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1064   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1065   *     destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1067   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1068   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1070  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1074   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1075   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1076   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1077   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1078   *     // wait for the source buffer wrap interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1079   *     // and clear it once it is set and checked
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1080   *     boolean sourceWrapFlag;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1081   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1082   *     sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1084   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1085   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1087  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1088  /** \brief Return a channel transfer interrupt flag
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1090   * \param channelId channel for which the interrupt flag should be returned
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1091   * \return TRUE if the interrupt flag is set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1092   * FALSE if the interrupt flag is not set
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1093   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1094   * see Dma.INTSR
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1095   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1096   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1097  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1098  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1099  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1100   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1101   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1102   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1103   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1104   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1105   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1106   *     boolean patternDetectOldVal;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1107   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1108   *     // Check the old value of the pattern detection
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1109   *     patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1110   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1111   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1112   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1113  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1114  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1115  /** \brief Returns the SRC pointer for given DMA channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1116   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1117   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1118   * \return SRC pointer for given DMA channel
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1119   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1120   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1121   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1122   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1123   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1124   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1125  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1126  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1127  /** \brief Setting of channel interrupt service request by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1128   * \param dma pointer to DMA module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1129   * \param channelId DMA channel number
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1130   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1131   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1132   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1133   *     // Set the channel interrupt service request through software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1134   *     IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1135   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1136   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1137   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1138  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1139  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1140  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1141  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1142  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1143  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1144  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1145  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1146  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1147  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1148      dma->TSR[channelId].B.HLTCLR = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1149  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1150  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1151  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1152  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1153  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1154      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1155  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1156  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1157  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1158  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1159  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1160      dma->TSR[channelId].B.CTL = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1161  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1162  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1163  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1164  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1165  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1166      dma->BLK0.CLRE.U = mask;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1167  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1168  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1169  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1170  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1171  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1172      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1173  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1174  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1175  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1176  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1177  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1178      dma->TSR[channelId].B.DCH = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1179  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1180  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1181  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1182  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1183  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1184      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1185  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1186  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1187  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1188  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1189  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1190      dma->BLK0.EER.B.EDER = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1191  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1192  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1193  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1194  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1195  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1196      dma->BLK0.EER.B.ESER = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1197  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1198  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1199  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1200  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1201  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1202      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1203  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1204  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1205  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1206  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1207  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1208      dma->TSR[channelId].B.ECH = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1209  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1210  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1211  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1212  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1213  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1214      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1215  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1216  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1217  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1218  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1219  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1220      dma->BLK0.EER.B.EDER = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1221  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1222  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1223  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1224  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1225  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1226      dma->BLK0.EER.B.ESER = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1227  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1228  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1230  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1231  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1232      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1233  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1234      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1235  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1236      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1237      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1238          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1239      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1241      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1242  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1243  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1244  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1245  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1246  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1247      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1248  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1249      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1250  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1251      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1252      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1253          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1254      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1255  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1256      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1257  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1258  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1259  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1260  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1261  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1262      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1263  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1264      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1265  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1266      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1267      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1268          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1269      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1270  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1271      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1272  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1273  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1274  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1275  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1276  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1277      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1278  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1279      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1280  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1281      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1282      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1283          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1284      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1285  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1286      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1287  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1288  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1289  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1290  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1291  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1292      return dma->CH[channelId].DADR.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1293  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1294  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1295  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1296  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1297  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1298      return dma->TSR[channelId].B.HLTACK != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1299  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1300  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1301  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1302  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1303  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1304      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1305  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1306      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1307  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1308      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1309  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1310  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1311  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1312  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1313  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1314      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1315  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1316  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1317  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1318  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1319  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1320      return dma->CH[channelId].SADR.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1321  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1322  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1323  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1324  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1325  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1326      return dma->TSR[channelId].B.TRL != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1327  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1328  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1329  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1330  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1331  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1332      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1333  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1334  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1335  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1336  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1337  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1338      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1339  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1340  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1341  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1342  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1343  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1344      boolean result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1345  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1346      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1347  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1348      if (result == 1)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1349      {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1350          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1351      }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1352  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1353      return result;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1354  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1355  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1356  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1357  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1358  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1359      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1360  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1361  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1362  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1363  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1364  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1365      return dma->BLK0.ERRSR.U;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1366  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1367  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1368  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1369  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1370  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1371      // only a single DMA available, therefore no check for the dma pointer required
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Std\IfxDma.h	  1372      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	addsc.a	a15,a15,d15,#2
.L106:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	     1  /**
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	     5   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_0_11_0
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	     8   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	     9   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    11   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    12   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    13   * Infineon Technologies AG (Infineon) is supplying this file for use
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    14   * exclusively with Infineon's microcontroller products. This file can be freely
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    15   * distributed within development tools that are supporting such microcontroller
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    16   * products.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    17   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    18   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    19   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    20   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    21   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    22   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    23   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    24   * \defgroup IfxLld_Src SRC
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    25   * \addtogroup IfxLld_Src
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    26   * \{
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    27   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    28   * \addtogroup IfxLld_Src_Usage
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    29   * \{
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    30   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    31   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    32   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    33   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    34   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    35   * details of these APIs.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    36   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    37   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    38   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    39   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    40   * Service request node is initialized to configure the following,\n
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    41   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    42   *  __a. One of the available CPUs or\n
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    43   *  __b. DMA controller\n
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    44   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    45   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    46   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    47   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    48   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    49   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    50   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    51   * User must configure the service request node in the application / driver files.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    52   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    53   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    54   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    55   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    56   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    57   * Example:
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    58   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    59   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    60   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    61   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    62   * //file: myApplication.c
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    63   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    64   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    65   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    66   * void myDriverInitFunction(void)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    67   * {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    68   *    // driver init code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    69   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    70   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    71   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    72   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    73   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    74   *    // Step2: Enable the service request node
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    75   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    76   * }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    77   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    78   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    79   * \}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    80   * \}
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    81   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    82   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    83   * \ingroup IfxLld_Src_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    84   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    85   * \ingroup IfxLld_Src_Std
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    86   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    87  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    88  #ifndef IFXSRC_H
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    89  #define IFXSRC_H 1
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    90  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    91  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    92  /*----------------------------------Includes----------------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    93  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    94  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    95  #include "_Impl/IfxSrc_cfg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    96  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    97  #include "IfxSrc_reg.h"
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    98  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	    99   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   100  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   101  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   103  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   104  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   105  /** \brief Resets the overrun flag of the Service Request.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   106   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   107   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   108   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   109   * Usage example: see \ref IfxSrc_init
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   110   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   111   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   112  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   113  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   114  /** \brief Resets a specific interrupt service by software.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   115   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   116   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   117   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   118   * Usage example: see \ref IfxSrc_init
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   119   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   120   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   121  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   122  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   123  /** \brief Gets the current overrun status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   124   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   125   * \return current service request control overrun status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   126   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   127   * Usage example: see \ref IfxSrc_init
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   128   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   129   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   130  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   131  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   132  /** \brief Gets the current request status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   133   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   134   * \return current service request control request status.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   135   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   136   * Usage example: see \ref IfxSrc_init
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   137   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   138   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   139  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   140  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   141  /** \brief Requests a specific interrupt service by software
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   142   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   143   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   144   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   145   * Usage example: see \ref IfxSrc_init
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   146   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   147   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   148  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   149  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   150  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   151  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   152  /** \addtogroup IfxLld_Src_Std_Module
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   153   * \{ */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   154  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   155  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   156  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   157  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   158  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   159  /** \brief DeInitializes the service request control register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   160   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   161   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   162   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   163   * Usage example: see \ref IfxSrc_init
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   164   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   165   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   166  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   167  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   168  /** \brief Disables a specific interrupt service request.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   169   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   170   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   171   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   172   * Usage example: see \ref IfxSrc_init
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   173   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   174   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   175  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   176  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   177  /** \brief Enables a specific interrupt service request.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   178   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   179   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   180   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   181   * Usage example: see \ref IfxSrc_init
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   182   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   183   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   184  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   185  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   186  /** \brief Initializes the service request control register.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   187   * \param src pointer to the Service Request Control register which should be initialised.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   188   * \param typOfService type of interrupt service provider.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   189   * \param priority Interrupt priority.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   190   * \return None
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   191   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   192   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   193   * \code
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   194   * //define the interrupt priority
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   195   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   196   * //get the service request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   197   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   198   * //initlaise the service request
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   199   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   200   * // enable the service
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   201   * IfxSrc_enable( src );
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   202   * //check for service request flags and clear if they occur
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   203   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   204   * {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   205   *    IfxSrc_clearRequest( src );
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   206   * }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   207   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   208   * {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   209   *      IfxSrc_clearOverrun( src );
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   210   * }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   211   * // Atlast deinitialise the service control
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   212   * IfxSrc_deinit( src );
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   213   * \endcode
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   214   *
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   215   */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   216  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   217  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   218  /** \} */
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   219  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   220  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   221  /*---------------------Inline Function Implementations------------------------*/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   222  /******************************************************************************/
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   223  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   224  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   225  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   226      src->B.IOVCLR = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   227  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   228  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   229  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   230  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   231  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   232      src->B.CLRR = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   233  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   234  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   235  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   237  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   238      src->U = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   239  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   240  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   241  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   242  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   243  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   244      src->B.SRE = 0;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   245  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   246  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   247  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   248  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   249  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   250      src->B.SRE = 1;
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   251  }
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   252  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   253  
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   254  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   255  {
; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   256      src->B.SRPN = priority;
	st.b	[a15],d0
.L193:

; D:\00.Tasking_workspace\DVRS_INTEL\RGB_IR_INTEL_REV05\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Src\Std\IfxSrc.h	   257      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L194:
	insert	d15,d15,d1,#3,#1
	st.b	[a15]1,d15
.L117:
	ld.bu	d15,[a15]3
.L195:
	or	d15,#2
	st.b	[a15]3,d15
.L108:
	ld.bu	d15,[a15]1
.L196:
	or	d15,#4
	st.b	[a15]1,d15
.L7:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   142          IfxSrc_enable(src);
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   143      }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   144  }
	ret
.L84:
	
__IfxDma_Dma_initChannel_function_end:
	.size	IfxDma_Dma_initChannel,__IfxDma_Dma_initChannel_function_end-IfxDma_Dma_initChannel
.L53:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initChannelConfig',code,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initChannelConfig'
	.align	2
	
	.global	IfxDma_Dma_initChannelConfig

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   145  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   146  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   147  void IfxDma_Dma_initChannelConfig(IfxDma_Dma_ChannelConfig *config, IfxDma_Dma *dma)
; Function IfxDma_Dma_initChannelConfig
.L18:
IfxDma_Dma_initChannelConfig:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   148  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   149      const IfxDma_Dma_ChannelConfig defaultConfig = {
	movh.a	a15,#@his(.4.ini)
	lea	a15,[a15]@los(.4.ini)
.L201:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   150          .module                                 = NULL_PTR,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   151          .channelId                              = IfxDma_ChannelId_0,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   152          .sourceAddress                          = 0,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   153          .destinationAddress                     = 0,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   154          .shadowAddress                          = 0,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   155          .readDataCrc                            = 0,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   156          .sourceDestinationAddressCrc            = 0,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   157          .transferCount                          = 0,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   158          .blockMode                              = IfxDma_ChannelMove_1,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   159          .requestMode                            = IfxDma_ChannelRequestMode_oneTransferPerRequest,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   160          .operationMode                          = IfxDma_ChannelOperationMode_single,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   161          .moveSize                               = IfxDma_ChannelMoveSize_8bit,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   162          .pattern                                = IfxDma_ChannelPattern_0_disable,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   163          .requestSource                          = IfxDma_ChannelRequestSource_peripheral,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   164          .busPriority                            = IfxDma_ChannelBusPriority_medium,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   165          .hardwareRequestEnabled                 = FALSE,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   166          .sourceAddressIncrementStep             = IfxDma_ChannelIncrementStep_1,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   167          .sourceAddressIncrementDirection        = IfxDma_ChannelIncrementDirection_positive,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   168          .sourceAddressCircularRange             = IfxDma_ChannelIncrementCircular_32768,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   169          .destinationAddressIncrementStep        = IfxDma_ChannelIncrementStep_1,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   170          .destinationAddressIncrementDirection   = IfxDma_ChannelIncrementDirection_positive,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   171          .destinationAddressCircularRange        = IfxDma_ChannelIncrementCircular_32768,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   172          .shadowControl                          = IfxDma_ChannelShadow_none,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   173          .sourceCircularBufferEnabled            = FALSE,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   174          .destinationCircularBufferEnabled       = FALSE,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   175          .timestampEnabled                       = FALSE,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   176          .wrapSourceInterruptEnabled             = FALSE,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   177          .wrapDestinationInterruptEnabled        = FALSE,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   178          .channelInterruptEnabled                = FALSE,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   179          .channelInterruptControl                = IfxDma_ChannelInterruptControl_thresholdLimitMatch,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   180          .interruptRaiseThreshold                = 0,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   181          .transactionRequestLostInterruptEnabled = FALSE,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   182          .channelInterruptPriority               = 0,
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   183          .channelInterruptTypeOfService          = IfxSrc_Tos_cpu0
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   184      };
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   185  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   186      /* Default Configuration */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   187      *config = defaultConfig;
	mov.aa	a2,a4
.L152:
	mov.a	a6,#13
.L8:
	ld.w	d15,[a15+]
	st.w	[a2+],d15
	loop	a6,.L8
.L153:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   188  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   189      /* take over module pointer */
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   190      config->module = dma;
	st.a	[a4],a5
.L154:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   191  }
	ret
.L125:
	
__IfxDma_Dma_initChannelConfig_function_end:
	.size	IfxDma_Dma_initChannelConfig,__IfxDma_Dma_initChannelConfig_function_end-IfxDma_Dma_initChannelConfig
.L58:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initLinkedListEntry',code,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initLinkedListEntry'
	.align	2
	
	.global	IfxDma_Dma_initLinkedListEntry

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   192  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   193  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   194  void IfxDma_Dma_initLinkedListEntry(void *ptrToAddress, const IfxDma_Dma_ChannelConfig *config)
; Function IfxDma_Dma_initLinkedListEntry
.L20:
IfxDma_Dma_initLinkedListEntry:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   195  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   196      IfxDma_Dma_configureTransactionSet((Ifx_DMA_CH *)ptrToAddress, config);
	j	IfxDma_Dma_configureTransactionSet
.L129:
	
__IfxDma_Dma_initLinkedListEntry_function_end:
	.size	IfxDma_Dma_initLinkedListEntry,__IfxDma_Dma_initLinkedListEntry_function_end-IfxDma_Dma_initLinkedListEntry
.L63:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initModule',code,cluster('IfxDma_Dma_initModule')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initModule'
	.align	2
	
	.global	IfxDma_Dma_initModule

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   197  }
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   198  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   199  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   200  void IfxDma_Dma_initModule(IfxDma_Dma *dma, const IfxDma_Dma_Config *config)
; Function IfxDma_Dma_initModule
.L22:
IfxDma_Dma_initModule:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   201  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   202      dma->dma = config->dma;
	ld.a	a15,[a5]
.L172:
	st.a	[a4],a15
.L173:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   203  }
	ret
.L76:
	
__IfxDma_Dma_initModule_function_end:
	.size	IfxDma_Dma_initModule,__IfxDma_Dma_initModule_function_end-IfxDma_Dma_initModule
.L43:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initModuleConfig',code,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initModuleConfig'
	.align	2
	
	.global	IfxDma_Dma_initModuleConfig

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   204  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   205  
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   206  void IfxDma_Dma_initModuleConfig(IfxDma_Dma_Config *config, Ifx_DMA *dma)
; Function IfxDma_Dma_initModuleConfig
.L24:
IfxDma_Dma_initModuleConfig:	.type	func

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   207  {
; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   208      config->dma = dma;
	st.a	[a4],a5
.L178:

; ..\SoftwarePlatform\illd_tc23x\src\ifx\TC23x\Dma\Dma\IfxDma_Dma.c	   209  }
	ret
.L80:
	
__IfxDma_Dma_initModuleConfig_function_end:
	.size	IfxDma_Dma_initModuleConfig,__IfxDma_Dma_initModuleConfig_function_end-IfxDma_Dma_initModuleConfig
.L48:
	; End of function
	
	.sdecl	'.rodata.IfxDma_Dma..4.ini',data,rom
	.sect	'.rodata.IfxDma_Dma..4.ini'
	.align	4
.4.ini:	.type	object
	.size	.4.ini,56
	.space	34
	.byte	1
	.space	2
	.byte	1,15
	.space	1
	.byte	1,15
	.space	14
	.calls	'IfxDma_Dma_initChannel','IfxDma_Dma_configureTransactionSet'
	.calls	'IfxDma_Dma_initLinkedListEntry','IfxDma_Dma_configureTransactionSet'
	.calls	'IfxDma_Dma_configureTransactionSet','',0
	.calls	'IfxDma_Dma_createModuleHandle','',0
	.calls	'IfxDma_Dma_deInitModule','',0
	.calls	'IfxDma_Dma_initChannel','',0
	.calls	'IfxDma_Dma_initChannelConfig','',0
	.calls	'IfxDma_Dma_initLinkedListEntry','',0
	.calls	'IfxDma_Dma_initModule','',0
	.calls	'IfxDma_Dma_initModuleConfig','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L26:
	.word	91065
	.half	3
	.word	.L27
	.byte	4
.L25:
	.byte	1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L28
	.byte	2
	.byte	'__stopPerfCounters',0,3,1,217,1,17,1,1,3,0,4
	.byte	'unsigned long long int',0,8,7,5
	.byte	'void',0
.L130:
	.byte	6
	.word	243
	.byte	7
	.byte	'__ld64',0,3,2,110,19
	.word	217
	.byte	1,1,8
	.byte	'addr',0,2,110,32
	.word	249
	.byte	3,0,2
	.byte	'__st64',0,3,2,118,17,1,1,8
	.byte	'addr',0,2,118,30
	.word	249
	.byte	8
	.byte	'value',0,2,118,43
	.word	217
	.byte	3,0,4
	.byte	'unsigned int',0,4,7,4
	.byte	'int',0,4,5,4
	.byte	'unsigned char',0,1,8,9
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,45,16,4,10
	.byte	'SRPN',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	353
	.byte	4,0,2,35,1,10
	.byte	'ECC',0,1
	.word	353
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	353
	.byte	3,0,2,35,2,10
	.byte	'SRR',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,4,70,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	370
	.byte	4,2,35,0,0,13
	.word	660
	.byte	6
	.word	699
.L116:
	.byte	2
	.byte	'IfxSrc_clearRequest',0,3,3,230,1,17,1,1
.L118:
	.byte	8
	.byte	'src',0,3,230,1,60
	.word	704
.L120:
	.byte	3,0
.L121:
	.byte	2
	.byte	'IfxSrc_enable',0,3,3,248,1,17,1,1
.L122:
	.byte	8
	.byte	'src',0,3,248,1,54
	.word	704
.L124:
	.byte	3,0,14,5,49,9,1,15
	.byte	'IfxSrc_Tos_cpu0',0,0,15
	.byte	'IfxSrc_Tos_dma',0,1,0,4
	.byte	'unsigned short int',0,2,7
.L107:
	.byte	2
	.byte	'IfxSrc_init',0,3,3,254,1,17,1,1
.L109:
	.byte	8
	.byte	'src',0,3,254,1,52
	.word	704
.L111:
	.byte	8
	.byte	'typOfService',0,3,254,1,68
	.word	789
.L113:
	.byte	8
	.byte	'priority',0,3,254,1,95
	.word	830
.L115:
	.byte	16,3,0,0,4
	.byte	'unsigned int',0,4,7,9
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,7,133,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	929
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	929
	.byte	16,0,2,35,0,0,11,7,187,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	945
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,7,142,8,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	2,6,2,35,0,10
	.byte	'IR0',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	353
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,7,195,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1081
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,7,157,8,16,4,10
	.byte	'AE',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	353
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,7,203,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	1325
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_SCU_WDTCPU',0,7,243,13,25,12,12
	.byte	'CON0',0
	.word	1041
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	1285
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	1516
	.byte	4,2,35,8,0,13
	.word	1556
	.byte	6
	.word	1619
	.byte	2
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,6,130,3,17,1,1,8
	.byte	'watchdog',0,6,130,3,65
	.word	1624
	.byte	8
	.byte	'password',0,6,130,3,82
	.word	830
	.byte	3,0,2
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,6,222,3,17,1,1,8
	.byte	'watchdog',0,6,222,3,63
	.word	1624
	.byte	8
	.byte	'password',0,6,222,3,80
	.word	830
	.byte	3,0,7
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,6,187,3,19
	.word	830
	.byte	1,1,8
	.byte	'watchdog',0,6,187,3,74
	.word	1624
	.byte	3,0,14,9,83,9,1,15
	.byte	'IfxCpu_ResourceCpu_0',0,0,15
	.byte	'IfxCpu_ResourceCpu_none',0,1,0,7
	.byte	'IfxCpu_getCoreIndex',0,3,8,170,5,31
	.word	1854
	.byte	1,1,3,0,7
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,185,4,20
	.word	353
	.byte	1,1,3,0,4
	.byte	'unsigned long int',0,4,7,7
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,190,5,19
	.word	1985
	.byte	1,1,8
	.byte	'address',0,8,190,5,55
	.word	1985
	.byte	3,0,7
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,198,5,20
	.word	353
	.byte	1,1,8
	.byte	'address',0,8,198,5,70
	.word	1985
	.byte	3,0,2
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,153,7,17,1,1,8
	.byte	'address',0,8,153,7,56
	.word	1985
	.byte	8
	.byte	'count',0,8,153,7,72
	.word	1985
	.byte	3,0,9
	.byte	'_Ifx_P_OUT_Bits',0,11,231,2,16,4,10
	.byte	'P0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,11,239,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2214
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMR_Bits',0,11,129,2,16,4,10
	.byte	'PS0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'PCL0',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,11,191,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	2530
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ID_Bits',0,11,110,16,4,10
	.byte	'MODREV',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,11,231,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3101
	.byte	4,2,35,0,0,17,4
	.word	353
	.byte	18,3,0,9
	.byte	'_Ifx_P_IOCR0_Bits',0,11,140,1,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'PC0',0,1
	.word	353
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	3,5,2,35,1,10
	.byte	'PC1',0,1
	.word	353
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	353
	.byte	3,5,2,35,2,10
	.byte	'PC2',0,1
	.word	353
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	3,5,2,35,3,10
	.byte	'PC3',0,1
	.word	353
	.byte	5,0,2,35,3,0,11,11,247,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3229
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR4_Bits',0,11,166,1,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'PC4',0,1
	.word	353
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	3,5,2,35,1,10
	.byte	'PC5',0,1
	.word	353
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	353
	.byte	3,5,2,35,2,10
	.byte	'PC6',0,1
	.word	353
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	3,5,2,35,3,10
	.byte	'PC7',0,1
	.word	353
	.byte	5,0,2,35,3,0,11,11,135,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3444
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR8_Bits',0,11,179,1,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'PC8',0,1
	.word	353
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	3,5,2,35,1,10
	.byte	'PC9',0,1
	.word	353
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	353
	.byte	3,5,2,35,2,10
	.byte	'PC10',0,1
	.word	353
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	3,5,2,35,3,10
	.byte	'PC11',0,1
	.word	353
	.byte	5,0,2,35,3,0,11,11,143,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3659
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IOCR12_Bits',0,11,153,1,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'PC12',0,1
	.word	353
	.byte	5,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	3,5,2,35,1,10
	.byte	'PC13',0,1
	.word	353
	.byte	5,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	353
	.byte	3,5,2,35,2,10
	.byte	'PC14',0,1
	.word	353
	.byte	5,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	3,5,2,35,3,10
	.byte	'PC15',0,1
	.word	353
	.byte	5,0,2,35,3,0,11,11,255,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	3876
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_IN_Bits',0,11,118,16,4,10
	.byte	'P0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'P2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'P3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'P4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'P5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'P6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'P7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'P8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'P9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'P10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'P11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'P12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'P13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'P14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'P15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,11,239,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4096
	.byte	4,2,35,0,0,17,24
	.word	353
	.byte	18,23,0,9
	.byte	'_Ifx_P_PDR0_Bits',0,11,160,3,16,4,10
	.byte	'PD0',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	353
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'PD2',0,1
	.word	353
	.byte	3,5,2,35,1,10
	.byte	'PL2',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'PD3',0,1
	.word	353
	.byte	3,1,2,35,1,10
	.byte	'PL3',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'PD4',0,1
	.word	353
	.byte	3,5,2,35,2,10
	.byte	'PL4',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'PD5',0,1
	.word	353
	.byte	3,1,2,35,2,10
	.byte	'PL5',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'PD6',0,1
	.word	353
	.byte	3,5,2,35,3,10
	.byte	'PL6',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'PD7',0,1
	.word	353
	.byte	3,1,2,35,3,10
	.byte	'PL7',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,11,135,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4419
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PDR1_Bits',0,11,181,3,16,4,10
	.byte	'PD8',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'PL8',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PD9',0,1
	.word	353
	.byte	3,1,2,35,0,10
	.byte	'PL9',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'PD10',0,1
	.word	353
	.byte	3,5,2,35,1,10
	.byte	'PL10',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'PD11',0,1
	.word	353
	.byte	3,1,2,35,1,10
	.byte	'PL11',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'PD12',0,1
	.word	353
	.byte	3,5,2,35,2,10
	.byte	'PL12',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'PD13',0,1
	.word	353
	.byte	3,1,2,35,2,10
	.byte	'PL13',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'PD14',0,1
	.word	353
	.byte	3,5,2,35,3,10
	.byte	'PL14',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'PD15',0,1
	.word	353
	.byte	3,1,2,35,3,10
	.byte	'PL15',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,11,143,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	4723
	.byte	4,2,35,0,0,17,8
	.word	353
	.byte	18,7,0,9
	.byte	'_Ifx_P_ESR_Bits',0,11,88,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,11,223,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5048
	.byte	4,2,35,0,0,17,12
	.word	353
	.byte	18,11,0,9
	.byte	'_Ifx_P_PDISC_Bits',0,11,138,3,16,4,10
	.byte	'PDIS0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'PDIS2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'PDIS3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PDIS4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'PDIS5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'PDIS6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PDIS7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'PDIS8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'PDIS9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'PDIS10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'PDIS11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'PDIS12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'PDIS13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'PDIS14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'PDIS15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,11,255,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5388
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_PCSR_Bits',0,11,253,2,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'SEL1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'SEL2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	830
	.byte	6,7,2,35,0,10
	.byte	'SEL9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'SEL10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	330
	.byte	20,1,2,35,0,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,11,247,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5754
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR0_Bits',0,11,166,2,16,4,10
	.byte	'PS0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	28,0,2,35,0,0,11,11,207,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	5965
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR4_Bits',0,11,187,2,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'PS4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	330
	.byte	24,0,2,35,0,0,11,11,223,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6112
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR8_Bits',0,11,198,2,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'PS8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	330
	.byte	20,0,2,35,0,0,11,11,231,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6281
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR12_Bits',0,11,176,2,16,4,10
	.byte	'reserved_0',0,2
	.word	830
	.byte	12,4,2,35,0,10
	.byte	'PS12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,11,215,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6453
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR0_Bits',0,11,192,1,16,4,10
	.byte	'reserved_0',0,2
	.word	830
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,2
	.word	830
	.byte	12,0,2,35,2,0,11,11,159,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6628
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR4_Bits',0,11,213,1,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	20,12,2,35,0,10
	.byte	'PCL4',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,11,175,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6802
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR8_Bits',0,11,224,1,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	24,8,2,35,0,10
	.byte	'PCL8',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	353
	.byte	4,0,2,35,3,0,11,11,183,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	6976
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR12_Bits',0,11,203,1,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	28,4,2,35,0,10
	.byte	'PCL12',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,11,167,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7152
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMSR_Bits',0,11,209,2,16,4,10
	.byte	'PS0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'PS2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'PS3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PS4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'PS5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'PS6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PS7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'PS8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'PS9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'PS10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'PS11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'PS12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'PS13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'PS14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'PS15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,11,199,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7308
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_OMCR_Bits',0,11,235,1,16,4,10
	.byte	'reserved_0',0,2
	.word	830
	.byte	16,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'PCL2',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'PCL3',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'PCL4',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'PCL5',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'PCL6',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'PCL7',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'PCL8',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'PCL9',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'PCL10',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'PCL11',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'PCL12',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'PCL13',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'PCL14',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'PCL15',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,11,151,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7641
	.byte	4,2,35,0,0,17,96
	.word	353
	.byte	18,95,0,9
	.byte	'_Ifx_P_ACCEN1_Bits',0,11,82,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,11,215,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	7998
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P_ACCEN0_Bits',0,11,45,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,11,207,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	8085
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_P',0,11,159,5,25,128,2,12
	.byte	'OUT',0
	.word	2490
	.byte	4,2,35,0,12
	.byte	'OMR',0
	.word	3061
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	3180
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3220
	.byte	4,2,35,12,12
	.byte	'IOCR0',0
	.word	3404
	.byte	4,2,35,16,12
	.byte	'IOCR4',0
	.word	3619
	.byte	4,2,35,20,12
	.byte	'IOCR8',0
	.word	3836
	.byte	4,2,35,24,12
	.byte	'IOCR12',0
	.word	4056
	.byte	4,2,35,28,12
	.byte	'reserved_20',0
	.word	3220
	.byte	4,2,35,32,12
	.byte	'IN',0
	.word	4370
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	4410
	.byte	24,2,35,40,12
	.byte	'PDR0',0
	.word	4683
	.byte	4,2,35,64,12
	.byte	'PDR1',0
	.word	4999
	.byte	4,2,35,68,12
	.byte	'reserved_48',0
	.word	5039
	.byte	8,2,35,72,12
	.byte	'ESR',0
	.word	5339
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	5379
	.byte	12,2,35,84,12
	.byte	'PDISC',0
	.word	5714
	.byte	4,2,35,96,12
	.byte	'PCSR',0
	.word	5925
	.byte	4,2,35,100,12
	.byte	'reserved_64',0
	.word	5039
	.byte	8,2,35,104,12
	.byte	'OMSR0',0
	.word	6072
	.byte	4,2,35,112,12
	.byte	'OMSR4',0
	.word	6241
	.byte	4,2,35,116,12
	.byte	'OMSR8',0
	.word	6413
	.byte	4,2,35,120,12
	.byte	'OMSR12',0
	.word	6588
	.byte	4,2,35,124,12
	.byte	'OMCR0',0
	.word	6762
	.byte	4,3,35,128,1,12
	.byte	'OMCR4',0
	.word	6936
	.byte	4,3,35,132,1,12
	.byte	'OMCR8',0
	.word	7112
	.byte	4,3,35,136,1,12
	.byte	'OMCR12',0
	.word	7268
	.byte	4,3,35,140,1,12
	.byte	'OMSR',0
	.word	7601
	.byte	4,3,35,144,1,12
	.byte	'OMCR',0
	.word	7949
	.byte	4,3,35,148,1,12
	.byte	'reserved_98',0
	.word	7989
	.byte	96,3,35,152,1,12
	.byte	'ACCEN1',0
	.word	8045
	.byte	4,3,35,248,1,12
	.byte	'ACCEN0',0
	.word	8612
	.byte	4,3,35,252,1,0,13
	.word	8652
	.byte	6
	.word	9185
	.byte	14,10,131,1,9,4,15
	.byte	'IfxPort_State_notChanged',0,0,15
	.byte	'IfxPort_State_high',0,1,15
	.byte	'IfxPort_State_low',0,128,128,4,15
	.byte	'IfxPort_State_toggled',0,129,128,4,0,2
	.byte	'IfxPort_setPinState',0,3,10,143,4,17,1,1,8
	.byte	'port',0,10,143,4,44
	.word	9190
	.byte	8
	.byte	'pinIndex',0,10,143,4,56
	.word	353
	.byte	8
	.byte	'action',0,10,143,4,80
	.word	9195
	.byte	3,0,9
	.byte	'_Ifx_DMA_CLC_Bits',0,13,131,4,16,4,10
	.byte	'DISR',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	28,0,2,35,0,0,11,13,160,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9376
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ID_Bits',0,13,155,4,16,4,10
	.byte	'MODREV',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	830
	.byte	16,0,2,35,2,0,11,13,184,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9533
	.byte	4,2,35,0,0,17,20
	.word	353
	.byte	18,19,0,9
	.byte	'_Ifx_DMA_MEMCON_Bits',0,13,163,4,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	2,30,2,35,0,10
	.byte	'INTERR',0,4
	.word	929
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'RMWERR',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	929
	.byte	1,26,2,35,0,10
	.byte	'DATAERR',0,4
	.word	929
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	929
	.byte	1,24,2,35,0,10
	.byte	'PMIC',0,4
	.word	929
	.byte	1,23,2,35,0,10
	.byte	'ERRDIS',0,4
	.word	929
	.byte	1,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	929
	.byte	22,0,2,35,0,0,11,13,192,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9664
	.byte	4,2,35,0,0,17,28
	.word	353
	.byte	18,27,0,9
	.byte	'_Ifx_DMA_ACCEN00_Bits',0,13,45,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,13,128,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	9941
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN01_Bits',0,13,82,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,136,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10511
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN10_Bits',0,13,88,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,13,144,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	10601
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN11_Bits',0,13,125,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,152,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11171
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN20_Bits',0,13,131,1,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,13,160,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11261
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN21_Bits',0,13,168,1,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,168,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11832
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN30_Bits',0,13,174,1,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,13,176,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	11923
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ACCEN31_Bits',0,13,211,1,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,184,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12494
	.byte	4,2,35,0,0,17,192,1
	.word	353
	.byte	18,191,1,0,9
	.byte	'_Ifx_DMA_BLK_EER_Bits',0,13,233,1,16,4,10
	.byte	'reserved_0',0,2
	.word	830
	.byte	16,0,2,35,0,10
	.byte	'ESER',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'EDER',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	353
	.byte	6,0,2,35,2,10
	.byte	'ERER',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'ELER',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	353
	.byte	5,0,2,35,3,0,11,13,200,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12596
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ERRSR_Bits',0,13,246,1,16,4,10
	.byte	'LEC',0,1
	.word	353
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	830
	.byte	9,0,2,35,0,10
	.byte	'SER',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'DER',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	353
	.byte	2,4,2,35,2,10
	.byte	'SPBER',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'SRIER',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	353
	.byte	2,0,2,35,2,10
	.byte	'RAMER',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'SLLER',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'DLLER',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	353
	.byte	5,0,2,35,3,0,11,13,208,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	12820
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_CLRE_Bits',0,13,217,1,16,4,10
	.byte	'reserved_0',0,2
	.word	830
	.byte	16,0,2,35,0,10
	.byte	'CSER',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'CDER',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	353
	.byte	2,4,2,35,2,10
	.byte	'CSPBER',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'CSRIER',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	353
	.byte	2,0,2,35,2,10
	.byte	'CRAMER',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'CSLLER',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'CDLLER',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	353
	.byte	5,0,2,35,3,0,11,13,192,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13112
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SR_Bits',0,13,161,3,16,4,10
	.byte	'RS',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	353
	.byte	3,4,2,35,0,10
	.byte	'WS',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	830
	.byte	11,0,2,35,0,10
	.byte	'CH',0,1
	.word	353
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	830
	.byte	9,0,2,35,2,0,11,13,216,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13395
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R0_Bits',0,13,193,2,16,4,10
	.byte	'RD00',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'RD01',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'RD02',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'RD03',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,248,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13575
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R1_Bits',0,13,202,2,16,4,10
	.byte	'RD10',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'RD11',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'RD12',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'RD13',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,128,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13710
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R2_Bits',0,13,211,2,16,4,10
	.byte	'RD20',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'RD21',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'RD22',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'RD23',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,136,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13845
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R3_Bits',0,13,220,2,16,4,10
	.byte	'RD30',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'RD31',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'RD32',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'RD33',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,144,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	13980
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R4_Bits',0,13,229,2,16,4,10
	.byte	'RD40',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'RD41',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'RD42',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'RD43',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,152,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14115
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R5_Bits',0,13,238,2,16,4,10
	.byte	'RD50',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'RD51',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'RD52',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'RD53',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,160,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14250
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R6_Bits',0,13,247,2,16,4,10
	.byte	'RD60',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'RD61',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'RD62',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'RD63',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,168,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14385
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_R7_Bits',0,13,128,3,16,4,10
	.byte	'RD70',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'RD71',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'RD72',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'RD73',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,176,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14520
	.byte	4,2,35,0,0,17,32
	.word	353
	.byte	18,31,0,9
	.byte	'_Ifx_DMA_BLK_ME_RDCRC_Bits',0,13,137,3,16,4,10
	.byte	'RDCRC',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,184,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14664
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SDCRC_Bits',0,13,149,3,16,4,10
	.byte	'SDCRC',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,200,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14755
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SADR_Bits',0,13,143,3,16,4,10
	.byte	'SADR',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,192,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14846
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_DADR_Bits',0,13,187,2,16,4,10
	.byte	'DADR',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,240,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	14935
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_ADICR_Bits',0,13,135,2,16,4,10
	.byte	'SMF',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'INCS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'DMF',0,1
	.word	353
	.byte	3,1,2,35,0,10
	.byte	'INCD',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'CBLS',0,1
	.word	353
	.byte	4,4,2,35,1,10
	.byte	'CBLD',0,1
	.word	353
	.byte	4,0,2,35,1,10
	.byte	'SHCT',0,1
	.word	353
	.byte	4,4,2,35,2,10
	.byte	'SCBE',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'DCBE',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'STAMP',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'ETRL',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'WRPSE',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'WRPDE',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'INTCT',0,1
	.word	353
	.byte	2,4,2,35,3,10
	.byte	'IRDV',0,1
	.word	353
	.byte	4,0,2,35,3,0,11,13,216,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15024
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_CHCR_Bits',0,13,155,2,16,4,10
	.byte	'TREL',0,2
	.word	830
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'BLKM',0,1
	.word	353
	.byte	3,5,2,35,2,10
	.byte	'RROAT',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'CHMODE',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'CHDW',0,1
	.word	353
	.byte	3,0,2,35,2,10
	.byte	'PATSEL',0,1
	.word	353
	.byte	3,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'PRSEL',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'DMAPRIO',0,1
	.word	353
	.byte	2,0,2,35,3,0,11,13,224,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15340
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_SHADR_Bits',0,13,155,3,16,4,10
	.byte	'SHADR',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,208,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15619
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME_CHSR_Bits',0,13,171,2,16,4,10
	.byte	'TCOUNT',0,2
	.word	830
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'LXO',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'WRPS',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'WRPD',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'ICH',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'IPM',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,1
	.word	353
	.byte	2,2,2,35,2,10
	.byte	'BUFFER',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'FROZEN',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,232,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	15710
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_BLK_ME',0,13,144,8,25,112,12
	.byte	'SR',0
	.word	13535
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	5379
	.byte	12,2,35,4,12
	.byte	'R0',0
	.word	13670
	.byte	4,2,35,16,12
	.byte	'R1',0
	.word	13805
	.byte	4,2,35,20,12
	.byte	'R2',0
	.word	13940
	.byte	4,2,35,24,12
	.byte	'R3',0
	.word	14075
	.byte	4,2,35,28,12
	.byte	'R4',0
	.word	14210
	.byte	4,2,35,32,12
	.byte	'R5',0
	.word	14345
	.byte	4,2,35,36,12
	.byte	'R6',0
	.word	14480
	.byte	4,2,35,40,12
	.byte	'R7',0
	.word	14615
	.byte	4,2,35,44,12
	.byte	'reserved_30',0
	.word	14655
	.byte	32,2,35,48,12
	.byte	'RDCRC',0
	.word	14715
	.byte	4,2,35,80,12
	.byte	'SDCRC',0
	.word	14806
	.byte	4,2,35,84,12
	.byte	'SADR',0
	.word	14895
	.byte	4,2,35,88,12
	.byte	'DADR',0
	.word	14984
	.byte	4,2,35,92,12
	.byte	'ADICR',0
	.word	15300
	.byte	4,2,35,96,12
	.byte	'CHCR',0
	.word	15579
	.byte	4,2,35,100,12
	.byte	'SHADR',0
	.word	15670
	.byte	4,2,35,104,12
	.byte	'CHSR',0
	.word	15943
	.byte	4,2,35,108,0,13
	.word	15983
	.byte	9
	.byte	'_Ifx_DMA_BLK',0,13,178,8,25,128,1,12
	.byte	'EER',0
	.word	12780
	.byte	4,2,35,0,12
	.byte	'ERRSR',0
	.word	13072
	.byte	4,2,35,4,12
	.byte	'CLRE',0
	.word	13355
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3220
	.byte	4,2,35,12,12
	.byte	'ME',0
	.word	16271
	.byte	112,2,35,16,0,13
	.word	16276
	.byte	17,128,31
	.word	353
	.byte	18,255,30,0,13
	.word	16276
	.byte	9
	.byte	'_Ifx_DMA_OTSS_Bits',0,13,185,4,16,4,10
	.byte	'TGS',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	353
	.byte	3,1,2,35,0,10
	.byte	'BS',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	330
	.byte	24,0,2,35,0,0,11,13,208,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16392
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_ERRINTR_Bits',0,13,141,4,16,4,10
	.byte	'SIT',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	330
	.byte	31,0,2,35,0,0,11,13,168,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16531
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_PRR0_Bits',0,13,194,4,16,4,10
	.byte	'PAT00',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'PAT01',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'PAT02',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'PAT03',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,216,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16637
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_PRR1_Bits',0,13,203,4,16,4,10
	.byte	'PAT10',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'PAT11',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'PAT12',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'PAT13',0,1
	.word	353
	.byte	8,0,2,35,3,0,11,13,224,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16771
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_TIME_Bits',0,13,226,4,16,4,10
	.byte	'COUNT',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,248,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16905
	.byte	4,2,35,0,0,17,236,1
	.word	353
	.byte	18,235,1,0,9
	.byte	'_Ifx_DMA_MODE_Bits',0,13,178,4,16,4,10
	.byte	'MODE',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	330
	.byte	31,0,2,35,0,0,11,13,200,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	16999
	.byte	4,2,35,0,0,17,16
	.word	17063
	.byte	18,3,0,17,240,9
	.word	353
	.byte	18,239,9,0,9
	.byte	'_Ifx_DMA_HRR_Bits',0,13,148,4,16,4,10
	.byte	'HRP',0,1
	.word	353
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	330
	.byte	30,0,2,35,0,0,11,13,176,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17123
	.byte	4,2,35,0,0,17,64
	.word	17185
	.byte	18,15,0,17,192,3
	.word	353
	.byte	18,191,3,0,9
	.byte	'_Ifx_DMA_SUSENR_Bits',0,13,219,4,16,4,10
	.byte	'SUSEN',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	330
	.byte	31,0,2,35,0,0,11,13,240,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17245
	.byte	4,2,35,0,0,17,64
	.word	17312
	.byte	18,15,0,9
	.byte	'_Ifx_DMA_SUSACR_Bits',0,13,212,4,16,4,10
	.byte	'SUSAC',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	330
	.byte	31,0,2,35,0,0,11,13,232,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17361
	.byte	4,2,35,0,0,17,64
	.word	17428
	.byte	18,15,0,9
	.byte	'_Ifx_DMA_TSR_Bits',0,13,232,4,16,4,10
	.byte	'RST',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'HTRE',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'TRL',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'CH',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	353
	.byte	4,0,2,35,0,10
	.byte	'HLTREQ',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'HLTACK',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,1
	.word	353
	.byte	6,0,2,35,1,10
	.byte	'ECH',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'DCH',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'CTL',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	353
	.byte	5,0,2,35,2,10
	.byte	'HLTCLR',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	353
	.byte	7,0,2,35,3,0
.L92:
	.byte	11,13,128,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17477
	.byte	4,2,35,0,0,17,64
	.word	17752
	.byte	18,15,0,9
	.byte	'_Ifx_DMA_CH_RDCRCR_Bits',0,13,235,3,16,4,10
	.byte	'RDCRC',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,128,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17801
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_SDCRCR_Bits',0,13,247,3,16,4,10
	.byte	'SDCRC',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,144,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17889
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_SADR_Bits',0,13,241,3,16,4,10
	.byte	'SADR',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,136,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	17977
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_DADR_Bits',0,13,229,3,16,4,10
	.byte	'DADR',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,248,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18062
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_ADICR_Bits',0,13,172,3,16,4,10
	.byte	'SMF',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'INCS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'DMF',0,1
	.word	353
	.byte	3,1,2,35,0,10
	.byte	'INCD',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'CBLS',0,1
	.word	353
	.byte	4,4,2,35,1,10
	.byte	'CBLD',0,1
	.word	353
	.byte	4,0,2,35,1,10
	.byte	'SHCT',0,1
	.word	353
	.byte	4,4,2,35,2,10
	.byte	'SCBE',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'DCBE',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'STAMP',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'ETRL',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'WRPSE',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'WRPDE',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'INTCT',0,1
	.word	353
	.byte	2,4,2,35,3,10
	.byte	'IRDV',0,1
	.word	353
	.byte	4,0,2,35,3,0
.L141:
	.byte	11,13,224,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18147
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_CHCFGR_Bits',0,13,192,3,16,4,10
	.byte	'TREL',0,2
	.word	830
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'BLKM',0,1
	.word	353
	.byte	3,5,2,35,2,10
	.byte	'RROAT',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'CHMODE',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'CHDW',0,1
	.word	353
	.byte	3,0,2,35,2,10
	.byte	'PATSEL',0,1
	.word	353
	.byte	3,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'PRSEL',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'DMAPRIO',0,1
	.word	353
	.byte	2,0,2,35,3,0
.L138:
	.byte	11,13,232,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18459
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_SHADR_Bits',0,13,253,3,16,4,10
	.byte	'SHADR',0,4
	.word	330
	.byte	32,0,2,35,0,0,11,13,152,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18736
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH_CHCSR_Bits',0,13,208,3,16,4,10
	.byte	'TCOUNT',0,2
	.word	830
	.byte	14,2,2,35,0,10
	.byte	'reserved_14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'LXO',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'WRPS',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'WRPD',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'ICH',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'IPM',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'reserved_20',0,1
	.word	353
	.byte	2,2,2,35,2,10
	.byte	'BUFFER',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'FROZEN',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'SWB',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'CWRP',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'CICH',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'SIT',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	353
	.byte	3,1,2,35,3,10
	.byte	'SCH',0,1
	.word	353
	.byte	1,0,2,35,3,0,11,13,240,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	18823
	.byte	4,2,35,0,0,9
	.byte	'_Ifx_DMA_CH',0,13,188,8,25,32,12
	.byte	'RDCRCR',0
	.word	17849
	.byte	4,2,35,0,12
	.byte	'SDCRCR',0
	.word	17937
	.byte	4,2,35,4,12
	.byte	'SADR',0
	.word	18022
	.byte	4,2,35,8,12
	.byte	'DADR',0
	.word	18107
	.byte	4,2,35,12,12
	.byte	'ADICR',0
	.word	18419
	.byte	4,2,35,16,12
	.byte	'CHCFGR',0
	.word	18696
	.byte	4,2,35,20,12
	.byte	'SHADR',0
	.word	18783
	.byte	4,2,35,24,12
	.byte	'CHCSR',0
	.word	19130
	.byte	4,2,35,28,0,17,128,4
	.word	19170
	.byte	18,15,0,13
	.word	19310
	.byte	17,128,60
	.word	353
	.byte	18,255,59,0,9
	.byte	'_Ifx_DMA',0,13,211,8,25,128,128,1,12
	.byte	'CLC',0
	.word	9493
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	3220
	.byte	4,2,35,4,12
	.byte	'ID',0
	.word	9615
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	9655
	.byte	20,2,35,12,12
	.byte	'MEMCON',0
	.word	9892
	.byte	4,2,35,32,12
	.byte	'reserved_24',0
	.word	9932
	.byte	28,2,35,36,12
	.byte	'ACCEN00',0
	.word	10471
	.byte	4,2,35,64,12
	.byte	'ACCEN01',0
	.word	10561
	.byte	4,2,35,68,12
	.byte	'ACCEN10',0
	.word	11131
	.byte	4,2,35,72,12
	.byte	'ACCEN11',0
	.word	11221
	.byte	4,2,35,76,12
	.byte	'ACCEN20',0
	.word	11792
	.byte	4,2,35,80,12
	.byte	'ACCEN21',0
	.word	11883
	.byte	4,2,35,84,12
	.byte	'ACCEN30',0
	.word	12454
	.byte	4,2,35,88,12
	.byte	'ACCEN31',0
	.word	12545
	.byte	4,2,35,92,12
	.byte	'reserved_60',0
	.word	12585
	.byte	192,1,2,35,96,12
	.byte	'BLK0',0
	.word	16371
	.byte	128,1,3,35,160,2,12
	.byte	'reserved_1A0',0
	.word	16376
	.byte	128,31,3,35,160,3,12
	.byte	'BLK1',0
	.word	16387
	.byte	128,1,3,35,160,34,12
	.byte	'reserved_11A0',0
	.word	7989
	.byte	96,3,35,160,35,12
	.byte	'OTSS',0
	.word	16491
	.byte	4,3,35,128,36,12
	.byte	'ERRINTR',0
	.word	16597
	.byte	4,3,35,132,36,12
	.byte	'PRR0',0
	.word	16731
	.byte	4,3,35,136,36,12
	.byte	'PRR1',0
	.word	16865
	.byte	4,3,35,140,36,12
	.byte	'TIME',0
	.word	16948
	.byte	4,3,35,144,36,12
	.byte	'reserved_1214',0
	.word	16988
	.byte	236,1,3,35,148,36,12
	.byte	'MODE',0
	.word	17103
	.byte	16,3,35,128,38,12
	.byte	'reserved_1310',0
	.word	17112
	.byte	240,9,3,35,144,38,12
	.byte	'HRR',0
	.word	17225
	.byte	64,3,35,128,48,12
	.byte	'reserved_1840',0
	.word	17234
	.byte	192,3,3,35,192,48,12
	.byte	'SUSENR',0
	.word	17352
	.byte	64,3,35,128,52,12
	.byte	'reserved_1A40',0
	.word	17234
	.byte	192,3,3,35,192,52,12
	.byte	'SUSACR',0
	.word	17468
	.byte	64,3,35,128,56,12
	.byte	'reserved_1C40',0
	.word	17234
	.byte	192,3,3,35,192,56,12
	.byte	'TSR',0
	.word	17792
	.byte	64,3,35,128,60,12
	.byte	'reserved_1E40',0
	.word	17234
	.byte	192,3,3,35,192,60,12
	.byte	'CH',0
	.word	19320
	.byte	128,4,3,35,128,64,12
	.byte	'reserved_2200',0
	.word	19325
	.byte	128,60,3,35,128,68,0,13
	.word	19336
.L72:
	.byte	6
	.word	20038
	.byte	14,14,81,9,1,15
	.byte	'IfxDma_ChannelId_none',0,127,15
	.byte	'IfxDma_ChannelId_0',0,0,15
	.byte	'IfxDma_ChannelId_1',0,1,15
	.byte	'IfxDma_ChannelId_2',0,2,15
	.byte	'IfxDma_ChannelId_3',0,3,15
	.byte	'IfxDma_ChannelId_4',0,4,15
	.byte	'IfxDma_ChannelId_5',0,5,15
	.byte	'IfxDma_ChannelId_6',0,6,15
	.byte	'IfxDma_ChannelId_7',0,7,15
	.byte	'IfxDma_ChannelId_8',0,8,15
	.byte	'IfxDma_ChannelId_9',0,9,15
	.byte	'IfxDma_ChannelId_10',0,10,15
	.byte	'IfxDma_ChannelId_11',0,11,15
	.byte	'IfxDma_ChannelId_12',0,12,15
	.byte	'IfxDma_ChannelId_13',0,13,15
	.byte	'IfxDma_ChannelId_14',0,14,15
	.byte	'IfxDma_ChannelId_15',0,15,0,7
	.byte	'IfxDma_isChannelTransactionPending',0,3,12,242,10,20
	.word	353
	.byte	1,1,8
	.byte	'dma',0,12,242,10,64
	.word	20043
	.byte	8
	.byte	'channelId',0,12,242,10,86
	.word	20048
	.byte	3,0,2
	.byte	'IfxDma_startChannelTransaction',0,3,12,235,11,17,1,1,8
	.byte	'dma',0,12,235,11,57
	.word	20043
	.byte	8
	.byte	'channelId',0,12,235,11,79
	.word	20048
	.byte	3,0,2
	.byte	'IfxDma_setChannelDestinationAddress',0,3,12,144,11,17,1,1,8
	.byte	'dma',0,12,144,11,62
	.word	20043
	.byte	8
	.byte	'channelId',0,12,144,11,84
	.word	20048
	.byte	8
	.byte	'address',0,12,144,11,101
	.word	249
	.byte	3,0,19
	.word	243
	.byte	6
	.word	20669
	.byte	2
	.byte	'IfxDma_setChannelSourceAddress',0,3,12,203,11,17,1,1,8
	.byte	'dma',0,12,203,11,57
	.word	20043
	.byte	8
	.byte	'channelId',0,12,203,11,79
	.word	20048
	.byte	8
	.byte	'address',0,12,203,11,102
	.word	20674
	.byte	3,0,2
	.byte	'IfxDma_setChannelTransferCount',0,3,12,220,11,17,1,1,8
	.byte	'dma',0,12,220,11,57
	.word	20043
	.byte	8
	.byte	'channelId',0,12,220,11,79
	.word	20048
	.byte	8
	.byte	'transferCount',0,12,220,11,97
	.word	1985
	.byte	3,0,2
	.byte	'IfxDma_clearChannelInterrupt',0,3,12,128,9,17,1,1,8
	.byte	'dma',0,12,128,9,55
	.word	20043
	.byte	8
	.byte	'channelId',0,12,128,9,77
	.word	20048
	.byte	3,0,7
	.byte	'IfxDma_getAndClearChannelInterrupt',0,3,12,206,9,20
	.word	353
	.byte	1,1,8
	.byte	'dma',0,12,206,9,64
	.word	20043
	.byte	8
	.byte	'channelId',0,12,206,9,86
	.word	20048
	.byte	3,0,7
	.byte	'IfxDma_getChannelInterrupt',0,3,12,150,10,20
	.word	353
	.byte	1,1,8
	.byte	'dma',0,12,150,10,56
	.word	20043
	.byte	8
	.byte	'channelId',0,12,150,10,78
	.word	20048
	.byte	3,0
.L95:
	.byte	7
	.byte	'IfxDma_getSrcPointer',0,3,12,217,10,35
	.word	704
	.byte	1,1
.L97:
	.byte	8
	.byte	'dma',0,12,217,10,65
	.word	20043
.L99:
	.byte	8
	.byte	'channelId',0,12,217,10,87
	.word	20048
.L101:
	.byte	3,0,20
	.word	188
	.byte	3,0,20
	.word	254
	.byte	21
	.word	272
	.byte	3,0,20
	.word	287
	.byte	21
	.word	301
	.byte	21
	.word	314
	.byte	3,0,20
	.word	709
	.byte	21
	.word	737
	.byte	3,0,20
	.word	752
	.byte	21
	.word	774
	.byte	3,0,20
	.word	852
	.byte	21
	.word	872
	.byte	21
	.word	885
	.byte	21
	.word	907
	.byte	16,22
	.word	709
	.byte	21
	.word	737
	.byte	23
	.word	750
	.byte	0,3,0,0,20
	.word	1629
	.byte	21
	.word	1669
	.byte	21
	.word	1687
	.byte	3,0,20
	.word	1707
	.byte	21
	.word	1745
	.byte	21
	.word	1763
	.byte	3,0,20
	.word	1783
	.byte	21
	.word	1834
	.byte	3,0,20
	.word	1909
	.byte	3,0,20
	.word	1943
	.byte	3,0,20
	.word	2006
	.byte	21
	.word	2047
	.byte	3,0,20
	.word	2066
	.byte	21
	.word	2121
	.byte	3,0,20
	.word	2140
	.byte	21
	.word	2180
	.byte	21
	.word	2197
	.byte	3,0,20
	.word	9298
	.byte	21
	.word	9326
	.byte	21
	.word	9340
	.byte	21
	.word	9358
	.byte	3,0,20
	.word	20420
	.byte	21
	.word	20467
	.byte	21
	.word	20480
	.byte	3,0,20
	.word	20501
	.byte	21
	.word	20540
	.byte	21
	.word	20553
	.byte	3,0,20
	.word	20574
	.byte	21
	.word	20618
	.byte	21
	.word	20631
	.byte	21
	.word	20650
	.byte	3,0,20
	.word	20679
	.byte	21
	.word	20718
	.byte	21
	.word	20731
	.byte	21
	.word	20750
	.byte	3,0,20
	.word	20769
	.byte	21
	.word	20808
	.byte	21
	.word	20821
	.byte	21
	.word	20840
	.byte	3,0,20
	.word	20865
	.byte	21
	.word	20902
	.byte	21
	.word	20915
	.byte	3,0,20
	.word	20936
	.byte	21
	.word	20983
	.byte	21
	.word	20996
	.byte	3,0,20
	.word	21017
	.byte	21
	.word	21056
	.byte	21
	.word	21069
	.byte	3,0,20
	.word	21090
	.byte	21
	.word	21123
	.byte	21
	.word	21136
	.byte	3,0,24,15,187,3,9,4,12
	.byte	'dma',0
	.word	20043
	.byte	4,2,35,0,0
.L70:
	.byte	6
	.word	21548
	.byte	24,15,247,3,9,4,12
	.byte	'dma',0
	.word	20043
	.byte	4,2,35,0,0,19
	.word	21573
.L78:
	.byte	6
	.word	21593
.L81:
	.byte	6
	.word	21573
	.byte	13
	.word	19170
.L134:
	.byte	6
	.word	21608
	.byte	24,15,198,3,9,12,12
	.byte	'dma',0
	.word	20043
	.byte	4,2,35,0,12
	.byte	'channelId',0
	.word	20048
	.byte	1,2,35,4,12
	.byte	'channel',0
	.word	21613
	.byte	4,2,35,8,0
.L85:
	.byte	6
	.word	21618
	.byte	14,12,140,1,9,1,15
	.byte	'IfxDma_ChannelMove_1',0,0,15
	.byte	'IfxDma_ChannelMove_2',0,1,15
	.byte	'IfxDma_ChannelMove_4',0,2,15
	.byte	'IfxDma_ChannelMove_8',0,3,15
	.byte	'IfxDma_ChannelMove_16',0,4,15
	.byte	'IfxDma_ChannelMove_3',0,5,15
	.byte	'IfxDma_ChannelMove_5',0,6,15
	.byte	'IfxDma_ChannelMove_9',0,7,0,14,12,201,1,9,1,15
	.byte	'IfxDma_ChannelRequestMode_oneTransferPerRequest',0,0,15
	.byte	'IfxDma_ChannelRequestMode_completeTransactionPerRequest',0,1,0,14,12,168,1,9,1,15
	.byte	'IfxDma_ChannelOperationMode_single',0,0,15
	.byte	'IfxDma_ChannelOperationMode_continuous',0,1,0,14,12,155,1,9,1,15
	.byte	'IfxDma_ChannelMoveSize_8bit',0,0,15
	.byte	'IfxDma_ChannelMoveSize_16bit',0,1,15
	.byte	'IfxDma_ChannelMoveSize_32bit',0,2,15
	.byte	'IfxDma_ChannelMoveSize_64bit',0,3,15
	.byte	'IfxDma_ChannelMoveSize_128bit',0,4,15
	.byte	'IfxDma_ChannelMoveSize_256bit',0,5,0,14,12,177,1,9,1,15
	.byte	'IfxDma_ChannelPattern_0_disable',0,0,15
	.byte	'IfxDma_ChannelPattern_0_mode1',0,1,15
	.byte	'IfxDma_ChannelPattern_0_mode2',0,2,15
	.byte	'IfxDma_ChannelPattern_0_mode3',0,3,15
	.byte	'IfxDma_ChannelPattern_1_disable',0,4,15
	.byte	'IfxDma_ChannelPattern_1_mode1',0,5,15
	.byte	'IfxDma_ChannelPattern_1_mode2',0,6,15
	.byte	'IfxDma_ChannelPattern_1_mode3',0,7,0,14,12,210,1,9,1,15
	.byte	'IfxDma_ChannelRequestSource_peripheral',0,0,15
	.byte	'IfxDma_ChannelRequestSource_daisyChain',0,1,0,14,12,74,9,1,15
	.byte	'IfxDma_ChannelBusPriority_low',0,0,15
	.byte	'IfxDma_ChannelBusPriority_medium',0,1,15
	.byte	'IfxDma_ChannelBusPriority_high',0,2,0,14,12,116,9,1,15
	.byte	'IfxDma_ChannelIncrementStep_1',0,0,15
	.byte	'IfxDma_ChannelIncrementStep_2',0,1,15
	.byte	'IfxDma_ChannelIncrementStep_4',0,2,15
	.byte	'IfxDma_ChannelIncrementStep_8',0,3,15
	.byte	'IfxDma_ChannelIncrementStep_16',0,4,15
	.byte	'IfxDma_ChannelIncrementStep_32',0,5,15
	.byte	'IfxDma_ChannelIncrementStep_64',0,6,15
	.byte	'IfxDma_ChannelIncrementStep_128',0,7,0,14,12,107,9,1,15
	.byte	'IfxDma_ChannelIncrementDirection_negative',0,0,15
	.byte	'IfxDma_ChannelIncrementDirection_positive',0,1,0,14,12,84,9,1,15
	.byte	'IfxDma_ChannelIncrementCircular_none',0,0,15
	.byte	'IfxDma_ChannelIncrementCircular_2',0,1,15
	.byte	'IfxDma_ChannelIncrementCircular_4',0,2,15
	.byte	'IfxDma_ChannelIncrementCircular_8',0,3,15
	.byte	'IfxDma_ChannelIncrementCircular_16',0,4,15
	.byte	'IfxDma_ChannelIncrementCircular_32',0,5,15
	.byte	'IfxDma_ChannelIncrementCircular_64',0,6,15
	.byte	'IfxDma_ChannelIncrementCircular_128',0,7,15
	.byte	'IfxDma_ChannelIncrementCircular_256',0,8,15
	.byte	'IfxDma_ChannelIncrementCircular_512',0,9,15
	.byte	'IfxDma_ChannelIncrementCircular_1024',0,10,15
	.byte	'IfxDma_ChannelIncrementCircular_2048',0,11,15
	.byte	'IfxDma_ChannelIncrementCircular_4096',0,12,15
	.byte	'IfxDma_ChannelIncrementCircular_8192',0,13,15
	.byte	'IfxDma_ChannelIncrementCircular_16384',0,14,15
	.byte	'IfxDma_ChannelIncrementCircular_32768',0,15,0,14,12,219,1,9,1,15
	.byte	'IfxDma_ChannelShadow_none',0,0,15
	.byte	'IfxDma_ChannelShadow_src',0,1,15
	.byte	'IfxDma_ChannelShadow_dst',0,2,15
	.byte	'IfxDma_ChannelShadow_srcDirectWrite',0,5,15
	.byte	'IfxDma_ChannelShadow_dstDirectWrite',0,6,15
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch',0,8,15
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch',0,9,15
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch',0,10,15
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch',0,11,15
	.byte	'IfxDma_ChannelShadow_linkedList',0,12,15
	.byte	'IfxDma_ChannelShadow_accumulatedLinkedList',0,13,15
	.byte	'IfxDma_ChannelShadow_safeLinkedList',0,14,15
	.byte	'IfxDma_ChannelShadow_conditionalLinkedList',0,15,0,14,12,131,1,9,1,15
	.byte	'IfxDma_ChannelInterruptControl_thresholdLimitMatch',0,0,15
	.byte	'IfxDma_ChannelInterruptControl_transferCountDecremented',0,1,0,24,15,207,3,9,56,12
	.byte	'module',0
	.word	21568
	.byte	4,2,35,0,12
	.byte	'channelId',0
	.word	20048
	.byte	1,2,35,4,12
	.byte	'sourceAddress',0
	.word	1985
	.byte	4,2,35,6,12
	.byte	'destinationAddress',0
	.word	1985
	.byte	4,2,35,10,12
	.byte	'shadowAddress',0
	.word	1985
	.byte	4,2,35,14,12
	.byte	'readDataCrc',0
	.word	1985
	.byte	4,2,35,18,12
	.byte	'sourceDestinationAddressCrc',0
	.word	1985
	.byte	4,2,35,22,12
	.byte	'transferCount',0
	.word	830
	.byte	2,2,35,26,12
	.byte	'blockMode',0
	.word	21679
	.byte	1,2,35,28,12
	.byte	'requestMode',0
	.word	21871
	.byte	1,2,35,29,12
	.byte	'operationMode',0
	.word	21986
	.byte	1,2,35,30,12
	.byte	'moveSize',0
	.word	22071
	.byte	1,2,35,31,12
	.byte	'pattern',0
	.word	22265
	.byte	1,2,35,32,12
	.byte	'requestSource',0
	.word	22532
	.byte	1,2,35,33,12
	.byte	'busPriority',0
	.word	22621
	.byte	1,2,35,34,12
	.byte	'hardwareRequestEnabled',0
	.word	353
	.byte	1,2,35,35,12
	.byte	'sourceAddressIncrementStep',0
	.word	22727
	.byte	1,2,35,36,12
	.byte	'sourceAddressIncrementDirection',0
	.word	22994
	.byte	1,2,35,37,12
	.byte	'sourceAddressCircularRange',0
	.word	23088
	.byte	1,2,35,38,12
	.byte	'destinationAddressIncrementStep',0
	.word	22727
	.byte	1,2,35,39,12
	.byte	'destinationAddressIncrementDirection',0
	.word	22994
	.byte	1,2,35,40,12
	.byte	'destinationAddressCircularRange',0
	.word	23088
	.byte	1,2,35,41,12
	.byte	'shadowControl',0
	.word	23702
	.byte	1,2,35,42,12
	.byte	'sourceCircularBufferEnabled',0
	.word	353
	.byte	1,2,35,43,12
	.byte	'destinationCircularBufferEnabled',0
	.word	353
	.byte	1,2,35,44,12
	.byte	'timestampEnabled',0
	.word	353
	.byte	1,2,35,45,12
	.byte	'wrapSourceInterruptEnabled',0
	.word	353
	.byte	1,2,35,46,12
	.byte	'wrapDestinationInterruptEnabled',0
	.word	353
	.byte	1,2,35,47,12
	.byte	'channelInterruptEnabled',0
	.word	353
	.byte	1,2,35,48,12
	.byte	'channelInterruptControl',0
	.word	24255
	.byte	1,2,35,49,12
	.byte	'interruptRaiseThreshold',0
	.word	353
	.byte	1,2,35,50,12
	.byte	'transactionRequestLostInterruptEnabled',0
	.word	353
	.byte	1,2,35,51,12
	.byte	'channelInterruptPriority',0
	.word	830
	.byte	2,2,35,52,12
	.byte	'channelInterruptTypeOfService',0
	.word	789
	.byte	1,2,35,54,0,19
	.word	24373
.L87:
	.byte	6
	.word	25410
.L126:
	.byte	6
	.word	24373
	.byte	4
	.byte	'short int',0,2,5,25
	.byte	'__wchar_t',0,16,1,1
	.word	25425
	.byte	25
	.byte	'__size_t',0,16,1,1
	.word	330
	.byte	25
	.byte	'__ptrdiff_t',0,16,1,1
	.word	346
	.byte	26,1,6
	.word	25493
	.byte	25
	.byte	'__codeptr',0,16,1,1
	.word	25495
	.byte	25
	.byte	'__intptr_t',0,16,1,1
	.word	346
	.byte	25
	.byte	'__uintptr_t',0,16,1,1
	.word	330
	.byte	25
	.byte	'_iob_flag_t',0,17,82,25
	.word	830
	.byte	25
	.byte	'uint8',0,18,89,24
	.word	353
	.byte	25
	.byte	'sint16',0,18,90,24
	.word	25425
	.byte	25
	.byte	'uint16',0,18,91,24
	.word	830
	.byte	4
	.byte	'long int',0,4,5,25
	.byte	'sint32',0,18,92,24
	.word	25621
	.byte	25
	.byte	'uint32',0,18,93,24
	.word	1985
	.byte	4
	.byte	'float',0,4,4,25
	.byte	'float32',0,18,94,24
	.word	25663
	.byte	25
	.byte	'boolean',0,18,104,24
	.word	353
	.byte	4
	.byte	'long long int',0,8,5,25
	.byte	'sint64',0,19,36,28
	.word	25704
	.byte	25
	.byte	'uint64',0,19,37,28
	.word	217
	.byte	25
	.byte	'pvoid',0,19,40,28
	.word	249
	.byte	25
	.byte	'Ifx_TickTime',0,19,43,28
	.word	25704
	.byte	25
	.byte	'Ifx_Priority',0,19,67,16
	.word	830
	.byte	14,19,94,9,1,15
	.byte	'Ifx_RxSel_a',0,0,15
	.byte	'Ifx_RxSel_b',0,1,15
	.byte	'Ifx_RxSel_c',0,2,15
	.byte	'Ifx_RxSel_d',0,3,15
	.byte	'Ifx_RxSel_e',0,4,15
	.byte	'Ifx_RxSel_f',0,5,15
	.byte	'Ifx_RxSel_g',0,6,15
	.byte	'Ifx_RxSel_h',0,7,0,25
	.byte	'Ifx_RxSel',0,19,104,3
	.word	25807
	.byte	25
	.byte	'IfxDma_ChannelId',0,14,100,3
	.word	20048
	.byte	25
	.byte	'Ifx_DMA_ACCEN00_Bits',0,13,79,3
	.word	9941
	.byte	25
	.byte	'Ifx_DMA_ACCEN01_Bits',0,13,85,3
	.word	10511
	.byte	25
	.byte	'Ifx_DMA_ACCEN10_Bits',0,13,122,3
	.word	10601
	.byte	25
	.byte	'Ifx_DMA_ACCEN11_Bits',0,13,128,1,3
	.word	11171
	.byte	25
	.byte	'Ifx_DMA_ACCEN20_Bits',0,13,165,1,3
	.word	11261
	.byte	25
	.byte	'Ifx_DMA_ACCEN21_Bits',0,13,171,1,3
	.word	11832
	.byte	25
	.byte	'Ifx_DMA_ACCEN30_Bits',0,13,208,1,3
	.word	11923
	.byte	25
	.byte	'Ifx_DMA_ACCEN31_Bits',0,13,214,1,3
	.word	12494
	.byte	25
	.byte	'Ifx_DMA_BLK_CLRE_Bits',0,13,230,1,3
	.word	13112
	.byte	25
	.byte	'Ifx_DMA_BLK_EER_Bits',0,13,243,1,3
	.word	12596
	.byte	25
	.byte	'Ifx_DMA_BLK_ERRSR_Bits',0,13,132,2,3
	.word	12820
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_ADICR_Bits',0,13,152,2,3
	.word	15024
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_CHCR_Bits',0,13,168,2,3
	.word	15340
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_CHSR_Bits',0,13,184,2,3
	.word	15710
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_DADR_Bits',0,13,190,2,3
	.word	14935
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R0_Bits',0,13,199,2,3
	.word	13575
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R1_Bits',0,13,208,2,3
	.word	13710
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R2_Bits',0,13,217,2,3
	.word	13845
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R3_Bits',0,13,226,2,3
	.word	13980
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R4_Bits',0,13,235,2,3
	.word	14115
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R5_Bits',0,13,244,2,3
	.word	14250
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R6_Bits',0,13,253,2,3
	.word	14385
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R7_Bits',0,13,134,3,3
	.word	14520
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_RDCRC_Bits',0,13,140,3,3
	.word	14664
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_SADR_Bits',0,13,146,3,3
	.word	14846
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_SDCRC_Bits',0,13,152,3,3
	.word	14755
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_SHADR_Bits',0,13,158,3,3
	.word	15619
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_SR_Bits',0,13,169,3,3
	.word	13395
	.byte	25
	.byte	'Ifx_DMA_CH_ADICR_Bits',0,13,189,3,3
	.word	18147
	.byte	25
	.byte	'Ifx_DMA_CH_CHCFGR_Bits',0,13,205,3,3
	.word	18459
	.byte	25
	.byte	'Ifx_DMA_CH_CHCSR_Bits',0,13,226,3,3
	.word	18823
	.byte	25
	.byte	'Ifx_DMA_CH_DADR_Bits',0,13,232,3,3
	.word	18062
	.byte	25
	.byte	'Ifx_DMA_CH_RDCRCR_Bits',0,13,238,3,3
	.word	17801
	.byte	25
	.byte	'Ifx_DMA_CH_SADR_Bits',0,13,244,3,3
	.word	17977
	.byte	25
	.byte	'Ifx_DMA_CH_SDCRCR_Bits',0,13,250,3,3
	.word	17889
	.byte	25
	.byte	'Ifx_DMA_CH_SHADR_Bits',0,13,128,4,3
	.word	18736
	.byte	25
	.byte	'Ifx_DMA_CLC_Bits',0,13,138,4,3
	.word	9376
	.byte	25
	.byte	'Ifx_DMA_ERRINTR_Bits',0,13,145,4,3
	.word	16531
	.byte	25
	.byte	'Ifx_DMA_HRR_Bits',0,13,152,4,3
	.word	17123
	.byte	25
	.byte	'Ifx_DMA_ID_Bits',0,13,160,4,3
	.word	9533
	.byte	25
	.byte	'Ifx_DMA_MEMCON_Bits',0,13,175,4,3
	.word	9664
	.byte	25
	.byte	'Ifx_DMA_MODE_Bits',0,13,182,4,3
	.word	16999
	.byte	25
	.byte	'Ifx_DMA_OTSS_Bits',0,13,191,4,3
	.word	16392
	.byte	25
	.byte	'Ifx_DMA_PRR0_Bits',0,13,200,4,3
	.word	16637
	.byte	25
	.byte	'Ifx_DMA_PRR1_Bits',0,13,209,4,3
	.word	16771
	.byte	25
	.byte	'Ifx_DMA_SUSACR_Bits',0,13,216,4,3
	.word	17361
	.byte	25
	.byte	'Ifx_DMA_SUSENR_Bits',0,13,223,4,3
	.word	17245
	.byte	25
	.byte	'Ifx_DMA_TIME_Bits',0,13,229,4,3
	.word	16905
	.byte	25
	.byte	'Ifx_DMA_TSR_Bits',0,13,248,4,3
	.word	17477
	.byte	25
	.byte	'Ifx_DMA_ACCEN00',0,13,133,5,3
	.word	10471
	.byte	25
	.byte	'Ifx_DMA_ACCEN01',0,13,141,5,3
	.word	10561
	.byte	25
	.byte	'Ifx_DMA_ACCEN10',0,13,149,5,3
	.word	11131
	.byte	25
	.byte	'Ifx_DMA_ACCEN11',0,13,157,5,3
	.word	11221
	.byte	25
	.byte	'Ifx_DMA_ACCEN20',0,13,165,5,3
	.word	11792
	.byte	25
	.byte	'Ifx_DMA_ACCEN21',0,13,173,5,3
	.word	11883
	.byte	25
	.byte	'Ifx_DMA_ACCEN30',0,13,181,5,3
	.word	12454
	.byte	25
	.byte	'Ifx_DMA_ACCEN31',0,13,189,5,3
	.word	12545
	.byte	25
	.byte	'Ifx_DMA_BLK_CLRE',0,13,197,5,3
	.word	13355
	.byte	25
	.byte	'Ifx_DMA_BLK_EER',0,13,205,5,3
	.word	12780
	.byte	25
	.byte	'Ifx_DMA_BLK_ERRSR',0,13,213,5,3
	.word	13072
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_ADICR',0,13,221,5,3
	.word	15300
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_CHCR',0,13,229,5,3
	.word	15579
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_CHSR',0,13,237,5,3
	.word	15943
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_DADR',0,13,245,5,3
	.word	14984
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R0',0,13,253,5,3
	.word	13670
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R1',0,13,133,6,3
	.word	13805
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R2',0,13,141,6,3
	.word	13940
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R3',0,13,149,6,3
	.word	14075
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R4',0,13,157,6,3
	.word	14210
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R5',0,13,165,6,3
	.word	14345
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R6',0,13,173,6,3
	.word	14480
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_R7',0,13,181,6,3
	.word	14615
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_RDCRC',0,13,189,6,3
	.word	14715
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_SADR',0,13,197,6,3
	.word	14895
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_SDCRC',0,13,205,6,3
	.word	14806
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_SHADR',0,13,213,6,3
	.word	15670
	.byte	25
	.byte	'Ifx_DMA_BLK_ME_SR',0,13,221,6,3
	.word	13535
	.byte	25
	.byte	'Ifx_DMA_CH_ADICR',0,13,229,6,3
	.word	18419
	.byte	25
	.byte	'Ifx_DMA_CH_CHCFGR',0,13,237,6,3
	.word	18696
	.byte	25
	.byte	'Ifx_DMA_CH_CHCSR',0,13,245,6,3
	.word	19130
	.byte	25
	.byte	'Ifx_DMA_CH_DADR',0,13,253,6,3
	.word	18107
	.byte	25
	.byte	'Ifx_DMA_CH_RDCRCR',0,13,133,7,3
	.word	17849
	.byte	25
	.byte	'Ifx_DMA_CH_SADR',0,13,141,7,3
	.word	18022
	.byte	25
	.byte	'Ifx_DMA_CH_SDCRCR',0,13,149,7,3
	.word	17937
	.byte	25
	.byte	'Ifx_DMA_CH_SHADR',0,13,157,7,3
	.word	18783
	.byte	25
	.byte	'Ifx_DMA_CLC',0,13,165,7,3
	.word	9493
	.byte	25
	.byte	'Ifx_DMA_ERRINTR',0,13,173,7,3
	.word	16597
	.byte	25
	.byte	'Ifx_DMA_HRR',0,13,181,7,3
	.word	17185
	.byte	25
	.byte	'Ifx_DMA_ID',0,13,189,7,3
	.word	9615
	.byte	25
	.byte	'Ifx_DMA_MEMCON',0,13,197,7,3
	.word	9892
	.byte	25
	.byte	'Ifx_DMA_MODE',0,13,205,7,3
	.word	17063
	.byte	25
	.byte	'Ifx_DMA_OTSS',0,13,213,7,3
	.word	16491
	.byte	25
	.byte	'Ifx_DMA_PRR0',0,13,221,7,3
	.word	16731
	.byte	25
	.byte	'Ifx_DMA_PRR1',0,13,229,7,3
	.word	16865
	.byte	25
	.byte	'Ifx_DMA_SUSACR',0,13,237,7,3
	.word	17428
	.byte	25
	.byte	'Ifx_DMA_SUSENR',0,13,245,7,3
	.word	17312
	.byte	25
	.byte	'Ifx_DMA_TIME',0,13,253,7,3
	.word	16948
	.byte	25
	.byte	'Ifx_DMA_TSR',0,13,133,8,3
	.word	17752
	.byte	13
	.word	15983
	.byte	25
	.byte	'Ifx_DMA_BLK_ME',0,13,165,8,3
	.word	28722
	.byte	13
	.word	16276
	.byte	25
	.byte	'Ifx_DMA_BLK',0,13,185,8,3
	.word	28751
	.byte	13
	.word	19170
	.byte	25
	.byte	'Ifx_DMA_CH',0,13,198,8,3
	.word	28777
	.byte	13
	.word	19336
	.byte	25
	.byte	'Ifx_DMA',0,13,250,8,3
	.word	28802
	.byte	25
	.byte	'IfxSrc_Tos',0,5,53,3
	.word	789
	.byte	25
	.byte	'Ifx_SRC_SRCR_Bits',0,4,62,3
	.word	370
	.byte	25
	.byte	'Ifx_SRC_SRCR',0,4,75,3
	.word	660
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,4,86,25,12,12
	.byte	'TX',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	660
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	660
	.byte	4,2,35,8,0,13
	.word	28890
	.byte	25
	.byte	'Ifx_SRC_ASCLIN',0,4,91,3
	.word	28949
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,4,94,25,4,12
	.byte	'SBSRC',0
	.word	660
	.byte	4,2,35,0,0,13
	.word	28977
	.byte	25
	.byte	'Ifx_SRC_BCUSPB',0,4,97,3
	.word	29014
	.byte	17,64
	.word	660
	.byte	18,15,0,9
	.byte	'_Ifx_SRC_CAN',0,4,100,25,64,12
	.byte	'INT',0
	.word	29042
	.byte	64,2,35,0,0,13
	.word	29051
	.byte	25
	.byte	'Ifx_SRC_CAN',0,4,103,3
	.word	29083
	.byte	17,32
	.word	660
	.byte	18,7,0,9
	.byte	'_Ifx_SRC_CAN1',0,4,106,25,32,12
	.byte	'INT',0
	.word	29108
	.byte	32,2,35,0,0,13
	.word	29117
	.byte	25
	.byte	'Ifx_SRC_CAN1',0,4,109,3
	.word	29150
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,4,112,25,16,12
	.byte	'SR0',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	660
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	660
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	660
	.byte	4,2,35,12,0,13
	.word	29176
	.byte	25
	.byte	'Ifx_SRC_CCU6',0,4,118,3
	.word	29248
	.byte	17,8
	.word	660
	.byte	18,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,4,121,25,8,12
	.byte	'SR',0
	.word	29274
	.byte	8,2,35,0,0,13
	.word	29283
	.byte	25
	.byte	'Ifx_SRC_CERBERUS',0,4,124,3
	.word	29319
	.byte	9
	.byte	'_Ifx_SRC_CPU',0,4,127,25,32,12
	.byte	'SBSRC',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	9932
	.byte	28,2,35,4,0,13
	.word	29349
	.byte	25
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	29403
	.byte	9
	.byte	'_Ifx_SRC_DMA',0,4,134,1,25,80,12
	.byte	'ERR',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	5379
	.byte	12,2,35,4,12
	.byte	'CH',0
	.word	29042
	.byte	64,2,35,16,0,13
	.word	29429
	.byte	25
	.byte	'Ifx_SRC_DMA',0,4,139,1,3
	.word	29494
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,4,142,1,25,4,12
	.byte	'SR',0
	.word	660
	.byte	4,2,35,0,0,13
	.word	29520
	.byte	25
	.byte	'Ifx_SRC_EMEM',0,4,145,1,3
	.word	29553
	.byte	17,40
	.word	353
	.byte	18,39,0,9
	.byte	'_Ifx_SRC_ERAY',0,4,148,1,25,80,12
	.byte	'INT',0
	.word	29274
	.byte	8,2,35,0,12
	.byte	'TINT',0
	.word	29274
	.byte	8,2,35,8,12
	.byte	'NDAT',0
	.word	29274
	.byte	8,2,35,16,12
	.byte	'MBSC',0
	.word	29274
	.byte	8,2,35,24,12
	.byte	'OBUSY',0
	.word	660
	.byte	4,2,35,32,12
	.byte	'IBUSY',0
	.word	660
	.byte	4,2,35,36,12
	.byte	'reserved_28',0
	.word	29580
	.byte	40,2,35,40,0,13
	.word	29589
	.byte	25
	.byte	'Ifx_SRC_ERAY',0,4,157,1,3
	.word	29716
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,4,160,1,25,4,12
	.byte	'SR',0
	.word	660
	.byte	4,2,35,0,0,13
	.word	29743
	.byte	25
	.byte	'Ifx_SRC_ETH',0,4,163,1,3
	.word	29775
	.byte	9
	.byte	'_Ifx_SRC_EVR',0,4,166,1,25,8,12
	.byte	'WUT',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'SCDC',0
	.word	660
	.byte	4,2,35,4,0,13
	.word	29801
	.byte	25
	.byte	'Ifx_SRC_EVR',0,4,170,1,3
	.word	29848
	.byte	9
	.byte	'_Ifx_SRC_FFT',0,4,173,1,25,12,12
	.byte	'DONE',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'ERR',0
	.word	660
	.byte	4,2,35,4,12
	.byte	'RFS',0
	.word	660
	.byte	4,2,35,8,0,13
	.word	29874
	.byte	25
	.byte	'Ifx_SRC_FFT',0,4,178,1,3
	.word	29934
	.byte	17,240,11
	.word	353
	.byte	18,239,11,0,9
	.byte	'_Ifx_SRC_GPSR',0,4,181,1,25,128,12,12
	.byte	'SR0',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	660
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	660
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	660
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	29960
	.byte	240,11,2,35,16,0,13
	.word	29971
	.byte	25
	.byte	'Ifx_SRC_GPSR',0,4,188,1,3
	.word	30067
	.byte	9
	.byte	'_Ifx_SRC_GPT12',0,4,191,1,25,48,12
	.byte	'CIRQ',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'T2',0
	.word	660
	.byte	4,2,35,4,12
	.byte	'T3',0
	.word	660
	.byte	4,2,35,8,12
	.byte	'T4',0
	.word	660
	.byte	4,2,35,12,12
	.byte	'T5',0
	.word	660
	.byte	4,2,35,16,12
	.byte	'T6',0
	.word	660
	.byte	4,2,35,20,12
	.byte	'reserved_18',0
	.word	4410
	.byte	24,2,35,24,0,13
	.word	30094
	.byte	25
	.byte	'Ifx_SRC_GPT12',0,4,200,1,3
	.word	30211
	.byte	17,236,2
	.word	353
	.byte	18,235,2,0,17,32
	.word	29108
	.byte	18,0,0,17,224,7
	.word	353
	.byte	18,223,7,0,17,64
	.word	29108
	.byte	18,1,0,9
	.byte	'_Ifx_SRC_GTM',0,4,203,1,25,192,11,12
	.byte	'AEIIRQ',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'reserved_4',0
	.word	30239
	.byte	236,2,2,35,4,12
	.byte	'ERR',0
	.word	660
	.byte	4,3,35,240,2,12
	.byte	'reserved_174',0
	.word	5379
	.byte	12,3,35,244,2,12
	.byte	'TIM',0
	.word	30250
	.byte	32,3,35,128,3,12
	.byte	'reserved_1A0',0
	.word	30259
	.byte	224,7,3,35,160,3,12
	.byte	'TOM',0
	.word	30270
	.byte	64,3,35,128,11,0,13
	.word	30279
	.byte	25
	.byte	'Ifx_SRC_GTM',0,4,212,1,3
	.word	30426
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,4,215,1,25,8,12
	.byte	'HSM',0
	.word	29274
	.byte	8,2,35,0,0,13
	.word	30452
	.byte	25
	.byte	'Ifx_SRC_HSM',0,4,218,1,3
	.word	30485
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,4,221,1,25,4,12
	.byte	'SR',0
	.word	660
	.byte	4,2,35,0,0,13
	.word	30511
	.byte	25
	.byte	'Ifx_SRC_LMU',0,4,224,1,3
	.word	30543
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,4,227,1,25,4,12
	.byte	'SR',0
	.word	660
	.byte	4,2,35,0,0,13
	.word	30569
	.byte	25
	.byte	'Ifx_SRC_PMU',0,4,230,1,3
	.word	30601
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,4,233,1,25,24,12
	.byte	'TX',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'RX',0
	.word	660
	.byte	4,2,35,4,12
	.byte	'ERR',0
	.word	660
	.byte	4,2,35,8,12
	.byte	'PT',0
	.word	660
	.byte	4,2,35,12,12
	.byte	'HC',0
	.word	660
	.byte	4,2,35,16,12
	.byte	'U',0
	.word	660
	.byte	4,2,35,20,0,13
	.word	30627
	.byte	25
	.byte	'Ifx_SRC_QSPI',0,4,241,1,3
	.word	30720
	.byte	17,16
	.word	660
	.byte	18,3,0,9
	.byte	'_Ifx_SRC_SCU',0,4,244,1,25,20,12
	.byte	'DTS',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'ERU',0
	.word	30747
	.byte	16,2,35,4,0,13
	.word	30756
	.byte	25
	.byte	'Ifx_SRC_SCU',0,4,248,1,3
	.word	30802
	.byte	9
	.byte	'_Ifx_SRC_SENT',0,4,251,1,25,16,12
	.byte	'SR',0
	.word	30747
	.byte	16,2,35,0,0,13
	.word	30828
	.byte	25
	.byte	'Ifx_SRC_SENT',0,4,254,1,3
	.word	30861
	.byte	17,12
	.word	660
	.byte	18,2,0,9
	.byte	'_Ifx_SRC_SMU',0,4,129,2,25,12,12
	.byte	'SR',0
	.word	30888
	.byte	12,2,35,0,0,13
	.word	30897
	.byte	25
	.byte	'Ifx_SRC_SMU',0,4,132,2,3
	.word	30929
	.byte	17,88
	.word	353
	.byte	18,87,0,9
	.byte	'_Ifx_SRC_STM',0,4,135,2,25,96,12
	.byte	'SR0',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	660
	.byte	4,2,35,4,12
	.byte	'reserved_8',0
	.word	30955
	.byte	88,2,35,8,0,13
	.word	30964
	.byte	25
	.byte	'Ifx_SRC_STM',0,4,140,2,3
	.word	31030
	.byte	17,176,2
	.word	353
	.byte	18,175,2,0,9
	.byte	'_Ifx_SRC_VADCCG',0,4,143,2,25,192,2,12
	.byte	'SR0',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	660
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	660
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	660
	.byte	4,2,35,12,12
	.byte	'reserved_10',0
	.word	31056
	.byte	176,2,2,35,16,0,13
	.word	31067
	.byte	25
	.byte	'Ifx_SRC_VADCCG',0,4,150,2,3
	.word	31165
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,4,153,2,25,16,12
	.byte	'SR0',0
	.word	660
	.byte	4,2,35,0,12
	.byte	'SR1',0
	.word	660
	.byte	4,2,35,4,12
	.byte	'SR2',0
	.word	660
	.byte	4,2,35,8,12
	.byte	'SR3',0
	.word	660
	.byte	4,2,35,12,0,13
	.word	31194
	.byte	25
	.byte	'Ifx_SRC_VADCG',0,4,159,2,3
	.word	31268
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,4,162,2,25,4,12
	.byte	'SRC',0
	.word	660
	.byte	4,2,35,0,0,13
	.word	31296
	.byte	25
	.byte	'Ifx_SRC_XBAR',0,4,165,2,3
	.word	31330
	.byte	17,24
	.word	28890
	.byte	18,1,0,13
	.word	31357
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,4,178,2,25,24,12
	.byte	'ASCLIN',0
	.word	31366
	.byte	24,2,35,0,0,13
	.word	31371
	.byte	25
	.byte	'Ifx_SRC_GASCLIN',0,4,181,2,3
	.word	31411
	.byte	13
	.word	28977
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,4,184,2,25,4,12
	.byte	'SPB',0
	.word	31441
	.byte	4,2,35,0,0,13
	.word	31446
	.byte	25
	.byte	'Ifx_SRC_GBCU',0,4,187,2,3
	.word	31480
	.byte	17,64
	.word	29051
	.byte	18,0,0,13
	.word	31507
	.byte	17,32
	.word	29117
	.byte	18,0,0,13
	.word	31521
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,4,190,2,25,96,12
	.byte	'CAN',0
	.word	31516
	.byte	64,2,35,0,12
	.byte	'CAN1',0
	.word	31530
	.byte	32,2,35,64,0,13
	.word	31535
	.byte	25
	.byte	'Ifx_SRC_GCAN',0,4,194,2,3
	.word	31583
	.byte	17,32
	.word	29176
	.byte	18,1,0,13
	.word	31610
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,4,197,2,25,32,12
	.byte	'CCU6',0
	.word	31619
	.byte	32,2,35,0,0,13
	.word	31624
	.byte	25
	.byte	'Ifx_SRC_GCCU6',0,4,200,2,3
	.word	31660
	.byte	13
	.word	29283
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,4,203,2,25,8,12
	.byte	'CERBERUS',0
	.word	31688
	.byte	8,2,35,0,0,13
	.word	31693
	.byte	25
	.byte	'Ifx_SRC_GCERBERUS',0,4,206,2,3
	.word	31737
	.byte	17,32
	.word	29349
	.byte	18,0,0,13
	.word	31769
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,4,209,2,25,32,12
	.byte	'CPU',0
	.word	31778
	.byte	32,2,35,0,0,13
	.word	31783
	.byte	25
	.byte	'Ifx_SRC_GCPU',0,4,212,2,3
	.word	31817
	.byte	17,80
	.word	29429
	.byte	18,0,0,13
	.word	31844
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,4,215,2,25,80,12
	.byte	'DMA',0
	.word	31853
	.byte	80,2,35,0,0,13
	.word	31858
	.byte	25
	.byte	'Ifx_SRC_GDMA',0,4,218,2,3
	.word	31892
	.byte	17,4
	.word	29520
	.byte	18,0,0,13
	.word	31919
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,4,221,2,25,4,12
	.byte	'EMEM',0
	.word	31928
	.byte	4,2,35,0,0,13
	.word	31933
	.byte	25
	.byte	'Ifx_SRC_GEMEM',0,4,224,2,3
	.word	31969
	.byte	17,80
	.word	29589
	.byte	18,0,0,13
	.word	31997
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,4,227,2,25,80,12
	.byte	'ERAY',0
	.word	32006
	.byte	80,2,35,0,0,13
	.word	32011
	.byte	25
	.byte	'Ifx_SRC_GERAY',0,4,230,2,3
	.word	32047
	.byte	17,4
	.word	29743
	.byte	18,0,0,13
	.word	32075
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,4,233,2,25,4,12
	.byte	'ETH',0
	.word	32084
	.byte	4,2,35,0,0,13
	.word	32089
	.byte	25
	.byte	'Ifx_SRC_GETH',0,4,236,2,3
	.word	32123
	.byte	17,8
	.word	29801
	.byte	18,0,0,13
	.word	32150
	.byte	9
	.byte	'_Ifx_SRC_GEVR',0,4,239,2,25,8,12
	.byte	'EVR',0
	.word	32159
	.byte	8,2,35,0,0,13
	.word	32164
	.byte	25
	.byte	'Ifx_SRC_GEVR',0,4,242,2,3
	.word	32198
	.byte	17,12
	.word	29874
	.byte	18,0,0,13
	.word	32225
	.byte	9
	.byte	'_Ifx_SRC_GFFT',0,4,245,2,25,12,12
	.byte	'FFT',0
	.word	32234
	.byte	12,2,35,0,0,13
	.word	32239
	.byte	25
	.byte	'Ifx_SRC_GFFT',0,4,248,2,3
	.word	32273
	.byte	17,128,12
	.word	29971
	.byte	18,0,0,13
	.word	32300
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,4,251,2,25,128,12,12
	.byte	'GPSR',0
	.word	32310
	.byte	128,12,2,35,0,0,13
	.word	32315
	.byte	25
	.byte	'Ifx_SRC_GGPSR',0,4,254,2,3
	.word	32353
	.byte	17,48
	.word	30094
	.byte	18,0,0,13
	.word	32381
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,4,129,3,25,48,12
	.byte	'GPT12',0
	.word	32390
	.byte	48,2,35,0,0,13
	.word	32395
	.byte	25
	.byte	'Ifx_SRC_GGPT12',0,4,132,3,3
	.word	32433
	.byte	17,192,11
	.word	30279
	.byte	18,0,0,13
	.word	32462
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,4,135,3,25,192,11,12
	.byte	'GTM',0
	.word	32472
	.byte	192,11,2,35,0,0,13
	.word	32477
	.byte	25
	.byte	'Ifx_SRC_GGTM',0,4,138,3,3
	.word	32513
	.byte	17,8
	.word	30452
	.byte	18,0,0,13
	.word	32540
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,4,141,3,25,8,12
	.byte	'HSM',0
	.word	32549
	.byte	8,2,35,0,0,13
	.word	32554
	.byte	25
	.byte	'Ifx_SRC_GHSM',0,4,144,3,3
	.word	32588
	.byte	17,4
	.word	30511
	.byte	18,0,0,13
	.word	32615
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,4,147,3,25,4,12
	.byte	'LMU',0
	.word	32624
	.byte	4,2,35,0,0,13
	.word	32629
	.byte	25
	.byte	'Ifx_SRC_GLMU',0,4,150,3,3
	.word	32663
	.byte	17,8
	.word	30569
	.byte	18,1,0,13
	.word	32690
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,4,153,3,25,8,12
	.byte	'PMU',0
	.word	32699
	.byte	8,2,35,0,0,13
	.word	32704
	.byte	25
	.byte	'Ifx_SRC_GPMU',0,4,156,3,3
	.word	32738
	.byte	17,96
	.word	30627
	.byte	18,3,0,13
	.word	32765
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,4,159,3,25,96,12
	.byte	'QSPI',0
	.word	32774
	.byte	96,2,35,0,0,13
	.word	32779
	.byte	25
	.byte	'Ifx_SRC_GQSPI',0,4,162,3,3
	.word	32815
	.byte	13
	.word	30756
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,4,165,3,25,20,12
	.byte	'SCU',0
	.word	32843
	.byte	20,2,35,0,0,13
	.word	32848
	.byte	25
	.byte	'Ifx_SRC_GSCU',0,4,168,3,3
	.word	32882
	.byte	17,16
	.word	30828
	.byte	18,0,0,13
	.word	32909
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,4,171,3,25,16,12
	.byte	'SENT',0
	.word	32918
	.byte	16,2,35,0,0,13
	.word	32923
	.byte	25
	.byte	'Ifx_SRC_GSENT',0,4,174,3,3
	.word	32959
	.byte	17,12
	.word	30897
	.byte	18,0,0,13
	.word	32987
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,4,177,3,25,12,12
	.byte	'SMU',0
	.word	32996
	.byte	12,2,35,0,0,13
	.word	33001
	.byte	25
	.byte	'Ifx_SRC_GSMU',0,4,180,3,3
	.word	33035
	.byte	17,96
	.word	30964
	.byte	18,0,0,13
	.word	33062
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,4,183,3,25,96,12
	.byte	'STM',0
	.word	33071
	.byte	96,2,35,0,0,13
	.word	33076
	.byte	25
	.byte	'Ifx_SRC_GSTM',0,4,186,3,3
	.word	33110
	.byte	17,64
	.word	31194
	.byte	18,3,0,13
	.word	33137
	.byte	17,224,1
	.word	353
	.byte	18,223,1,0,17,192,2
	.word	31067
	.byte	18,0,0,13
	.word	33162
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,4,189,3,25,224,4,12
	.byte	'G',0
	.word	33146
	.byte	64,2,35,0,12
	.byte	'reserved_40',0
	.word	33151
	.byte	224,1,2,35,64,12
	.byte	'CG',0
	.word	33172
	.byte	192,2,3,35,160,2,0,13
	.word	33177
	.byte	25
	.byte	'Ifx_SRC_GVADC',0,4,194,3,3
	.word	33247
	.byte	13
	.word	31296
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,4,197,3,25,4,12
	.byte	'XBAR',0
	.word	33275
	.byte	4,2,35,0,0,13
	.word	33280
	.byte	25
	.byte	'Ifx_SRC_GXBAR',0,4,200,3,3
	.word	33316
	.byte	14,20,139,10,9,1,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,15
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,25
	.byte	'IfxScu_CCUCON0_CLKSEL',0,20,143,10,3
	.word	33344
	.byte	14,20,153,10,9,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,15
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,15
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,25
	.byte	'IfxScu_WDTCON1_IR',0,20,158,10,3
	.word	33441
	.byte	9
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,7,45,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_ACCEN0_Bits',0,7,79,3
	.word	33563
	.byte	9
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,7,82,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_SCU_ACCEN1_Bits',0,7,85,3
	.word	34120
	.byte	9
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,7,88,16,4,10
	.byte	'STM0DIS',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'STM1DIS',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'STM2DIS',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	330
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,7,94,3
	.word	34197
	.byte	9
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,7,97,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'BAUD2DIV',0,1
	.word	353
	.byte	4,0,2,35,0,10
	.byte	'SRIDIV',0,1
	.word	353
	.byte	4,4,2,35,1,10
	.byte	'LPDIV',0,1
	.word	353
	.byte	4,0,2,35,1,10
	.byte	'SPBDIV',0,1
	.word	353
	.byte	4,4,2,35,2,10
	.byte	'FSI2DIV',0,1
	.word	353
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	353
	.byte	2,0,2,35,2,10
	.byte	'FSIDIV',0,1
	.word	353
	.byte	2,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	353
	.byte	2,4,2,35,3,10
	.byte	'CLKSEL',0,1
	.word	353
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON0_Bits',0,7,111,3
	.word	34333
	.byte	9
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,7,114,16,4,10
	.byte	'CANDIV',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'ERAYDIV',0,1
	.word	353
	.byte	4,0,2,35,0,10
	.byte	'STMDIV',0,1
	.word	353
	.byte	4,4,2,35,1,10
	.byte	'GTMDIV',0,1
	.word	353
	.byte	4,0,2,35,1,10
	.byte	'ETHDIV',0,1
	.word	353
	.byte	4,4,2,35,2,10
	.byte	'ASCLINFDIV',0,1
	.word	353
	.byte	4,0,2,35,2,10
	.byte	'ASCLINSDIV',0,1
	.word	353
	.byte	4,4,2,35,3,10
	.byte	'INSEL',0,1
	.word	353
	.byte	2,2,2,35,3,10
	.byte	'UP',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON1_Bits',0,7,126,3
	.word	34615
	.byte	9
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,7,129,1,16,4,10
	.byte	'BBBDIV',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON2_Bits',0,7,135,1,3
	.word	34853
	.byte	9
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,7,138,1,16,4,10
	.byte	'PLLDIV',0,1
	.word	353
	.byte	6,2,2,35,0,10
	.byte	'PLLSEL',0,1
	.word	353
	.byte	2,0,2,35,0,10
	.byte	'PLLERAYDIV',0,1
	.word	353
	.byte	6,2,2,35,1,10
	.byte	'PLLERAYSEL',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'SRIDIV',0,1
	.word	353
	.byte	6,2,2,35,2,10
	.byte	'SRISEL',0,1
	.word	353
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON3_Bits',0,7,149,1,3
	.word	34981
	.byte	9
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,7,152,1,16,4,10
	.byte	'SPBDIV',0,1
	.word	353
	.byte	6,2,2,35,0,10
	.byte	'SPBSEL',0,1
	.word	353
	.byte	2,0,2,35,0,10
	.byte	'GTMDIV',0,1
	.word	353
	.byte	6,2,2,35,1,10
	.byte	'GTMSEL',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'STMDIV',0,1
	.word	353
	.byte	6,2,2,35,2,10
	.byte	'STMSEL',0,1
	.word	353
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	6,2,2,35,3,10
	.byte	'UP',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON4_Bits',0,7,163,1,3
	.word	35208
	.byte	9
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,7,166,1,16,4,10
	.byte	'MAXDIV',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	26,2,2,35,0,10
	.byte	'UP',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CCUCON5_Bits',0,7,172,1,3
	.word	35427
	.byte	9
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,7,175,1,16,4,10
	.byte	'CPU0DIV',0,1
	.word	353
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	330
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON6_Bits',0,7,179,1,3
	.word	35555
	.byte	9
	.byte	'_Ifx_SCU_CHIPID_Bits',0,7,182,1,16,4,10
	.byte	'CHREV',0,1
	.word	353
	.byte	6,2,2,35,0,10
	.byte	'CHTEC',0,1
	.word	353
	.byte	2,0,2,35,0,10
	.byte	'CHID',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'EEA',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'UCODE',0,1
	.word	353
	.byte	7,0,2,35,2,10
	.byte	'FSIZE',0,1
	.word	353
	.byte	4,4,2,35,3,10
	.byte	'SP',0,1
	.word	353
	.byte	2,2,2,35,3,10
	.byte	'SEC',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_CHIPID_Bits',0,7,193,1,3
	.word	35655
	.byte	9
	.byte	'_Ifx_SCU_DTSCON_Bits',0,7,196,1,16,4,10
	.byte	'PWD',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'START',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	2,4,2,35,0,10
	.byte	'CAL',0,4
	.word	330
	.byte	22,6,2,35,0,10
	.byte	'reserved_26',0,1
	.word	353
	.byte	5,1,2,35,3,10
	.byte	'SLCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_DTSCON_Bits',0,7,204,1,3
	.word	35863
	.byte	9
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,7,207,1,16,4,10
	.byte	'LOWER',0,2
	.word	830
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	353
	.byte	5,1,2,35,1,10
	.byte	'LLU',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'UPPER',0,2
	.word	830
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	353
	.byte	4,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'UOF',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_DTSLIM_Bits',0,7,216,1,3
	.word	36028
	.byte	9
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,7,219,1,16,4,10
	.byte	'RESULT',0,2
	.word	830
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	353
	.byte	4,2,2,35,1,10
	.byte	'RDY',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'BUSY',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,7,226,1,3
	.word	36211
	.byte	9
	.byte	'_Ifx_SCU_EICR_Bits',0,7,229,1,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'EXIS0',0,1
	.word	353
	.byte	3,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'FEN0',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'REN0',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'LDEN0',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EIEN0',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'INP0',0,1
	.word	353
	.byte	3,1,2,35,1,10
	.byte	'reserved_15',0,4
	.word	330
	.byte	5,12,2,35,0,10
	.byte	'EXIS1',0,1
	.word	353
	.byte	3,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'FEN1',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'REN1',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'LDEN1',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'EIEN1',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'INP1',0,1
	.word	353
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EICR_Bits',0,7,248,1,3
	.word	36365
	.byte	9
	.byte	'_Ifx_SCU_EIFR_Bits',0,7,251,1,16,4,10
	.byte	'INTF0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'INTF1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'INTF2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'INTF3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'INTF4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'INTF5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'INTF6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'INTF7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	330
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_EIFR_Bits',0,7,134,2,3
	.word	36729
	.byte	9
	.byte	'_Ifx_SCU_EMSR_Bits',0,7,137,2,16,4,10
	.byte	'POL',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'MODE',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'ENON',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'PSEL',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	830
	.byte	12,0,2,35,0,10
	.byte	'EMSF',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'SEMSF',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	353
	.byte	6,0,2,35,2,10
	.byte	'EMSFM',0,1
	.word	353
	.byte	2,6,2,35,3,10
	.byte	'SEMSFM',0,1
	.word	353
	.byte	2,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	353
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_EMSR_Bits',0,7,150,2,3
	.word	36940
	.byte	9
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,7,153,2,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	7,1,2,35,0,10
	.byte	'EDCON',0,2
	.word	830
	.byte	2,7,2,35,0,10
	.byte	'reserved_9',0,4
	.word	330
	.byte	23,0,2,35,0,0,25
	.byte	'Ifx_SCU_ESRCFG_Bits',0,7,158,2,3
	.word	37192
	.byte	9
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,7,161,2,16,4,10
	.byte	'ARI',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'ARC',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	330
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_ESROCFG_Bits',0,7,166,2,3
	.word	37310
	.byte	9
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,7,169,2,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	28,4,2,35,0,10
	.byte	'EVR13OFF',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'BPEVR13OFF',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVR13CON_Bits',0,7,176,2,3
	.word	37421
	.byte	9
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,7,179,2,16,4,10
	.byte	'ADC13V',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'ADCSWDV',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,7,186,2,3
	.word	37584
	.byte	9
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,7,189,2,16,4,10
	.byte	'EVR13OVMOD',0,1
	.word	353
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	2,4,2,35,0,10
	.byte	'EVR13UVMOD',0,1
	.word	353
	.byte	2,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	830
	.byte	10,0,2,35,0,10
	.byte	'SWDOVMOD',0,1
	.word	353
	.byte	2,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	353
	.byte	2,4,2,35,2,10
	.byte	'SWDUVMOD',0,1
	.word	353
	.byte	2,2,2,35,2,10
	.byte	'reserved_22',0,2
	.word	830
	.byte	8,2,2,35,2,10
	.byte	'SLCK',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,7,201,2,3
	.word	37746
	.byte	9
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,7,204,2,16,4,10
	.byte	'EVR13OVVAL',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'SWDOVVAL',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVROVMON_Bits',0,7,212,2,3
	.word	38024
	.byte	9
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,7,215,2,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	28,4,2,35,0,10
	.byte	'RSTSWDOFF',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'BPRSTSWDOFF',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,7,222,2,3
	.word	38203
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,7,225,2,16,4,10
	.byte	'SD33P',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	353
	.byte	4,0,2,35,0,10
	.byte	'SD33I',0,1
	.word	353
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,4
	.word	330
	.byte	19,1,2,35,0,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,7,232,2,3
	.word	38363
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,7,235,2,16,4,10
	.byte	'SDFREQSPRD',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	353
	.byte	4,0,2,35,0,10
	.byte	'TON',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'TOFF',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'SDSTEP',0,1
	.word	353
	.byte	4,4,2,35,3,10
	.byte	'SYNCDIV',0,1
	.word	353
	.byte	3,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,7,244,2,3
	.word	38524
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,7,247,2,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'STBS',0,1
	.word	353
	.byte	2,6,2,35,1,10
	.byte	'STSP',0,1
	.word	353
	.byte	2,4,2,35,1,10
	.byte	'NS',0,1
	.word	353
	.byte	2,2,2,35,1,10
	.byte	'OL',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'PIAD',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'ADCMODE',0,1
	.word	353
	.byte	4,4,2,35,2,10
	.byte	'ADCLPF',0,1
	.word	353
	.byte	2,2,2,35,2,10
	.byte	'ADCLSB',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'SDLUT',0,1
	.word	353
	.byte	6,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,7,134,3,3
	.word	38716
	.byte	9
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,7,137,3,16,4,10
	.byte	'SDOLCON',0,1
	.word	353
	.byte	7,1,2,35,0,10
	.byte	'MODSEL',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'MODLOW',0,1
	.word	353
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'SDVOKLVL',0,1
	.word	353
	.byte	6,2,2,35,2,10
	.byte	'MODMAN',0,1
	.word	353
	.byte	2,0,2,35,2,10
	.byte	'MODHIGH',0,1
	.word	353
	.byte	7,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,7,147,3,3
	.word	39012
	.byte	9
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,7,150,3,16,4,10
	.byte	'EVR13',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'OV13',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	2,4,2,35,0,10
	.byte	'OVSWD',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'UV13',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'UVSWD',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	2,6,2,35,1,10
	.byte	'BGPROK',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'SCMOD',0,1
	.word	353
	.byte	2,2,2,35,1,10
	.byte	'reserved_14',0,4
	.word	330
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,7,164,3,3
	.word	39227
	.byte	9
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,7,167,3,16,4,10
	.byte	'EVR13UVVAL',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'SWDUVVAL',0,1
	.word	353
	.byte	8,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	6,2,2,35,3,10
	.byte	'SLCK',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,7,175,3,3
	.word	39516
	.byte	9
	.byte	'_Ifx_SCU_EXTCON_Bits',0,7,178,3,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'SEL0',0,1
	.word	353
	.byte	4,2,2,35,0,10
	.byte	'reserved_6',0,2
	.word	830
	.byte	10,0,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'NSEL',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'SEL1',0,1
	.word	353
	.byte	4,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	353
	.byte	2,0,2,35,2,10
	.byte	'DIV1',0,1
	.word	353
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_SCU_EXTCON_Bits',0,7,189,3,3
	.word	39695
	.byte	9
	.byte	'_Ifx_SCU_FDR_Bits',0,7,192,3,16,4,10
	.byte	'STEP',0,2
	.word	830
	.byte	10,6,2,35,0,10
	.byte	'reserved_10',0,1
	.word	353
	.byte	4,2,2,35,1,10
	.byte	'DM',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'RESULT',0,2
	.word	830
	.byte	10,6,2,35,2,10
	.byte	'reserved_26',0,1
	.word	353
	.byte	5,1,2,35,3,10
	.byte	'DISCLK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_FDR_Bits',0,7,200,3,3
	.word	39913
	.byte	9
	.byte	'_Ifx_SCU_FMR_Bits',0,7,203,3,16,4,10
	.byte	'FS0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'FS1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'FS2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'FS3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'FS4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'FS5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'FS6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'FS7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'FC0',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'FC1',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'FC2',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'FC3',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'FC4',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'FC5',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'FC6',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'FC7',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_SCU_FMR_Bits',0,7,223,3,3
	.word	40076
	.byte	9
	.byte	'_Ifx_SCU_ID_Bits',0,7,226,3,16,4,10
	.byte	'MODREV',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_ID_Bits',0,7,231,3,3
	.word	40412
	.byte	9
	.byte	'_Ifx_SCU_IGCR_Bits',0,7,234,3,16,4,10
	.byte	'IPEN00',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'IPEN01',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'IPEN02',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'IPEN03',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'IPEN04',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'IPEN05',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'IPEN06',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'IPEN07',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	5,3,2,35,1,10
	.byte	'GEEN0',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'IGP0',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'IPEN10',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'IPEN11',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'IPEN12',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'IPEN13',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'IPEN14',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'IPEN15',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'IPEN16',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'IPEN17',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	5,3,2,35,3,10
	.byte	'GEEN1',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'IGP1',0,1
	.word	353
	.byte	2,0,2,35,3,0,25
	.byte	'Ifx_SCU_IGCR_Bits',0,7,130,4,3
	.word	40519
	.byte	9
	.byte	'_Ifx_SCU_IN_Bits',0,7,133,4,16,4,10
	.byte	'P0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	330
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_IN_Bits',0,7,138,4,3
	.word	40971
	.byte	9
	.byte	'_Ifx_SCU_IOCR_Bits',0,7,141,4,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'PC0',0,1
	.word	353
	.byte	4,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	4,4,2,35,1,10
	.byte	'PC1',0,1
	.word	353
	.byte	4,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_IOCR_Bits',0,7,148,4,3
	.word	41070
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,7,151,4,16,4,10
	.byte	'LBISTREQ',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'LBISTREQP',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'PATTERNS',0,2
	.word	830
	.byte	14,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,7,157,4,3
	.word	41220
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,7,160,4,16,4,10
	.byte	'SEED',0,4
	.word	330
	.byte	23,9,2,35,0,10
	.byte	'reserved_23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'SPLITSH',0,1
	.word	353
	.byte	3,5,2,35,3,10
	.byte	'BODY',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'LBISTFREQU',0,1
	.word	353
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,7,167,4,3
	.word	41369
	.byte	9
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,7,170,4,16,4,10
	.byte	'SIGNATURE',0,4
	.word	330
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	7,1,2,35,3,10
	.byte	'LBISTDONE',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,7,175,4,3
	.word	41530
	.byte	9
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,7,178,4,16,4,10
	.byte	'reserved_0',0,2
	.word	830
	.byte	16,0,2,35,0,10
	.byte	'LS',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,2
	.word	830
	.byte	14,1,2,35,2,10
	.byte	'LSEN',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_LCLCON0_Bits',0,7,184,4,3
	.word	41660
	.byte	9
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,7,187,4,16,4,10
	.byte	'LCLT0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'LCLT1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	330
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_LCLTEST_Bits',0,7,192,4,3
	.word	41794
	.byte	9
	.byte	'_Ifx_SCU_MANID_Bits',0,7,195,4,16,4,10
	.byte	'DEPT',0,1
	.word	353
	.byte	5,3,2,35,0,10
	.byte	'MANUF',0,2
	.word	830
	.byte	11,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_MANID_Bits',0,7,200,4,3
	.word	41909
	.byte	9
	.byte	'_Ifx_SCU_OMR_Bits',0,7,203,4,16,4,10
	.byte	'PS0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PS1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	830
	.byte	14,0,2,35,0,10
	.byte	'PCL0',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'PCL1',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	830
	.byte	14,0,2,35,2,0,25
	.byte	'Ifx_SCU_OMR_Bits',0,7,211,4,3
	.word	42020
	.byte	9
	.byte	'_Ifx_SCU_OSCCON_Bits',0,7,214,4,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PLLLV',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'OSCRES',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'GAINSEL',0,1
	.word	353
	.byte	2,3,2,35,0,10
	.byte	'MODE',0,1
	.word	353
	.byte	2,1,2,35,0,10
	.byte	'SHBY',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'PLLHV',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'X1D',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'X1DEN',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	353
	.byte	4,0,2,35,1,10
	.byte	'OSCVAL',0,1
	.word	353
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	353
	.byte	2,1,2,35,2,10
	.byte	'APREN',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_SCU_OSCCON_Bits',0,7,231,4,3
	.word	42178
	.byte	9
	.byte	'_Ifx_SCU_OUT_Bits',0,7,234,4,16,4,10
	.byte	'P0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'P1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	330
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_OUT_Bits',0,7,239,4,3
	.word	42518
	.byte	9
	.byte	'_Ifx_SCU_OVCCON_Bits',0,7,242,4,16,4,10
	.byte	'CSEL0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'CSEL1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'CSEL2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,2
	.word	830
	.byte	13,0,2,35,0,10
	.byte	'OVSTRT',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'OVSTP',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'DCINVAL',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	353
	.byte	5,0,2,35,2,10
	.byte	'OVCONF',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'POVCONF',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	353
	.byte	6,0,2,35,3,0,25
	.byte	'Ifx_SCU_OVCCON_Bits',0,7,255,4,3
	.word	42619
	.byte	9
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,7,130,5,16,4,10
	.byte	'OVEN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'OVEN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'OVEN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,4
	.word	330
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,7,136,5,3
	.word	42886
	.byte	9
	.byte	'_Ifx_SCU_PDISC_Bits',0,7,139,5,16,4,10
	.byte	'PDIS0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PDIS1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	330
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_PDISC_Bits',0,7,144,5,3
	.word	43022
	.byte	9
	.byte	'_Ifx_SCU_PDR_Bits',0,7,147,5,16,4,10
	.byte	'PD0',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'PL0',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PD1',0,1
	.word	353
	.byte	3,1,2,35,0,10
	.byte	'PL1',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	330
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_PDR_Bits',0,7,154,5,3
	.word	43133
	.byte	9
	.byte	'_Ifx_SCU_PDRR_Bits',0,7,157,5,16,4,10
	.byte	'PDR0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PDR1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'PDR2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'PDR3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PDR4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'PDR5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'PDR6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PDR7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	330
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_PDRR_Bits',0,7,168,5,3
	.word	43266
	.byte	9
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,7,171,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'MODEN',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	830
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	353
	.byte	7,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	353
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	353
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	353
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_PLLCON0_Bits',0,7,188,5,3
	.word	43469
	.byte	9
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,7,191,5,16,4,10
	.byte	'K2DIV',0,1
	.word	353
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	353
	.byte	7,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	353
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	830
	.byte	9,0,2,35,2,0,25
	.byte	'Ifx_SCU_PLLCON1_Bits',0,7,199,5,3
	.word	43825
	.byte	9
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,7,202,5,16,4,10
	.byte	'MODCFG',0,2
	.word	830
	.byte	16,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_PLLCON2_Bits',0,7,206,5,3
	.word	44003
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,7,209,5,16,4,10
	.byte	'VCOBYP',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'VCOPWD',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	2,4,2,35,0,10
	.byte	'SETFINDIS',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'CLRFINDIS',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'OSCDISCDIS',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,2
	.word	830
	.byte	2,7,2,35,0,10
	.byte	'NDIV',0,1
	.word	353
	.byte	5,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'PLLPWD',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'RESLD',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	353
	.byte	5,0,2,35,2,10
	.byte	'PDIV',0,1
	.word	353
	.byte	4,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	353
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,7,226,5,3
	.word	44103
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,7,229,5,16,4,10
	.byte	'K2DIV',0,1
	.word	353
	.byte	7,1,2,35,0,10
	.byte	'reserved_7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'K3DIV',0,1
	.word	353
	.byte	4,4,2,35,1,10
	.byte	'reserved_12',0,1
	.word	353
	.byte	4,0,2,35,1,10
	.byte	'K1DIV',0,1
	.word	353
	.byte	7,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	830
	.byte	9,0,2,35,2,0,25
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,7,237,5,3
	.word	44473
	.byte	9
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,7,240,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PWDSTAT',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	330
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,7,249,5,3
	.word	44659
	.byte	9
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,7,252,5,16,4,10
	.byte	'VCOBYST',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'VCOLOCK',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'FINDIS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'K1RDY',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'K2RDY',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'MODRUN',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	330
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,7,135,6,3
	.word	44857
	.byte	9
	.byte	'_Ifx_SCU_PMCSR_Bits',0,7,138,6,16,4,10
	.byte	'REQSLP',0,1
	.word	353
	.byte	2,6,2,35,0,10
	.byte	'SMUSLP',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	353
	.byte	5,0,2,35,0,10
	.byte	'PMST',0,1
	.word	353
	.byte	3,5,2,35,1,10
	.byte	'reserved_11',0,4
	.word	330
	.byte	21,0,2,35,0,0,25
	.byte	'Ifx_SCU_PMCSR_Bits',0,7,145,6,3
	.word	45090
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,7,148,6,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'ESR1WKEN',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'PINAWKEN',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'PINBWKEN',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'ESR0DFEN',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'ESR0EDCON',0,1
	.word	353
	.byte	2,1,2,35,0,10
	.byte	'ESR1DFEN',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'ESR1EDCON',0,1
	.word	353
	.byte	2,6,2,35,1,10
	.byte	'PINADFEN',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'PINAEDCON',0,1
	.word	353
	.byte	2,3,2,35,1,10
	.byte	'PINBDFEN',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'PINBEDCON',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'STBYRAMSEL',0,1
	.word	353
	.byte	2,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	353
	.byte	2,1,2,35,2,10
	.byte	'PORSTDF',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'DCDCSYNC',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	353
	.byte	3,3,2,35,3,10
	.byte	'ESR0TRIST',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,7,174,6,3
	.word	45242
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,7,177,6,16,4,10
	.byte	'reserved_0',0,2
	.word	830
	.byte	12,4,2,35,0,10
	.byte	'IRADIS',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	330
	.byte	14,5,2,35,0,10
	.byte	'STBYEVEN',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'STBYEV',0,1
	.word	353
	.byte	3,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,7,185,6,3
	.word	45801
	.byte	9
	.byte	'_Ifx_SCU_PMSWCR3_Bits',0,7,188,6,16,4,10
	.byte	'WUTREL',0,4
	.word	330
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	4,4,2,35,3,10
	.byte	'WUTDIV',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'LCK',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWCR3_Bits',0,7,196,6,3
	.word	45984
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,7,199,6,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKP',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUN',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PINAWKP',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUN',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'PINBWKP',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUN',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'PORSTDF',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'HWCFGEVR',0,1
	.word	353
	.byte	3,3,2,35,1,10
	.byte	'STBYRAM',0,1
	.word	353
	.byte	2,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'WUTWKP',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUN',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'WUTWKEN',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'ESR1WKEN',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'PINAWKEN',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'PINBWKEN',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	830
	.byte	4,5,2,35,2,10
	.byte	'ESR0TRIST',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'WUTEN',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'WUTMODE',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'WUTRUN',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,7,226,6,3
	.word	46153
	.byte	9
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,7,229,6,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	2,6,2,35,0,10
	.byte	'ESR1WKPCLR',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'ESR1OVRUNCLR',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PINAWKPCLR',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'PINAOVRUNCLR',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'PINBWKPCLR',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PINBOVRUNCLR',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'WUTWKPCLR',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'WUTOVRUNCLR',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	830
	.byte	14,0,2,35,2,0,25
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,7,242,6,3
	.word	46720
	.byte	9
	.byte	'_Ifx_SCU_PMSWUTCNT_Bits',0,7,245,6,16,4,10
	.byte	'WUTCNT',0,4
	.word	330
	.byte	24,8,2,35,0,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	7,1,2,35,3,10
	.byte	'VAL',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_SCU_PMSWUTCNT_Bits',0,7,250,6,3
	.word	47036
	.byte	9
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,7,253,6,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'CLRC',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,2
	.word	830
	.byte	10,4,2,35,0,10
	.byte	'CSS0',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'CSS1',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'CSS2',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'reserved_15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'USRINFO',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_RSTCON2_Bits',0,7,135,7,3
	.word	47155
	.byte	9
	.byte	'_Ifx_SCU_RSTCON_Bits',0,7,138,7,16,4,10
	.byte	'ESR0',0,1
	.word	353
	.byte	2,6,2,35,0,10
	.byte	'ESR1',0,1
	.word	353
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	353
	.byte	2,2,2,35,0,10
	.byte	'SMU',0,1
	.word	353
	.byte	2,0,2,35,0,10
	.byte	'SW',0,1
	.word	353
	.byte	2,6,2,35,1,10
	.byte	'STM0',0,1
	.word	353
	.byte	2,4,2,35,1,10
	.byte	'STM1',0,1
	.word	353
	.byte	2,2,2,35,1,10
	.byte	'STM2',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_RSTCON_Bits',0,7,149,7,3
	.word	47364
	.byte	9
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,7,152,7,16,4,10
	.byte	'ESR0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'ESR1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'SMU',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'SW',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'STM0',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'STM1',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'STM2',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'PORST',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'reserved_17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'CB0',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'CB1',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'CB3',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	353
	.byte	2,1,2,35,2,10
	.byte	'EVR13',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'EVR33',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'SWD',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	353
	.byte	2,4,2,35,3,10
	.byte	'STBYR',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	353
	.byte	3,0,2,35,3,0,25
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,7,175,7,3
	.word	47575
	.byte	9
	.byte	'_Ifx_SCU_SAFECON_Bits',0,7,178,7,16,4,10
	.byte	'HBT',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	330
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_SCU_SAFECON_Bits',0,7,182,7,3
	.word	48007
	.byte	9
	.byte	'_Ifx_SCU_STSTAT_Bits',0,7,185,7,16,4,10
	.byte	'HWCFG',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'FTM',0,1
	.word	353
	.byte	7,1,2,35,1,10
	.byte	'MODE',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'FCBAE',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'LUDIS',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'TRSTL',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'SPDEN',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	353
	.byte	3,0,2,35,2,10
	.byte	'RAMINT',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'reserved_25',0,1
	.word	353
	.byte	7,0,2,35,3,0,25
	.byte	'Ifx_SCU_STSTAT_Bits',0,7,198,7,3
	.word	48103
	.byte	9
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,7,201,7,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'SWRSTREQ',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	330
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,7,206,7,3
	.word	48363
	.byte	9
	.byte	'_Ifx_SCU_SYSCON_Bits',0,7,209,7,16,4,10
	.byte	'CCTRIG0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'RAMINTM',0,1
	.word	353
	.byte	2,4,2,35,0,10
	.byte	'SETLUDIS',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	353
	.byte	3,0,2,35,0,10
	.byte	'DATM',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,4
	.word	330
	.byte	23,0,2,35,0,0,25
	.byte	'Ifx_SCU_SYSCON_Bits',0,7,218,7,3
	.word	48488
	.byte	9
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,7,221,7,16,4,10
	.byte	'ESR0T',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,7,228,7,3
	.word	48685
	.byte	9
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,7,231,7,16,4,10
	.byte	'ESR0T',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,7,238,7,3
	.word	48838
	.byte	9
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,7,241,7,16,4,10
	.byte	'ESR0T',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSET_Bits',0,7,248,7,3
	.word	48991
	.byte	9
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,7,251,7,16,4,10
	.byte	'ESR0T',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'ESR1T',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'SMUT',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,7,130,8,3
	.word	49144
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,7,139,8,3
	.word	945
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,7,154,8,3
	.word	1081
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,7,170,8,3
	.word	1325
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,7,173,8,16,4,10
	.byte	'ENDINIT',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'LCK',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'PW',0,4
	.word	929
	.byte	14,16,2,35,0,10
	.byte	'REL',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,7,179,8,3
	.word	49399
	.byte	9
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,7,182,8,16,4,10
	.byte	'CLRIRF',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'IR0',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'DR',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'IR1',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'UR',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PAR',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'TCR',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'TCTR',0,1
	.word	353
	.byte	7,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,7,195,8,3
	.word	49525
	.byte	9
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,7,198,8,16,4,10
	.byte	'AE',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'OE',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'IS0',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'DS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'TO',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'IS1',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'US',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PAS',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'TCS',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'TCT',0,1
	.word	353
	.byte	7,0,2,35,1,10
	.byte	'TIM',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,7,211,8,3
	.word	49777
	.byte	11,7,219,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	33563
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ACCEN0',0,7,224,8,3
	.word	49996
	.byte	11,7,227,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34120
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ACCEN1',0,7,232,8,3
	.word	50060
	.byte	11,7,235,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34197
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ARSTDIS',0,7,240,8,3
	.word	50124
	.byte	11,7,243,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34333
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON0',0,7,248,8,3
	.word	50189
	.byte	11,7,251,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34615
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON1',0,7,128,9,3
	.word	50254
	.byte	11,7,131,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34853
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON2',0,7,136,9,3
	.word	50319
	.byte	11,7,139,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	34981
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON3',0,7,144,9,3
	.word	50384
	.byte	11,7,147,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35208
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON4',0,7,152,9,3
	.word	50449
	.byte	11,7,155,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35427
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON5',0,7,160,9,3
	.word	50514
	.byte	11,7,163,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35555
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CCUCON6',0,7,168,9,3
	.word	50579
	.byte	11,7,171,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35655
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_CHIPID',0,7,176,9,3
	.word	50644
	.byte	11,7,179,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	35863
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_DTSCON',0,7,184,9,3
	.word	50708
	.byte	11,7,187,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36028
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_DTSLIM',0,7,192,9,3
	.word	50772
	.byte	11,7,195,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36211
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_DTSSTAT',0,7,200,9,3
	.word	50836
	.byte	11,7,203,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36365
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EICR',0,7,208,9,3
	.word	50901
	.byte	11,7,211,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36729
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EIFR',0,7,216,9,3
	.word	50963
	.byte	11,7,219,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	36940
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EMSR',0,7,224,9,3
	.word	51025
	.byte	11,7,227,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37192
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ESRCFG',0,7,232,9,3
	.word	51087
	.byte	11,7,235,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37310
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ESROCFG',0,7,240,9,3
	.word	51151
	.byte	11,7,243,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37421
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVR13CON',0,7,248,9,3
	.word	51216
	.byte	11,7,251,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37584
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRADCSTAT',0,7,128,10,3
	.word	51282
	.byte	11,7,131,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	37746
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRMONCTRL',0,7,136,10,3
	.word	51350
	.byte	11,7,139,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38024
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVROVMON',0,7,144,10,3
	.word	51418
	.byte	11,7,147,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38203
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRRSTCON',0,7,152,10,3
	.word	51484
	.byte	11,7,155,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38363
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,7,160,10,3
	.word	51551
	.byte	11,7,163,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38524
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCTRL1',0,7,168,10,3
	.word	51620
	.byte	11,7,171,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	38716
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCTRL2',0,7,176,10,3
	.word	51688
	.byte	11,7,179,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39012
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSDCTRL3',0,7,184,10,3
	.word	51756
	.byte	11,7,187,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39227
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRSTAT',0,7,192,10,3
	.word	51824
	.byte	11,7,195,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39516
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EVRUVMON',0,7,200,10,3
	.word	51889
	.byte	11,7,203,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39695
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_EXTCON',0,7,208,10,3
	.word	51955
	.byte	11,7,211,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	39913
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_FDR',0,7,216,10,3
	.word	52019
	.byte	11,7,219,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40076
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_FMR',0,7,224,10,3
	.word	52080
	.byte	11,7,227,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40412
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_ID',0,7,232,10,3
	.word	52141
	.byte	11,7,235,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40519
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_IGCR',0,7,240,10,3
	.word	52201
	.byte	11,7,243,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	40971
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_IN',0,7,248,10,3
	.word	52263
	.byte	11,7,251,10,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41070
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_IOCR',0,7,128,11,3
	.word	52323
	.byte	11,7,131,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41220
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LBISTCTRL0',0,7,136,11,3
	.word	52385
	.byte	11,7,139,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41369
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LBISTCTRL1',0,7,144,11,3
	.word	52453
	.byte	11,7,147,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41530
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LBISTCTRL2',0,7,152,11,3
	.word	52521
	.byte	11,7,155,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41660
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LCLCON0',0,7,160,11,3
	.word	52589
	.byte	11,7,163,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41794
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_LCLTEST',0,7,168,11,3
	.word	52654
	.byte	11,7,171,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	41909
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_MANID',0,7,176,11,3
	.word	52719
	.byte	11,7,179,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42020
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OMR',0,7,184,11,3
	.word	52782
	.byte	11,7,187,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42178
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OSCCON',0,7,192,11,3
	.word	52843
	.byte	11,7,195,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42518
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OUT',0,7,200,11,3
	.word	52907
	.byte	11,7,203,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42619
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OVCCON',0,7,208,11,3
	.word	52968
	.byte	11,7,211,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	42886
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_OVCENABLE',0,7,216,11,3
	.word	53032
	.byte	11,7,219,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43022
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PDISC',0,7,224,11,3
	.word	53099
	.byte	11,7,227,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43133
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PDR',0,7,232,11,3
	.word	53162
	.byte	11,7,235,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43266
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PDRR',0,7,240,11,3
	.word	53223
	.byte	11,7,243,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43469
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLCON0',0,7,248,11,3
	.word	53285
	.byte	11,7,251,11,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	43825
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLCON1',0,7,128,12,3
	.word	53350
	.byte	11,7,131,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44003
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLCON2',0,7,136,12,3
	.word	53415
	.byte	11,7,139,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44103
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYCON0',0,7,144,12,3
	.word	53480
	.byte	11,7,147,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44473
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYCON1',0,7,152,12,3
	.word	53549
	.byte	11,7,155,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44659
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLERAYSTAT',0,7,160,12,3
	.word	53618
	.byte	11,7,163,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	44857
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PLLSTAT',0,7,168,12,3
	.word	53687
	.byte	11,7,171,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45090
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMCSR',0,7,176,12,3
	.word	53752
	.byte	11,7,179,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45242
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWCR0',0,7,184,12,3
	.word	53815
	.byte	11,7,187,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45801
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWCR1',0,7,192,12,3
	.word	53880
	.byte	11,7,195,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	45984
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWCR3',0,7,200,12,3
	.word	53945
	.byte	11,7,203,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46153
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWSTAT',0,7,208,12,3
	.word	54010
	.byte	11,7,211,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	46720
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWSTATCLR',0,7,216,12,3
	.word	54076
	.byte	11,7,219,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47036
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_PMSWUTCNT',0,7,224,12,3
	.word	54145
	.byte	11,7,227,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47364
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_RSTCON',0,7,232,12,3
	.word	54212
	.byte	11,7,235,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47155
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_RSTCON2',0,7,240,12,3
	.word	54276
	.byte	11,7,243,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	47575
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_RSTSTAT',0,7,248,12,3
	.word	54341
	.byte	11,7,251,12,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48007
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_SAFECON',0,7,128,13,3
	.word	54406
	.byte	11,7,131,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48103
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_STSTAT',0,7,136,13,3
	.word	54471
	.byte	11,7,139,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48363
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_SWRSTCON',0,7,144,13,3
	.word	54535
	.byte	11,7,147,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48488
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_SYSCON',0,7,152,13,3
	.word	54601
	.byte	11,7,155,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48685
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPCLR',0,7,160,13,3
	.word	54665
	.byte	11,7,163,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48838
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPDIS',0,7,168,13,3
	.word	54730
	.byte	11,7,171,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	48991
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSET',0,7,176,13,3
	.word	54795
	.byte	11,7,179,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49144
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_TRAPSTAT',0,7,184,13,3
	.word	54860
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON0',0,7,192,13,3
	.word	1041
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_CON1',0,7,200,13,3
	.word	1285
	.byte	25
	.byte	'Ifx_SCU_WDTCPU_SR',0,7,208,13,3
	.word	1516
	.byte	11,7,211,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49399
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_CON0',0,7,216,13,3
	.word	55011
	.byte	11,7,219,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49525
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_CON1',0,7,224,13,3
	.word	55078
	.byte	11,7,227,13,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	49777
	.byte	4,2,35,0,0,25
	.byte	'Ifx_SCU_WDTS_SR',0,7,232,13,3
	.word	55145
	.byte	13
	.word	1556
	.byte	25
	.byte	'Ifx_SCU_WDTCPU',0,7,248,13,3
	.word	55210
	.byte	9
	.byte	'_Ifx_SCU_WDTS',0,7,251,13,25,12,12
	.byte	'CON0',0
	.word	55011
	.byte	4,2,35,0,12
	.byte	'CON1',0
	.word	55078
	.byte	4,2,35,4,12
	.byte	'SR',0
	.word	55145
	.byte	4,2,35,8,0,13
	.word	55239
	.byte	25
	.byte	'Ifx_SCU_WDTS',0,7,128,14,3
	.word	55300
	.byte	17,8
	.word	51087
	.byte	18,1,0,17,4
	.word	53752
	.byte	18,0,0,13
	.word	55239
	.byte	17,12
	.word	1556
	.byte	18,0,0,13
	.word	55350
	.byte	17,16
	.word	353
	.byte	18,15,0,17,16
	.word	50901
	.byte	18,3,0,17,16
	.word	52201
	.byte	18,3,0,17,188,1
	.word	353
	.byte	18,187,1,0,17,244,1
	.word	353
	.byte	18,243,1,0,9
	.byte	'_Ifx_SCU',0,7,141,14,25,128,8,12
	.byte	'reserved_0',0
	.word	5039
	.byte	8,2,35,0,12
	.byte	'ID',0
	.word	52141
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	3220
	.byte	4,2,35,12,12
	.byte	'OSCCON',0
	.word	52843
	.byte	4,2,35,16,12
	.byte	'PLLSTAT',0
	.word	53687
	.byte	4,2,35,20,12
	.byte	'PLLCON0',0
	.word	53285
	.byte	4,2,35,24,12
	.byte	'PLLCON1',0
	.word	53350
	.byte	4,2,35,28,12
	.byte	'PLLCON2',0
	.word	53415
	.byte	4,2,35,32,12
	.byte	'PLLERAYSTAT',0
	.word	53618
	.byte	4,2,35,36,12
	.byte	'PLLERAYCON0',0
	.word	53480
	.byte	4,2,35,40,12
	.byte	'PLLERAYCON1',0
	.word	53549
	.byte	4,2,35,44,12
	.byte	'CCUCON0',0
	.word	50189
	.byte	4,2,35,48,12
	.byte	'CCUCON1',0
	.word	50254
	.byte	4,2,35,52,12
	.byte	'FDR',0
	.word	52019
	.byte	4,2,35,56,12
	.byte	'EXTCON',0
	.word	51955
	.byte	4,2,35,60,12
	.byte	'CCUCON2',0
	.word	50319
	.byte	4,2,35,64,12
	.byte	'CCUCON3',0
	.word	50384
	.byte	4,2,35,68,12
	.byte	'CCUCON4',0
	.word	50449
	.byte	4,2,35,72,12
	.byte	'CCUCON5',0
	.word	50514
	.byte	4,2,35,76,12
	.byte	'RSTSTAT',0
	.word	54341
	.byte	4,2,35,80,12
	.byte	'reserved_54',0
	.word	3220
	.byte	4,2,35,84,12
	.byte	'RSTCON',0
	.word	54212
	.byte	4,2,35,88,12
	.byte	'ARSTDIS',0
	.word	50124
	.byte	4,2,35,92,12
	.byte	'SWRSTCON',0
	.word	54535
	.byte	4,2,35,96,12
	.byte	'RSTCON2',0
	.word	54276
	.byte	4,2,35,100,12
	.byte	'reserved_68',0
	.word	3220
	.byte	4,2,35,104,12
	.byte	'EVRRSTCON',0
	.word	51484
	.byte	4,2,35,108,12
	.byte	'ESRCFG',0
	.word	55327
	.byte	8,2,35,112,12
	.byte	'ESROCFG',0
	.word	51151
	.byte	4,2,35,120,12
	.byte	'SYSCON',0
	.word	54601
	.byte	4,2,35,124,12
	.byte	'CCUCON6',0
	.word	50579
	.byte	4,3,35,128,1,12
	.byte	'reserved_84',0
	.word	4410
	.byte	24,3,35,132,1,12
	.byte	'PDR',0
	.word	53162
	.byte	4,3,35,156,1,12
	.byte	'IOCR',0
	.word	52323
	.byte	4,3,35,160,1,12
	.byte	'OUT',0
	.word	52907
	.byte	4,3,35,164,1,12
	.byte	'OMR',0
	.word	52782
	.byte	4,3,35,168,1,12
	.byte	'IN',0
	.word	52263
	.byte	4,3,35,172,1,12
	.byte	'EVRSTAT',0
	.word	51824
	.byte	4,3,35,176,1,12
	.byte	'reserved_B4',0
	.word	3220
	.byte	4,3,35,180,1,12
	.byte	'EVR13CON',0
	.word	51216
	.byte	4,3,35,184,1,12
	.byte	'reserved_BC',0
	.word	3220
	.byte	4,3,35,188,1,12
	.byte	'STSTAT',0
	.word	54471
	.byte	4,3,35,192,1,12
	.byte	'reserved_C4',0
	.word	3220
	.byte	4,3,35,196,1,12
	.byte	'PMSWCR0',0
	.word	53815
	.byte	4,3,35,200,1,12
	.byte	'PMSWSTAT',0
	.word	54010
	.byte	4,3,35,204,1,12
	.byte	'PMSWSTATCLR',0
	.word	54076
	.byte	4,3,35,208,1,12
	.byte	'PMCSR',0
	.word	55336
	.byte	4,3,35,212,1,12
	.byte	'reserved_D8',0
	.word	5039
	.byte	8,3,35,216,1,12
	.byte	'DTSSTAT',0
	.word	50836
	.byte	4,3,35,224,1,12
	.byte	'DTSCON',0
	.word	50708
	.byte	4,3,35,228,1,12
	.byte	'PMSWCR1',0
	.word	53880
	.byte	4,3,35,232,1,12
	.byte	'reserved_EC',0
	.word	3220
	.byte	4,3,35,236,1,12
	.byte	'WDTS',0
	.word	55345
	.byte	12,3,35,240,1,12
	.byte	'EMSR',0
	.word	51025
	.byte	4,3,35,252,1,12
	.byte	'WDTCPU',0
	.word	55359
	.byte	12,3,35,128,2,12
	.byte	'reserved_10C',0
	.word	4410
	.byte	24,3,35,140,2,12
	.byte	'TRAPSTAT',0
	.word	54860
	.byte	4,3,35,164,2,12
	.byte	'TRAPSET',0
	.word	54795
	.byte	4,3,35,168,2,12
	.byte	'TRAPCLR',0
	.word	54665
	.byte	4,3,35,172,2,12
	.byte	'TRAPDIS',0
	.word	54730
	.byte	4,3,35,176,2,12
	.byte	'LCLCON0',0
	.word	52589
	.byte	4,3,35,180,2,12
	.byte	'reserved_138',0
	.word	3220
	.byte	4,3,35,184,2,12
	.byte	'LCLTEST',0
	.word	52654
	.byte	4,3,35,188,2,12
	.byte	'CHIPID',0
	.word	50644
	.byte	4,3,35,192,2,12
	.byte	'MANID',0
	.word	52719
	.byte	4,3,35,196,2,12
	.byte	'reserved_148',0
	.word	5039
	.byte	8,3,35,200,2,12
	.byte	'SAFECON',0
	.word	54406
	.byte	4,3,35,208,2,12
	.byte	'reserved_154',0
	.word	55364
	.byte	16,3,35,212,2,12
	.byte	'LBISTCTRL0',0
	.word	52385
	.byte	4,3,35,228,2,12
	.byte	'LBISTCTRL1',0
	.word	52453
	.byte	4,3,35,232,2,12
	.byte	'LBISTCTRL2',0
	.word	52521
	.byte	4,3,35,236,2,12
	.byte	'reserved_170',0
	.word	9932
	.byte	28,3,35,240,2,12
	.byte	'PDISC',0
	.word	53099
	.byte	4,3,35,140,3,12
	.byte	'reserved_190',0
	.word	5379
	.byte	12,3,35,144,3,12
	.byte	'EVRADCSTAT',0
	.word	51282
	.byte	4,3,35,156,3,12
	.byte	'EVRUVMON',0
	.word	51889
	.byte	4,3,35,160,3,12
	.byte	'EVROVMON',0
	.word	51418
	.byte	4,3,35,164,3,12
	.byte	'EVRMONCTRL',0
	.word	51350
	.byte	4,3,35,168,3,12
	.byte	'reserved_1AC',0
	.word	3220
	.byte	4,3,35,172,3,12
	.byte	'EVRSDCTRL1',0
	.word	51620
	.byte	4,3,35,176,3,12
	.byte	'EVRSDCTRL2',0
	.word	51688
	.byte	4,3,35,180,3,12
	.byte	'EVRSDCTRL3',0
	.word	51756
	.byte	4,3,35,184,3,12
	.byte	'reserved_1BC',0
	.word	5039
	.byte	8,3,35,188,3,12
	.byte	'EVRSDCOEFF2',0
	.word	51551
	.byte	4,3,35,196,3,12
	.byte	'reserved_1C8',0
	.word	9655
	.byte	20,3,35,200,3,12
	.byte	'PMSWUTCNT',0
	.word	54145
	.byte	4,3,35,220,3,12
	.byte	'OVCENABLE',0
	.word	53032
	.byte	4,3,35,224,3,12
	.byte	'OVCCON',0
	.word	52968
	.byte	4,3,35,228,3,12
	.byte	'reserved_1E8',0
	.word	29580
	.byte	40,3,35,232,3,12
	.byte	'EICR',0
	.word	55373
	.byte	16,3,35,144,4,12
	.byte	'EIFR',0
	.word	50963
	.byte	4,3,35,160,4,12
	.byte	'FMR',0
	.word	52080
	.byte	4,3,35,164,4,12
	.byte	'PDRR',0
	.word	53223
	.byte	4,3,35,168,4,12
	.byte	'IGCR',0
	.word	55382
	.byte	16,3,35,172,4,12
	.byte	'reserved_23C',0
	.word	3220
	.byte	4,3,35,188,4,12
	.byte	'DTSLIM',0
	.word	50772
	.byte	4,3,35,192,4,12
	.byte	'reserved_244',0
	.word	55391
	.byte	188,1,3,35,196,4,12
	.byte	'PMSWCR3',0
	.word	53945
	.byte	4,3,35,128,6,12
	.byte	'reserved_304',0
	.word	55402
	.byte	244,1,3,35,132,6,12
	.byte	'ACCEN1',0
	.word	50060
	.byte	4,3,35,248,7,12
	.byte	'ACCEN0',0
	.word	49996
	.byte	4,3,35,252,7,0,13
	.word	55413
	.byte	25
	.byte	'Ifx_SCU',0,7,244,14,3
	.word	57309
	.byte	9
	.byte	'_Ifx_CPU_A_Bits',0,21,45,16,4,10
	.byte	'ADDR',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_A_Bits',0,21,48,3
	.word	57331
	.byte	9
	.byte	'_Ifx_CPU_BIV_Bits',0,21,51,16,4,10
	.byte	'VSS',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'BIV',0,4
	.word	929
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_BIV_Bits',0,21,55,3
	.word	57392
	.byte	9
	.byte	'_Ifx_CPU_BTV_Bits',0,21,58,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'BTV',0,4
	.word	929
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_BTV_Bits',0,21,62,3
	.word	57471
	.byte	9
	.byte	'_Ifx_CPU_CCNT_Bits',0,21,65,16,4,10
	.byte	'CountValue',0,4
	.word	929
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	929
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_CCNT_Bits',0,21,69,3
	.word	57557
	.byte	9
	.byte	'_Ifx_CPU_CCTRL_Bits',0,21,72,16,4,10
	.byte	'CM',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'CE',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'M1',0,4
	.word	929
	.byte	3,27,2,35,0,10
	.byte	'M2',0,4
	.word	929
	.byte	3,24,2,35,0,10
	.byte	'M3',0,4
	.word	929
	.byte	3,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	929
	.byte	21,0,2,35,0,0,25
	.byte	'Ifx_CPU_CCTRL_Bits',0,21,80,3
	.word	57646
	.byte	9
	.byte	'_Ifx_CPU_COMPAT_Bits',0,21,83,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'RM',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'SP',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	929
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_COMPAT_Bits',0,21,89,3
	.word	57792
	.byte	9
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,21,92,16,4,10
	.byte	'CORE_ID',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	929
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_CORE_ID_Bits',0,21,96,3
	.word	57919
	.byte	9
	.byte	'_Ifx_CPU_CPR_L_Bits',0,21,99,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	929
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_CPR_L_Bits',0,21,103,3
	.word	58017
	.byte	9
	.byte	'_Ifx_CPU_CPR_U_Bits',0,21,106,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	929
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_CPR_U_Bits',0,21,110,3
	.word	58110
	.byte	9
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,21,113,16,4,10
	.byte	'MODREV',0,4
	.word	929
	.byte	8,24,2,35,0,10
	.byte	'MOD_32B',0,4
	.word	929
	.byte	8,16,2,35,0,10
	.byte	'MOD',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_CPU_ID_Bits',0,21,118,3
	.word	58203
	.byte	9
	.byte	'_Ifx_CPU_CPXE_Bits',0,21,121,16,4,10
	.byte	'XE',0,4
	.word	929
	.byte	8,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	929
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_CPXE_Bits',0,21,125,3
	.word	58310
	.byte	9
	.byte	'_Ifx_CPU_CREVT_Bits',0,21,128,1,16,4,10
	.byte	'EVTA',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	929
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	929
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	929
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_CREVT_Bits',0,21,136,1,3
	.word	58397
	.byte	9
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,21,139,1,16,4,10
	.byte	'CID',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	929
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_CUS_ID_Bits',0,21,143,1,3
	.word	58551
	.byte	9
	.byte	'_Ifx_CPU_D_Bits',0,21,146,1,16,4,10
	.byte	'DATA',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_D_Bits',0,21,149,1,3
	.word	58645
	.byte	9
	.byte	'_Ifx_CPU_DATR_Bits',0,21,152,1,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'SBE',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'reserved_4',0,4
	.word	929
	.byte	5,23,2,35,0,10
	.byte	'CWE',0,4
	.word	929
	.byte	1,22,2,35,0,10
	.byte	'CFE',0,4
	.word	929
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	929
	.byte	3,18,2,35,0,10
	.byte	'SOE',0,4
	.word	929
	.byte	1,17,2,35,0,10
	.byte	'SME',0,4
	.word	929
	.byte	1,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_DATR_Bits',0,21,163,1,3
	.word	58708
	.byte	9
	.byte	'_Ifx_CPU_DBGSR_Bits',0,21,166,1,16,4,10
	.byte	'DE',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'HALT',0,4
	.word	929
	.byte	2,29,2,35,0,10
	.byte	'SIH',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'SUSP',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	929
	.byte	1,26,2,35,0,10
	.byte	'PREVSUSP',0,4
	.word	929
	.byte	1,25,2,35,0,10
	.byte	'PEVT',0,4
	.word	929
	.byte	1,24,2,35,0,10
	.byte	'EVTSRC',0,4
	.word	929
	.byte	5,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	929
	.byte	19,0,2,35,0,0,25
	.byte	'Ifx_CPU_DBGSR_Bits',0,21,177,1,3
	.word	58926
	.byte	9
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,21,180,1,16,4,10
	.byte	'DTA',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	929
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_DBGTCR_Bits',0,21,184,1,3
	.word	59141
	.byte	9
	.byte	'_Ifx_CPU_DCON0_Bits',0,21,187,1,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'DCBYP',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	929
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_CPU_DCON0_Bits',0,21,192,1,3
	.word	59235
	.byte	9
	.byte	'_Ifx_CPU_DCON2_Bits',0,21,195,1,16,4,10
	.byte	'DCACHE_SZE',0,4
	.word	929
	.byte	16,16,2,35,0,10
	.byte	'DSCRATCH_SZE',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_DCON2_Bits',0,21,199,1,3
	.word	59351
	.byte	9
	.byte	'_Ifx_CPU_DCX_Bits',0,21,202,1,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	6,26,2,35,0,10
	.byte	'DCXValue',0,4
	.word	929
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_CPU_DCX_Bits',0,21,206,1,3
	.word	59452
	.byte	9
	.byte	'_Ifx_CPU_DEADD_Bits',0,21,209,1,16,4,10
	.byte	'ERROR_ADDRESS',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_DEADD_Bits',0,21,212,1,3
	.word	59545
	.byte	9
	.byte	'_Ifx_CPU_DIEAR_Bits',0,21,215,1,16,4,10
	.byte	'TA',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_DIEAR_Bits',0,21,218,1,3
	.word	59625
	.byte	9
	.byte	'_Ifx_CPU_DIETR_Bits',0,21,221,1,16,4,10
	.byte	'IED',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	929
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	929
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	929
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	929
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	929
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	929
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_CPU_DIETR_Bits',0,21,233,1,3
	.word	59694
	.byte	9
	.byte	'_Ifx_CPU_DMS_Bits',0,21,236,1,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'DMSValue',0,4
	.word	929
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_DMS_Bits',0,21,240,1,3
	.word	59923
	.byte	9
	.byte	'_Ifx_CPU_DPR_L_Bits',0,21,243,1,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'LOWBND',0,4
	.word	929
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_DPR_L_Bits',0,21,247,1,3
	.word	60016
	.byte	9
	.byte	'_Ifx_CPU_DPR_U_Bits',0,21,250,1,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'UPPBND',0,4
	.word	929
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_CPU_DPR_U_Bits',0,21,254,1,3
	.word	60111
	.byte	9
	.byte	'_Ifx_CPU_DPRE_Bits',0,21,129,2,16,4,10
	.byte	'RE',0,4
	.word	929
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_DPRE_Bits',0,21,133,2,3
	.word	60206
	.byte	9
	.byte	'_Ifx_CPU_DPWE_Bits',0,21,136,2,16,4,10
	.byte	'WE',0,4
	.word	929
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_DPWE_Bits',0,21,140,2,3
	.word	60296
	.byte	9
	.byte	'_Ifx_CPU_DSTR_Bits',0,21,143,2,16,4,10
	.byte	'SRE',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'GAE',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'LBE',0,4
	.word	929
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	929
	.byte	3,26,2,35,0,10
	.byte	'CRE',0,4
	.word	929
	.byte	1,25,2,35,0,10
	.byte	'reserved_7',0,4
	.word	929
	.byte	7,18,2,35,0,10
	.byte	'DTME',0,4
	.word	929
	.byte	1,17,2,35,0,10
	.byte	'LOE',0,4
	.word	929
	.byte	1,16,2,35,0,10
	.byte	'SDE',0,4
	.word	929
	.byte	1,15,2,35,0,10
	.byte	'SCE',0,4
	.word	929
	.byte	1,14,2,35,0,10
	.byte	'CAC',0,4
	.word	929
	.byte	1,13,2,35,0,10
	.byte	'MPE',0,4
	.word	929
	.byte	1,12,2,35,0,10
	.byte	'CLE',0,4
	.word	929
	.byte	1,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	929
	.byte	3,8,2,35,0,10
	.byte	'ALN',0,4
	.word	929
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	929
	.byte	7,0,2,35,0,0,25
	.byte	'Ifx_CPU_DSTR_Bits',0,21,161,2,3
	.word	60386
	.byte	9
	.byte	'_Ifx_CPU_EXEVT_Bits',0,21,164,2,16,4,10
	.byte	'EVTA',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	929
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	929
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	929
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_EXEVT_Bits',0,21,172,2,3
	.word	60710
	.byte	9
	.byte	'_Ifx_CPU_FCX_Bits',0,21,175,2,16,4,10
	.byte	'FCXO',0,4
	.word	929
	.byte	16,16,2,35,0,10
	.byte	'FCXS',0,4
	.word	929
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	929
	.byte	12,0,2,35,0,0,25
	.byte	'Ifx_CPU_FCX_Bits',0,21,180,2,3
	.word	60864
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,21,183,2,16,4,10
	.byte	'TST',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'TCL',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	929
	.byte	6,24,2,35,0,10
	.byte	'RM',0,4
	.word	929
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	929
	.byte	8,14,2,35,0,10
	.byte	'FXE',0,4
	.word	929
	.byte	1,13,2,35,0,10
	.byte	'FUE',0,4
	.word	929
	.byte	1,12,2,35,0,10
	.byte	'FZE',0,4
	.word	929
	.byte	1,11,2,35,0,10
	.byte	'FVE',0,4
	.word	929
	.byte	1,10,2,35,0,10
	.byte	'FIE',0,4
	.word	929
	.byte	1,9,2,35,0,10
	.byte	'reserved_23',0,4
	.word	929
	.byte	3,6,2,35,0,10
	.byte	'FX',0,4
	.word	929
	.byte	1,5,2,35,0,10
	.byte	'FU',0,4
	.word	929
	.byte	1,4,2,35,0,10
	.byte	'FZ',0,4
	.word	929
	.byte	1,3,2,35,0,10
	.byte	'FV',0,4
	.word	929
	.byte	1,2,2,35,0,10
	.byte	'FI',0,4
	.word	929
	.byte	1,1,2,35,0,10
	.byte	'reserved_31',0,4
	.word	929
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,21,202,2,3
	.word	60970
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,205,2,16,4,10
	.byte	'OPC',0,4
	.word	929
	.byte	8,24,2,35,0,10
	.byte	'FMT',0,4
	.word	929
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	929
	.byte	7,16,2,35,0,10
	.byte	'DREG',0,4
	.word	929
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	929
	.byte	12,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,212,2,3
	.word	61319
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,21,215,2,16,4,10
	.byte	'PC',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,21,218,2,3
	.word	61479
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,221,2,16,4,10
	.byte	'SRC1',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,224,2,3
	.word	61560
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,227,2,16,4,10
	.byte	'SRC2',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,230,2,3
	.word	61647
	.byte	9
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,233,2,16,4,10
	.byte	'SRC3',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,236,2,3
	.word	61734
	.byte	9
	.byte	'_Ifx_CPU_ICNT_Bits',0,21,239,2,16,4,10
	.byte	'CountValue',0,4
	.word	929
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	929
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_ICNT_Bits',0,21,243,2,3
	.word	61821
	.byte	9
	.byte	'_Ifx_CPU_ICR_Bits',0,21,246,2,16,4,10
	.byte	'CCPN',0,4
	.word	929
	.byte	10,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	929
	.byte	5,17,2,35,0,10
	.byte	'IE',0,4
	.word	929
	.byte	1,16,2,35,0,10
	.byte	'PIPN',0,4
	.word	929
	.byte	10,6,2,35,0,10
	.byte	'reserved_26',0,4
	.word	929
	.byte	6,0,2,35,0,0,25
	.byte	'Ifx_CPU_ICR_Bits',0,21,253,2,3
	.word	61912
	.byte	9
	.byte	'_Ifx_CPU_ISP_Bits',0,21,128,3,16,4,10
	.byte	'ISP',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_ISP_Bits',0,21,131,3,3
	.word	62055
	.byte	9
	.byte	'_Ifx_CPU_LCX_Bits',0,21,134,3,16,4,10
	.byte	'LCXO',0,4
	.word	929
	.byte	16,16,2,35,0,10
	.byte	'LCXS',0,4
	.word	929
	.byte	4,12,2,35,0,10
	.byte	'reserved_20',0,4
	.word	929
	.byte	12,0,2,35,0,0,25
	.byte	'Ifx_CPU_LCX_Bits',0,21,139,3,3
	.word	62121
	.byte	9
	.byte	'_Ifx_CPU_M1CNT_Bits',0,21,142,3,16,4,10
	.byte	'CountValue',0,4
	.word	929
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	929
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_M1CNT_Bits',0,21,146,3,3
	.word	62227
	.byte	9
	.byte	'_Ifx_CPU_M2CNT_Bits',0,21,149,3,16,4,10
	.byte	'CountValue',0,4
	.word	929
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	929
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_M2CNT_Bits',0,21,153,3,3
	.word	62320
	.byte	9
	.byte	'_Ifx_CPU_M3CNT_Bits',0,21,156,3,16,4,10
	.byte	'CountValue',0,4
	.word	929
	.byte	31,1,2,35,0,10
	.byte	'SOvf',0,4
	.word	929
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_M3CNT_Bits',0,21,160,3,3
	.word	62413
	.byte	9
	.byte	'_Ifx_CPU_PC_Bits',0,21,163,3,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'PC',0,4
	.word	929
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_CPU_PC_Bits',0,21,167,3,3
	.word	62506
	.byte	9
	.byte	'_Ifx_CPU_PCON0_Bits',0,21,170,3,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'PCBYP',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	929
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_CPU_PCON0_Bits',0,21,175,3,3
	.word	62591
	.byte	9
	.byte	'_Ifx_CPU_PCON1_Bits',0,21,178,3,16,4,10
	.byte	'PCINV',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'PBINV',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'reserved_2',0,4
	.word	929
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_CPU_PCON1_Bits',0,21,183,3,3
	.word	62707
	.byte	9
	.byte	'_Ifx_CPU_PCON2_Bits',0,21,186,3,16,4,10
	.byte	'PCACHE_SZE',0,4
	.word	929
	.byte	16,16,2,35,0,10
	.byte	'PSCRATCH_SZE',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_PCON2_Bits',0,21,190,3,3
	.word	62818
	.byte	9
	.byte	'_Ifx_CPU_PCXI_Bits',0,21,193,3,16,4,10
	.byte	'PCXO',0,4
	.word	929
	.byte	16,16,2,35,0,10
	.byte	'PCXS',0,4
	.word	929
	.byte	4,12,2,35,0,10
	.byte	'UL',0,4
	.word	929
	.byte	1,11,2,35,0,10
	.byte	'PIE',0,4
	.word	929
	.byte	1,10,2,35,0,10
	.byte	'PCPN',0,4
	.word	929
	.byte	10,0,2,35,0,0,25
	.byte	'Ifx_CPU_PCXI_Bits',0,21,200,3,3
	.word	62919
	.byte	9
	.byte	'_Ifx_CPU_PIEAR_Bits',0,21,203,3,16,4,10
	.byte	'TA',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_PIEAR_Bits',0,21,206,3,3
	.word	63049
	.byte	9
	.byte	'_Ifx_CPU_PIETR_Bits',0,21,209,3,16,4,10
	.byte	'IED',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'IE_T',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'IE_C',0,4
	.word	929
	.byte	1,29,2,35,0,10
	.byte	'IE_S',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'IE_BI',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'E_INFO',0,4
	.word	929
	.byte	6,21,2,35,0,10
	.byte	'IE_DUAL',0,4
	.word	929
	.byte	1,20,2,35,0,10
	.byte	'IE_SP',0,4
	.word	929
	.byte	1,19,2,35,0,10
	.byte	'IE_BS',0,4
	.word	929
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	929
	.byte	18,0,2,35,0,0,25
	.byte	'Ifx_CPU_PIETR_Bits',0,21,221,3,3
	.word	63118
	.byte	9
	.byte	'_Ifx_CPU_PMA0_Bits',0,21,224,3,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	13,19,2,35,0,10
	.byte	'DAC',0,4
	.word	929
	.byte	3,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_PMA0_Bits',0,21,229,3,3
	.word	63347
	.byte	9
	.byte	'_Ifx_CPU_PMA1_Bits',0,21,232,3,16,4,10
	.byte	'reserved_0',0,4
	.word	929
	.byte	14,18,2,35,0,10
	.byte	'CAC',0,4
	.word	929
	.byte	2,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_PMA1_Bits',0,21,237,3,3
	.word	63460
	.byte	9
	.byte	'_Ifx_CPU_PMA2_Bits',0,21,240,3,16,4,10
	.byte	'PSI',0,4
	.word	929
	.byte	16,16,2,35,0,10
	.byte	'reserved_16',0,4
	.word	929
	.byte	16,0,2,35,0,0,25
	.byte	'Ifx_CPU_PMA2_Bits',0,21,244,3,3
	.word	63573
	.byte	9
	.byte	'_Ifx_CPU_PSTR_Bits',0,21,247,3,16,4,10
	.byte	'FRE',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'FBE',0,4
	.word	929
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	929
	.byte	9,20,2,35,0,10
	.byte	'FPE',0,4
	.word	929
	.byte	1,19,2,35,0,10
	.byte	'reserved_13',0,4
	.word	929
	.byte	1,18,2,35,0,10
	.byte	'FME',0,4
	.word	929
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	929
	.byte	17,0,2,35,0,0,25
	.byte	'Ifx_CPU_PSTR_Bits',0,21,129,4,3
	.word	63664
	.byte	9
	.byte	'_Ifx_CPU_PSW_Bits',0,21,132,4,16,4,10
	.byte	'CDC',0,4
	.word	929
	.byte	7,25,2,35,0,10
	.byte	'CDE',0,4
	.word	929
	.byte	1,24,2,35,0,10
	.byte	'GW',0,4
	.word	929
	.byte	1,23,2,35,0,10
	.byte	'IS',0,4
	.word	929
	.byte	1,22,2,35,0,10
	.byte	'IO',0,4
	.word	929
	.byte	2,20,2,35,0,10
	.byte	'PRS',0,4
	.word	929
	.byte	2,18,2,35,0,10
	.byte	'S',0,4
	.word	929
	.byte	1,17,2,35,0,10
	.byte	'reserved_15',0,4
	.word	929
	.byte	12,5,2,35,0,10
	.byte	'SAV',0,4
	.word	929
	.byte	1,4,2,35,0,10
	.byte	'AV',0,4
	.word	929
	.byte	1,3,2,35,0,10
	.byte	'SV',0,4
	.word	929
	.byte	1,2,2,35,0,10
	.byte	'V',0,4
	.word	929
	.byte	1,1,2,35,0,10
	.byte	'C',0,4
	.word	929
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_PSW_Bits',0,21,147,4,3
	.word	63867
	.byte	9
	.byte	'_Ifx_CPU_SEGEN_Bits',0,21,150,4,16,4,10
	.byte	'ADFLIP',0,4
	.word	929
	.byte	8,24,2,35,0,10
	.byte	'ADTYPE',0,4
	.word	929
	.byte	2,22,2,35,0,10
	.byte	'reserved_10',0,4
	.word	929
	.byte	21,1,2,35,0,10
	.byte	'AE',0,4
	.word	929
	.byte	1,0,2,35,0,0,25
	.byte	'Ifx_CPU_SEGEN_Bits',0,21,156,4,3
	.word	64110
	.byte	9
	.byte	'_Ifx_CPU_SMACON_Bits',0,21,159,4,16,4,10
	.byte	'PC',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'reserved_1',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'PT',0,4
	.word	929
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	929
	.byte	5,24,2,35,0,10
	.byte	'DC',0,4
	.word	929
	.byte	1,23,2,35,0,10
	.byte	'reserved_9',0,4
	.word	929
	.byte	1,22,2,35,0,10
	.byte	'DT',0,4
	.word	929
	.byte	1,21,2,35,0,10
	.byte	'reserved_11',0,4
	.word	929
	.byte	13,8,2,35,0,10
	.byte	'IODT',0,4
	.word	929
	.byte	1,7,2,35,0,10
	.byte	'reserved_25',0,4
	.word	929
	.byte	7,0,2,35,0,0,25
	.byte	'Ifx_CPU_SMACON_Bits',0,21,171,4,3
	.word	64238
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,21,174,4,16,4,10
	.byte	'EN',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,21,177,4,3
	.word	64479
	.byte	9
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,21,180,4,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,21,183,4,3
	.word	64562
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,21,186,4,16,4,10
	.byte	'EN',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,21,189,4,3
	.word	64653
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,21,192,4,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,21,195,4,3
	.word	64744
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,21,198,4,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	330
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,21,202,4,3
	.word	64843
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,21,205,4,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	330
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,21,209,4,3
	.word	64950
	.byte	9
	.byte	'_Ifx_CPU_SWEVT_Bits',0,21,212,4,16,4,10
	.byte	'EVTA',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	929
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	929
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	929
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_SWEVT_Bits',0,21,220,4,3
	.word	65057
	.byte	9
	.byte	'_Ifx_CPU_SYSCON_Bits',0,21,223,4,16,4,10
	.byte	'FCDSF',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'PROTEN',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'TPROTEN',0,4
	.word	929
	.byte	1,29,2,35,0,10
	.byte	'IS',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'IT',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	929
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_SYSCON_Bits',0,21,231,4,3
	.word	65211
	.byte	9
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,21,234,4,16,4,10
	.byte	'ASI',0,4
	.word	929
	.byte	5,27,2,35,0,10
	.byte	'reserved_5',0,4
	.word	929
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,21,238,4,3
	.word	65372
	.byte	9
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,21,241,4,16,4,10
	.byte	'TEXP0',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'TEXP1',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'TEXP2',0,4
	.word	929
	.byte	1,29,2,35,0,10
	.byte	'reserved_3',0,4
	.word	929
	.byte	13,16,2,35,0,10
	.byte	'TTRAP',0,4
	.word	929
	.byte	1,15,2,35,0,10
	.byte	'reserved_17',0,4
	.word	929
	.byte	15,0,2,35,0,0,25
	.byte	'Ifx_CPU_TPS_CON_Bits',0,21,249,4,3
	.word	65470
	.byte	9
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,21,252,4,16,4,10
	.byte	'Timer',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,21,255,4,3
	.word	65642
	.byte	9
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,21,130,5,16,4,10
	.byte	'ADDR',0,4
	.word	929
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_CPU_TR_ADR_Bits',0,21,133,5,3
	.word	65722
	.byte	9
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,21,136,5,16,4,10
	.byte	'EVTA',0,4
	.word	929
	.byte	3,29,2,35,0,10
	.byte	'BBM',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'BOD',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'SUSP',0,4
	.word	929
	.byte	1,26,2,35,0,10
	.byte	'CNT',0,4
	.word	929
	.byte	2,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	929
	.byte	4,20,2,35,0,10
	.byte	'TYP',0,4
	.word	929
	.byte	1,19,2,35,0,10
	.byte	'RNG',0,4
	.word	929
	.byte	1,18,2,35,0,10
	.byte	'reserved_14',0,4
	.word	929
	.byte	1,17,2,35,0,10
	.byte	'ASI_EN',0,4
	.word	929
	.byte	1,16,2,35,0,10
	.byte	'ASI',0,4
	.word	929
	.byte	5,11,2,35,0,10
	.byte	'reserved_21',0,4
	.word	929
	.byte	6,5,2,35,0,10
	.byte	'AST',0,4
	.word	929
	.byte	1,4,2,35,0,10
	.byte	'ALD',0,4
	.word	929
	.byte	1,3,2,35,0,10
	.byte	'reserved_29',0,4
	.word	929
	.byte	3,0,2,35,0,0,25
	.byte	'Ifx_CPU_TR_EVT_Bits',0,21,153,5,3
	.word	65795
	.byte	9
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,21,156,5,16,4,10
	.byte	'T0',0,4
	.word	929
	.byte	1,31,2,35,0,10
	.byte	'T1',0,4
	.word	929
	.byte	1,30,2,35,0,10
	.byte	'T2',0,4
	.word	929
	.byte	1,29,2,35,0,10
	.byte	'T3',0,4
	.word	929
	.byte	1,28,2,35,0,10
	.byte	'T4',0,4
	.word	929
	.byte	1,27,2,35,0,10
	.byte	'T5',0,4
	.word	929
	.byte	1,26,2,35,0,10
	.byte	'T6',0,4
	.word	929
	.byte	1,25,2,35,0,10
	.byte	'T7',0,4
	.word	929
	.byte	1,24,2,35,0,10
	.byte	'reserved_8',0,4
	.word	929
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,21,167,5,3
	.word	66113
	.byte	11,21,175,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57331
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_A',0,21,180,5,3
	.word	66308
	.byte	11,21,183,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57392
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_BIV',0,21,188,5,3
	.word	66367
	.byte	11,21,191,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57471
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_BTV',0,21,196,5,3
	.word	66428
	.byte	11,21,199,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57557
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CCNT',0,21,204,5,3
	.word	66489
	.byte	11,21,207,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57646
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CCTRL',0,21,212,5,3
	.word	66551
	.byte	11,21,215,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57792
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_COMPAT',0,21,220,5,3
	.word	66614
	.byte	11,21,223,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	57919
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CORE_ID',0,21,228,5,3
	.word	66678
	.byte	11,21,231,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58017
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CPR_L',0,21,236,5,3
	.word	66743
	.byte	11,21,239,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58110
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CPR_U',0,21,244,5,3
	.word	66806
	.byte	11,21,247,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58203
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CPU_ID',0,21,252,5,3
	.word	66869
	.byte	11,21,255,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58310
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CPXE',0,21,132,6,3
	.word	66933
	.byte	11,21,135,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58397
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CREVT',0,21,140,6,3
	.word	66995
	.byte	11,21,143,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58551
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_CUS_ID',0,21,148,6,3
	.word	67058
	.byte	11,21,151,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58645
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_D',0,21,156,6,3
	.word	67122
	.byte	11,21,159,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58708
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DATR',0,21,164,6,3
	.word	67181
	.byte	11,21,167,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	58926
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DBGSR',0,21,172,6,3
	.word	67243
	.byte	11,21,175,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59141
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DBGTCR',0,21,180,6,3
	.word	67306
	.byte	11,21,183,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59235
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DCON0',0,21,188,6,3
	.word	67370
	.byte	11,21,191,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59351
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DCON2',0,21,196,6,3
	.word	67433
	.byte	11,21,199,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59452
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DCX',0,21,204,6,3
	.word	67496
	.byte	11,21,207,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59545
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DEADD',0,21,212,6,3
	.word	67557
	.byte	11,21,215,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59625
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DIEAR',0,21,220,6,3
	.word	67620
	.byte	11,21,223,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59694
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DIETR',0,21,228,6,3
	.word	67683
	.byte	11,21,231,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	59923
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DMS',0,21,236,6,3
	.word	67746
	.byte	11,21,239,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60016
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DPR_L',0,21,244,6,3
	.word	67807
	.byte	11,21,247,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60111
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DPR_U',0,21,252,6,3
	.word	67870
	.byte	11,21,255,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60206
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DPRE',0,21,132,7,3
	.word	67933
	.byte	11,21,135,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60296
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DPWE',0,21,140,7,3
	.word	67995
	.byte	11,21,143,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60386
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_DSTR',0,21,148,7,3
	.word	68057
	.byte	11,21,151,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60710
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_EXEVT',0,21,156,7,3
	.word	68119
	.byte	11,21,159,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60864
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FCX',0,21,164,7,3
	.word	68182
	.byte	11,21,167,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	60970
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,21,172,7,3
	.word	68243
	.byte	11,21,175,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61319
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,21,180,7,3
	.word	68313
	.byte	11,21,183,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61479
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,21,188,7,3
	.word	68383
	.byte	11,21,191,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61560
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,21,196,7,3
	.word	68452
	.byte	11,21,199,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61647
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,21,204,7,3
	.word	68523
	.byte	11,21,207,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61734
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,21,212,7,3
	.word	68594
	.byte	11,21,215,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61821
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_ICNT',0,21,220,7,3
	.word	68665
	.byte	11,21,223,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	61912
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_ICR',0,21,228,7,3
	.word	68727
	.byte	11,21,231,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62055
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_ISP',0,21,236,7,3
	.word	68788
	.byte	11,21,239,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62121
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_LCX',0,21,244,7,3
	.word	68849
	.byte	11,21,247,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62227
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_M1CNT',0,21,252,7,3
	.word	68910
	.byte	11,21,255,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62320
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_M2CNT',0,21,132,8,3
	.word	68973
	.byte	11,21,135,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62413
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_M3CNT',0,21,140,8,3
	.word	69036
	.byte	11,21,143,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62506
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PC',0,21,148,8,3
	.word	69099
	.byte	11,21,151,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62591
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PCON0',0,21,156,8,3
	.word	69159
	.byte	11,21,159,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62707
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PCON1',0,21,164,8,3
	.word	69222
	.byte	11,21,167,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62818
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PCON2',0,21,172,8,3
	.word	69285
	.byte	11,21,175,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	62919
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PCXI',0,21,180,8,3
	.word	69348
	.byte	11,21,183,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63049
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PIEAR',0,21,188,8,3
	.word	69410
	.byte	11,21,191,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63118
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PIETR',0,21,196,8,3
	.word	69473
	.byte	11,21,199,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63347
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PMA0',0,21,204,8,3
	.word	69536
	.byte	11,21,207,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63460
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PMA1',0,21,212,8,3
	.word	69598
	.byte	11,21,215,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63573
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PMA2',0,21,220,8,3
	.word	69660
	.byte	11,21,223,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63664
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PSTR',0,21,228,8,3
	.word	69722
	.byte	11,21,231,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	63867
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_PSW',0,21,236,8,3
	.word	69784
	.byte	11,21,239,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64110
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SEGEN',0,21,244,8,3
	.word	69845
	.byte	11,21,247,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64238
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SMACON',0,21,252,8,3
	.word	69908
	.byte	11,21,255,8,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64479
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENA',0,21,132,9,3
	.word	69972
	.byte	11,21,135,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64562
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_ACCENB',0,21,140,9,3
	.word	70042
	.byte	11,21,143,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64653
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,21,148,9,3
	.word	70112
	.byte	11,21,151,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64744
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,21,156,9,3
	.word	70186
	.byte	11,21,159,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64843
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,21,164,9,3
	.word	70260
	.byte	11,21,167,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	64950
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,21,172,9,3
	.word	70330
	.byte	11,21,175,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65057
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SWEVT',0,21,180,9,3
	.word	70400
	.byte	11,21,183,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65211
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_SYSCON',0,21,188,9,3
	.word	70463
	.byte	11,21,191,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65372
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TASK_ASI',0,21,196,9,3
	.word	70527
	.byte	11,21,199,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65470
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TPS_CON',0,21,204,9,3
	.word	70593
	.byte	11,21,207,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65642
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TPS_TIMER',0,21,212,9,3
	.word	70658
	.byte	11,21,215,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65722
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TR_ADR',0,21,220,9,3
	.word	70725
	.byte	11,21,223,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	65795
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TR_EVT',0,21,228,9,3
	.word	70789
	.byte	11,21,231,9,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	66113
	.byte	4,2,35,0,0,25
	.byte	'Ifx_CPU_TRIG_ACC',0,21,236,9,3
	.word	70853
	.byte	9
	.byte	'_Ifx_CPU_CPR',0,21,247,9,25,8,12
	.byte	'L',0
	.word	66743
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	66806
	.byte	4,2,35,4,0,13
	.word	70919
	.byte	25
	.byte	'Ifx_CPU_CPR',0,21,251,9,3
	.word	70961
	.byte	9
	.byte	'_Ifx_CPU_DPR',0,21,254,9,25,8,12
	.byte	'L',0
	.word	67807
	.byte	4,2,35,0,12
	.byte	'U',0
	.word	67870
	.byte	4,2,35,4,0,13
	.word	70987
	.byte	25
	.byte	'Ifx_CPU_DPR',0,21,130,10,3
	.word	71029
	.byte	9
	.byte	'_Ifx_CPU_SPROT_RGN',0,21,133,10,25,16,12
	.byte	'LA',0
	.word	70260
	.byte	4,2,35,0,12
	.byte	'UA',0
	.word	70330
	.byte	4,2,35,4,12
	.byte	'ACCENA',0
	.word	70112
	.byte	4,2,35,8,12
	.byte	'ACCENB',0
	.word	70186
	.byte	4,2,35,12,0,13
	.word	71055
	.byte	25
	.byte	'Ifx_CPU_SPROT_RGN',0,21,139,10,3
	.word	71137
	.byte	17,12
	.word	70658
	.byte	18,2,0,9
	.byte	'_Ifx_CPU_TPS',0,21,142,10,25,16,12
	.byte	'CON',0
	.word	70593
	.byte	4,2,35,0,12
	.byte	'TIMER',0
	.word	71169
	.byte	12,2,35,4,0,13
	.word	71178
	.byte	25
	.byte	'Ifx_CPU_TPS',0,21,146,10,3
	.word	71226
	.byte	9
	.byte	'_Ifx_CPU_TR',0,21,149,10,25,8,12
	.byte	'EVT',0
	.word	70789
	.byte	4,2,35,0,12
	.byte	'ADR',0
	.word	70725
	.byte	4,2,35,4,0,13
	.word	71252
	.byte	25
	.byte	'Ifx_CPU_TR',0,21,153,10,3
	.word	71297
	.byte	25
	.byte	'IfxCpu_ResourceCpu',0,9,87,3
	.word	1854
	.byte	14,8,118,9,1,15
	.byte	'IfxCpu_CounterMode_normal',0,0,15
	.byte	'IfxCpu_CounterMode_task',0,1,0,25
	.byte	'IfxCpu_CounterMode',0,8,122,3
	.word	71349
	.byte	24,8,132,1,9,6,12
	.byte	'counter',0
	.word	1985
	.byte	4,2,35,0,12
	.byte	'overlfow',0
	.word	353
	.byte	1,2,35,4,0,25
	.byte	'IfxCpu_Counter',0,8,136,1,3
	.word	71436
	.byte	24,8,144,1,9,32,12
	.byte	'instruction',0
	.word	71436
	.byte	6,2,35,0,12
	.byte	'clock',0
	.word	71436
	.byte	6,2,35,6,12
	.byte	'counter1',0
	.word	71436
	.byte	6,2,35,12,12
	.byte	'counter2',0
	.word	71436
	.byte	6,2,35,18,12
	.byte	'counter3',0
	.word	71436
	.byte	6,2,35,24,0,25
	.byte	'IfxCpu_Perf',0,8,151,1,3
	.word	71502
	.byte	9
	.byte	'_Ifx_STM_ACCEN0_Bits',0,22,45,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_STM_ACCEN0_Bits',0,22,79,3
	.word	71620
	.byte	9
	.byte	'_Ifx_STM_ACCEN1_Bits',0,22,82,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_ACCEN1_Bits',0,22,85,3
	.word	72177
	.byte	9
	.byte	'_Ifx_STM_CAP_Bits',0,22,88,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_CAP_Bits',0,22,91,3
	.word	72254
	.byte	9
	.byte	'_Ifx_STM_CAPSV_Bits',0,22,94,16,4,10
	.byte	'STMCAP63_32',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_CAPSV_Bits',0,22,97,3
	.word	72326
	.byte	9
	.byte	'_Ifx_STM_CLC_Bits',0,22,100,16,4,10
	.byte	'DISR',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'DISS',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EDIS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_STM_CLC_Bits',0,22,107,3
	.word	72402
	.byte	9
	.byte	'_Ifx_STM_CMCON_Bits',0,22,110,16,4,10
	.byte	'MSIZE0',0,1
	.word	353
	.byte	5,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	353
	.byte	3,0,2,35,0,10
	.byte	'MSTART0',0,1
	.word	353
	.byte	5,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	353
	.byte	3,0,2,35,1,10
	.byte	'MSIZE1',0,1
	.word	353
	.byte	5,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	353
	.byte	3,0,2,35,2,10
	.byte	'MSTART1',0,1
	.word	353
	.byte	5,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	353
	.byte	3,0,2,35,3,0,25
	.byte	'Ifx_STM_CMCON_Bits',0,22,120,3
	.word	72543
	.byte	9
	.byte	'_Ifx_STM_CMP_Bits',0,22,123,16,4,10
	.byte	'CMPVAL',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_CMP_Bits',0,22,126,3
	.word	72761
	.byte	9
	.byte	'_Ifx_STM_ICR_Bits',0,22,129,1,16,4,10
	.byte	'CMP0EN',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'CMP0IR',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'CMP0OS',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'CMP1EN',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'CMP1IR',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'CMP1OS',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'reserved_7',0,4
	.word	330
	.byte	25,0,2,35,0,0,25
	.byte	'Ifx_STM_ICR_Bits',0,22,139,1,3
	.word	72828
	.byte	9
	.byte	'_Ifx_STM_ID_Bits',0,22,142,1,16,4,10
	.byte	'MODREV',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_STM_ID_Bits',0,22,147,1,3
	.word	73031
	.byte	9
	.byte	'_Ifx_STM_ISCR_Bits',0,22,150,1,16,4,10
	.byte	'CMP0IRR',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'CMP0IRS',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'CMP1IRR',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'CMP1IRS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_STM_ISCR_Bits',0,22,157,1,3
	.word	73138
	.byte	9
	.byte	'_Ifx_STM_KRST0_Bits',0,22,160,1,16,4,10
	.byte	'RST',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'RSTSTAT',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	330
	.byte	30,0,2,35,0,0,25
	.byte	'Ifx_STM_KRST0_Bits',0,22,165,1,3
	.word	73289
	.byte	9
	.byte	'_Ifx_STM_KRST1_Bits',0,22,168,1,16,4,10
	.byte	'RST',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	330
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_STM_KRST1_Bits',0,22,172,1,3
	.word	73400
	.byte	9
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,22,175,1,16,4,10
	.byte	'CLR',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	330
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_STM_KRSTCLR_Bits',0,22,179,1,3
	.word	73492
	.byte	9
	.byte	'_Ifx_STM_OCS_Bits',0,22,182,1,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	24,8,2,35,0,10
	.byte	'SUS',0,1
	.word	353
	.byte	4,4,2,35,3,10
	.byte	'SUS_P',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'SUSSTA',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'reserved_30',0,1
	.word	353
	.byte	2,0,2,35,3,0,25
	.byte	'Ifx_STM_OCS_Bits',0,22,189,1,3
	.word	73588
	.byte	9
	.byte	'_Ifx_STM_TIM0_Bits',0,22,192,1,16,4,10
	.byte	'STM31_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM0_Bits',0,22,195,1,3
	.word	73734
	.byte	9
	.byte	'_Ifx_STM_TIM0SV_Bits',0,22,198,1,16,4,10
	.byte	'STM31_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM0SV_Bits',0,22,201,1,3
	.word	73806
	.byte	9
	.byte	'_Ifx_STM_TIM1_Bits',0,22,204,1,16,4,10
	.byte	'STM35_4',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM1_Bits',0,22,207,1,3
	.word	73882
	.byte	9
	.byte	'_Ifx_STM_TIM2_Bits',0,22,210,1,16,4,10
	.byte	'STM39_8',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM2_Bits',0,22,213,1,3
	.word	73954
	.byte	9
	.byte	'_Ifx_STM_TIM3_Bits',0,22,216,1,16,4,10
	.byte	'STM43_12',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM3_Bits',0,22,219,1,3
	.word	74026
	.byte	9
	.byte	'_Ifx_STM_TIM4_Bits',0,22,222,1,16,4,10
	.byte	'STM47_16',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM4_Bits',0,22,225,1,3
	.word	74099
	.byte	9
	.byte	'_Ifx_STM_TIM5_Bits',0,22,228,1,16,4,10
	.byte	'STM51_20',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM5_Bits',0,22,231,1,3
	.word	74172
	.byte	9
	.byte	'_Ifx_STM_TIM6_Bits',0,22,234,1,16,4,10
	.byte	'STM63_32',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_STM_TIM6_Bits',0,22,237,1,3
	.word	74245
	.byte	11,22,245,1,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	71620
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ACCEN0',0,22,250,1,3
	.word	74318
	.byte	11,22,253,1,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72177
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ACCEN1',0,22,130,2,3
	.word	74382
	.byte	11,22,133,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72254
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CAP',0,22,138,2,3
	.word	74446
	.byte	11,22,141,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72326
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CAPSV',0,22,146,2,3
	.word	74507
	.byte	11,22,149,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72402
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CLC',0,22,154,2,3
	.word	74570
	.byte	11,22,157,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72543
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CMCON',0,22,162,2,3
	.word	74631
	.byte	11,22,165,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72761
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_CMP',0,22,170,2,3
	.word	74694
	.byte	11,22,173,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	72828
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ICR',0,22,178,2,3
	.word	74755
	.byte	11,22,181,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73031
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ID',0,22,186,2,3
	.word	74816
	.byte	11,22,189,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73138
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_ISCR',0,22,194,2,3
	.word	74876
	.byte	11,22,197,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73289
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_KRST0',0,22,202,2,3
	.word	74938
	.byte	11,22,205,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73400
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_KRST1',0,22,210,2,3
	.word	75001
	.byte	11,22,213,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73492
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_KRSTCLR',0,22,218,2,3
	.word	75064
	.byte	11,22,221,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73588
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_OCS',0,22,226,2,3
	.word	75129
	.byte	11,22,229,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73734
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM0',0,22,234,2,3
	.word	75190
	.byte	11,22,237,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73806
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM0SV',0,22,242,2,3
	.word	75252
	.byte	11,22,245,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73882
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM1',0,22,250,2,3
	.word	75316
	.byte	11,22,253,2,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	73954
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM2',0,22,130,3,3
	.word	75378
	.byte	11,22,133,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74026
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM3',0,22,138,3,3
	.word	75440
	.byte	11,22,141,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74099
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM4',0,22,146,3,3
	.word	75502
	.byte	11,22,149,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74172
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM5',0,22,154,3,3
	.word	75564
	.byte	11,22,157,3,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	74245
	.byte	4,2,35,0,0,25
	.byte	'Ifx_STM_TIM6',0,22,162,3,3
	.word	75626
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,23,45,16,4,10
	.byte	'EN0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,23,79,3
	.word	75688
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,23,82,16,4,10
	.byte	'reserved_0',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,23,85,3
	.word	76249
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,23,88,16,4,10
	.byte	'SEL',0,1
	.word	353
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	353
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	330
	.byte	22,0,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,23,95,3
	.word	76330
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,23,98,16,4,10
	.byte	'VLD0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'VLD1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'VLD2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'VLD3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'VLD4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'VLD5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'VLD6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'VLD7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'VLD8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'VLD9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	330
	.byte	22,0,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,23,111,3
	.word	76483
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,23,114,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	330
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	353
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,23,121,3
	.word	76731
	.byte	9
	.byte	'_Ifx_FLASH_COMM0_Bits',0,23,124,16,4,10
	.byte	'STATUS',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	330
	.byte	24,0,2,35,0,0,25
	.byte	'Ifx_FLASH_COMM0_Bits',0,23,128,1,3
	.word	76877
	.byte	9
	.byte	'_Ifx_FLASH_COMM1_Bits',0,23,131,1,16,4,10
	.byte	'STATUS',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_COMM1_Bits',0,23,136,1,3
	.word	76975
	.byte	9
	.byte	'_Ifx_FLASH_COMM2_Bits',0,23,139,1,16,4,10
	.byte	'STATUS',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_COMM2_Bits',0,23,144,1,3
	.word	77091
	.byte	9
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,23,147,1,16,4,10
	.byte	'RCODE',0,4
	.word	330
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	830
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_ECCRD_Bits',0,23,153,1,3
	.word	77207
	.byte	9
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,23,156,1,16,4,10
	.byte	'RCODE',0,4
	.word	330
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	830
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_ECCRP_Bits',0,23,162,1,3
	.word	77347
	.byte	9
	.byte	'_Ifx_FLASH_ECCW_Bits',0,23,165,1,16,4,10
	.byte	'WCODE',0,4
	.word	330
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	830
	.byte	8,2,2,35,2,10
	.byte	'DECENCDIS',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'PECENCDIS',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_ECCW_Bits',0,23,171,1,3
	.word	77487
	.byte	9
	.byte	'_Ifx_FLASH_FCON_Bits',0,23,174,1,16,4,10
	.byte	'WSPFLASH',0,1
	.word	353
	.byte	4,4,2,35,0,10
	.byte	'WSECPF',0,1
	.word	353
	.byte	2,2,2,35,0,10
	.byte	'WSDFLASH',0,2
	.word	830
	.byte	6,4,2,35,0,10
	.byte	'WSECDF',0,1
	.word	353
	.byte	3,1,2,35,1,10
	.byte	'IDLE',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'ESLDIS',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'SLEEP',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'NSAFECC',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'STALL',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'RES21',0,1
	.word	353
	.byte	2,2,2,35,2,10
	.byte	'RES23',0,1
	.word	353
	.byte	2,0,2,35,2,10
	.byte	'VOPERM',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'PROERM',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	353
	.byte	3,2,2,35,3,10
	.byte	'PR5V',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_FCON_Bits',0,23,193,1,3
	.word	77626
	.byte	9
	.byte	'_Ifx_FLASH_FPRO_Bits',0,23,196,1,16,4,10
	.byte	'PROINP',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'PRODISP',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'PROIND',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'PRODISD',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'PROINHSMCOTP',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'PROINOTP',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'RES7',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'PROINDBG',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'PRODISDBG',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'PROINHSM',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	353
	.byte	5,0,2,35,1,10
	.byte	'DCFP',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'DDFP',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'DDFPX',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'DDFD',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'ENPE',0,1
	.word	353
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	353
	.byte	8,0,2,35,3,0,25
	.byte	'Ifx_FLASH_FPRO_Bits',0,23,218,1,3
	.word	77988
	.byte	9
	.byte	'_Ifx_FLASH_FSR_Bits',0,23,221,1,16,4,10
	.byte	'FABUSY',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'D0BUSY',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'RES1',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'P0BUSY',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'RES4',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'RES6',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'PROG',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'PFPAGE',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'PROER',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'PFSBER',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'PFDBER',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'PFMBER',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'RES17',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'DFSBER',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'DFDBER',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'DFTBER',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'DFMBER',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'SRIADDERR',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	830
	.byte	2,7,2,35,2,10
	.byte	'PVER',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'SLM',0,1
	.word	353
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	353
	.byte	1,2,2,35,3,10
	.byte	'ORIER',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_FSR_Bits',0,23,254,1,3
	.word	78429
	.byte	9
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,23,129,2,16,4,10
	.byte	'LCKHSMUCB',0,1
	.word	353
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	330
	.byte	22,8,2,35,0,10
	.byte	'VOPERM',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	353
	.byte	5,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,23,137,2,3
	.word	79033
	.byte	9
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,23,140,2,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	2,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	353
	.byte	4,1,2,35,0,10
	.byte	'PROG',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	330
	.byte	12,7,2,35,0,10
	.byte	'PVER',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	353
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	353
	.byte	4,0,2,35,3,0,25
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,23,156,2,3
	.word	79213
	.byte	9
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,23,159,2,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'SELD1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,4
	.word	330
	.byte	27,0,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,23,167,2,3
	.word	79535
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,23,170,2,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	330
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,23,174,2,3
	.word	79716
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,23,177,2,16,4,10
	.byte	'STRT',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	353
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	353
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,23,188,2,3
	.word	79816
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,23,191,2,16,4,10
	.byte	'DATA',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,23,194,2,3
	.word	80032
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,23,197,2,16,4,10
	.byte	'DATA',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,23,200,2,3
	.word	80111
	.byte	9
	.byte	'_Ifx_FLASH_ID_Bits',0,23,203,2,16,4,10
	.byte	'MODREV',0,1
	.word	353
	.byte	8,0,2,35,0,10
	.byte	'MODTYPE',0,1
	.word	353
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_ID_Bits',0,23,208,2,3
	.word	80190
	.byte	9
	.byte	'_Ifx_FLASH_MARD_Bits',0,23,211,2,16,4,10
	.byte	'HMARGIN',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'SELD0',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	830
	.byte	10,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_MARD_Bits',0,23,221,2,3
	.word	80301
	.byte	9
	.byte	'_Ifx_FLASH_MARP_Bits',0,23,224,2,16,4,10
	.byte	'SELP0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'RES1',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'RES2',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'RES3',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	830
	.byte	11,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_MARP_Bits',0,23,233,2,3
	.word	80515
	.byte	9
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,23,236,2,16,4,10
	.byte	'L',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'NSAFECC',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'RAMIN',0,1
	.word	353
	.byte	2,4,2,35,0,10
	.byte	'RAMINSEL',0,1
	.word	353
	.byte	4,0,2,35,0,10
	.byte	'RES8',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'RES9',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'RES10',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'RES11',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'RES12',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'RES13',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'RES14',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'RES15',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'ESR0CNT',0,2
	.word	830
	.byte	12,4,2,35,2,10
	.byte	'RES29',0,1
	.word	353
	.byte	2,2,2,35,3,10
	.byte	'RES30',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_PROCOND_Bits',0,23,254,2,3
	.word	80701
	.byte	9
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,23,129,3,16,4,10
	.byte	'OCDSDIS',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'EDM',0,1
	.word	353
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	330
	.byte	28,0,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,23,135,3,3
	.word	81036
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,23,138,3,16,4,10
	.byte	'HSMDBGDIS',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'TSTIFLCK',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'HSMTSTDIS',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'RES15',0,2
	.word	830
	.byte	12,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,23,146,3,3
	.word	81179
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,23,149,3,16,4,10
	.byte	'HSMBOOTEN',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'SSWWAIT',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'HSMDX',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'HSM6X',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'HSM16X',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'HSM17X',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'HSMENPINS',0,2
	.word	830
	.byte	2,7,2,35,0,10
	.byte	'HSMENRES',0,1
	.word	353
	.byte	2,5,2,35,1,10
	.byte	'DESTDBG',0,1
	.word	353
	.byte	2,3,2,35,1,10
	.byte	'BLKFLAN',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'BOOTSEL',0,1
	.word	353
	.byte	2,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	830
	.byte	14,0,2,35,2,0,25
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,23,166,3,3
	.word	81368
	.byte	9
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,23,169,3,16,4,10
	.byte	'S0ROM',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'S1ROM',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'S2ROM',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'S3ROM',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'S4ROM',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'S5ROM',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'S7ROM',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'S8ROM',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'S9ROM',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'S10ROM',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'S11ROM',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'S12ROM',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'S13ROM',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'S14ROM',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'S15ROM',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'S18ROM',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'S19ROM',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'S20ROM',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'S21ROM',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'S22ROM',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'S23ROM',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'S24ROM',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'S25ROM',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'S26ROM',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	353
	.byte	2,3,2,35,3,10
	.byte	'BML',0,1
	.word	353
	.byte	2,1,2,35,3,10
	.byte	'TP',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,23,201,3,3
	.word	81727
	.byte	9
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,23,204,3,16,4,10
	.byte	'S0L',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'S1L',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'S2L',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'S3L',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'S4L',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'S5L',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'S6L',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'S7L',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'S8L',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'S9L',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'S10L',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'S11L',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'S12L',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'S13L',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'S14L',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'S15L',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'S16L',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'S17L',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'S18L',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'S19L',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'S20L',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'S21L',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'S22L',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'S23L',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'S24L',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'S25L',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'S26L',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	353
	.byte	4,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_PROCONP_Bits',0,23,235,3,3
	.word	82322
	.byte	9
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,23,238,3,16,4,10
	.byte	'S0WOP',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'S1WOP',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'S2WOP',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'S3WOP',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'S4WOP',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'S5WOP',0,1
	.word	353
	.byte	1,2,2,35,0,10
	.byte	'S6WOP',0,1
	.word	353
	.byte	1,1,2,35,0,10
	.byte	'S7WOP',0,1
	.word	353
	.byte	1,0,2,35,0,10
	.byte	'S8WOP',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'S9WOP',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'S10WOP',0,1
	.word	353
	.byte	1,5,2,35,1,10
	.byte	'S11WOP',0,1
	.word	353
	.byte	1,4,2,35,1,10
	.byte	'S12WOP',0,1
	.word	353
	.byte	1,3,2,35,1,10
	.byte	'S13WOP',0,1
	.word	353
	.byte	1,2,2,35,1,10
	.byte	'S14WOP',0,1
	.word	353
	.byte	1,1,2,35,1,10
	.byte	'S15WOP',0,1
	.word	353
	.byte	1,0,2,35,1,10
	.byte	'S16WOP',0,1
	.word	353
	.byte	1,7,2,35,2,10
	.byte	'S17WOP',0,1
	.word	353
	.byte	1,6,2,35,2,10
	.byte	'S18WOP',0,1
	.word	353
	.byte	1,5,2,35,2,10
	.byte	'S19WOP',0,1
	.word	353
	.byte	1,4,2,35,2,10
	.byte	'S20WOP',0,1
	.word	353
	.byte	1,3,2,35,2,10
	.byte	'S21WOP',0,1
	.word	353
	.byte	1,2,2,35,2,10
	.byte	'S22WOP',0,1
	.word	353
	.byte	1,1,2,35,2,10
	.byte	'S23WOP',0,1
	.word	353
	.byte	1,0,2,35,2,10
	.byte	'S24WOP',0,1
	.word	353
	.byte	1,7,2,35,3,10
	.byte	'S25WOP',0,1
	.word	353
	.byte	1,6,2,35,3,10
	.byte	'S26WOP',0,1
	.word	353
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	353
	.byte	4,1,2,35,3,10
	.byte	'DATM',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,23,141,4,3
	.word	82846
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,23,144,4,16,4,10
	.byte	'TAG',0,1
	.word	353
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	330
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,23,148,4,3
	.word	83428
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,23,151,4,16,4,10
	.byte	'TAG',0,1
	.word	353
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	330
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,23,155,4,3
	.word	83530
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,23,158,4,16,4,10
	.byte	'TAG',0,1
	.word	353
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	330
	.byte	26,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,23,162,4,3
	.word	83632
	.byte	9
	.byte	'_Ifx_FLASH_RRAD_Bits',0,23,165,4,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	330
	.byte	29,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RRAD_Bits',0,23,169,4,3
	.word	83734
	.byte	9
	.byte	'_Ifx_FLASH_RRCT_Bits',0,23,172,4,16,4,10
	.byte	'STRT',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	353
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	353
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	353
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	353
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	353
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	353
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	830
	.byte	16,0,2,35,2,0,25
	.byte	'Ifx_FLASH_RRCT_Bits',0,23,183,4,3
	.word	83828
	.byte	9
	.byte	'_Ifx_FLASH_RRD0_Bits',0,23,186,4,16,4,10
	.byte	'DATA',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RRD0_Bits',0,23,189,4,3
	.word	84038
	.byte	9
	.byte	'_Ifx_FLASH_RRD1_Bits',0,23,192,4,16,4,10
	.byte	'DATA',0,4
	.word	330
	.byte	32,0,2,35,0,0,25
	.byte	'Ifx_FLASH_RRD1_Bits',0,23,195,4,3
	.word	84111
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,23,198,4,16,4,10
	.byte	'SEL',0,1
	.word	353
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	353
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	353
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	353
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	330
	.byte	22,0,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,23,205,4,3
	.word	84184
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,23,208,4,16,4,10
	.byte	'VLD0',0,1
	.word	353
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	330
	.byte	31,0,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,23,212,4,3
	.word	84339
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,23,215,4,16,4,10
	.byte	'reserved_0',0,1
	.word	353
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	330
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	353
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	353
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	353
	.byte	1,0,2,35,3,0,25
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,23,222,4,3
	.word	84444
	.byte	11,23,230,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	75688
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ACCEN0',0,23,235,4,3
	.word	84592
	.byte	11,23,238,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76249
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ACCEN1',0,23,243,4,3
	.word	84658
	.byte	11,23,246,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76330
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_CFG',0,23,251,4,3
	.word	84724
	.byte	11,23,254,4,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76483
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_STAT',0,23,131,5,3
	.word	84792
	.byte	11,23,134,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76731
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_CBAB_TOP',0,23,139,5,3
	.word	84861
	.byte	11,23,142,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76877
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_COMM0',0,23,147,5,3
	.word	84929
	.byte	11,23,150,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	76975
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_COMM1',0,23,155,5,3
	.word	84994
	.byte	11,23,158,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77091
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_COMM2',0,23,163,5,3
	.word	85059
	.byte	11,23,166,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77207
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ECCRD',0,23,171,5,3
	.word	85124
	.byte	11,23,174,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77347
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ECCRP',0,23,179,5,3
	.word	85189
	.byte	11,23,182,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77487
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ECCW',0,23,187,5,3
	.word	85254
	.byte	11,23,190,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77626
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_FCON',0,23,195,5,3
	.word	85318
	.byte	11,23,198,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	77988
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_FPRO',0,23,203,5,3
	.word	85382
	.byte	11,23,206,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	78429
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_FSR',0,23,211,5,3
	.word	85446
	.byte	11,23,214,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79033
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMFCON',0,23,219,5,3
	.word	85509
	.byte	11,23,222,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79213
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMFSR',0,23,227,5,3
	.word	85576
	.byte	11,23,230,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79535
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMMARD',0,23,235,5,3
	.word	85642
	.byte	11,23,238,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79716
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRAD',0,23,243,5,3
	.word	85709
	.byte	11,23,246,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	79816
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRCT',0,23,251,5,3
	.word	85776
	.byte	11,23,254,5,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80032
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRD0',0,23,131,6,3
	.word	85843
	.byte	11,23,134,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80111
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_HSMRRD1',0,23,139,6,3
	.word	85910
	.byte	11,23,142,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80190
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_ID',0,23,147,6,3
	.word	85977
	.byte	11,23,150,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80301
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_MARD',0,23,155,6,3
	.word	86039
	.byte	11,23,158,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80515
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_MARP',0,23,163,6,3
	.word	86103
	.byte	11,23,166,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	80701
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCOND',0,23,171,6,3
	.word	86167
	.byte	11,23,174,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81036
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONDBG',0,23,179,6,3
	.word	86234
	.byte	11,23,182,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81179
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONHSM',0,23,187,6,3
	.word	86303
	.byte	11,23,190,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81368
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,23,195,6,3
	.word	86372
	.byte	11,23,198,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	81727
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONOTP',0,23,203,6,3
	.word	86445
	.byte	11,23,206,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	82322
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONP',0,23,211,6,3
	.word	86514
	.byte	11,23,214,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	82846
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_PROCONWOP',0,23,219,6,3
	.word	86581
	.byte	11,23,222,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83428
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG0',0,23,227,6,3
	.word	86650
	.byte	11,23,230,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83530
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG1',0,23,235,6,3
	.word	86718
	.byte	11,23,238,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83632
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RDB_CFG2',0,23,243,6,3
	.word	86786
	.byte	11,23,246,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83734
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RRAD',0,23,251,6,3
	.word	86854
	.byte	11,23,254,6,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	83828
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RRCT',0,23,131,7,3
	.word	86918
	.byte	11,23,134,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84038
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RRD0',0,23,139,7,3
	.word	86982
	.byte	11,23,142,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84111
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_RRD1',0,23,147,7,3
	.word	87046
	.byte	11,23,150,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84184
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_CFG',0,23,155,7,3
	.word	87110
	.byte	11,23,158,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84339
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_STAT',0,23,163,7,3
	.word	87178
	.byte	11,23,166,7,9,4,12
	.byte	'U',0
	.word	330
	.byte	4,2,35,0,12
	.byte	'I',0
	.word	346
	.byte	4,2,35,0,12
	.byte	'B',0
	.word	84444
	.byte	4,2,35,0,0,25
	.byte	'Ifx_FLASH_UBAB_TOP',0,23,171,7,3
	.word	87247
	.byte	17,36
	.word	353
	.byte	18,35,0,9
	.byte	'_Ifx_FLASH_CBAB',0,23,182,7,25,48,12
	.byte	'CFG',0
	.word	84724
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	84792
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	84861
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	87315
	.byte	36,2,35,12,0,13
	.word	87324
	.byte	25
	.byte	'Ifx_FLASH_CBAB',0,23,188,7,3
	.word	87407
	.byte	9
	.byte	'_Ifx_FLASH_RDB',0,23,191,7,25,48,12
	.byte	'CFG0',0
	.word	86650
	.byte	4,2,35,0,12
	.byte	'CFG1',0
	.word	86718
	.byte	4,2,35,4,12
	.byte	'CFG2',0
	.word	86786
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	87315
	.byte	36,2,35,12,0,13
	.word	87436
	.byte	25
	.byte	'Ifx_FLASH_RDB',0,23,197,7,3
	.word	87520
	.byte	17,80
	.word	353
	.byte	18,79,0,9
	.byte	'_Ifx_FLASH_UBAB',0,23,200,7,25,92,12
	.byte	'CFG',0
	.word	87110
	.byte	4,2,35,0,12
	.byte	'STAT',0
	.word	87178
	.byte	4,2,35,4,12
	.byte	'TOP',0
	.word	87247
	.byte	4,2,35,8,12
	.byte	'reserved_C',0
	.word	87548
	.byte	80,2,35,12,0,13
	.word	87557
	.byte	25
	.byte	'Ifx_FLASH_UBAB',0,23,206,7,3
	.word	87640
	.byte	25
	.byte	'Ifx_P_ACCEN0_Bits',0,11,79,3
	.word	8085
	.byte	25
	.byte	'Ifx_P_ACCEN1_Bits',0,11,85,3
	.word	7998
	.byte	25
	.byte	'Ifx_P_ESR_Bits',0,11,107,3
	.word	5048
	.byte	25
	.byte	'Ifx_P_ID_Bits',0,11,115,3
	.word	3101
	.byte	25
	.byte	'Ifx_P_IN_Bits',0,11,137,1,3
	.word	4096
	.byte	25
	.byte	'Ifx_P_IOCR0_Bits',0,11,150,1,3
	.word	3229
	.byte	25
	.byte	'Ifx_P_IOCR12_Bits',0,11,163,1,3
	.word	3876
	.byte	25
	.byte	'Ifx_P_IOCR4_Bits',0,11,176,1,3
	.word	3444
	.byte	25
	.byte	'Ifx_P_IOCR8_Bits',0,11,189,1,3
	.word	3659
	.byte	25
	.byte	'Ifx_P_OMCR0_Bits',0,11,200,1,3
	.word	6628
	.byte	25
	.byte	'Ifx_P_OMCR12_Bits',0,11,210,1,3
	.word	7152
	.byte	25
	.byte	'Ifx_P_OMCR4_Bits',0,11,221,1,3
	.word	6802
	.byte	25
	.byte	'Ifx_P_OMCR8_Bits',0,11,232,1,3
	.word	6976
	.byte	25
	.byte	'Ifx_P_OMCR_Bits',0,11,254,1,3
	.word	7641
	.byte	25
	.byte	'Ifx_P_OMR_Bits',0,11,163,2,3
	.word	2530
	.byte	25
	.byte	'Ifx_P_OMSR0_Bits',0,11,173,2,3
	.word	5965
	.byte	25
	.byte	'Ifx_P_OMSR12_Bits',0,11,184,2,3
	.word	6453
	.byte	25
	.byte	'Ifx_P_OMSR4_Bits',0,11,195,2,3
	.word	6112
	.byte	25
	.byte	'Ifx_P_OMSR8_Bits',0,11,206,2,3
	.word	6281
	.byte	25
	.byte	'Ifx_P_OMSR_Bits',0,11,228,2,3
	.word	7308
	.byte	25
	.byte	'Ifx_P_OUT_Bits',0,11,250,2,3
	.word	2214
	.byte	25
	.byte	'Ifx_P_PCSR_Bits',0,11,135,3,3
	.word	5754
	.byte	25
	.byte	'Ifx_P_PDISC_Bits',0,11,157,3,3
	.word	5388
	.byte	25
	.byte	'Ifx_P_PDR0_Bits',0,11,178,3,3
	.word	4419
	.byte	25
	.byte	'Ifx_P_PDR1_Bits',0,11,199,3,3
	.word	4723
	.byte	25
	.byte	'Ifx_P_ACCEN0',0,11,212,3,3
	.word	8612
	.byte	25
	.byte	'Ifx_P_ACCEN1',0,11,220,3,3
	.word	8045
	.byte	25
	.byte	'Ifx_P_ESR',0,11,228,3,3
	.word	5339
	.byte	25
	.byte	'Ifx_P_ID',0,11,236,3,3
	.word	3180
	.byte	25
	.byte	'Ifx_P_IN',0,11,244,3,3
	.word	4370
	.byte	25
	.byte	'Ifx_P_IOCR0',0,11,252,3,3
	.word	3404
	.byte	25
	.byte	'Ifx_P_IOCR12',0,11,132,4,3
	.word	4056
	.byte	25
	.byte	'Ifx_P_IOCR4',0,11,140,4,3
	.word	3619
	.byte	25
	.byte	'Ifx_P_IOCR8',0,11,148,4,3
	.word	3836
	.byte	25
	.byte	'Ifx_P_OMCR',0,11,156,4,3
	.word	7949
	.byte	25
	.byte	'Ifx_P_OMCR0',0,11,164,4,3
	.word	6762
	.byte	25
	.byte	'Ifx_P_OMCR12',0,11,172,4,3
	.word	7268
	.byte	25
	.byte	'Ifx_P_OMCR4',0,11,180,4,3
	.word	6936
	.byte	25
	.byte	'Ifx_P_OMCR8',0,11,188,4,3
	.word	7112
	.byte	25
	.byte	'Ifx_P_OMR',0,11,196,4,3
	.word	3061
	.byte	25
	.byte	'Ifx_P_OMSR',0,11,204,4,3
	.word	7601
	.byte	25
	.byte	'Ifx_P_OMSR0',0,11,212,4,3
	.word	6072
	.byte	25
	.byte	'Ifx_P_OMSR12',0,11,220,4,3
	.word	6588
	.byte	25
	.byte	'Ifx_P_OMSR4',0,11,228,4,3
	.word	6241
	.byte	25
	.byte	'Ifx_P_OMSR8',0,11,236,4,3
	.word	6413
	.byte	25
	.byte	'Ifx_P_OUT',0,11,244,4,3
	.word	2490
	.byte	25
	.byte	'Ifx_P_PCSR',0,11,252,4,3
	.word	5925
	.byte	25
	.byte	'Ifx_P_PDISC',0,11,132,5,3
	.word	5714
	.byte	25
	.byte	'Ifx_P_PDR0',0,11,140,5,3
	.word	4683
	.byte	25
	.byte	'Ifx_P_PDR1',0,11,148,5,3
	.word	4999
	.byte	13
	.word	8652
	.byte	25
	.byte	'Ifx_P',0,11,193,5,3
	.word	88816
	.byte	14,10,54,9,1,15
	.byte	'IfxPort_InputMode_undefined',0,127,15
	.byte	'IfxPort_InputMode_noPullDevice',0,0,15
	.byte	'IfxPort_InputMode_pullDown',0,8,15
	.byte	'IfxPort_InputMode_pullUp',0,16,0,25
	.byte	'IfxPort_InputMode',0,10,60,3
	.word	88836
	.byte	14,10,91,9,1,15
	.byte	'IfxPort_OutputIdx_general',0,128,1,15
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,15
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,15
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,15
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,15
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,15
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,15
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,25
	.byte	'IfxPort_OutputIdx',0,10,101,3
	.word	88987
	.byte	14,10,105,9,1,15
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,15
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,25
	.byte	'IfxPort_OutputMode',0,10,109,3
	.word	89230
	.byte	14,10,115,9,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,15
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,15
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,15
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,15
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,15
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,25
	.byte	'IfxPort_PadDriver',0,10,125,3
	.word	89326
	.byte	25
	.byte	'IfxPort_State',0,10,137,1,3
	.word	9195
	.byte	24,10,149,1,9,8,12
	.byte	'port',0
	.word	9190
	.byte	4,2,35,0,12
	.byte	'pinIndex',0
	.word	353
	.byte	1,2,35,4,0,25
	.byte	'IfxPort_Pin',0,10,153,1,3
	.word	89665
	.byte	27,1,1,6
	.word	89725
	.byte	25
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,24,129,1,16
	.word	89728
	.byte	24,24,197,5,9,8,12
	.byte	'value',0
	.word	1985
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	1985
	.byte	4,2,35,4,0,25
	.byte	'IfxScuCcu_CcuconRegConfig',0,24,201,5,3
	.word	89773
	.byte	24,24,206,5,9,8,12
	.byte	'pDivider',0
	.word	353
	.byte	1,2,35,0,12
	.byte	'nDivider',0
	.word	353
	.byte	1,2,35,1,12
	.byte	'k2Initial',0
	.word	353
	.byte	1,2,35,2,12
	.byte	'waitTime',0
	.word	25663
	.byte	4,2,35,4,0,25
	.byte	'IfxScuCcu_InitialStepConfig',0,24,212,5,3
	.word	89844
	.byte	24,24,216,5,9,12,12
	.byte	'k2Step',0
	.word	353
	.byte	1,2,35,0,12
	.byte	'waitTime',0
	.word	25663
	.byte	4,2,35,2,12
	.byte	'hookFunction',0
	.word	89733
	.byte	4,2,35,8,0,25
	.byte	'IfxScuCcu_PllStepsConfig',0,24,221,5,3
	.word	89961
	.byte	6
	.word	89725
	.byte	24,24,229,5,9,40,12
	.byte	'ccucon0',0
	.word	89773
	.byte	8,2,35,0,12
	.byte	'ccucon1',0
	.word	89773
	.byte	8,2,35,8,12
	.byte	'ccucon2',0
	.word	89773
	.byte	8,2,35,16,12
	.byte	'ccucon5',0
	.word	89773
	.byte	8,2,35,24,12
	.byte	'ccucon6',0
	.word	89773
	.byte	8,2,35,32,0,25
	.byte	'IfxScuCcu_ClockDistributionConfig',0,24,236,5,3
	.word	90063
	.byte	24,24,240,5,9,8,12
	.byte	'value',0
	.word	1985
	.byte	4,2,35,0,12
	.byte	'mask',0
	.word	1985
	.byte	4,2,35,4,0,25
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,24,244,5,3
	.word	90198
	.byte	6
	.word	89961
	.byte	24,24,249,5,9,16,12
	.byte	'numOfPllDividerSteps',0
	.word	353
	.byte	1,2,35,0,12
	.byte	'pllDividerStep',0
	.word	90274
	.byte	4,2,35,4,12
	.byte	'pllInitialStep',0
	.word	89844
	.byte	8,2,35,8,0,25
	.byte	'IfxScuCcu_SysPllConfig',0,24,254,5,3
	.word	90279
	.byte	25
	.byte	'IfxDma_ChannelBusPriority',0,12,79,3
	.word	22621
	.byte	25
	.byte	'IfxDma_ChannelIncrementCircular',0,12,102,3
	.word	23088
	.byte	25
	.byte	'IfxDma_ChannelIncrementDirection',0,12,111,3
	.word	22994
	.byte	25
	.byte	'IfxDma_ChannelIncrementStep',0,12,126,3
	.word	22727
	.byte	25
	.byte	'IfxDma_ChannelInterruptControl',0,12,135,1,3
	.word	24255
	.byte	25
	.byte	'IfxDma_ChannelMove',0,12,150,1,3
	.word	21679
	.byte	25
	.byte	'IfxDma_ChannelMoveSize',0,12,163,1,3
	.word	22071
	.byte	25
	.byte	'IfxDma_ChannelOperationMode',0,12,172,1,3
	.word	21986
	.byte	25
	.byte	'IfxDma_ChannelPattern',0,12,187,1,3
	.word	22265
	.byte	25
	.byte	'IfxDma_ChannelRequestMode',0,12,205,1,3
	.word	21871
	.byte	25
	.byte	'IfxDma_ChannelRequestSource',0,12,214,1,3
	.word	22532
	.byte	25
	.byte	'IfxDma_ChannelShadow',0,12,234,1,3
	.word	23702
	.byte	14,12,246,1,9,1,15
	.byte	'IfxDma_MoveEngine_0',0,0,0,25
	.byte	'IfxDma_MoveEngine',0,12,249,1,3
	.word	90817
	.byte	14,12,254,1,9,1,15
	.byte	'IfxDma_SleepMode_enable',0,0,15
	.byte	'IfxDma_SleepMode_disable',0,1,0,25
	.byte	'IfxDma_SleepMode',0,12,130,2,3
	.word	90873
	.byte	25
	.byte	'IfxDma_Dma',0,15,190,3,3
	.word	21548
	.byte	25
	.byte	'IfxDma_Dma_Channel',0,15,203,3,3
	.word	21618
	.byte	25
	.byte	'IfxDma_Dma_ChannelConfig',0,15,243,3,3
	.word	24373
	.byte	25
	.byte	'IfxDma_Dma_Config',0,15,250,3,3
	.word	21573
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L27:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,36,0,3,8,11,15,62,15,0,0,5,59,0,3,8,0,0,6,15,0,73,19,0,0,7,46,1,3,8,32,13,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,0,0,8,5,0,3,8,58,15,59,15,57,15,73,19,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,11,23,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,13,53,0,73,19,0,0,14,4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,11,1,0,0,17,1,1,11
	.byte	15,73,19,0,0,18,33,0,47,15,0,0,19,38,0,73,19,0,0,20,46,1,49,19,0,0,21,5,0,49,19,0,0,22,29,1,49,19,0,0
	.byte	23,11,0,49,19,0,0,24,19,1,58,15,59,15,57,15,11,15,0,0,25,22,0,3,8,58,15,59,15,57,15,73,19,0,0,26,21,0
	.byte	54,15,0,0,27,21,0,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L28:
	.word	.L156-.L155
.L155:
	.half	3
	.word	.L158-.L157
.L157:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Reg',0
	.byte	'C:\\TASKING\\TriCore v6.2r2\\ctc\\include\\',0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu_Intrinsics.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Src\\Std\\IfxSrc.h',0
	.byte	0,0,0
	.byte	'IfxSrc_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxSrc_cfg.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuWdt.h',0
	.byte	0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\IfxCpu.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxCpu_cfg.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Port\\Std\\IfxPort.h',0
	.byte	0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Std\\IfxDma.h',0
	.byte	0,0,0
	.byte	'IfxDma_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxDma_cfg.h',0
	.byte	0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.h',0,0,0,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'stdio.h',0,2,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Platform_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Cpu\\Std\\Ifx_Types.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\_Impl\\IfxScu_cfg.h',0
	.byte	0,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'IfxStm_regdef.h',0,1,0,0
	.byte	'IfxFlash_regdef.h',0,1,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Scu\\Std\\IfxScuCcu.h',0
	.byte	0,0,0,0
.L158:
.L156:
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_info'
.L29:
	.word	291
	.half	3
	.word	.L30
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L32,.L31
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_createModuleHandle',0,1,100,6,1,1,1
	.word	.L12,.L69,.L11
	.byte	4
	.byte	'dmaHandle',0,1,100,48
	.word	.L70,.L71
	.byte	4
	.byte	'dma',0,1,100,68
	.word	.L72,.L73
	.byte	5
	.word	.L12,.L69
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_abbrev'
.L30:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_line'
.L31:
	.word	.L160-.L159
.L159:
	.half	3
	.word	.L162-.L161
.L161:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L162:
	.byte	5,20,7,0,5,2
	.word	.L12
	.byte	3,229,0,1,5,1,9
	.half	.L163-.L12
	.byte	3,1,1,7,9
	.half	.L33-.L163
	.byte	0,1,1
.L160:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_ranges'
.L32:
	.word	-1,.L12,0,.L33-.L12,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_info'
.L34:
	.word	263
	.half	3
	.word	.L35
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L37,.L36
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_deInitModule',0,1,106,6,1,1,1
	.word	.L14,.L74,.L13
	.byte	4
	.byte	'dma',0,1,106,42
	.word	.L70,.L75
	.byte	5
	.word	.L14,.L74
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_abbrev'
.L35:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_line'
.L36:
	.word	.L165-.L164
.L164:
	.half	3
	.word	.L167-.L166
.L166:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L167:
	.byte	5,1,7,0,5,2
	.word	.L14
	.byte	3,236,0,1,7,9
	.half	.L38-.L14
	.byte	0,1,1
.L165:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_ranges'
.L37:
	.word	-1,.L14,0,.L38-.L14,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_info'
.L39:
	.word	283
	.half	3
	.word	.L40
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L42,.L41
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initModule',0,1,200,1,6,1,1,1
	.word	.L22,.L76,.L21
	.byte	4
	.byte	'dma',0,1,200,1,40
	.word	.L70,.L77
	.byte	4
	.byte	'config',0,1,200,1,70
	.word	.L78,.L79
	.byte	5
	.word	.L22,.L76
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_abbrev'
.L40:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_line'
.L41:
	.word	.L169-.L168
.L168:
	.half	3
	.word	.L171-.L170
.L170:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L171:
	.byte	5,22,7,0,5,2
	.word	.L22
	.byte	3,201,1,1,5,14,9
	.half	.L172-.L22
	.byte	1,5,1,9
	.half	.L173-.L172
	.byte	3,1,1,7,9
	.half	.L43-.L173
	.byte	0,1,1
.L169:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_ranges'
.L42:
	.word	-1,.L22,0,.L43-.L22,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_info'
.L44:
	.word	289
	.half	3
	.word	.L45
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L47,.L46
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initModuleConfig',0,1,206,1,6,1,1,1
	.word	.L24,.L80,.L23
	.byte	4
	.byte	'config',0,1,206,1,53
	.word	.L81,.L82
	.byte	4
	.byte	'dma',0,1,206,1,70
	.word	.L72,.L83
	.byte	5
	.word	.L24,.L80
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_abbrev'
.L45:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_line'
.L46:
	.word	.L175-.L174
.L174:
	.half	3
	.word	.L177-.L176
.L176:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L177:
	.byte	5,17,7,0,5,2
	.word	.L24
	.byte	3,207,1,1,5,1,9
	.half	.L178-.L24
	.byte	3,1,1,7,9
	.half	.L48-.L178
	.byte	0,1,1
.L175:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_ranges'
.L47:
	.word	-1,.L24,0,.L48-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_info'
.L49:
	.word	570
	.half	3
	.word	.L50
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L52,.L51
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initChannel',0,1,112,6,1,1,1
	.word	.L16,.L84,.L15
	.byte	4
	.byte	'channel',0,1,112,49
	.word	.L85,.L86
	.byte	4
	.byte	'config',0,1,112,90
	.word	.L87,.L88
	.byte	5
	.word	.L16,.L84
	.byte	6
	.byte	'dma',0,1,114,14
	.word	.L72,.L89
	.byte	5
	.word	.L90,.L91
	.byte	6
	.byte	'tsr',0,1,123,21
	.word	.L92,.L93
	.byte	0,5
	.word	.L94,.L7
	.byte	7
	.word	.L95,.L94,.L96
	.byte	8
	.word	.L97,.L98
	.byte	8
	.word	.L99,.L100
	.byte	9
	.word	.L101,.L102
	.byte	0,7
	.word	.L95,.L103,.L104
	.byte	8
	.word	.L97,.L98
	.byte	8
	.word	.L99,.L100
	.byte	0,7
	.word	.L95,.L105,.L106
	.byte	8
	.word	.L97,.L98
	.byte	8
	.word	.L99,.L100
	.byte	0,7
	.word	.L107,.L106,.L108
	.byte	8
	.word	.L109,.L110
	.byte	8
	.word	.L111,.L112
	.byte	8
	.word	.L113,.L114
	.byte	10
	.word	.L115,.L106,.L108
	.byte	7
	.word	.L116,.L117,.L108
	.byte	8
	.word	.L118,.L119
	.byte	11
	.word	.L120,.L117,.L108
	.byte	0,0,0,7
	.word	.L121,.L108,.L7
	.byte	8
	.word	.L122,.L123
	.byte	11
	.word	.L124,.L108,.L7
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_abbrev'
.L50:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_line'
.L51:
	.word	.L180-.L179
.L179:
	.half	3
	.word	.L182-.L181
.L181:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Std\\IfxDma.h',0
	.byte	0,0,0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Src\\Std\\IfxSrc.h',0
	.byte	0,0,0,0
.L182:
	.byte	5,6,7,0,5,2
	.word	.L16
	.byte	3,239,0,1,5,26,9
	.half	.L147-.L16
	.byte	3,2,1,5,6,9
	.half	.L183-.L147
	.byte	3,126,1,5,34,9
	.half	.L148-.L183
	.byte	3,2,1,5,24,9
	.half	.L149-.L148
	.byte	3,2,1,5,32,9
	.half	.L184-.L149
	.byte	3,1,1,5,24,9
	.half	.L185-.L184
	.byte	1,5,41,9
	.half	.L186-.L185
	.byte	3,1,1,5,34,9
	.half	.L187-.L186
	.byte	1,5,24,9
	.half	.L146-.L187
	.byte	1,5,58,9
	.half	.L188-.L146
	.byte	3,2,1,5,19,9
	.half	.L90-.L188
	.byte	3,6,1,5,15,9
	.half	.L189-.L90
	.byte	3,126,1,5,9,9
	.half	.L150-.L189
	.byte	3,2,1,5,23,7,9
	.half	.L190-.L150
	.byte	3,2,1,5,26,1,5,23,9
	.half	.L5-.L190
	.byte	3,4,1,5,25,9
	.half	.L6-.L5
	.byte	3,3,1,5,17,9
	.half	.L191-.L6
	.byte	1,5,40,9
	.half	.L192-.L191
	.byte	1,5,15,9
	.half	.L91-.L192
	.byte	3,3,1,5,5,9
	.half	.L151-.L91
	.byte	1,4,2,5,34,7,9
	.half	.L94-.L151
	.byte	3,210,9,1,4,1,5,80,9
	.half	.L96-.L94
	.byte	3,176,118,1,4,2,5,34,9
	.half	.L103-.L96
	.byte	3,208,9,1,4,1,5,32,9
	.half	.L104-.L103
	.byte	3,177,118,1,4,2,5,37,9
	.half	.L105-.L104
	.byte	3,207,9,1,4,3,5,17,9
	.half	.L106-.L105
	.byte	3,164,119,1,5,11,9
	.half	.L193-.L106
	.byte	3,1,1,5,17,9
	.half	.L194-.L193
	.byte	1,5,11,9
	.half	.L117-.L194
	.byte	3,103,1,5,17,9
	.half	.L195-.L117
	.byte	1,5,11,9
	.half	.L108-.L195
	.byte	3,18,1,5,16,9
	.half	.L196-.L108
	.byte	1,4,1,5,1,9
	.half	.L7-.L196
	.byte	3,150,127,1,7,9
	.half	.L53-.L7
	.byte	0,1,1
.L180:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_ranges'
.L52:
	.word	-1,.L16,0,.L53-.L16,0,0
.L102:
	.word	-1,.L16,.L94-.L16,.L96-.L16,.L103-.L16,.L104-.L16,.L105-.L16,.L106-.L16,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_info'
.L54:
	.word	290
	.half	3
	.word	.L55
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L57,.L56
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initChannelConfig',0,1,147,1,6,1,1,1
	.word	.L18,.L125,.L17
	.byte	4
	.byte	'config',0,1,147,1,61
	.word	.L126,.L127
	.byte	4
	.byte	'dma',0,1,147,1,81
	.word	.L70,.L128
	.byte	5
	.word	.L18,.L125
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_abbrev'
.L55:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_line'
.L56:
	.word	.L198-.L197
.L197:
	.half	3
	.word	.L200-.L199
.L199:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L200:
	.byte	5,52,7,0,5,2
	.word	.L18
	.byte	3,148,1,1,5,13,9
	.half	.L201-.L18
	.byte	3,38,1,5,20,9
	.half	.L153-.L201
	.byte	3,3,1,5,1,9
	.half	.L154-.L153
	.byte	3,1,1,7,9
	.half	.L58-.L154
	.byte	0,1,1
.L198:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_ranges'
.L57:
	.word	-1,.L18,0,.L58-.L18,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_info'
.L59:
	.word	301
	.half	3
	.word	.L60
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L62,.L61
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_initLinkedListEntry',0,1,194,1,6,1,1,1
	.word	.L20,.L129,.L19
	.byte	4
	.byte	'ptrToAddress',0,1,194,1,43
	.word	.L130,.L131
	.byte	4
	.byte	'config',0,1,194,1,89
	.word	.L87,.L132
	.byte	5
	.word	.L20,.L129
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_abbrev'
.L60:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_line'
.L61:
	.word	.L203-.L202
.L202:
	.half	3
	.word	.L205-.L204
.L204:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L205:
	.byte	5,68,7,0,5,2
	.word	.L20
	.byte	3,195,1,1,5,1,7,9
	.half	.L63-.L20
	.byte	3,1,0,1,1
.L203:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_ranges'
.L62:
	.word	-1,.L20,0,.L63-.L20,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_info'
.L64:
	.word	354
	.half	3
	.word	.L65
	.byte	4,1
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\00.Tasking_workspace\\DVRS_INTEL\\RGB_IR_INTEL_REV05\\Debug\\',0,12,1
	.word	.L67,.L66
	.byte	2
	.word	.L25
	.byte	3
	.byte	'IfxDma_Dma_configureTransactionSet',0,1,46,13,1,1
	.word	.L10,.L133,.L9
	.byte	4
	.byte	'channel',0,1,46,60
	.word	.L134,.L135
	.byte	4
	.byte	'config',0,1,46,101
	.word	.L87,.L136
	.byte	5
	.word	.L10,.L133
	.byte	5
	.word	.L10,.L137
	.byte	6
	.byte	'chcfgr',0,1,49,27
	.word	.L138,.L139
	.byte	0,5
	.word	.L137,.L140
	.byte	6
	.byte	'adicr',0,1,63,26
	.word	.L141,.L142
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_abbrev'
.L65:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_line'
.L66:
	.word	.L207-.L206
.L206:
	.half	3
	.word	.L209-.L208
.L208:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\SoftwarePlatform\\illd_tc23x\\src\\ifx\\TC23x\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L209:
	.byte	5,27,7,0,5,2
	.word	.L10
	.byte	3,49,1,5,35,3,1,1,5,27,9
	.half	.L143-.L10
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L210-.L143
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L211-.L210
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L212-.L211
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L213-.L212
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L214-.L213
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L215-.L214
	.byte	1,3,2,1,5,23,9
	.half	.L137-.L215
	.byte	3,5,1,5,31,9
	.half	.L144-.L137
	.byte	3,1,1,5,76,9
	.half	.L216-.L144
	.byte	3,12,1,5,23,9
	.half	.L217-.L216
	.byte	3,116,1,5,31,3,1,1,5,70,9
	.half	.L218-.L217
	.byte	3,11,1,5,23,9
	.half	.L219-.L218
	.byte	3,117,1,5,31,3,1,1,5,23,9
	.half	.L220-.L219
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L221-.L220
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L222-.L221
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L223-.L222
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L224-.L223
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L225-.L224
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L226-.L225
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L227-.L226
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L228-.L227
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L229-.L228
	.byte	1,5,32,3,1,1,5,26,9
	.half	.L230-.L229
	.byte	1,5,67,9
	.half	.L231-.L230
	.byte	1,5,23,9
	.half	.L232-.L231
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L233-.L232
	.byte	1,5,31,3,1,1,5,23,9
	.half	.L234-.L233
	.byte	1,5,26,3,3,1,5,31,9
	.half	.L140-.L234
	.byte	3,3,1,5,23,9
	.half	.L145-.L140
	.byte	1,5,31,9
	.half	.L235-.L145
	.byte	3,1,1,5,23,9
	.half	.L236-.L235
	.byte	1,5,31,9
	.half	.L237-.L236
	.byte	3,1,1,5,23,9
	.half	.L238-.L237
	.byte	1,5,31,9
	.half	.L239-.L238
	.byte	3,1,1,5,23,9
	.half	.L240-.L239
	.byte	1,5,16,9
	.half	.L241-.L240
	.byte	3,3,1,5,9,9
	.half	.L242-.L241
	.byte	1,5,32,7,9
	.half	.L243-.L242
	.byte	3,1,1,7,9
	.half	.L244-.L243
	.byte	3,1,1,5,34,7,9
	.half	.L245-.L244
	.byte	3,2,1,5,26,9
	.half	.L246-.L245
	.byte	1,5,1,9
	.half	.L2-.L246
	.byte	3,2,1,7,9
	.half	.L68-.L2
	.byte	0,1,1
.L207:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_ranges'
.L67:
	.word	-1,.L10,0,.L68-.L10,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_loc'
.L9:
	.word	-1,.L10,0,.L133-.L10
	.half	2
	.byte	138,0
	.word	0,0
.L142:
	.word	-1,.L10,.L144-.L10,.L145-.L10
	.half	1
	.byte	95
	.word	0,0
.L135:
	.word	-1,.L10,0,.L133-.L10
	.half	1
	.byte	100
	.word	0,0
.L139:
	.word	-1,.L10,.L143-.L10,.L144-.L10
	.half	1
	.byte	95
	.word	0,0
.L136:
	.word	-1,.L10,0,.L133-.L10
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_loc'
.L11:
	.word	-1,.L12,0,.L69-.L12
	.half	2
	.byte	138,0
	.word	0,0
.L73:
	.word	-1,.L12,0,.L69-.L12
	.half	1
	.byte	101
	.word	0,0
.L71:
	.word	-1,.L12,0,.L69-.L12
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_loc'
.L13:
	.word	-1,.L14,0,.L74-.L14
	.half	2
	.byte	138,0
	.word	0,0
.L75:
	.word	-1,.L14,0,.L74-.L14
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_loc'
.L15:
	.word	-1,.L16,0,.L84-.L16
	.half	2
	.byte	138,0
	.word	0,0
.L86:
	.word	-1,.L16,0,.L146-.L16
	.half	1
	.byte	100
	.word	.L148-.L16,.L104-.L16
	.half	1
	.byte	111
	.word	0,0
.L100:
	.word	0,0
.L88:
	.word	-1,.L16,0,.L90-.L16
	.half	1
	.byte	101
	.word	.L147-.L16,.L84-.L16
	.half	1
	.byte	109
	.word	0,0
.L89:
	.word	-1,.L16,.L149-.L16,.L84-.L16
	.half	1
	.byte	108
	.word	0,0
.L98:
	.word	0,0
.L114:
	.word	0,0
.L119:
	.word	0,0
.L123:
	.word	0,0
.L110:
	.word	0,0
.L93:
	.word	-1,.L16,.L150-.L16,.L151-.L16
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L112:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_loc'
.L17:
	.word	-1,.L18,0,.L125-.L18
	.half	2
	.byte	138,0
	.word	0,0
.L127:
	.word	-1,.L18,0,.L8-.L18
	.half	1
	.byte	100
	.word	.L152-.L18,.L125-.L18
	.half	1
	.byte	98
	.word	.L153-.L18,.L154-.L18
	.half	1
	.byte	100
	.word	0,0
.L128:
	.word	-1,.L18,0,.L125-.L18
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_loc'
.L19:
	.word	-1,.L20,0,.L129-.L20
	.half	2
	.byte	138,0
	.word	0,0
.L132:
	.word	-1,.L20,0,.L129-.L20
	.half	1
	.byte	101
	.word	0,0
.L131:
	.word	-1,.L20,0,.L129-.L20
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_loc'
.L21:
	.word	-1,.L22,0,.L76-.L22
	.half	2
	.byte	138,0
	.word	0,0
.L79:
	.word	-1,.L22,0,.L76-.L22
	.half	1
	.byte	101
	.word	0,0
.L77:
	.word	-1,.L22,0,.L76-.L22
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_loc'
.L23:
	.word	-1,.L24,0,.L80-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L82:
	.word	-1,.L24,0,.L80-.L24
	.half	1
	.byte	100
	.word	0,0
.L83:
	.word	-1,.L24,0,.L80-.L24
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L247:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_frame'
	.word	20
	.word	.L247,.L10,.L133-.L10
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_frame'
	.word	20
	.word	.L247,.L12,.L69-.L12
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_deInitModule')
	.sect	'.debug_frame'
	.word	24
	.word	.L247,.L14,.L74-.L14
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_frame'
	.word	12
	.word	.L247,.L16,.L84-.L16
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_frame'
	.word	16
	.word	.L247,.L18,.L125-.L18
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_frame'
	.word	12
	.word	.L247,.L20,.L129-.L20
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_frame'
	.word	20
	.word	.L247,.L22,.L76-.L22
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L247,.L24,.L80-.L24
	.byte	8,18,8,19,8,22,8,23


	; Module end
